syntax = "proto3";

package cloud.planton.apis.connect.v1.kubernetesdockercredential.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";
import "cloud/planton/apis/connect/v1/kubernetesdockercredential/enums/dockerrepoprovider/docker_repo_provider.proto";

//kubernetes-docker-credential
message KubernetesDockerCredential {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = kubernetes_docker_credential;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = organization;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.org_id";

  //api-version
  string api_version = 1 [
    (buf.validate.field).string.const = 'connect.planton.cloud/v1'
  ];

  //resource-kind
  string kind = 2;

  // metadata for the resource
  //id format "<id-prefix>-<org-id>-<normalized-resource-name>"
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.name.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name Must start with a lowercase letter",
      // https://regex101.com/r/qpK7XF/1
      expression: "this.name.matches('^[a-z].*$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name Must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.name.matches('[^-]$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 30 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 30"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  KubernetesDockerCredentialSpec spec = 4;

  //status
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycleAndAuditStatus status = 5;
}

//kubernetes-docker-credential spec
message KubernetesDockerCredentialSpec {
  // The ID of the Google Cloud Organization, required and immutable. For more information,
  // visit: https://cloud.google.com/resource-manager/docs/creating-managing-organization
  string org_id = 1 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true,
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).cel = {
      id: "spec.gcp.org_id",
      message: "Only numbers (0-9) are allowed",
      expression: "this.matches('^[0-9]+$')"
    }
  ];

  //docker repo provider
  cloud.planton.apis.connect.v1.kubernetesdockercredential.enums.dockerrepoprovider.DockerRepoProvider docker_repo_provider = 2;

  //gcp-artifact-registry-credential spec
  KubernetesDockerCredentialGcpArtifactRegistryCredentialSpec gcp_artifact_registry_credential_spec = 3;
}

//kubernetes-docker-credential spec for docker-repo provided by gcp-artifact-registry
message KubernetesDockerCredentialGcpArtifactRegistryCredentialSpec {
  //id of the gcp project in which the docker-repo is created.
  string gcp_project_id = 1;
  //gcp region in which the docker-repo is created.
  //this is required for constructing the registry hostname.
  string gcp_region = 2;
  //name of the docker-repository on gcp artifact-registry.
  string docker_repo_name = 3;
  //base64 encoded google service account key that has required permissions for downloading docker images from the repo.
  string gcp_service_account_key_base64 = 4;
}
