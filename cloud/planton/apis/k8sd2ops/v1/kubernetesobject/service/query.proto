syntax = "proto3";

package cloud.planton.apis.k8sd2ops.v1.service;

import "cloud/planton/apis/connect/v1/kubernetesclustercredential/model/io.proto";
import "cloud/planton/apis/integration/v1/kubernetes/kubernetesobject/model/io.proto";
import "cloud/planton/apis/k8sd2ops/v1/kubernetesobject/model/io.proto";

// api-resource kubernetes-object query controller
// todo: add authorization for rpcs
service ApiResourceKubernetesObjectQueryController {
  //get detailed object of a kubernetes object
  rpc get(cloud.planton.apis.k8sd2ops.v1.kubernetesobject.model.ApiResourceKubernetesObject)
      returns (cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.model.KubernetesObjectDetail);

  //find list of namespaces on a kubernetes cluster
  rpc findNamespaces(cloud.planton.apis.connect.v1.kubernetesclustercredential.model.KubernetesClusterCredentialId)
      returns (cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.model.KubernetesNamespaceList);

  //stream all kubernetes objects from a kubernetes namespace in kube-cluster.
  //this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
  //because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
  rpc streamKubernetesObjects(cloud.planton.apis.k8sd2ops.v1.kubernetesobject.model.StreamKubernetesObjectsInNamespaceInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.model.KubernetesObjectList);

  //find list of pods in a kube-cluster on the specified filters
  rpc findPods(cloud.planton.apis.k8sd2ops.v1.kubernetesobject.model.FindKubernetesPodsInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.model.KubernetesPodList);

  //get details of a pod
  rpc getPod(cloud.planton.apis.k8sd2ops.v1.kubernetesobject.model.ApiResourceKubernetesObject)
      returns (cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.model.KubernetesPod);
}
