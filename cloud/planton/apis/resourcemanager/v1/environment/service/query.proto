syntax = "proto3";

package cloud.planton.apis.resourcemanager.v1.environment.service;

import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/state.proto";

//environment query controller
service EnvironmentQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = environment;

  //look up environment using environment id
  rpc get(cloud.planton.apis.resourcemanager.v1.environment.model.EnvId)
      returns (cloud.planton.apis.resourcemanager.v1.environment.model.Environment) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup environment";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }

  //look up environment using by organization-id and environment name
  rpc getByOrgIdAndEnvName(cloud.planton.apis.resourcemanager.v1.environment.model.GetByOrgIdAndEnvNameQueryInput)
      returns (cloud.planton.apis.resourcemanager.v1.environment.model.Environment) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    //field-path can not be added as the target resource-id is not present in the request input
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup environment";
  }
}
