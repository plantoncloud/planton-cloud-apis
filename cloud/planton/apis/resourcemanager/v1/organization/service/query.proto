syntax = "proto3";

package cloud.planton.apis.resourcemanager.v1.organization.service;

import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/commons/protobuf/custom.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/state.proto";

//organization query controller
service OrganizationQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = organization;

  // get a organization using organization id
  rpc get(cloud.planton.apis.resourcemanager.v1.organization.model.OrgId) returns (cloud.planton.apis.resourcemanager.v1.organization.model.Organization) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup organization";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }

  rpc findOrganizations(cloud.planton.apis.commons.protobuf.CustomEmpty) returns (cloud.planton.apis.resourcemanager.v1.organization.model.Organizations) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_skip_authorization) = true;
  }
}
