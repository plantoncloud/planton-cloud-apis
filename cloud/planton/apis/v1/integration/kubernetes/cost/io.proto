syntax = "proto3";

package cloud.planton.apis.v1.integration.kubernetes.cost;

import "cloud/planton/apis/v1/commons/resource/enums/enums.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/io.proto";
import "cloud/planton/apis/v1/integration/kubernetes/cost/state.proto";
import "google/protobuf/timestamp.proto";

//list of cost allocations
message CostAllocations {
  repeated CostAllocation entries = 1;
}

//response for paginated query to list cost allocations
message CostAllocationList {
  int32 total_pages = 1;
  repeated CostAllocation entries = 2;
}

//input for paginated rpc to get list of cost allocations for a resources based on provided filters.
message ListByCostAllocationFiltersInput {
  // page info
  cloud.planton.apis.v1.commons.pagination.PageInfo page_info = 1;
  // start timestamp
  google.protobuf.Timestamp start_ts = 2;
  // end timestamp
  google.protobuf.Timestamp end_ts = 3;
  // id of the product
  string product_id = 4;
  // id of the environment for which the cost allocations are filtered for the resource requested.
  string environment_id = 5;
  // type of the resource on planton cloud.
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 6;
  // id of the resource on planton cloud.
  // ex: ms-planton-pcs-product which is the id of the microservice.
  string resource_id = 7;
}

message GetCostAggregateInput {
  // type of the resource on planton cloud.
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 1;
  // id of the resource on planton cloud.
  // ex: ms-planton-pcs-product which is the id of the microservice.
  string resource_id = 2;
  //start timestamp
  google.protobuf.Timestamp start_ts = 3;
  //end timestamp
  google.protobuf.Timestamp end_ts = 4;
}

// wrapper for cost aggregate
message CostAggregate {
  double value = 1;
}
