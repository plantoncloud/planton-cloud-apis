syntax = "proto3";

package cloud.planton.apis.v1.iam.authz.role;

import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/enums/enums.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";

// iam-role
message IamRole {
  // resource api version
  string api_version = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  // resource kind
  string kind = 2[
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  // metadata for the resource
  // id:
  // identifier for iam role
  //
  // name:
  //
  // name of the iam role.
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3;

  // resource spec
  IamRoleSpec spec = 4;

  // resource status
  IamRoleStatus status = 5;
}

//specification for iam-role
message IamRoleSpec {
  // code of role that is used in FGA model
  string role_code = 1;
  // identifies the principal type that would be used to create relation with the resource
  // example values are user/company etc.
  string principal_type = 2;
  // type of the resource the role belongs to
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 3;
}

//status for iam-role
message IamRoleStatus {
  // lifecycle of the resource
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.v1.commons.audit.ResourceAudit audit = 98;

  // resource version-id
  string version_id = 97;
}

// wrapper for iam role id
message IamRoleId {
  string value = 1;
}

// wrapper for iam resource type input
message IamResourceTypeInput {
  string value = 1;
}

// response for rpc query to list all iam roles.
message IamRoles {
  // list of iam role entries
  repeated IamRole entries = 1;
}

// response for paginated rpc query to list iam roles.
message IamRoleList {
  // list of iam role entries
  repeated IamRole entries = 1;
  // total number of pages available to get roles data
  int32 total_pages = 2;
}

// input to pass resource type and principal type
message ResourceTypeAndPrincipalTypeInput {
  // type of the resource the role belongs to
  // examples: company/ cloud_account etc
  string resource_type = 1;
  // type of the principal that is allowed to link with the resource
  // examples: user/ company etc
  string principal_type = 2;
}

// response to rpc query to get list of all principal types
message PrincipalTypes {
  // list of principal types
  repeated string entries = 1;
}
