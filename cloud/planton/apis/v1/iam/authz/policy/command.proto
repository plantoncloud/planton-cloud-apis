syntax = "proto3";

package cloud.planton.apis.v1.iam.authz.policy;

import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/iam/authz/policy/io.proto";
import "cloud/planton/apis/v1/iam/authz/policy/state.proto";

// iam policy command controller
service IamPolicyCommandController {
  // add iam policies to a resource
  rpc add(AddIamPolicyInput) returns (IamPoliciesByPrincipal) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to add iam policy";
  }
  // remove list of iam policies of a principal and resource
  rpc removeMultiple(RemoveIamPoliciesInput) returns (IamPoliciesByPrincipal) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to remove iam policy";
  }

  rpc update(UpdateIamPolicyInput) returns (IamPolicyByPrincipal) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update iam policy";
  }

  // add iam policies to a resource
  rpc addCompany(AddIamPolicyInput) returns (IamPoliciesByPrincipal) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to add iam policy";
  }

  // remove list of iam policies of a principal and resource
  rpc removeCompanyMultiple(RemoveIamPoliciesInput) returns (IamPoliciesByPrincipal) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to remove iam policy";
  }

  // add an owner for a resource.
  // this rpc is used by planton-cloud platform services when ever a new api resource is newly created.
  // a tuple is created on fga and the same tuple along with any contextual
  // information is stored in planton-cloud's database.
  rpc addApiResourceOwner(FgaTuple) returns (FgaTuple) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to add resource owner";
  }
}

