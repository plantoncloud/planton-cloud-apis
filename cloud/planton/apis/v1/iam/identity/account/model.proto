syntax = "proto3";

package cloud.planton.apis.v1.iam.identity.account;

import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/identity/account/enums/accounttype/account_type.proto";

// identity-account for user-account or machine-account
message IdentityAccount {
  option (cloud.planton.apis.v1.commons.resource.options.resource_type) = identity_account;
  option (cloud.planton.apis.v1.commons.resource.options.is_runnable) = false;

  // resource api version
  string api_version = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  // resource kind
  string kind = 2[
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  // metadata for the resource
  // id:
  // (read-only) this is generated by idp provider.
  // for user accounts it can be in different formats.
  // * "auth0|<random-string>" when user signs up using email/password.
  // * "google-oauth|<random-string>" when user signs up using google.
  // for machine accounts it is the client_id of the oauth application created for the
  // m2m app on idp provider and is stored in the planton cloud database.
  //
  // name:
  //
  // name of the machine account.
  // name must match the regex '^[A-Za-z0-9-]{6,16}$'.
  // It represents a string of 6-16 alphanumeric characters or hyphens, with no spaces or other special characters.
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3;

  // resource spec
  IdentityAccountSpec spec = 4;

  // resource status
  IdentityAccountStatus status = 5;
}

// resource spec for identity-account
message IdentityAccountSpec {
  // this is only relevant in case of machine identity accounts.
  // machine accounts are associated to companies on creation.
  string company_id = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];
  // identity account type to identify with the account is for a machine or user
  cloud.planton.apis.v1.iam.identity.account.enums.accounttype.IdentityAccountType identity_account_type = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];
  // email of the identity account.
  // (ignored for create) this value is assigned by planton backend.
  // the format for email for machine account is <machine-account-name>@<owner-id>.iam.pmachineaccount.com
  // <machine-account-name> is entered by user at the time of creation of machine accounts
  // (update not allowed)
  // email in case user account is based on the email used to signup to the application.
  string email = 3 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];
  // first name of the identity account this is more relevant in case of user accounts.
  // first name might be blank in case of machine accounts
  string first_name = 4;
  // last name of the identity account this is more relevant in case of user accounts.
  // last name might be blank in case of machine accounts
  string last_name = 5;
  // (read-only) url of the identity account on idp.
  // this is constructed when a client requests for the account object.
  // the format of the url for machine accounts is https://manage.auth0.com/dashboard/us/<auth0-tenant>/applications/<client-id>/settings
  // ex: https://manage.auth0.com/dashboard/us/planton-pcs-dev/applications/pKfND0v14bJRhk8XOFGVFY15H9gNHIov/settings
  // the format of the url for user accounts is https://manage.auth0.com/dashboard/us/<auth0-tenant>/users/<client-id>/settings
  // ex: https://manage.auth0.com/dashboard/us/planton-pcs-dev/users/pKfND0v14bJRhk8XOFGVFY15H9gNHIov/settings
  string idp_url = 6 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];
  //url of the profile picture for the user on auth0
  string picture_url = 7 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];
}

// resource status for identity-account
message IdentityAccountStatus {
  // lifecycle of the resource
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.v1.commons.audit.ResourceAudit audit = 98;

  // resource version-id
  string version_id = 97;
}

// wrapper to get list of identity accounts
message IdentityAccounts {
  repeated IdentityAccount entries = 1;
}

// wrapper for user identity account id.
message IdentityAccountId {
  string value = 1;
}

// wrapper for email of the identity account.
message IdentityAccountEmail {
  string value = 1;
}

// input for paginated queries that require identity account id as input.
message ListWithIdentityAccountIdReq {
  // identity account id
  string identity_account_id = 1;
  cloud.planton.apis.v1.commons.pagination.PageInfo page = 2;
}

// response for paginated rpc query to list identity accounts.
message IdentityAccountsList {
  repeated IdentityAccount entries = 1;
  int32 total_pages = 2;
}

// wrapper for client_secret of the machine account
message MachineAccountClientSecret {
  string value = 1;
}

// wrapper for machine account company id.
message MachineAccountCompanyId {
  string value = 1;
}

// wrapper for identity account company id.
message ListWithIdentityCompanyId {
  string company_id = 1;
  cloud.planton.apis.v1.commons.pagination.PageInfo page = 2;
}

message GetByCompanyByNameQueryInput {
  string company_id = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];
  string name = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];
}

// https://auth0.com/docs/customize/log-streams/custom-log-streams
message Auth0Webhook {
  string date = 1;
  string type = 2;
  string description = 3;
  string client_id = 4;
  string client_name = 5;
  string ip = 6;
  string user_agent = 7;
  string user_id = 8;
}
