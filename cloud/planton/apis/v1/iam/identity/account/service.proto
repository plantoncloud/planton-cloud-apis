syntax = "proto3";

package cloud.planton.apis.v1.iam.identity.account;

import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/iam/identity/account/model.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// machine-account command controller
service MachineAccountCommandController {
  // create new machine account
  rpc create(IdentityAccount) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create machine account";
  }
  // update an existing machine account
  rpc update(IdentityAccount) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update machine account";
  }
  // delete an existing machine account
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete machine account";
  }
  // restore an existing machine account
  rpc restore(IdentityAccount) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore machine account";
  }
}

// machine-account query controller
service MachineAccountQueryController {
  // retrieve paginated list of all machine accounts on planton cloud. this is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (IdentityAccountsList);

  // lookup machine account by identity account id.
  rpc getById(IdentityAccountId) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get machine account";
  }

  // retrieve paginated list of all machine accounts on planton cloud. this is intended for use on portal.
  rpc findByCompanyId(MachineAccountCompanyId) returns (IdentityAccounts) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get machine account";
  }

  // lookup machine account by identity account email.
  rpc getByEmail(IdentityAccountEmail) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_get;
    //field-path can not be added as authorization is performed on id
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get machine account";
  }

  // lookup machine-account by company and name.
  rpc getByCompanyByName(GetByCompanyByNameQueryInput) returns (IdentityAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_get;
    //note: can not add field-path as the permission is based on the email of the identity_account in database matching provided input.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to lookup machine account";
  }

  // lookup the client secret for the machine account.
  // since client_secret for machine account is not stored in planton database, the client secret is
  // retrieved from the idp account and is passed on to the client as response.
  rpc getClientSecretByMachineAccountEmail(IdentityAccountEmail) returns (MachineAccountClientSecret) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_update;
    //field-path can-not be added as the permission should be evaluated on the id of the machine-account which
    // needs to be looked up using the provided machine-account email.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get machine account client secret";
  }
}

// user-account query controller
service UserAccountQueryController {
  // retrieve paginated list of all user accounts on planton cloud. this is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (IdentityAccountsList);

  //todo: add authorization
  // lookup user-account by identity account id.
  rpc getById(IdentityAccountId) returns (IdentityAccount);

  //todo: add authorization
  // lookup user-account by identity account email.
  rpc getByEmail(IdentityAccountEmail) returns (IdentityAccount);

 // this is to check if a user is authorized to login to back office or not
 // like other queries this rpc does not return any data
 // instead it tries to check the authorization based on config given below
 // if rpc returns authorization error then the user is not supposed to login to backoffice
 // otherwise if rpc returns boolean response then the user is allowed to login to backoffice.
  rpc isBackofficeUser(google.protobuf.Empty) returns (google.protobuf.BoolValue) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = platform;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = login_to_back_office;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to login to back office";
  }

  // retrieve paginated list of all associate accounts of a company. this is intended for use on portal.
  rpc listAssociatesByCompanyId(ListWithIdentityCompanyId) returns (IdentityAccountsList) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = list_associates;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "company_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get associates";
  }
}
