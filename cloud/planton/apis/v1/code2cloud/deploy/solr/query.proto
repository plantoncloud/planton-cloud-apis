syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.solr;

import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/solr/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/solr/model/state.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model/io.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/io.proto";

//solr-cloud query controller
service SolrCloudQueryController {
  //list all solr-clouds on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.rpc.pagination.model.PageInfo) returns (SolrCloudList);

  //look up solr-cloud using solr-cloud id
  rpc getById(SolrCloudId) returns (SolrCloud) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = solr_cloud;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = solr_cloud_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view solr-cloud";
  }

  //find solr-clouds by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId) returns (SolrClouds);

  //find solr-clouds by environment
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns (SolrClouds);

  //find solr-clouds by kubernetes cloud
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (SolrClouds);

  //look up solr-cloud sasl password
  //password is retrieved from the kubernetes cloud.
  rpc getPassword(SolrCloudId) returns (SolrCloudPassword) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = solr_cloud;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view solr-cloud password";
  }

  //lookup pods of a solr-cloud deployed to a environment
  rpc findPods(SolrCloudId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = solr_cloud;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = solr_cloud_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view solr-cloud pods";
  }
}
