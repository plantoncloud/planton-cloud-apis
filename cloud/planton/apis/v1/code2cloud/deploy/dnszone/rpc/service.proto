syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc;

import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/resourcemanager/company/rpc/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/dnszone/rpc/model.proto";

import "google/protobuf/wrappers.proto";

import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";

//dns-zone command controller
service DnsZoneCommandController {
  // add a new dns-zone to a company
  rpc create(DnsZone) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create dnszone-zone";
  }
  // update an existing dns-zone of a company
  // only dns-zone records can be updated as part of this operations
  rpc update(DnsZone) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update dnszone-zone";
  }
  // delete an dns-zone of a company
  rpc delete(DnsZoneId) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete dnszone-zone";
  }
  // restore a delete dns-zone
  rpc restore(DnsZone) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore dnszone-zone";
  }
}

//dns-zone query controller
service DnsZoneQueryController {
  //todo: add authorization
  // find dns-zones by company id
  //the response should only include dns-zones in a company that the authenticated user account has viewer access to.
  rpc findByCompanyId(cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyId) returns (DnsZones);
  //todo: add authorization
  // get details of a dns-zone id
  rpc getById(DnsZoneId) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get dnszone-zone";
  }
  //todo: add authorization
  // get details of the exact or a parent of the provided dns-zone name
  rpc getExactOrParentDnsZoneByDomainName(DnsDomainName) returns (DnsZone);
  //todo: add authorization
  // list all dns-zones for the requested page. This is intended to be used on back-office portal.
  rpc list(cloud.planton.apis.v1.commons.rpc.pagination.PageInfo) returns (DnsZoneList);
  //todo: add authorization
  // checks if the nameservers for the dns-zone are resolving to the nameservers of the managed zone.
  rpc isNameserversDelegated(DnsZoneId) returns (google.protobuf.BoolValue);
}

//dns-record command controller
service DnsRecordCommandController {
  // add a new dns-zone to a company
  rpc add(AddOrUpdateDnsRecordCommandInput) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "dns_zone_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create dnszone record";
  }
  // update an existing dns-zone of a company
  // only dns-zone records can be updated as part of this operations
  rpc update(AddOrUpdateDnsRecordCommandInput) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "dns_zone_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update dnszone record";
  }
  // delete an dns-zone of a company
  rpc delete(DeleteDnsRecordCommandInput) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "dns_zone_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete dnszone record";
  }
}

//dns-zone stack controller
service DnsZoneStackController {
  //preview dns-zone stack
  rpc preview(DnsZone) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview dnszone-zone stack";
  }
  //apply dns-zone stack
  rpc apply(DnsZoneId) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to apply dnszone-zone stack";
  }
}
