syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.dnszone;

import "cloud/planton/apis/v1/code2cloud/deploy/dnszone/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/dnszone/model/state.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/resourcemanager/company/model/io.proto";
import "google/protobuf/wrappers.proto";

//dns-zone query controller
service DnsZoneQueryController {
  //todo: add authorization
  // find dns-zones by company id
  //the response should only include dns-zones in a company that the authenticated user account has viewer access to.
  rpc findByCompanyId(cloud.planton.apis.v1.resourcemanager.company.model.CompanyId) returns (DnsZones);
  //todo: add authorization
  // get details of a dns-zone id
  rpc getById(DnsZoneId) returns (DnsZone) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = dns_zone;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = dns_zone_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get dns-zone";
  }
  //todo: add authorization
  // get details of the exact or a parent of the provided dns-zone name
  rpc getExactOrParentDnsZoneByDomainName(DnsDomainName) returns (DnsZone);
  //todo: add authorization
  // list all dns-zones for the requested page. This is intended to be used on back-office portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (DnsZoneList);
  //todo: add authorization
  // checks if the nameservers for the dns-zone are resolving to the nameservers of the managed zone.
  rpc isNameserversDelegated(DnsZoneId) returns (google.protobuf.BoolValue);
}
