syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.customendpoint;

import "buf/validate/validate.proto";
import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/resource/metadata/options/resource_metadata_options.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";
import "cloud/planton/apis/v1/stack/job/model.proto";

//custom-endpoint
message CustomEndpoint {
  option (cloud.planton.apis.v1.commons.resource.options.resource_type) = custom_endpoint;
  option (cloud.planton.apis.v1.commons.resource.options.is_runnable) = false;
  option (cloud.planton.apis.v1.commons.resource.options.owner).type = product;
  option (cloud.planton.apis.v1.commons.resource.options.owner).id_field_path = "spec.product_id";

  option (cloud.planton.apis.v1.commons.resource.metadata.options.is_id_required) = false;
  option (cloud.planton.apis.v1.commons.resource.metadata.options.id_prefix) = "cep";
  //id format "cep-<product-id>-<normalized-endpoint-name>"
  option (cloud.planton.apis.v1.commons.resource.metadata.options.is_id_computed) = true;

  //resource api-version
  string api_version = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  //resource kind
  string kind = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  //resource metadata
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3 [
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name should be any valid DNS Domain Name",
      // https://regex101.com/library/SEg6KL
      expression: "this.name.matches('^(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    }
  ];

  //spec
  CustomEndpointSpec spec = 4;

  //status
  CustomEndpointStatus status = 5;
}

//custom-endpoint spec
message CustomEndpointSpec {
  //the company to which the custom-endpoint belongs to.
  //value is computed from the product.
  string company_id = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //the product to which the custom-endpoint to be added.
  string product_id = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  //the kube-cluster in which the custom-endpoint resources are created in.
  //value is computed from the backend-environment.
  string kube_cluster_id = 3 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //custom-endpoint to which the requests to the endpoint domain are to be routed to.
  string backend_environment_id = 4 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  //(optional for create) flag to toggle tls for custom-endpoint.
  //defaults to "false".
  //(important note) certificates are not created for endpoints that do not need tls.
  //(important note) endpoint domains with out tls enabled are not eligible to be used for
  //creating endpoints for postgres-clusters or kafka-clusters.
  bool is_tls_enabled = 5;

  //flag to control virtual service configuration compatible for grpc-web clients.
  //grpc-web clients would rely on extra headers added by envoy proxy.
  bool is_grpc_web_compatible = 6;

  //id of the project on google cloud containing the dns zone for the endpoint-domain.
  //this value is looked up from the dns-domains in the company dns data.
  //this value is required for configuring the cert-issuer to perform dns validations.
  string dns_zone_gcp_project_id = 7 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //external ingress ip.
  //ingress ip address configured for the ingress-endpoint-domain.
  //this value is computed from the kube-cluster.
  string external_ingress_ip = 8 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //email of the service account created for cert-manager component on the kube-cluster in which the
  //custom-endpoint that the custom-endpoint belongs to.
  //this value is used for ensuring that the service account has required permissions to insert dns records in
  //the dns zone to be able to complete dns01 challenges.
  //this attribute is only populated if the custom-endpoint is hosted in a gcp kube-cluster.
  //this value is computed from the kube-cluster.
  string cert_manager_gsa_email = 9 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //routes to configure backends for url paths of the domain.
  //routes allow configuring requests to be routed to different microservices based on the url path.
  //ex: if the endpoint domain name is console.example.com, then console.example.com/public/api/* can be
  //to be sent to public-api microservice and console.example.com/private/api/* can be configured to route to
  //route to private-api microservice.
  repeated CustomEndpointRoute routes = 10;
}

//custom-endpoint status
message CustomEndpointStatus {
  // resource lifecycle
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.v1.commons.audit.ResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  //may be add the name of the certificate that can be used for checking the status?
}

//custom-endpoint route
message CustomEndpointRoute {
  //resource audit info
  cloud.planton.apis.v1.commons.audit.AuditInfo audit = 99;

  //url path for the custom-endpoint route.
  //(important) url path prefix combined with custom_endpoint_id combined form the composite key.
  //(note) if endpoint domain name is console.example.com, and if the url_path_prefix is /api, then
  //all requests that match console.example.com/api/* are forwarded to the backend microservice configured in
  //this route.
  string url_path_prefix = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  //id of the backend microservice-instance to configure the forwarding rule.
  //ex: msi-planton-pcs-prod-company-main
  string backend_microservice_instance_id = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  //service port to which the requests matching the url
  //defaults to 80 if the input contains 0.
  int32 backend_microservice_service_port = 3 [
    (cloud.planton.apis.v1.commons.resource.field.options.int32_default) = 80
  ];

  //backend kubernetes endpoint to configure the forwarding rule.
  //this value is computed from the status of the configured microservice-instance
  string backend_kubernetes_endpoint = 4 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];
}

//wrapper for custom-endpoint Domain id
message CustomEndpointId {
  string value = 1;
}

//list of custom-endpoints
message CustomEndpoints {
  repeated CustomEndpoint entries = 1;
}

//response for paginated query to list custom-endpoints
message CustomEndpointList {
  int32 total_pages = 1;
  repeated CustomEndpoint entries = 2;
}

//AddOrUpdateCustomEndpointRouteCommandInput is used to encapsulate the details required
//for adding a new route to a specific custom-endpoint, or updating
//an existing one. This message is typically used to transmit data between the client and
//server during an add or update operation concerning a specific route
//associated with a particular custom-endpoint.
message AddOrUpdateCustomEndpointRouteCommandInput {
  //The unique identifier for the custom-endpoint to which the route
  // needs to be added or updated. This field must be populated with a valid
  //custom-endpoint ID, which can be obtained from the custom-endpoint entity itself.
  //The server uses this ID to identify the correct custom-endpoint where the
  //route needs to be added or updated.
  string custom_endpoint_id = 1;

  //The route that needs to be added or updated within the product
  //environment. This field should be populated with a valid CustomEndpointRoute object,
  //which encapsulates the details of the route. If an route
  //with the same url path prefix already exists in the custom-endpoint, the value will be updated.
  //Otherwise, a new route will be created with the provided details.
  CustomEndpointRoute route = 2;
}

//DeleteOrRestoreCustomEndpointRouteCommandInput is used to encapsulate the details required for
//deleting or restore a route of a specific custom-endpoint.
//This message is typically used to transmit data between the client and the server
//during a delete or restore operation concerning a specific route associated
//with a particular custom-endpoint.
message DeleteOrRestoreCustomEndpointRouteCommandInput {
  //The unique identifier for the custom-endpoint from which the route
  // needs to be deleted. This field must be populated with a valid
  //custom-endpoint ID, which can be obtained from the custom-endpoint entity itself.
  //The server uses this ID to identify the correct custom-endpoint from which
  //the route needs to be deleted.
  string custom_endpoint_id = 1;

  //The url path prefix of the route that needs to be deleted
  //from the custom-endpoint. This field should be populated with a valid
  //url path prefix, which can be obtained from the route entity itself.
  //The server uses this url path prefix to identify the correct route that
  //needs to be deleted.
  string url_path_prefix = 2;
}

//ssl certificate status of custom-endpoint
message CustomEndpointCertStatus {
  //flag to indicate if the certificate has been issued.
  bool is_cert_issued = 1;
}

//dns resolution status of endpoint
message CustomEndpointDnsResolutionStatus {
  //flag to indicate if the dns is resolving to the correct ingress address(ip or cname).
  bool is_resolving_to_ingress_address = 1;
}
