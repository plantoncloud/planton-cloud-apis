syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.customendpoint;

import "cloud/planton/apis/v1/code2cloud/deploy/customendpoint/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/customendpoint/model/state.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/certificate.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/io.proto";

//custom-endpoint query controller
service CustomEndpointQueryController {
  //list all custom-endpoints on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (cloud.planton.apis.v1.code2cloud.deploy.model.CustomEndpointList);

  //look up custom-endpoint using custom-endpoint id
  rpc getById((cloud.planton.apis.v1.code2cloud.io.CustomEndpointId)) returns (cloud.planton.apis.v1.code2cloud.deploy.model.CustomEndpoint) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = custom_endpoint;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view custom-endpoint";
  }

  //find custom-endpoints by product id.
  //response contains only the endpoint domains that the authenticated user account id as viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId) returns (cloud.planton.apis.v1.code2cloud.deploy.model.CustomEndpoints);

  //check cert status for custom-endpoint
  rpc getCustomEndpointCertStatus((cloud.planton.apis.v1.code2cloud.io.CustomEndpointId)) returns (cloud.planton.apis.v1.code2cloud.deploy.model.CustomEndpointCertStatus) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = custom_endpoint;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to check custom-endpoint certificate status";
  }

  //check status of dns resolution for custom-endpoint.
  //confirms if the dns of the custom-endpoint domain is resolving to the correct address.
  rpc getCustomEndpointDsnResolutionStatus((cloud.planton.apis.v1.code2cloud.io.CustomEndpointId)) returns (cloud.planton.apis.v1.code2cloud.deploy.model.CustomEndpointDnsResolutionStatus) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = custom_endpoint;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to check custom-endpoint dnszone status";
  }

  //find certificates for custom-endpoint
  rpc findCustomEndpointCertificates((cloud.planton.apis.v1.code2cloud.io.CustomEndpointId)) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Certificates) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = custom_endpoint;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to look up custom-endpoint certificates";
  }
}
