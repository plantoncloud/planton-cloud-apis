syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.redis;

import "cloud/planton/apis/v1/code2cloud/deploy/redis/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/redis/state.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/stack/job/io.proto";

//redis-cluster command controller
service RedisClusterCommandController {
  //preview creating redis-cluster
  rpc previewCreate(RedisCluster) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create redis-cluster
  rpc create(RedisCluster) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  //preview updating an existing redis-cluster
  rpc previewUpdate(RedisCluster) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update an existing redis-cluster
  rpc update(RedisCluster) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  //preview deleting an existing redis-cluster
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete an existing redis-cluster
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restoring a previously deleted redis-cluster
  rpc previewRestore(RedisCluster) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a previously deleted redis-cluster
  rpc restore(RedisCluster) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for redis-cluster
  rpc createStackJob(cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for redis-cluster";
  }
  //restart a redis-cluster running in a environment.
  //redis-cluster is restarted by deleting running "redis" pods which will be automatically recreated by kubernetes
  rpc restart(RedisClusterId) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restart redis-cluster";
  }
  //pause a redis-cluster running in a environment.
  //redis-cluster is paused by scaling down number of replicas of
  //the kubernetes stateful sets to zero in the environment.
  rpc pause(cloud.planton.apis.v1.commons.resource.ApiResourcePauseCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = paused;
  }
  //unpause a previously paused redis-cluster running in a environment.
  //unpause is done by scaling the number of pods back to the number of
  //replicas configured for the redis-cluster.
  rpc unpause(cloud.planton.apis.v1.commons.resource.ApiResourceUnPauseCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = unpaused;
  }
  //preview refresh a redis-cluster that was previously created
  rpc previewRefresh(cloud.planton.apis.v1.commons.resource.ApiResourceRefreshCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview refresh redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //refresh a redis-cluster that was previously created
  rpc refresh(cloud.planton.apis.v1.commons.resource.ApiResourceRefreshCommandInput) returns (RedisCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = redis_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to refresh redis-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = refreshed;
  }
}
