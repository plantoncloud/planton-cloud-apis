syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.kubecluster;

import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model/state.proto";
import "cloud/planton/apis/v1/commons/resource/model/state.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/namespace.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/stack/job/model/io.proto";

// kube-cluster command controller
service KubeClusterCommandController {
  // preview create a kube-cluster.
  rpc previewCreate(KubeCluster) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  // create a kube-cluster.
  rpc create(KubeCluster) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  // preview updating an existing kube-cluster.
  rpc previewUpdate(KubeCluster) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  // update an existing kube-cluster.
  rpc update(KubeCluster) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  // preview deleting a kube-cluster.
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.model.ApiResourceRefreshCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  // delete a kube-cluster.
  rpc delete(cloud.planton.apis.v1.commons.resource.model.ApiResourceRefreshCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  // preview restoring a deleted kube-cluster.
  rpc previewRestore(KubeCluster) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  // restore a deleted kube-cluster.
  rpc restore(KubeCluster) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for kube-cluster
  rpc createStackJob(cloud.planton.apis.v1.stack.job.model.CreateStackJobCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for kube-cluster";
  }
  //pause a kube-cluster.
  //a kube-cluster is paused by setting the number of nodes in each node pool of the kube-cluster to zero.
  //microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
  //when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
  //when a kube-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
  // may continue to charge a modest operational fee for the cluster.
  rpc pause(cloud.planton.apis.v1.commons.resource.ApiResourcePauseCommandInput) returns(KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = paused;
  }
  //unpause a kube-cluster.
  //a kube-cluster is resumed by setting the number of nodes in each node pool of the kube-cluster to the
  // values configured for the kube-cluster.
  //when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
  rpc unpause(cloud.planton.apis.v1.commons.resource.ApiResourceUnPauseCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = unpaused;
  }

  // delete a namespace in kube-cluster kube-cluster
  rpc deleteNamespace(ByKubeClusterByNamespaceInput) returns (cloud.planton.apis.v1.integration.kubernetes.resource.WorkloadNamespace) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete namespace in kube-cluster";
  }
  // delete a pod in kube-cluster kube-cluster
  rpc deletePod(ByKubeClusterByNamespaceByPodInput) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pod) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete pod in kube-cluster";
  }
  //preview refresh a kube-cluster that was previously created
  rpc previewRefresh(cloud.planton.apis.v1.commons.resource.model.ApiResourceRefreshCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview refresh kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //refresh a kube-cluster that was previously created
  rpc refresh(cloud.planton.apis.v1.commons.resource.model.ApiResourceRefreshCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to refresh kube-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = refreshed;
  }
}

// gcp kube-cluster container node pool command controller
service KubeClusterNodePoolGcpCommandController {
  // add a node pool to a kube-cluster in a kube-cluster
  rpc add(AddOrUpdateKubeClusterNodePoolGcpCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to add node pool";
  }
  // update a node pool of a kube-cluster in a kube-cluster
  rpc update(AddOrUpdateKubeClusterNodePoolGcpCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update node pool";
  }
  // delete a node pool from a kube-cluster in a kube-cluster
  rpc delete(DeleteKubeClusterNodePoolGcpCommandInput) returns (KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete node pool";
  }
}
