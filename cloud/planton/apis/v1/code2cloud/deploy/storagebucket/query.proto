syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.storagebucket;

import "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/model/state.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model/io.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/io.proto";

//storage-bucket query controller
service StorageBucketQueryController {
  //list all storage-buckets on planton-cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns(StorageBucketList);

  //look up a storage-bucket using storage-bucket id
  rpc getById(StorageBucketId) returns(StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view storage-bucket";
  }

  //find storage-buckets by product id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId) returns(StorageBuckets);

  //find storage-buckets by environment id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns(StorageBuckets);
}
