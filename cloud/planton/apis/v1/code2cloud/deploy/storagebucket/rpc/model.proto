syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc;

import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/resource/metadata/options/resource_metadata_options.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";
import "cloud/planton/apis/v1/stack/rpc/model.proto";
import "cloud/planton/apis/v1/code2cloud/environment/rpc/model.proto";
import "cloud/planton/apis/v1/commons/resource/owner/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/rpc/enums/enums.proto";

//storage-bucket
message StorageBucket {
  option (cloud.planton.apis.v1.commons.resource.options.resource_type) = storage_bucket;
  option (cloud.planton.apis.v1.commons.resource.options.is_runnable) = false;
  option (cloud.planton.apis.v1.commons.resource.options.owner).type = environment;
  option (cloud.planton.apis.v1.commons.resource.options.owner).id_field_path = "spec.owner.environment_id";

  option (cloud.planton.apis.v1.commons.resource.metadata.options.is_id_required) = false;
  option (cloud.planton.apis.v1.commons.resource.metadata.options.id_prefix) = "bkt";
  //id format "bkt-<environment-id>-<normalized-storage-bucket-name>"
  option (cloud.planton.apis.v1.commons.resource.metadata.options.is_id_computed) = true;
  //https://regex101.com/r/d1Viju/1
  option (cloud.planton.apis.v1.commons.resource.metadata.options.name_regex) = "^[a-z0-9](?:[a-z0-9_-]*[a-z0-9])?$";
  //the max length is because S3, GCS limit bucket names require at least 3 characters
  option (cloud.planton.apis.v1.commons.resource.metadata.options.name_min_length) = 3;
  //the max length is because S3, GCS limit bucket names to 63 characters
  option (cloud.planton.apis.v1.commons.resource.metadata.options.name_max_length) = 63;
  option (cloud.planton.apis.v1.commons.resource.metadata.options.name_constraints_description) = "Name must be a Valid Bucket Name on AWS/GCP/AZURE/Others";

  //resource api-version
  string api_version = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  //resource kind
  string kind = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];

  //resource metadata
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3;

  //spec
  StorageBucketSpec spec = 4;

  //status
  StorageBucketStatus status = 5;
}

//storage-bucket spec
message StorageBucketSpec {
  //resource parent
  cloud.planton.apis.v1.commons.resource.owner.EnvironmentResourceOwner owner = 1;

  //(optional for create) flag to indicate if storage-bucket should have external(public) access.
  //defaults to "false"
  bool is_external = 2;

  //storage provider on which the storage-bucket is to be created.
  //the value is computed from environment.
  //the storage-bucket is created in the same cloud-provider in which the kube-cluster that
  //is configured for the environment.
  cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.enums.StorageBucketProvider storage_bucket_provider = 3 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //storage-bucket spec on gcp
  StorageBucketGcpSpec gcp = 4;
}

message StorageBucketStatus {
  // resource lifecycle
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // system audit info
  cloud.planton.apis.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job info
  cloud.planton.apis.v1.stack.rpc.ResourceStackJobInfo stack_job_info = 97;
}

//storage-bucket on gcp
message StorageBucketGcpSpec {
  //id of the gcp cloud account in which the storage-bucket is created.
  //this field is computed from the kube-cluster configured for the environment.
  string gcp_cloud_account_id = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //gcp project in which the storage-bucket is created.
  //this field is computed from the kube-cluster configured for the environment.
  //storage-bucket is created in the same gcp-project in which the container-cluster is created.
  string project_id = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  //gcp region in which the bucket is to be created.
  string region = 3 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];
}

//list of storage-buckets
message StorageBuckets {
  repeated StorageBucket entries = 1;
}

//wrapper for storage-bucket id
message StorageBucketId {
  string value = 1;
}

//response for paginated query to list storage-buckets
message StorageBucketList {
  int32 total_pages = 1;
  repeated StorageBucket entries = 2;
}
