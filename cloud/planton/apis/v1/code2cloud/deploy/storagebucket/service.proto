syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.storagebucket;

import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/model.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model.proto";
import "cloud/planton/apis/v1/stack/job/model.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";

//storage-bucket command controller
service StorageBucketCommandController {
  //preview create storage-bucket
  rpc previewCreate(StorageBucket) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create storage-bucket
  rpc create(StorageBucket) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  //preview update an existing storage-bucket
  rpc previewUpdate(StorageBucket) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update an existing storage-bucket
  rpc update(StorageBucket) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  //preview delete an existing storage-bucket
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete an existing storage-bucket
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restore a deleted storage-bucket
  rpc previewRestore(StorageBucket) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted storage-bucket
  rpc restore(StorageBucket) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore storage-bucket";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for storage-bucket
  rpc createStackJob(cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput) returns (StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for storage-bucket";
  }
}

//storage-bucket query controller
service StorageBucketQueryController {
  //list all storage-buckets on planton-cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns(StorageBucketList);

  //look up a storage-bucket using storage-bucket id
  rpc getById(StorageBucketId) returns(StorageBucket) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = storage_bucket;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = storage_bucket_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view storage-bucket";
  }

  //find storage-buckets by product id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns(StorageBuckets);

  //find storage-buckets by environment id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns(StorageBuckets);
}
