syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.cloudinfra.storagebucket.state;

import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";
import "cloud/planton/apis/v1/stack/state/model.proto";
import "cloud/planton/apis/v1/commons/resource/owner/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/state/enums/enums.proto";

//storage-bucket
message StorageBucketState {
  option (cloud.planton.apis.v1.commons.resource.options.resource_type) = storage_bucket;
  option (cloud.planton.apis.v1.commons.resource.options.is_runnable) = false;
  option (cloud.planton.apis.v1.commons.resource.options.owner).type = environment;
  option (cloud.planton.apis.v1.commons.resource.options.owner).id_field_path = "spec.owner.environment_id";

  //event-type
  cloud.planton.apis.v1.code2cloud.deploy.cloudinfra.storagebucket.state.enums.StorageBucketEventType event_type = 99;

  //resource api version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3;

  //spec
  StorageBucketSpecState spec = 4;

  //status
  StorageBucketStatusState status = 5;
}

//storage-bucket spec
message StorageBucketSpecState {
  //resource parent
  cloud.planton.apis.v1.commons.resource.owner.EnvironmentResourceOwner owner = 1;

  //(optional for create) flag to indicate if storage-bucket should have external(public) access.
  //defaults to "false"
  bool is_external = 2;

  //storage provider on which the storage-bucket is to be created.
  //the value is computed from environment.
  //the storage-bucket is created in the same cloud-provider in which the kube-cluster that
  //is configured for the environment.
  string storage_bucket_provider = 3;

  //storage-bucket spec on gcp
  StorageBucketGcpSpecState gcp = 4;
}

message StorageBucketStatusState {
  // resource lifecycle
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // system audit info
  cloud.planton.apis.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job info
  cloud.planton.apis.v1.stack.state.ResourceStackJobInfoState stack_job_info = 97;
}

//storage-bucket on gcp
message StorageBucketGcpSpecState {
  //id of the gcp cloud account in which the storage-bucket is created.
  //this field is computed from the kube-cluster configured for the environment.
  string gcp_cloud_account_id = 1;

  //gcp project in which the storage-bucket is created.
  //this field is computed from the kube-cluster configured for the environment.
  //storage-bucket is created in the same gcp-project in which the container-cluster is created.
  string project_id = 2;

  //gcp region in which the bucket is to be created.
  string region = 3;
}
