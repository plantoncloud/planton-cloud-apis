syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.microservice;

import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/microservice/model.proto";
import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/model.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model.proto";
import "cloud/planton/apis/v1/commons/grpc/stream/model.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model.proto";
import "cloud/planton/apis/v1/stack/job/model.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";

//microservice-instance command controller
service MicroserviceInstanceCommandController {
  //preview create microservice-instance
  rpc previewCreate(MicroserviceInstance) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create microservice-instance
  rpc create(MicroserviceInstance) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  //preview update microservice-instance
  rpc previewUpdate(MicroserviceInstance) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update microservice-instance
  rpc update(MicroserviceInstance) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  //preview delete microservice-instance
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete microservice-instance
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restoring a deleted microservice-instance
  rpc previewRestore(MicroserviceInstance) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted microservice-instance of a environment.
  rpc restore(MicroserviceInstance) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for microservice-instance
  rpc createStackJob(cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for microservice-instance";
  }
  //restart a microservice-instance running in a environment.
  //microservice-instance is restarted by deleting running pods which will be automatically recreated by kubernetes.
  rpc restart(MicroserviceInstanceId) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restart microservice-instance";
  }
  //pause a microservice-instance running in a environment.
  //microservice-instance is paused by scaling down number of replicas of
  //the kubernetes deployment/stateful sets to zero in the environment.
  rpc pause(cloud.planton.apis.v1.commons.resource.ApiResourcePauseCommandInput) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = paused;
  }
  //unpause a previously paused microservice-instance running in a environment.
  //unpause is done by scaling the number of pods back to the number of
  //replicas configured for the microservice-instance.
  rpc unpause(cloud.planton.apis.v1.commons.resource.ApiResourceUnPauseCommandInput) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = unpaused;
  }
}

//microservice-instance query controller
service MicroserviceInstanceQueryController {
  //list all microservice-instances on planton instance for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (MicroserviceInstanceList);

  //look up microservice-instance using microservice-instance id
  rpc getById(MicroserviceInstanceId) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view microservice-instance";
  }

  //find microservice-instances by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (MicroserviceInstances);

  //find microservice-instances by environment
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns (MicroserviceInstances);

  //find microservice-instances by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (MicroserviceInstances);

  //find microservice-instances in a environment for a code-project
  rpc findByEnvironmentIdByCodeProjectId(ByEnvironmentIdByCodeProjectIdInput) returns (MicroserviceInstances) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to for environment";
  }

  //lookup pods of a microservice-instance deployed to a environment
  rpc findPods(MicroserviceInstanceId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view microservice-instance pods";
  }

  //get a log stream for a running instance of a microservice-instance
  rpc getLogStream(GetMicroserviceInstanceLogStreamQueryInput) returns (stream cloud.planton.apis.v1.commons.grpc.stream.OutputLine) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "microservice_instance_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view microservice log";
  }

  //lookup a microservice-instance by code project id
  rpc getByCodeProjectId(cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectId) returns (MicroserviceInstance);

  //lookup all microservice-instances by code project url
  rpc findByCodeProjectUrl(cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectUrl) returns (MicroserviceInstances);

  rpc getEnvVarMap(MicroserviceInstance) returns (MicroserviceInstanceEnvVarMap) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    //note: this rpc may also require that the requester to have update access to the environment
    // if the provided microservice-instance contains references to environment secrets.
    // this is not enforced here, but is enforced in the request processing.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get environment variables of microservice-instance";
  }
}
