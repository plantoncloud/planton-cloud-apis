syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.microservice.service;

import "cloud/planton/apis/v1/code2cloud/deploy/microservice/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/microservice/model/state.proto";
import "cloud/planton/apis/v1/commons/resource/model/io.proto";
import "cloud/planton/apis/v1/commons/resource/model/state.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/stack/job/model/io.proto";

//microservice-instance command controller
service MicroserviceInstanceCommandController {
  //preview create microservice-instance
  rpc previewCreate(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create microservice-instance
  rpc create(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  //preview update microservice-instance
  rpc previewUpdate(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update microservice-instance
  rpc update(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  //preview delete microservice-instance
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete microservice-instance
  rpc delete(cloud.planton.apis.v1.commons.resource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restoring a deleted microservice-instance
  rpc previewRestore(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted microservice-instance of a environment.
  rpc restore(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for microservice-instance
  rpc createStackJob(cloud.planton.apis.v1.stack.job.model.CreateStackJobCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for microservice-instance";
  }
  //restart a microservice-instance running in a environment.
  //microservice-instance is restarted by deleting running pods which will be automatically recreated by kubernetes.
  rpc restart(cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstanceId)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restart microservice-instance";
  }
  //pause a microservice-instance running in a environment.
  //microservice-instance is paused by scaling down number of replicas of
  //the kubernetes deployment/stateful sets to zero in the environment.
  rpc pause(cloud.planton.apis.v1.commons.resource.model.ApiResourcePauseCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = paused;
  }
  //unpause a previously paused microservice-instance running in a environment.
  //unpause is done by scaling the number of pods back to the number of
  //replicas configured for the microservice-instance.
  rpc unpause(cloud.planton.apis.v1.commons.resource.model.ApiResourceUnPauseCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = unpaused;
  }
  //preview refresh a microservice-instance that was previously created
  rpc previewRefresh(cloud.planton.apis.v1.commons.resource.model.ApiResourceRefreshCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview refresh microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //refresh a microservice-instance that was previously created
  rpc refresh(cloud.planton.apis.v1.commons.resource.model.ApiResourceRefreshCommandInput)
      returns (cloud.planton.apis.v1.code2cloud.deploy.microservice.model.MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to refresh microservice-instance";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = refreshed;
  }
}
