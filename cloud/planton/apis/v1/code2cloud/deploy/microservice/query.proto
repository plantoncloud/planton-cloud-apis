syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.microservice;

import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/microservice/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/microservice/state.proto";
import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/io.proto";
import "cloud/planton/apis/v1/code2cloud/environment/io.proto";
import "cloud/planton/apis/v1/commons/grpc/stream/model.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/io.proto";

//microservice-instance query controller
service MicroserviceInstanceQueryController {
  //list all microservice-instances on planton instance for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (MicroserviceInstanceList);

  //look up microservice-instance using microservice-instance id
  rpc getById(MicroserviceInstanceId) returns (MicroserviceInstance) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view microservice-instance";
  }

  //find microservice-instances by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (MicroserviceInstances);

  //find microservice-instances by environment
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns (MicroserviceInstances);

  //find microservice-instances by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (MicroserviceInstances);

  //find microservice-instances in a environment for a code-project
  rpc findByEnvironmentIdByCodeProjectId(ByEnvironmentIdByCodeProjectIdInput) returns (MicroserviceInstances) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to for environment";
  }

  //lookup pods of a microservice-instance deployed to a environment
  rpc findPods(MicroserviceInstanceId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view microservice-instance pods";
  }

  //get a log stream for a running instance of a microservice-instance
  rpc getLogStream(GetMicroserviceInstanceLogStreamQueryInput) returns (stream cloud.planton.apis.v1.commons.grpc.stream.OutputLine) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "microservice_instance_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view microservice log";
  }

  //lookup a microservice-instance by code project id
  rpc getByCodeProjectId(cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectId) returns (MicroserviceInstance);

  //lookup all microservice-instances by code project url
  rpc findByCodeProjectUrl(cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectUrl) returns (MicroserviceInstances);

  rpc getEnvVarMap(MicroserviceInstance) returns (MicroserviceInstanceEnvVarMap) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = microservice_instance;
    //note: this rpc may also require that the requester to have update access to the environment
    // if the provided microservice-instance contains references to environment secrets.
    // this is not enforced here, but is enforced in the request processing.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = microservice_instance_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get environment variables of microservice-instance";
  }
}
