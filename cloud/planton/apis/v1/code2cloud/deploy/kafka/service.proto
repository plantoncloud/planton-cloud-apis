syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.kafka;

import "cloud/planton/apis/v1/code2cloud/deploy/kafka/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model.proto";
import "cloud/planton/apis/v1/stack/job/model.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";

//kafka-cluster command controller
service KafkaClusterCommandController {
  //preview create kafka-cluster
  rpc previewCreate(KafkaCluster) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create kafka-cluster
  rpc create(KafkaCluster) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  //preview update an existing kafka-cluster
  rpc previewUpdate(KafkaCluster) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update an existing kafka-cluster
  rpc update(KafkaCluster) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  //preview deleting an existing kafka-cluster
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete an existing kafka-cluster
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restoring a deleted kafka-cluster
  rpc previewRestore(KafkaCluster) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted kafka-cluster
  rpc restore(KafkaCluster) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for kafka-cluster
  rpc createStackJob(cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for kafka-cluster";
  }
  //restart a kafka-cluster running in a environment.
  //kafka-cluster is restarted by deleting running "broker" pods which will be automatically recreated by kubernetes
  //note: zookeeper pods are not deleted.
  rpc restart(KafkaClusterId) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restart kafka-cluster";
  }
  //pause a kafka-cluster running in a environment.
  //kafka-cluster is paused by scaling down number of replicas of
  //the kubernetes deployment/stateful sets to zero in the environment.
  rpc pause(cloud.planton.apis.v1.commons.resource.ApiResourcePauseCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = paused;
  }
  //unpause a previously paused kafka-cluster running in a environment.
  //unpause is done by scaling the number of pods back to the number of
  //replicas configured for the kafka-cluster.
  rpc unpause(cloud.planton.apis.v1.commons.resource.ApiResourceUnPauseCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause kafka-cluster";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = unpaused;
  }
}

//kafka-cluster query controller
service KafkaClusterQueryController {
  //list all kafka-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (KafkaClusterList);

  //look up kafka-cluster using kafka-cluster id
  rpc getById(KafkaClusterId) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kafka-cluster";
  }

  //find kafka-clusters by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (KafkaClusters);

  //find kafka-clusters by environment
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns (KafkaClusters);

  //find kafka-clusters by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (KafkaClusters);

  //look up kafka-cluster sasl password
  //password is retrieved from the kubernetes cluster.
  rpc getPassword(KafkaClusterId) returns (KafkaClusterPassword) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kafka-cluster password";
  }

  //lookup pods of a kafka-cluster deployed to a environment
  rpc findPods(KafkaClusterId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kafka-cluster pods";
  }
}

//kafka-topic command controller
service KafkaTopicCommandController {
  //add a single kafka topic to existing list of kafka topics of a kafka-cluster
  rpc add(AddOrUpdateKafkaTopicCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kafka_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create kafka topic";
  }
  //add multiple kafka topics to existing list of kafka topics of a kafka-cluster
  rpc addMultiple(AddKafkaTopicsCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kafka_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create kafka topic";
  }
  //update a kafka topic.
  rpc update(AddOrUpdateKafkaTopicCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kafka_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update kafka topic";
  }
  //delete a kafka topic.
  rpc delete(DeleteOrRestoreKafkaTopicCommandInput) returns (KafkaCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kafka_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete kafka topic";
  }
}

//kafka-topic query controller
service KafkaTopicQueryController {
  //find kafka topics by kafka-cluster id
  rpc findByKafkaClusterId(KafkaClusterId) returns (KafkaTopics) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kafka topics";
  }

  //look up kafka topic using kafka topic id
  rpc getById(KafkaTopicQueryInput) returns (KafkaTopic) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kafka_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kafka_cluster_get;
    //note: field-path can not be added as the kafka-cluster-id is not present in the input.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kafka topics";
  }
}
