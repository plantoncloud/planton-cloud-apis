syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.postgres;

import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/postgres/io.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/postgres/state.proto";
import "cloud/planton/apis/v1/code2cloud/environment/io.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/io.proto";

//postgres-cluster query controller
service PostgresClusterQueryController {
  //list all postgres-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns(PostgresClusterList);

  //look up a postgres-cluster using postgres-cluster id
  rpc getById(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster";
  }

  //find postgres-clusters by product id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (PostgresClusters);

  //find postgres-clusters by environment id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns (PostgresClusters);

  //find postgres-clusters by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (PostgresClusters);

  //look up postgres-cluster password
  //password is retrieved from the kubernetes cluster.
  rpc getPassword(PostgresClusterId) returns (PostgresClusterPassword) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster password";
  }

  //lookup pods of a postgres-cluster deployment
  rpc findPods(PostgresClusterId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster pods";
  }
}
