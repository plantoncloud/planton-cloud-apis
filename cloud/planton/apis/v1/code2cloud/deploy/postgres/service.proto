syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.deploy.postgres;

import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/postgres/model.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model.proto";

//postgres-cluster command controller
service PostgresClusterCommandController {
  //create postgres-cluster
  rpc create(PostgresCluster) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create postgres-cluster";
  }

  //update an existing postgres-cluster
  rpc update(PostgresCluster) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create postgres-cluster";
  }

  //delete an existing postgres-cluster
  rpc delete(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete postgres-cluster";
  }

  //restore a deleted postgres-cluster in a environment
  rpc restore(PostgresCluster) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore postgres-cluster";
  }

  //restart a postgres-cluster running in a environment.
  //postgres-cluster is restarted by deleting running pods which will be automatically recreated by kubernetes
  rpc restart(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restart postgres-cluster";
  }

  //pause a postgres-cluster running in a environment.
  //postgres-cluster is paused by scaling down number of replicas of
  //the kubernetes deployment/stateful sets to zero in the environment.
  rpc pause(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause postgres-cluster";
  }

  //unpause a previously paused postgres-cluster running in a environment.
  //unpause is done by scaling the number of pods back to the number of
  //replicas configured for the postgres-cluster.
  rpc unpause(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause postgres-cluster";
  }
}

//postgres-cluster query controller
service PostgresClusterQueryController {
  //list all postgres-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns(PostgresClusterList);

  //look up a postgres-cluster using postgres-cluster id
  rpc getById(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster";
  }

  //find postgres-clusters by product id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (PostgresClusters);

  //find postgres-clusters by environment id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.EnvironmentId) returns (PostgresClusters);

  //find postgres-clusters by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (PostgresClusters);

  //look up postgres-cluster password
  //password is retrieved from the kubernetes cluster.
  rpc getPassword(PostgresClusterId) returns (PostgresClusterPassword) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster password";
  }

  //lookup pods of a postgres-cluster deployment
  rpc findPods(PostgresClusterId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster pods";
  }
}

//postgres-cluster stack controller
service PostgresClusterStackController {
  //preview postgres-cluster stack
  rpc preview(PostgresCluster) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview postgres-cluster stack";
  }
  //apply postgres-cluster stack
  rpc apply(PostgresClusterId) returns (PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to apply postgres-cluster stack";
  }
}
