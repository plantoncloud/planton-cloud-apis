syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.kubecluster.service;

import "cloud/planton/apis/v1/code2cloud/cloudaccount/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/kubecluster/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/kubecluster/model/state.proto";
import "cloud/planton/apis/v1/commons/grpc/stream/model.proto";
import "cloud/planton/apis/v1/commons/protobuf/custom/model.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/certificate.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/namespace.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/company/model/io.proto";

// kube-cluster query controller
service KubeClusterQueryController {
  // list all kube-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.rpc.pagination.model.PageInfo)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterList);

  // lookup kube-cluster using kube-cluster id
  rpc getById(cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kube-cluster";
  }

  // find kube-clusters by company id
  rpc findByCompanyId(cloud.planton.apis.v1.resourcemanager.company.model.CompanyId)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusters);

  // find kube-clusters in a cloud account.
  rpc findByCloudAccountId(cloud.planton.apis.v1.code2cloud.cloudaccount.model.CloudAccountId)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusters);

  // find kube-clusters by company id to create environment.
  // this will be used to populate drop down of kube-clusters in create environment form.
  // the response should only include kube-clusters that a company is authorised to create environment.
  // the authorization is verified by looking up kube-clusters with `company-environment-creator` relation with the company id provided in input.
  rpc findEnvironmentCreateKubeClusters(cloud.planton.apis.v1.resourcemanager.company.model.CompanyId)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusters);

  // lookup components in a kube-cluster of a kube-cluster
  rpc getKubeClusterComponentsByKubeClusterId(cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterComponents) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kube-cluster kube-cluster components";
  }

  // find workload namespaces in a kube-cluster.
  rpc findWorkloadNamespacesByKubeClusterId(cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.v1.integration.kubernetes.resource.WorkloadNamespaces) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload namespaces in kube-cluster";
  }

  // find workload pods part of all environments hosted in a kube-cluster.
  rpc findWorkloadPodsByKubeClusterId(cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.v1.integration.kubernetes.resource.WorkloadPods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload pods in kube-cluster";
  }

  // find workload pods part of all environments hosted in a kube-cluster.
  rpc findSslCertificatesByKubeClusterId(cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.v1.integration.kubernetes.resource.Certificates) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload pods in kube-cluster";
  }

  // get a pod details
  rpc getPod(cloud.planton.apis.v1.code2cloud.kubecluster.model.ByKubeClusterByNamespaceByPodInput)
      returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pod) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get pod in kube-cluster";
  }

  // get a log stream for a pod running in a kube-cluster kube-cluster
  rpc getPodLogStream(cloud.planton.apis.v1.code2cloud.kubecluster.model.ByKubeClusterByNamespaceByPodInput)
      returns (stream cloud.planton.apis.v1.commons.grpc.stream.OutputLine) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to stream pod logs";
  }
}

// gcp kube-cluster container node pool query controller
service KubeClusterNodePoolGcpQueryController {
  // lookup gcp container node pool env using container-nodepool-id
  rpc getByGcpContainerNodePoolId(cloud.planton.apis.v1.code2cloud.kubecluster.model.GetByKubeClusterNodePoolGcpIdInput)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterNodePoolGcp) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get container node pool";
  }
}

// gcp query controller
service GcpQueryController {
  // list all gcp regions
  rpc findRegions(cloud.planton.apis.v1.commons.protobuf.custom.CustomEmpty)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.GcpRegions) {
    option (cloud.planton.apis.v1.iam.authz.extensions.is_public) = true;
  }

  // list all zones in a gcp region
  rpc findZonesByRegionIdentifier(cloud.planton.apis.v1.code2cloud.kubecluster.model.GcpRegionIdentifier)
      returns (cloud.planton.apis.v1.code2cloud.kubecluster.model.GcpZones) {
    option (cloud.planton.apis.v1.iam.authz.extensions.is_public) = true;
  }
}
