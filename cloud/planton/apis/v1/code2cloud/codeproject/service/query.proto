syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.codeproject.service;

import "cloud/planton/apis/v1/code2cloud/codeproject/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/codeproject/model/state.proto";
import "cloud/planton/apis/v1/code2cloud/sourcecode/server/model/io.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/io.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/state.proto";

//code project query controller
service CodeProjectQueryController {
  //list all code projects on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.rpc.pagination.model.PageInfo)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjectList);

  //look up a code project by code project id
  rpc getById(cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjectId)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code project";
  }

  //find code projects by product id
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjects);

  //find code projects by code-server id
  rpc findByCodeServerId(cloud.planton.apis.v1.code2cloud.server.model.CodeServerId)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjects);

  //look up all code projects by code project url
  rpc findByCodeProjectUrl(cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjectUrl)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjects) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    //field-path can not be added as the target resource-id is not present in the request input.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code projects";
  }

  //find code project templates by company id to create new code project.
  //this will be used to populate drop down of code project templates in create code project form.
  //the response should only include code project templates that a company is authorised to use for creating new code projects.
  //the authorization is verified by looking up code project template with `code-project-template-user` relation for the company id provided in input.
  rpc findTemplateCodeProjectsByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjects);

  //get code project profile by code project id
  rpc getCodeProjectProfileById(cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjectId)
      returns (cloud.planton.apis.v1.code2cloud.codeproject.model.CodeProjectProfile) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code project profile";
  }
}
