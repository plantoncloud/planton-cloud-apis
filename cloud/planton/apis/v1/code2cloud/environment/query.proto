syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.environment;

import "cloud/planton/apis/v1/code2cloud/cloudaccount/provider/gcp/resource/project/model.proto";
import "cloud/planton/apis/v1/code2cloud/deploy/kubecluster/io.proto";
import "cloud/planton/apis/v1/code2cloud/environment/io.proto";
import "cloud/planton/apis/v1/code2cloud/environment/state.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/namespace.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/io.proto";

//environment query controller
service EnvironmentQueryController {
  //list all environments on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.pagination.PageInfo) returns (EnvironmentList);

  //look up environment using environment id
  rpc getById(EnvironmentId) returns (Environment) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view environment";
  }

  //find environments by product id
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (Environments);

  //find environments by kube-cluster id
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId) returns (Environments);

  //look up environment using environment id
  rpc getByProductIdAndEnvironmentName(GetByProductIdAndEnvironmentNameQueryInput) returns (Environment) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    //field-path can not be added as the target resource-id is not present in the request input
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view environment";
  }

  //look up the build engine environment for the product required for launching the microservice in build engine
  rpc getBuildEngineEnvironmentByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (Environment);

  //look up the gcp project details by environment id required for fetching secrets for launching project in build engine.
  rpc getSecretsGcpProjectByEnvironmentId(EnvironmentId) returns (cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject);

  //find workload pods part of environment
  rpc findWorkloadPodsByEnvironmentId(EnvironmentId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.WorkloadPods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload pods in environment";
  }

  //find workload namespaces in a environment.
  rpc findWorkloadNamespacesByEnvironmentId(EnvironmentId) returns (cloud.planton.apis.v1.integration.kubernetes.resource.WorkloadNamespaces) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload namespaces in environment";
  }
}

//environment secrets query controller
service EnvironmentSecretQueryController {
  //lookup product secrets using product secret id
  rpc getById(GetByEnvironmentSecretIdInput) returns (EnvironmentSecret) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view environment secret";
  }
  //get value of a product secret
  rpc getValue(GetByEnvironmentSecretIdInput) returns (EnvironmentSecretValue) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view environment secret value";
  }
}

//environment variables query controller
service EnvironmentVariableQueryController {
  //lookup environment variables using environment variable id
  rpc getById(GetByEnvironmentVariableIdInput) returns (EnvironmentVariable) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view environment variable";
  }
  //get value of a environment variable
  rpc getValue(GetByEnvironmentVariableIdInput) returns (EnvironmentVariableValue) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view environment variable value";
  }
}
