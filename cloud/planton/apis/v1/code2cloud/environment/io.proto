syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.environment;

import "cloud/planton/apis/v1/code2cloud/environment/state.proto";

//list of environments
message Environments {
  repeated Environment entries = 1;
}

//wrapper for environment id field
message EnvironmentId {
  string value = 1;
}

//response for paginated query to list environments
message EnvironmentList {
  int32 total_pages = 1;
  repeated Environment entries = 2;
}

message GetByProductIdAndEnvironmentNameQueryInput {
  string product_id = 1;
  string environment_name = 2;
}

//input for rpc requests that require environment id, namespace
message ByEnvironmentByNamespaceInput {
  //id of the environment
  string environment_id = 1;
  //name of the kubernetes namespace
  string namespace = 2;
}

//input for command to clone environment
message CloneEnvironmentCommandInput {
  //id of the environment to clone
  string source_environment_id = 1;
  //spec for new environment
  Environment new_environment = 2;
}

//wrapper for list of environment variables
message EnvironmentVariables {
  repeated EnvironmentVariable entries = 1;
}

//response for paginated query to list environment variables
message EnvironmentVariableList {
  int32 total_pages = 1;
  repeated EnvironmentVariable entries = 2;
}

//wrapper for product var id
message EnvironmentVariableId {
  string value = 1;
}

//wrapper for environment var value
message EnvironmentVariableValue {
  string value = 1;
}

//input for command to add multiple environment variables to a environment
message AddEnvironmentVariablesCommandInput {
  //id of the environment to which the env variables are to be added
  string environment_id = 1;
  //key, value pairs of the variables to be added to the environment
  map<string, string> environment_variables = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

//wrapper for list of secrets
message EnvironmentSecrets {
  repeated EnvironmentSecret entries = 1;
}

//response for paginated query to list environment secrets
message EnvironmentSecretList {
  int32 total_pages = 1;
  repeated EnvironmentSecret entries = 2;
}

//wrapper for environment secret id
message EnvironmentSecretId {
  string value = 1;
}

//wrapper for environment secret value
message EnvironmentSecretValue {
  string value = 1;
}

//AddEnvironmentSecretsCommandInput is used to encapsulate the details required
//for adding multiple environment secrets to a environment. This
//message is typically used to transmit data between client and server in
//an add operation concerning multiple environment secrets associated
//with a specific environment.
message AddEnvironmentSecretsCommandInput {
  //The unique identifier for the environment to which the environment
  //secrets are being added. This field must be populated with a valid product
  //environment ID, which can be obtained from the environment entity
  //itself. The server uses this ID to identify the correct environment
  //to which the secrets should be added.
  string environment_id = 1;
  //The list of environment secrets that need to be added to the specified product
  //environment. Each entry in this list represents a single environment secret.
  //This is a list of instances of the `EnvironmentSecret` message, each encapsulating
  //the details of a single environment secret, such as its name and value. The server
  //will iterate over this list and add each secret to the environment.
  repeated EnvironmentSecret environment_secrets = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

//AddEnvironmentSecretCommandInput is used to encapsulate the details required
//for adding secrets to a environment. This message is typically used to
//transmit data between client and server in an add operation
//concerning environment secret associated with a specific environment.
message AddEnvironmentSecretCommandInput {
  //The unique identifier for the environment to which the secrets are
  //being added. This field must be populated with a valid environment id,
  //which can be obtained from the environment entity itself. The server
  //uses this ID to identify the correct environment to which the secrets should be added.
  string environment_id = 1;
  //secret that need to be added to the specified environment.
  //This is an instance of the `EnvironmentSecret` message, which encapsulates the
  //details of a single environment secret, such as its name and value.
  EnvironmentSecret environment_secret = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

//UpdateEnvironmentSecretValCommandInput is used to encapsulate the details required
//for updating the value of a secret in a environment. This
//message is typically used to transmit data between client and server during
//an update operation concerning the value of a specific environment secret
//associated with a particular environment.
message UpdateEnvironmentSecretValueCommandInput {
  //The unique identifier for the environment in which the secret is located.
  //This field must be populated with a valid environment ID, which can be
  //obtained from the environment entity itself. The server uses this ID to
  //identify the correct environment where the secret value needs to be updated.
  string environment_id = 1;

  //The unique identifier for the secret whose value is to be updated. This field
  //must be populated with a valid secret id, which can be obtained from the
  //EnvironmentSecret entity itself. The server uses this ID to identify the
  //correct secret within the specified environment.
  string secret_id = 2;

  //The new value for the secret. This field should be populated with the updated
  //value that needs to be set for the secret. This value will replace the existing
  //secret value in the specified environment.
  string secret_value = 3;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 4;
}

//DeleteOrRestoreEnvironmentSecretCommandInput is used to encapsulate the details required
//for deleting or restoring a secret in a environment. This message is typically used
//to transmit data between client and server during a delete or restore operation concerning
//a specific environment secret associated with a particular environment.
message DeleteOrRestoreEnvironmentSecretCommandInput {
  //The unique identifier for the environment from which the secret is to be deleted.
  //This field must be populated with a valid environment id, which can be
  //obtained from the environment entity itself. The server uses this id to
  //identify the correct environment where the secret needs to be deleted.
  string environment_id = 1;

  //The unique identifier for the secret to be deleted. This field
  //must be populated with a valid secret ID, which can be obtained from the
  //EnvironmentSecret entity itself. The server uses this ID to identify the
  //correct secret within the specified environment that needs to be deleted.
  string secret_id = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

//GetByEnvironmentSecretIdInput is used to encapsulate the details required
//for retrieving a secret associated with a specific environment by its unique identifier.
//This message is typically used to transmit data between client and server during a retrievalue operation
//concerning a specific environment secret associated with a particular environment.
message GetByEnvironmentSecretIdInput {
  //The unique identifier for the environment in which the secret resides.
  //This field must be populated with a valid environment ID, which can be
  //obtained from the environment entity itself. The server uses this ID to
  //identify the correct environment where the secret is located.
  string environment_id = 1;

  //The unique identifier for the secret to be retrieved. This field
  //must be populated with a valid secret ID, which can be obtained from the
  //EnvironmentSecret entity itself. The server uses this ID to identify the
  //correct secret within the specified environment that needs to be retrieved.
  string secret_id = 2;
}

//AddEnvironmentVariableCommandInput is used to encapsulate the details required
//for adding a new environment variable to a specific environment, or updating
//an existing one. This message is typically used to transmit data between the client and
//server during an add operation concerning a specific environment variable
//associated with a particular environment.
message AddEnvironmentVariableCommandInput {
  //The unique identifier for the environment to which the environment
  //variable needs to be added. This field must be populated with a valid
  //environment ID, which can be obtained from the environment entity itself.
  //The server uses this ID to identify the correct environment where the
  //environment variable needs to be added.
  string environment_id = 1;

  //The environment variable that needs to be added within the product
  //environment. This field should be populated with a valid EnvironmentVariable object,
  //which encapsulates the details of the environment variable.
  EnvironmentVariable variable = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

//DeleteOrRestoreEnvironmentVariableCommandInput is used to encapsulate the details required for
//deleting or restore an environment variable of a specific environment.
//This message is typically used to transmit data between the client and the server
//during a delete or restore operation concerning a specific environment variable associated
//with a particular environment.
message DeleteOrRestoreEnvironmentVariableCommandInput {
  //The unique identifier for the environment from which the environment
  //variable needs to be deleted. This field must be populated with a valid
  //environment ID, which can be obtained from the environment entity itself.
  //The server uses this ID to identify the correct environment from which
  //the environment variable needs to be deleted.
  string environment_id = 1;

  //The unique identifier for the environment variable that needs to be deleted
  //from the environment. This field should be populated with a valid
  //environment variable ID, which can be obtained from the environment variable entity itself.
  //The server uses this ID to identify the correct environment variable that
  //needs to be deleted.
  string variable_id = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

//UpdateEnvironmentVariableValueCommandInput is a protobuf message that is used when a request to update the value of a specific
//environment variable in a environment is made. This message encapsulates all necessary details needed
//to successfully execute this operation.
message UpdateEnvironmentVariableValueCommandInput {

  //environment_id is a string that uniquely identifies the environment in which the environment
  //variable is to be updated. This ID is used by the server to locate the specific environment.
  string environment_id = 1;

  //environment_var_id is a string that uniquely identifies the environment variable within the environment
  //that is to be updated. This ID is used by the server to locate the specific environment variable.
  string variable_id = 2;

  //_value is a string that represents the new value to be assigned to the specified environment variable.
  //The server will update the current value of the environment variable with this new value.
  string variable_value = 3;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 4;
}

//GetByEnvironmentVariableIdInput is a protobuf message designed to provide the necessary information
//when retrieving a specific environment variable in a particular environment.
//It encapsulates the identifying details required to locate and retrieve the required environment variable.
message GetByEnvironmentVariableIdInput {

  //environment_id is a string that uniquely identifies the environment where the target
  //environment variable is located. This ID is essential for the server to locate the specific environment.
  string environment_id = 1;

  //var_id is a string that uniquely identifies the environment variable within the identified product
  //environment that needs to be retrieved. This ID is used by the server to find the specific environment variable.
  string variable_id = 2;
}

// Command input for adding or updating an endpoint domain in a specific environment.
// It contains the environment ID and details about the endpoint domain to be managed.
message AddOrUpdateEndpointDomainCommandInput {
  // The unique identifier for the environment in which the endpoint domain will be added or updated.
  string environment_id = 1;

  // Details about the endpoint domain that is to be added or updated.
  EnvironmentEndpointDomain endpoint_domain = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}

// Command input for deleting an endpoint domain in a specific environment.
// It contains the environment ID and the unique identifier for the endpoint domain to be deleted.
message DeleteEndpointDomainCommandInput {
  // The unique identifier for the environment in which the endpoint domain is to be deleted.
  string environment_id = 1;

  // Unique identifier for the endpoint domain that is to be deleted.
  string endpoint_domain_id = 2;

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3;
}
