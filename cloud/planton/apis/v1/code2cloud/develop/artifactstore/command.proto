syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.develop.artifactstore;

import "cloud/planton/apis/v1/code2cloud/develop/artifactstore/io.proto";
import "cloud/planton/apis/v1/code2cloud/develop/artifactstore/state.proto";
import "cloud/planton/apis/v1/commons/resource/io.proto";
import "cloud/planton/apis/v1/commons/rpc/method/options/rpc_method_options.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/stack/job/io.proto";

//artifact-store command controller
service ArtifactStoreCommandController {
  //preview create artifact-store
  rpc previewCreate(ArtifactStore) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = product;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.product_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview create artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create artifact-store
  rpc create(ArtifactStore) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = product;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_create;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "spec.product_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = created;
  }
  //preview update artifact-store
  rpc previewUpdate(ArtifactStore) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview update artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update artifact-store
  rpc update(ArtifactStore) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = updated;
  }
  //preview delete an artifact-store.
  rpc previewDelete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview delete artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete an artifact-store.
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restoring a deleted artifact-store.
  rpc previewRestore(ArtifactStore) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview restore artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted artifact-store.
  rpc restore(ArtifactStore) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for artifact-store
  rpc createStackJob(cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create stack-job for artifact-store";
  }
  //restore a deleted artifact-store.
  rpc deleteArtifactStorePackageVersion(DelArtifactStorePackageVersionCommandInput) returns (ArtifactStorePackageVersion) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "artifact_store_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete package version from artifact-store";
  }
  //preview refresh a artifact-store that was previously created
  rpc previewRefresh(cloud.planton.apis.v1.commons.resource.ApiResourceRefreshCommandInput) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview refresh artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //refresh a artifact-store that was previously created
  rpc refresh(cloud.planton.apis.v1.commons.resource.ApiResourceRefreshCommandInput) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to refresh artifact-store";
    option (cloud.planton.apis.v1.commons.rpc.method.options.event_type) = refreshed;
  }
}
