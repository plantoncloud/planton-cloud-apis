syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.develop.artifactstore.state;

import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";
import "cloud/planton/apis/v1/stack/state/model.proto";
import "cloud/planton/apis/v1/code2cloud/develop/artifactstore/state/enums/enums.proto";

//artifact-store state
message ArtifactStoreState {
  option (cloud.planton.apis.v1.commons.resource.options.resource_type) = artifact_store;
  option (cloud.planton.apis.v1.commons.resource.options.is_runnable) = false;
  option (cloud.planton.apis.v1.commons.resource.options.owner).type = product;
  option (cloud.planton.apis.v1.commons.resource.options.owner).id_field_path = "spec.product_id";

  //event-type
  cloud.planton.apis.v1.code2cloud.develop.artifactstore.state.enums.ArtifactStoreEventType event_type = 99;

  //resource api version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3;

  //spec
  ArtifactStoreSpecState spec = 4;

  //status
  ArtifactStoreStatusState status = 5;
}

//artifact-store spec state
message ArtifactStoreSpecState {
  //company to which the artifact-store belongs to.
  string company_id = 1;

  //product to which the artifact-store belongs to.
  string product_id = 2;

  //username used to pull and push changes to/from a repository on buf.build registry.
  //this value is used in ci/cd pipelines of code-projects
  string buf_username = 3;

  //token used to pull and push changes to/from a repository on buf.build registry.
  //this value is used in ci/cd pipelines of code-projects
  string buf_token = 4;

  //base64 encoded git ssh key to clone golang code projects as part of code pipeline executions.
  //used in code pipelines which would require git authentication to fetch dependencies that rely on git.
  //both golang and swift code projects use git for dependency management.
  string go_module_fetch_git_ssh_key_base64 = 5;

  //provider for the artifact-store repositories
  string repo_provider = 6;

  //specification for google cloud artifact registry.
  //this attribute is only populated when the artifact-store repo provider is artifact-registry on google cloud.
  ArtifactStoreGcpArtifactRegistrySpecState gcp_artifact_registry = 7;
}

//artifact-store status state
message ArtifactStoreStatusState {
  // resource lifecycle
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // system audit info
  cloud.planton.apis.v1.commons.audit.SysAudit sys_audit = 98;

  // id of the stack-job
    string stack_job_id = 97;

  //status for artifact-store repositories created on gcp artifact-registry.
  //this is only populated when the gcp artifact-registry is configured as the repo-provider.
  ArtifactStoreGcpArtifactRegistryStatusState gcp_artifact_registry = 1;
}

//spec for gcp artifact-registry repo provider for artifact-store
message ArtifactStoreGcpArtifactRegistrySpecState {
  //id of the gcp cloud account in which the artifact-store repositories are to be created.
  //the allowed values for this attribute are all the gcp cloud accounts that the parent company of the product
  //has required permissions to create artifact-store in.
  string gcp_cloud_account_id = 1;

  //id of the gcp project in which the artifact-registry resources are to be created.
  //this is computed from the configured gcp cloud-account.
  //artifact-registry resources are created in core-infra project created in the connected gcp cloud-account.
  string project_id = 2;

  //gcp region in which the artifact-store is to be created ex: us-west2.
  //choosing the closest region for the kube-clusters in which the environments of the product are
  //hosted reduces the service startup time as the container images are downloaded faster.
  string region = 3;

  //flag to control access to artifacts published to repositories without any authentication.
  //this is useful for publishing artifacts for opensource projects.
  bool is_external = 4;
}

//status for gcp artifact-registry repo provider for artifact-store
message ArtifactStoreGcpArtifactRegistryStatusState {
  //email of the reader service account.
  string reader_service_account_email = 1;

  //base64 encoded key of the reader service account.
  string reader_service_account_key_base64 = 2;

  //email of the writer service account.
  string writer_service_account_email = 3;

  //base64 encoded key of the writer service account.
  string writer_service_account_key_base64 = 4;

  //name of the docker repo.
  string docker_repo_name = 5;

  //hostname of the docker repo.
  string docker_repo_hostname = 6;

  //url for the docker repository.
  string docker_repo_url = 7;

  //name of the maven repo.
  string maven_repo_name = 8;

  //url for the maven repository.
  string maven_repo_url = 9;

  //name of the npm repo.
  string npm_repo_name = 10;

  //name of the python repo.
  string python_repo_name = 11;
}
