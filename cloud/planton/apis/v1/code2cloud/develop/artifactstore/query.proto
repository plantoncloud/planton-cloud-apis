syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.develop.artifactstore;

import "cloud/planton/apis/v1/code2cloud/develop/artifactstore/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/develop/artifactstore/model/state.proto";
import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/model/io.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/io.proto";

//artifact-store query controller
service ArtifactStoreQueryController {
  //get artifact-store by id
  rpc getById(ArtifactStoreId) returns (ArtifactStore) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = artifact_store;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = artifact_store_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view artifact-store";
  }
  //list all artifact-stores on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.v1.commons.rpc.pagination.model.PageInfo) returns (ArtifactStoreList);
  //look up artifact-stores by product id.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId) returns (ArtifactStores);
  //look up artifact-stores by code project url
  rpc findByCodeProjectUrl(cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectUrl) returns (ArtifactStores);

  //list docker images from the artifact-store provided in the input
  //(proxy google artifact-registry server)
  rpc listArtifactStoreDockerImages(ListByArtifactStoreIdRepoNameInput) returns (ArtifactStoreDockerImageList);

  //list maven/npm/python packages from the corresponding repositories of artifact-store provided in the input
  //(proxy google artifact-registry server)
  rpc listArtifactStorePackages(ListByArtifactStoreIdRepoNameInput) returns (ArtifactStorePackageList);

  //list maven/npm/python package versions from the corresponding repositories of artifact-store provided in the input
  //(proxy google artifact-registry server)
  rpc listArtifactStorePackageVersions(ListByArtifactStoreIdPackageNameInput) returns (ArtifactStorePackageVersionList);
}
