syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.develop.sourcecode.project;

import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/io.proto";
import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/state.proto";
import "cloud/planton/apis/v1/commons/resource/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/resourcemanager/product/io.proto";
import "cloud/planton/apis/v1/resourcemanager/product/state.proto";

//code-project command controller
service CodeProjectCommandController {
  //add code-project that already exists on the code-server.
  rpc add(CodeProject) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = product;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_create;
    //note: field-path can not be provided as permissions are against product_id which is a computed attribute.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create code project";
  }

  //create a code-project on selected code-server.
  //new code projects created from planton cloud, can also choose an available code project template.
  rpc create(CodeProject) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = product;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_create;
    //note: field-path can not be provided as permissions are against product_id which is a computed attribute.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create code project";
  }

  //update an existing code-project
  rpc update(CodeProject) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update code project";
  }

  //delete an existing code project.
  rpc delete(cloud.planton.apis.v1.commons.resource.ApiResourceDeleteCommandInput) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete code project";
  }

  //restore a deleted code project of a product.
  rpc restore(CodeProject) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore code project";
  }

  //synchronize code projects of a product.
  //this operation will run synchronization process on all code-servers of the product.
  rpc synchronizeByProductId(cloud.planton.apis.v1.resourcemanager.product.ProductId) returns (cloud.planton.apis.v1.resourcemanager.product.Product);

  //synchronize code project with its counterpart on the code-server
  rpc synchronizeByCodeProjectId(CodeProjectId) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to synchronize code project";
  }

  //attach a machine account to a code project on the code-server by adding client-id and client-secret as
  //variables on the repository or project on github, gitlab etc
  rpc attachMachineAccountByCodeProjectId(AttachMachineAccountByCodeProjectIdCommandInput) returns (CodeProject) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = identity_account;
    //since this operation requires looking up client-secret, update permission is required.
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = identity_account_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to attach machine account";
  }
}
