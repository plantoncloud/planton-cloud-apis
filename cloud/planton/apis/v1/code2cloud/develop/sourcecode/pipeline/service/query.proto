syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.service;

import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/pipeline/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/model/io.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";

//code pipeline query controller
service CodePipelineQueryController {
  //generate code pipeline template for a code project
  rpc generateCodePipelineTemplate(cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.model.GenerateCodePipelineTemplateQueryInput)
      returns (cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.model.GenerateCodePipelineTemplateQueryResp) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    //note: field-path can not be added as id of target resource is not directly present in the input
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code-pipeline template";
  }
  //get code-pipeline template files for a code project
  rpc getPipelineFilesByCodeProjectId(cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.model.CodeProjectId)
      returns (cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.model.CodeProjectFiles) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code project profile";
  }
}
