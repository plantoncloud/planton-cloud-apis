syntax = "proto3";

package cloud.planton.apis.v1.commons.resource.list;

import "cloud/planton/apis/v1/commons/audit/state.proto";
import "cloud/planton/apis/v1/commons/resource/enums/enums.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/resource/list/enums/statusfilter/status_filter.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/io.proto";

// Record is a message type that represents a single record object in list view.
// Record object has all fields that are required to show in list view
// It contains identifying and contextual information about the resource,
// such as its id, name, type, and the associated company, product, and
// product environment identifiers.
message Record {
  // resource audit info
  cloud.planton.apis.v1.commons.audit.AuditInfo audit = 98;
  // Unique identifier for the resource.
  // example for resource in planton cloud could be postgres_cluster/ kafka_cluster/ microservice_instance etc.;
  string id = 1;
  // A human-readable name for the resource.
  string name = 2;
  // The type of the resource.
  cloud.planton.apis.v1.commons.resource.enums.ResourceType type = 3;
  // Unique identifier for the company associated with this resource.
  string company_id = 4;
  // Unique identifier for the product associated with this resource.
  string product_id = 5;
  // Unique identifier for the product environment
  // (e.g. 'rbitex-rbx-prod','rbitex-rbx-dev', etc.) associated with this resource.
  string environment_id = 6;
  // flag to indicate if the resource is deleted.
  bool is_active = 7;
  // flag to indicate if the resource is paused
  bool is_paused = 8;
}

// ResourceList is a message type that represents a paginated list of Record objects.
// It contains information about the total number of pages in the list and an array of Record entries.
message RecordList {
  // The total number of pages in the paginated list of Record objects.
  int32 total_pages = 1;
  // An array of Record objects contained in the current page of the paginated list.
  repeated Record entries = 2;
}

// The SearchByResourceTypeInput message represents the input parameters required for
// executing a search operation based on a specified resource type within a given
// company's product.
message GetByResourceTypeInput {
  // This is the unique identifier for the company
  // associated with the get query. The get operation will only consider resources
  // associated with this company.
  string company_id = 1;
  // This is the unique identifier for the product
  // associated with the get query. The get operation will only consider resources
  // that are linked with this product.
  string product_id = 2;
  // This field indicates the type of resource that the search operation will be focusing on.
  // The possible resource types are defined by the ResourceType enum.
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 3;
  // This field contains the pagination information used for retrieving specific paginated
  // data. It enables the client to specify the number of records per page and the page number.
  cloud.planton.apis.v1.commons.pagination.PageInfo page_info = 4;
  //  this field is an enumeration used to dictate the active status of the resources
  //  included in the search results.
  cloud.planton.apis.v1.commons.resource.list.enums.statusfilter.StatusFilter status_filter = 5;
}
