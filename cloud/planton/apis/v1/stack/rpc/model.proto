syntax = "proto3";

package cloud.planton.apis.v1.stack.rpc;

import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/commons/resource/enums/enums.proto";
import "cloud/planton/apis/v1/stack/rpc/enums/enums.proto";
import "cloud/planton/apis/v1/commons/audit/model.proto";

// stack-job
message StackJob {
  // system-audit information
  cloud.planton.apis.v1.commons.audit.SysAudit sys_audit = 99;
  // unique identifier(uuid) for stack-job
  string id = 1;
  // id of the company to which the stack-job belongs to
  string company_id = 2;
  // id of the product to which the stack-job belongs to
  // note: this attribute is always empty for company level stacks
  string product_id = 3;
  // id of the product-env to which the stack-job belongs to
  // note: this attribute is always empty for company level stacks
  string environment_id = 4;
  // resource type for which the stack is executed
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 5;
  // id of the resource for which the stack is executed
  string resource_id = 6;
  // name of the stack
  string stack_name = 7;
  // (required) stack operation type
  cloud.planton.apis.v1.stack.rpc.enums.StackOperationType operation_type = 8;
  // path of the log file in the storage bucket
  string log_file = 9;
  // status of the stack-job
  cloud.planton.apis.v1.stack.rpc.enums.StackJobStatus status = 10;
  // url of the stack-job on pulumi web console.
  // note: this value is not persisted in the database.
  // the value of this attributes is rendered by replacing the placeholders in
  // "https://app.pulumi.com/${pulumiOrgName}/${pulumiProject}/${pulumiStackName}"
  // value of pulumiOrgName is same for every single stack for each planton-cloud environment.
  // value of pulumiProject is the company-id on planton-cloud.
  // value of pulumiStack is stack_name attribute in this object.
  // ex: https://app.pulumi.com/plantonstack-prod/cookie/afs-cookie-shop-main.ca-planton-hosting-gcp-main.artifact-store
  string web_url = 11;
  // content of the log file.
  // note: log content is not persisted in the database.
  // log-content will only be included in response for stack-job details rpc calls.
  string log_content = 12;
  // error message from stack-job. this attribute is only populated when stack-job-status is "failed"
  string error_message = 13;
  // resource-count
  int32 resource_count = 14;
}

// wrapper for stack-job id
message StackJobId {
  string value= 1;
}

// list stack-jobs by resource type and id query input
message ListStackJobsByFiltersQueryInput {
  // page info
  cloud.planton.apis.v1.commons.rpc.pagination.PageInfo page_info = 1;
  // id of the company to filter the stack-jobs
  string company_id = 2;
  // id of the product to filter the stack-jobs
  string product_id = 3;
  // id of the product env to filter the stack-jobs
  string environment_id = 4;
  // type of resource
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 5;
  // id of the resource
  string resource_id = 6;
  // stack operation type
  cloud.planton.apis.v1.stack.rpc.enums.StackOperationType operation_type = 7;
  // status of the stack-job
  cloud.planton.apis.v1.stack.rpc.enums.StackJobStatus status = 8;
}

// paginated list of stack-jobs
message StackJobList {
  // total number of pages
  int32 total_pages = 1;
  // list of stack-jobs
  repeated StackJob entries = 2;
}

// wrapper for stack-job log content
message StackJobLogContent {
  string value= 1;
}

// information required to build log file name for company or product level stacks.
// the company level stacks are named using format: "{companyId}/{resource_type}.{resource_id}.{stack_name}.{operation_type}.{timestamp}.log"
// the product level stacks are named using format: "{companyId}/{productId}/{resource_type}.{resource_id}.{stack_name}.{operation_type}.{timestamp}.log"
message StackJobLogFileNameInfo {
  // id of the company
  string company_id = 1;
  // id of the product.
  // this attribute is ignore for company level stacks.
  string product_id = 2;
  // id of the resource on which the stack is being executed
  string resource_id = 3;
  // type of the operation being performed on the stack
  cloud.planton.apis.v1.stack.rpc.enums.StackOperationType operation_type = 4;
  // timestamp in "yyyymmhhmmss" format to be suffixed to the file name
  string timestamp = 5;
}

// stack progress
message StackProgress {
  // log line during the stack-job
  string output_line = 1;
  // status of the stack-job during the stack-job
  cloud.planton.apis.v1.stack.rpc.enums.StackJobStatus status = 2;
  // error message for stack failures
  string error_message = 3;
}

message StackProgressSnapshot {
  repeated StackProgressSnapshotResourceRow resource_rows = 1;
}

message StackProgressSnapshotResourceRow {
    // resource type ex: gcp:container:Cluster
    string type = 1;
    // name of the pulumi-resource ex: k8s-cluster
    string name = 2;
    // status of the pulumi-resource
    string status = 3;
}
