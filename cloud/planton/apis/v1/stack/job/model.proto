syntax = "proto3";

package cloud.planton.apis.v1.stack.job;

import "buf/validate/validate.proto";
import "cloud/planton/apis/v1/commons/audit/model.proto";
import "cloud/planton/apis/v1/commons/resource/enums/enums.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/resource/metadata/options/resource_metadata_options.proto";
import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/commons/resource/options/resource_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model.proto";
import "cloud/planton/apis/v1/stack/job/enums/executionstatus/execution_status.proto";
import "cloud/planton/apis/v1/stack/job/enums/operationtype/operation_type.proto";
import "cloud/planton/apis/v1/stack/job/progress/enums/event/event.proto";
import "cloud/planton/apis/v1/stack/job/progress/enums/statusevent/status_event.proto";
import "cloud/planton/apis/v1/stack/pulumi/engine/model.proto";

// stack-job
message StackJob {
  option (cloud.planton.apis.v1.commons.resource.options.resource_type) = stack_job;
  option (cloud.planton.apis.v1.commons.resource.metadata.options.id_prefix) = "sj";

  option (cloud.planton.apis.v1.commons.resource.options.owner).type = stack;
  option (cloud.planton.apis.v1.commons.resource.options.owner).id_field_path = "spec.stack_id";

  //id format "sj-<ulid>"
  option (cloud.planton.apis.v1.commons.resource.metadata.options.is_id_computed) = true;

  // resource api-version
  string api_version = 1 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true,
    (buf.validate.field).string.const = "stack.planton.cloud/v1"
  ];

  // resource kind
  string kind = 2 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true,
    (buf.validate.field).string.const = "StackJob"
  ];

  // resource metadata
  cloud.planton.apis.v1.commons.resource.Metadata metadata = 3;

  //resource spec
  StackJobSpec spec = 4;

  //resource status
  StackJobStatus status = 5;
}

// stack-job spec
message StackJobSpec {
  // id of the company to which the stack-job belongs to.
  //value is computed from stack
  string company_id = 1 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  //id of the product to which the stack-job belongs to.
  //value is empty for non-product specific resources
  string product_id = 2 [
    (buf.validate.field).ignore_empty = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  // id of the environment to which the stack-job belongs to.
  //value is empty for non-environment specific resources
  string environment_id = 3 [
    (buf.validate.field).ignore_empty = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  // resource type for which the stack-job is executed.
  //value is computed from stack.
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 4 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  // id of the resource for which the stack is executed
  string resource_id = 5 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  // id of the stack to which the stack-job belongs to
  // value is computed based on resource-id.
  string stack_id = 6 [
    (buf.validate.field).ignore_empty = true,
    (cloud.planton.apis.v1.commons.resource.field.options.is_computed) = true
  ];

  // stack-job operation type
  cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType operation_type = 7 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];

  // name of the pulumi-stack.
  // this value is computed by stack service.
  string pulumi_stack_name = 8 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.v1.commons.resource.field.options.is_immutable) = true
  ];
}

// stack-job status
message StackJobStatus {
  // resource lifecycle
  cloud.planton.apis.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.v1.commons.audit.ResourceAudit audit = 98;

  // resource version-id
  string version_id = 97;

  // execution status of the stack-job
  cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus execution_status = 1;
}

// wrapper for stack-job id
message StackJobId {
  string value= 1;
}

// list stack-jobs by resource type and id query input
message ListStackJobsByFiltersQueryInput {
  // page info
  cloud.planton.apis.v1.commons.pagination.PageInfo page_info = 1;
  // id of the company to filter the stack-jobs
  string company_id = 2;
  // id of the product to filter the stack-jobs
  string product_id = 3;
  // id of the product env to filter the stack-jobs
  string environment_id = 4;
  // type of resource
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 5;
  // id of the resource
  string resource_id = 6;
  // stack operation type
  cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType operation_type = 7;
  // execution status of the stack-job
  cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus execution_status = 8;
}

// paginated list of stack-jobs
message StackJobList {
  // total number of pages
  int32 total_pages = 1;
  // list of stack-jobs
  repeated StackJob entries = 2;
}

// input for rpc to set stack-job execution status
message SetStackJobExecutionStatusCommandInput {
  //id of the stack-job
  string stack_job_id = 1 [
    (buf.validate.field).ignore_empty = false
  ];

  //execution-status to be set for the stack-job
  cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus execution_status = 2 [
    (buf.validate.field).ignore_empty = false
  ];
}

// information required to build log file name for company or product level stacks.
// the company level stacks are named using format: "{companyId}/{resource_type}.{resource_id}.{stack_name}.{operation_type}.{timestamp}.log"
// the product level stacks are named using format: "{companyId}/{productId}/{resource_type}.{resource_id}.{stack_name}.{operation_type}.{timestamp}.log"
message StackJobLogFileNameInfo {
  // id of the company
  string company_id = 1;
  // id of the product.
  // this attribute is ignore for company level stacks.
  string product_id = 2;
  // id of the resource on which the stack is being executed
  string resource_id = 3;
  // type of the operation being performed on the stack
  cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType operation_type = 4;
  // timestamp in "yyyymmhhmmss" format to be suffixed to the file name
  string timestamp = 5;
}

// stack-job progress event
message StackJobProgressEvent {
  // type of the event
  cloud.planton.apis.v1.stack.job.progress.enums.event.StackJobProgressEventType event_type = 1;
  // stack-job progress status is populated when event_type is "STACK_JOB_PROGRESS_EVENT_TYPE_STATUS_EVENT"
  StackJobProgressStatusPayload progress_status_payload = 2;
  // pulumi engine event is only populated when event_type is "STACK_JOB_PROGRESS_EVENT_TYPE_PULUMI_ENGINE_EVENT"
  cloud.planton.apis.v1.stack.pulumi.engine.EngineEvent engine_event_payload = 3;
}

// stack-job progress status payload
message StackJobProgressStatusPayload {
  // type of the stack-job progress status event
  cloud.planton.apis.v1.stack.job.progress.enums.statusevent.StackJobProgressStatusEventType event_type = 1;
  // error message is populated when event_type is "STACK_JOB_PROGRESS_STATUS_EVENT_TYPE_FAILED"
  string error_message = 2;
}

message StackJobLogSnapshot {
  StackJobLogPulumiOperationSnapshot refresh_snapshot = 1;
  StackJobLogPulumiOperationSnapshot preview_snapshot = 2;
  StackJobLogPulumiOperationSnapshot apply_snapshot = 3;
  StackJobLogPulumiOperationSnapshot destroy_snapshot = 4;
}

message StackJobLogPulumiOperationSnapshot {
  PulumiOperationResourceChangesSnapshot resource_changes = 1;
  PulumiOperationDiffSnapshot diff = 2;
}

message PulumiOperationResourceChangesSnapshot {
  map<string,PulumiOperationResourceChangesSnapshotRow> urn_to_row_map = 1;
}

message PulumiOperationDiffSnapshot {
  repeated string resource_diff = 2;
}

message PulumiOperationResourceChangesSnapshotRow {
  string resource_type = 1;
  string resource_name = 2;
  string status = 3;
}

// input for rpc to create a new stack job for any resource.
message CreateStackJobCommandInput {
  //id of the resource for which the stack-job is to be created.
  string resource_id = 1;
  //operation-type to be used for creating the stack-job.
  cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType stack_job_operation_type = 2;
}
