syntax = "proto3";

package cloud.planton.apis.v1.stack.job.model;

import "cloud/planton/apis/v1/commons/resource/enums/enums.proto";
import "cloud/planton/apis/v1/commons/resource/field/options/resource_field_options.proto";
import "cloud/planton/apis/v1/commons/rpc/pagination/model/io.proto";
import "cloud/planton/apis/v1/stack/job/enums/executionstatus/execution_status.proto";
import "cloud/planton/apis/v1/stack/job/enums/operationtype/operation_type.proto";
import "cloud/planton/apis/v1/stack/job/model/state.proto";

// wrapper for stack-job id
message StackJobId {
  string value= 1;
}

// list stack-jobs by resource type and id query input
message ListStackJobsByFiltersQueryInput {
  // page info
  cloud.planton.apis.v1.commons.rpc.pagination.model.PageInfo page_info = 1;
  // id of the company to filter the stack-jobs
  string company_id = 2;
  // id of the product to filter the stack-jobs
  string product_id = 3;
  // id of the product env to filter the stack-jobs
  string environment_id = 4;
  // type of resource
  cloud.planton.apis.v1.commons.resource.enums.ResourceType resource_type = 5;
  // id of the resource
  string resource_id = 6;
  // stack operation type
  cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType operation_type = 7;
  // execution status of the stack-job
  cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus execution_status = 8;
}

// paginated list of stack-jobs
message StackJobList {
  // total number of pages
  int32 total_pages = 1;
  // list of stack-jobs
  repeated StackJob entries = 2;
}

// input for rpc to create a new stack job for any resource.
message CreateStackJobCommandInput {
  //id of the resource for which the stack-job is to be created.
  string resource_id = 1;
  //operation-type to be used for creating the stack-job.
  cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType stack_job_operation_type = 2;
  // reason for creating the stack job
  string message = 3 [
    (cloud.planton.apis.v1.commons.resource.field.options.is_required) = true
  ];
}

// GetStackJobMinutesByCompanyIdInput is intended for requests to retrieve the total minutes of stack job
// processing or usage associated with a given company. It focuses on identifying the company in question,
// facilitating the aggregation or reporting of stack job minutes at the company level.
message GetStackJobMinutesByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// StackJobMinutesMTB represents the total minutes a stack job has been running. This message is typically
// used to communicate or store information regarding the duration of stack jobs, making it a crucial
// component in monitoring, billing, or reporting systems that track job execution times.
message StackJobMinutesMTD {
  // minutes indicates the total duration of the stack job execution in minutes. This field uses an int32 type to
  // accommodate a wide range of values, from short tasks to long-running operations.
  int32 minutes = 1;
}

// GetResourceCountByCompanyIdInput is used for requests aimed at obtaining the number of resources
// (such as postgres clusters, redis clusters, kubernetes clusters licenses, etc.) associated with a given company.
// The focus on company identification via the company_id field enables targeted queries for resource
// counts within the specified company's context, supporting operations like auditing, resource management,
// and planning.
message GetResourceCountByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// ResourceCount encapsulates count of a specific resource type within an organization.
// It includes the resource's type and name for clear identification and the total count of such resources.
// This message is useful in contexts where detailed inventory, asset management, or resource planning is required,
// allowing for precise tracking and reporting of various resources.
message ResourceCount {
  // resource_type categorizes the resource, aiding in grouping and differentiating between various kinds
  // of resources (e.g., postgres_cluster, redis_cluster, kube_cluster etc.;).
  string resource_type = 1;

  // resource_name provides the specific name or identifier of the resource, offering a more user readable
  // text that complements the resource_type field.
  string resource_name = 2;

  // count represents the total number of resources of the specified type and name, enabling quantitative
  // assessments and management decisions based on the available resources.
  int32 count = 3;
}

// ResourcesCount aggregates multiple ResourceCount entries, providing a comprehensive overview
// of resource counts across different types and names within a specific context, such as a company.
// Each entry in the 'entries' field details the type, name, and count of a distinct resource.
message ResourcesCount {
  // entries is a collection of ResourceCount messages, each of which details the type, name,
  // and count of an individual resource. This repeated field allows for representing a diverse
  // array of resources within a single, structured response.
  repeated ResourceCount entries = 1;
}

// GetPulumiResourceCountByCompanyIdInput is used for making requests to obtain the count of Pulumi
// resources associated with a specified company. The inclusion of the company_id field allows for
// targeted queries to assess the scope of Pulumi resource utilization within a particular company,
// supporting resource management, auditing, and planning activities in cloud infrastructure and development operations.
message GetPulumiResourceCountByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// TotalPulumiResourceCount represents the aggregate count of Pulumi resources, typically returned
// in response to queries assessing the volume of Pulumi-managed resources within a specific context,
// such as a company. This message is crucial for understanding the extent of Pulumi infrastructure
// deployment and utilization, aiding in resource management, planning, and optimization efforts
// for cloud infrastructure managed through Pulumi.
message TotalPulumiResourceCount {
  // count is the total number of Pulumi resources.
  int32 count = 1;
}
