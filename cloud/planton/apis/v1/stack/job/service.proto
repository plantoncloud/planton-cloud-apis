syntax = "proto3";

package cloud.planton.apis.v1.stack.job;

import "cloud/planton/apis/v1/commons/resource/model.proto";
import "cloud/planton/apis/v1/stack/job/model.proto";
import "cloud/planton/apis/v1/commons/grpc/stream/model.proto";
import "cloud/planton/apis/v1/stack/pulumi/engine/model.proto";

service StackJobCommandController {
  //create stack-job
  rpc create(cloud.planton.apis.v1.stack.job.StackJob) returns (cloud.planton.apis.v1.stack.job.StackJob);
  //update stack-job
  rpc update(cloud.planton.apis.v1.stack.job.StackJob) returns (cloud.planton.apis.v1.stack.job.StackJob);
  //rpc to set execution-status for a stack-job.
  //since execution-status is an attribute in status of stack-job, it is not possible to update it using update rpc.
  rpc setExecutionStatus(cloud.planton.apis.v1.stack.job.SetStackJobExecutionStatusCommandInput) returns (cloud.planton.apis.v1.stack.job.StackJob);
}

service StackJobQueryController {
  //list of stack-jobs
  //todo: need to add authorization
  rpc listByFilters(cloud.planton.apis.v1.stack.job.ListStackJobsByFiltersQueryInput) returns(cloud.planton.apis.v1.stack.job.StackJobList);
  //look up stack-job by stack-job-id
  //todo: need to add authorization
  rpc getById(cloud.planton.apis.v1.stack.job.StackJobId) returns(cloud.planton.apis.v1.stack.job.StackJob);
  //rpc to get stack-job progress event stream
  //this rpc is required to support pulumi progress or diff view in the cli client which is an interactive client.
  rpc getProgressEventStream(cloud.planton.apis.v1.stack.job.StackJobId) returns(stream cloud.planton.apis.v1.stack.job.StackJobProgressEvent);
  //rpc to get snapshot of stack-job log
  //response is optimized to display the stack-job log on non-interactive client-apps
  rpc getStackJobLogSnapshotStream(cloud.planton.apis.v1.stack.job.StackJobId) returns (stream cloud.planton.apis.v1.stack.job.StackJobLogSnapshot);
}
