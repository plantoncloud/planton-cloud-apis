syntax = "proto3";

package cloud.planton.apis.v1.billing;

import "cloud/planton/apis/v1/billing/io.proto";
import "cloud/planton/apis/v1/billing/state.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";

//billing command controller
service BillingCommandController {
  //update an existing billing account.
  rpc updBillingAccount(cloud.planton.apis.v1.billing.BillingAccount) returns (BillingAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = billing;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = billing_account_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update billing account";
  }
  //delete an existing billing account.
  //a billing account can not be deleted without deleting all the subscriptions linked to the billing account.
  rpc delBillingAccount(cloud.planton.apis.v1.billing.BillingAccountId) returns (BillingAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = billing;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = billing_account_delete;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete billing account";
  }

  //restore a previously deleted billing account.
  rpc restoreBillingAccount(BillingAccountId) returns (BillingAccount) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_type = billing;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = billing_account_restore;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore billing account";
  }
}
