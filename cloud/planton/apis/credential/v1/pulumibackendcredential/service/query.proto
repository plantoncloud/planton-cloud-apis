syntax = "proto3";

package cloud.planton.apis.credential.v1.pulumibackendcredential.service;

import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/credential/v1/pulumibackendcredential/model/io.proto";
import "cloud/planton/apis/credential/v1/pulumibackendcredential/model/state.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";

service PulumiBackendCredentialQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = pulumi_backend_credential;
  //look up a pulumi-backend-credential using id
  rpc get(cloud.planton.apis.credential.v1.pulumibackendcredential.model.PulumiBackendCredentialId)
      returns(cloud.planton.apis.credential.v1.pulumibackendcredential.model.PulumiBackendCredential) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = pulumi_backend_credential;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup pulumi-backend-credential";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }
}
