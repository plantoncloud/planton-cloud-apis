syntax = "proto3";

package cloud.planton.apis.iac.v1.pulumistatebackend.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";
import "cloud/planton/apis/iac/v1/pulumistatebackend/enums/pulumistatebackendprovidertype/pulumi_state_backend_provider_type.proto";

// pulumi-state-backend
message PulumiStateBackend {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = pulumi_state_backend;

  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = organization;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.org_id";

  //id format "sjr-<ulid>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  // resource api-version
  string api_version = 1;

  // resource kind
  string kind = 2;

  // resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3;

  //resource spec
  PulumiStateBackendSpec spec = 4;

  //resource status
  PulumiStateBackendStatus status = 5;
}

// pulumi-state-backend spec
message PulumiStateBackendSpec {
  // id of the organization to which the pulumi-state-backend belongs to.
  string org_id = 1 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // provider for pulumi-state-backend
  // https://www.pulumi.com/docs/concepts/state
  cloud.planton.apis.iac.v1.pulumistatebackend.enums.pulumistatebackendprovidertype.PulumiStateBackendProviderType provider = 2;

  // pulumi-cloud backend provider spec
  PulumiStateBackendPulumiCloudSpec pulumi_cloud = 3;

  // aws s3 backend provider spec
  PulumiStateBackendAwsS3Spec aws_s3 = 4;

  // google cloud storage backend provider spec
  PulumiStateBackendGoogleCloudStorageSpec google_cloud_storage = 5;

  // azure blob storage backend provider spec
  PulumiStateBackendAzureBlobStorageSpec azure_blob_storage = 6;
}

//pulumi-cloud pulumi-state-backend spec
message PulumiStateBackendPulumiCloudSpec {
  //name of the pulumi organization
  string pulumi_organization = 1;
  //access token to be used for authorization
  string access_token = 2;
}

//aws s3 pulumi-state-backend spec
message PulumiStateBackendAwsS3Spec {
  //aws-credential-id to be used for authorization
  string aws_credential_id = 1;
  //name of s3-bucket
  string s3_bucket = 2;
  //aws region
  string region = 3;
}

//google-cloud-storage pulumi-state-backend spec
message PulumiStateBackendGoogleCloudStorageSpec {
  //gcp-credential-id to be used for authorization
  string gcp_credential_id = 1;
  //name of gcs-bucket
  string gcs_bucket = 2;
}

//azure-blob-storage pulumi-state-backend spec
message PulumiStateBackendAzureBlobStorageSpec {
  //azure-credential-id to be used for authorization
  string azure_credential_id = 1;
  //azure blob storage container name
  string blob_storage_container = 2;
}

// pulumi-state-backend status
message PulumiStateBackendStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;
}
