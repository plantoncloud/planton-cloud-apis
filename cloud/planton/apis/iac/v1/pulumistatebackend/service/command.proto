syntax = "proto3";

package cloud.planton.apis.iac.v1.pulumistatebackend.service;

import "cloud/planton/apis/iac/v1/pulumistatebackend/model/io.proto";
import "cloud/planton/apis/iac/v1/pulumistatebackend/model/state.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";

service PulumiStateBackendCommandController {
  //create pulumi-state-backend
  rpc create(cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) returns (cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.org_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create pulumi-state-backend";
  }
  //update pulumi-state-backend
  rpc update(cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) returns (cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = pulumi_state_backend;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to update pulumi-state-backend";
  }
  //delete pulumi-state-backend
  rpc delete(cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackendId) returns (cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = pulumi_state_backend;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to delete pulumi-state-backend";
  }
  //restore pulumi-state-backend
  rpc restore(cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) returns (cloud.planton.apis.iac.v1.pulumistatebackend.model.PulumiStateBackend) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = pulumi_state_backend;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to restore pulumi-state-backend";
  }
}
