syntax = "proto3";

package cloud.planton.apis.iac.v1.stackjob.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/pulumioperationstatustype/pulumi_operation_status_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogressstatustype/stack_job_progress_status_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype/stack_job_operation_type.proto";
import "google/protobuf/timestamp.proto";

// stack-job
message StackJob {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = stack_job;

  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = stack;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.stack_id";

  //id format "sj-<ulid>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  // resource api-version
  string api_version = 1 [
    (buf.validate.field).string.const = "iac.planton.cloud/v1"
  ];

  // resource kind
  string kind = 2;

  // resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3;

  //resource spec
  StackJobSpec spec = 4;

  //resource status
  StackJobStatus status = 5;
}

// stack-job spec
message StackJobSpec {
  // id of the organization to which the stack-job belongs to.
  //value is computed from stack
  string org_id = 1 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // id of the environment to which the stack-job belongs to.
  //value is empty for non-environment specific resources
  string env_id = 2 [
    (buf.validate.field).ignore_empty = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // resource type for which the stack-job is created
  //value is computed from stack.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 3 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // id of the resource for which the stack-job is created.
  string resource_id = 4 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // id of the resource version for which the stack-job is created.
  string resource_version_id = 5 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // id of the stack to which the stack-job belongs to.
  // value is computed based on resource-id.
  string stack_id = 6 [
    (buf.validate.field).ignore_empty = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];

  // stack-job operation type
  cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType operation_type = 7 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // name of the pulumi-stack.
  // this value is computed by stack service.
  string pulumi_stack_name = 8 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // event type of the resource that triggered the stack job
  string api_resource_event_type = 9 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // id of the identity-account that created the event
  // this is used to configure the audit-actor before persisting the state of stack-job resource.
  string api_resource_event_created_by = 10 [
    (buf.validate.field).ignore_empty = false,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];
}

// stack-job status
message StackJobStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // stack-job progress status
  StackJobStatusProgressStatus progress = 1;

  // status of pulumi operations
  StackJobStatusPulumiOperationsStatus pulumi_operations = 4;
}

// stack-job progress status
message StackJobStatusProgressStatus {
  // progress status of the stack-job
  cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressstatustype.StackJobProgressStatusType status = 1;

  // execution start time of stack job
  google.protobuf.Timestamp start_time = 2;

  // execution end time of stack job
  google.protobuf.Timestamp end_time = 3;

  // if the job has failed, this attribute contains list of errors describing the cause for failure.
  // if the job failed because the job result determining pulumi operation has failed, then the
  // diagnostic messages with severity "error" from that pulumi operation are copied into this field.
  repeated string errors = 4;
}

// pulumi operations status of the stack job
message StackJobStatusPulumiOperationsStatus {
  // status of refresh operation populated only when pulumi refresh is required for the stack-job
  StackJobStatusPulumiOperationStatus refresh = 1;

  // status of refresh operation populated only when pulumi preview(apply) is required for the stack-job
  StackJobStatusPulumiOperationStatus apply_preview = 2;

  // status of refresh operation populated only when pulumi preview(apply) is required for the stack-job
  StackJobStatusPulumiOperationStatus destroy_preview = 3;

  // status of apply operation populated only when pulumi apply is required for the stack-job
  StackJobStatusPulumiOperationStatus apply = 4;

  // status of apply operation populated only when pulumi destroy is required for the stack-job
  StackJobStatusPulumiOperationStatus destroy = 5;
}

// progress of a pulumi operation in a stack-job
message StackJobStatusPulumiOperationStatus {
  // unique identifier for the operation-status.
  //this is in the format "<stack-job-id>-<operation-type>".
  //this attribute acts as a binder between the stack-job entity and
  // pulumi-operation-status entity in database and is unused otherwise.
  string id = 1;
  //flag to indicate if the pulumi operation is required for the stack-job
  bool is_required = 2;
  // status of the pulumi operation
  cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType status = 3;
  // timestamp for the start time for pulumi operation
  google.protobuf.Timestamp start_time = 4;
  // timestamp for the end time for pulumi operation
  google.protobuf.Timestamp end_time = 5;
  //list of errors reported during the operation execution.
  //this list is only populated when the operation fails or pulumi-engine emits diagnostic events of severity "error".
  repeated string errors = 6;
}
