syntax = "proto3";

package cloud.planton.apis.iac.v1.stackjob.model;

import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogressstatustype/stack_job_progress_status_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype/stack_job_operation_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/state.proto";
import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

// wrapper for stack-job id
message StackJobId {
  string value= 1;
}

// list stack-jobs by resource type and id query input
message ListStackJobsByFiltersQueryInput {
  // page info
  cloud.planton.apis.commons.rpc.PageInfo page_info = 1;
  // id of the company to filter the stack-jobs
  string company_id = 2;
  // id of the product to filter the stack-jobs
  string product_id = 3;
  // id of the product env to filter the stack-jobs
  string environment_id = 4;
  // type of resource
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 5;
  // id of the resource
  string resource_id = 6;
  // stack operation type
  cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType operation_type = 7;
  // progress status of the stack-job
  cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressstatustype.StackJobProgressStatusType progress_status = 8;
}

// paginated list of stack-jobs
message StackJobList {
  // total number of pages
  int32 total_pages = 1;
  // list of stack-jobs
  repeated StackJob entries = 2;
}

// GetStackJobMinutesByCompanyIdInput is intended for requests to retrieve the total minutes of stack job
// processing or usage associated with a given company. It focuses on identifying the company in question,
// facilitating the aggregation or reporting of stack job minutes at the company level.
message GetStackJobMinutesByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// StackJobMinutesCurrentAndPreviousMonth represents the total minutes of stack job execution. it has both current and
// previous month aggregates.
message StackJobMinutesCurrentAndPreviousMonth {
  // current_month_minutes indicates the total duration of the stack job execution in minutes in the current month.
  double current_month_minutes = 1;
  // previous_month_minutes indicates the total duration of the stack job execution in minutes in the current month.
  double previous_month_minutes = 2;
}

// GetPulumiResourceCountByCompanyIdInput is used for making requests to obtain the count of Pulumi
// resources associated with a specified company. The inclusion of the company_id field allows for
// targeted queries to assess the scope of Pulumi resource utilization within a particular company,
// supporting resource management, auditing, and planning activities in cloud infrastructure and development operations.
message GetPulumiResourceCountByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// TotalPulumiResourceCount represents the aggregate count of Pulumi resources, typically returned
// in response to queries assessing the volume of Pulumi-managed resources within a specific context,
// such as a company. This message is crucial for understanding the extent of Pulumi infrastructure
// deployment and utilization, aiding in resource management, planning, and optimization efforts
// for cloud infrastructure managed through Pulumi.
message TotalPulumiResourceCount {
  // count is the total number of Pulumi resources.
  int32 count = 1;
}

// GetPulumiResourceCountByContextInput is used to request the count of Pulumi resources
// associated with a specific company and product within the system. The system uniquely identifies
// companies and products by their respective IDs, and this message is utilized to retrieve resource
// counts for targeted company-product combinations.
message GetPulumiResourceCountByContextInput {
  // company_id uniquely identifies a company within the system.
  string company_id = 1;

  // product_id uniquely identifies a product associated with a company within the system.
  string product_id = 2;
}

// PulumiResourceCountDetailed provides a detailed accounting of Pulumi resources within a specific
// context defined by a combination of company, product, and environment identifiers. This message
// is designed to offer granular insights into the types and counts of resources deployed, aiding in
// infrastructure management and analysis.
message PulumiResourceCountDetailed {
  // company_id uniquely identifies a company within the system. This string identifier
  // ensures that resources are accurately associated with the correct corporate entity.
  string company_id = 1;

  // product_id uniquely identifies a product offered by the company within the system.
  // This aids in segmenting resources by product line or offering for more detailed analysis.
  string product_id = 2;

  // environment_id specifies the deployment environment of the Pulumi resources, such as
  // development, testing, or production. This differentiation allows for environment-specific
  // resource tracking and management.
  string environment_id = 3;

  // resource_id provides a unique identifier for each Pulumi resource within the given context.
  // This ID facilitates precise tracking and operations on individual resources.
  string resource_id = 4;

  // resource_kind describes the type of the Pulumi resource (e.g., vm, network, database), offering
  // insights into the infrastructure composition and enabling type-specific management practices.
  string resource_kind = 5;

  // resource_count represents the number of instances of the resource kind present within the
  // specified context. Note: Despite being a string, this field should contain a numeric value.
  int32 resource_count = 6;
}

// PulumiResourceCountDetailedList encapsulates a list of PulumiResourceCountDetailed messages,
// providing a collection of detailed information about Pulumi resources count for each planton cloud resource id
message PulumiResourceCountDetailedList {
  // entries is a repeated field containing PulumiResourceCountDetailed messages. Each entry
  // in this list represents detailed information about a specific planton cloud resource, including
  // its company, product, environment identifiers, resource kind, and count.
  repeated PulumiResourceCountDetailed entries = 1;
}

// GetStackJobMinutesByContextInput is intended for requests to retrieve the total minutes of stack job
// processing or usage associated with a given company or product. It focuses on identifying the company or product
// in question, facilitating the aggregation or reporting of stack job minutes at the company/ product level.
message GetStackJobMinutesByContextInput {
  // company_id uniquely identifies a company within the system.
  string company_id = 1;

  // product_id uniquely identifies a product associated with a company within the system.
  string product_id = 2;
}

// PulumiResourceCountTimeSeries represents a single data point in a time series for tracking the count
// of Pulumi resources. Each entry correlates a specific timestamp with a resource count, allowing for
// detailed analysis of resource usage trends over time.
message PulumiResourceCountTimeSeries {
  // interval_timestamp marks the specific point in time this data point represents. The use of
  // google.protobuf.Timestamp ensures precise temporal tracking, enabling accurate historical analysis
  // and forecasting.
  google.protobuf.Timestamp interval_timestamp = 1;

  // resource_count is the number of Pulumi resources recorded at the specified interval_timestamp.
  // This double value allows for precise representation of resource counts, including fractional parts
  // if applicable, accommodating scenarios where resource counts are averaged or otherwise not whole numbers.
  double resource_count = 2;
}

// PulumiResourceCountTimeSeriesList aggregates multiple PulumiResourceCountTimeSeries entries into a
// single collection. This facilitates the management and analysis of time series data for Pulumi resources,
// supporting operations that require data across multiple time intervals, such as trend analysis and
// resource utilization studies.
message PulumiResourceCountTimeSeriesList {
  // entries is a repeated field that holds a sequence of PulumiResourceCountTimeSeries messages,
  // each representing a distinct time series data point. This collection models the fluctuation of resource
  // counts over time, enabling comprehensive temporal analysis and visualization of resource metrics.
  repeated PulumiResourceCountTimeSeries entries = 1;
}

// GetPulumiResourceCountTimeSeriesByContextInput defines the input parameters for a query
// to retrieve time-series data of Pulumi resource counts within a specific context, identified
// by company and product. This message enables clients to request temporal patterns of resource
// usage, facilitating trend analysis and resource planning based on historical data. The inclusion
// of start and end timestamps allows for the querying of data within a specific time range, offering
// targeted insights into resource utilization over defined periods.
message GetPulumiResourceCountTimeSeriesByContextInput {
  // company_id uniquely identifies a company within the system. This string identifier is used
  // to filter the query to only include resources associated with the specified company, ensuring
  // that the time series data returned is relevant to the querying entity's scope of interest.
  string company_id = 1;
  // product_id uniquely identifies a product associated with a company within the system. Specifying
  // this identifier allows the query to further narrow down the set of resources considered, focusing
  // the resulting time series on a particular product.
  string product_id = 2;

  // start_timestamp specifies the beginning of the time range for which resource count time series data
  // is requested. This field allows clients to define a specific time window, enhancing the precision of
  // the analysis by focusing on the changes and trends within this defined period.
  google.protobuf.Timestamp start_timestamp = 3;

  // end_timestamp defines the end of the time range for the query. Together with start_timestamp, it
  // delineates the temporal boundaries of the data retrieval, enabling focused analysis on resource
  // utilization and trends over specific intervals, aiding in more accurate forecasting and strategic planning.
  google.protobuf.Timestamp end_timestamp = 4;
}

// GetPulumiResourceCountTimeSeriesByResourceIdInput defines the input parameters for a query
// to retrieve time-series data of Pulumi resource counts based on a unique resource identifier.
// This message is tailored for in-depth analysis of specific resources, enabling clients to
// observe temporal patterns and count variations of a single resource over time. By specifying
// a resource ID and a precise time window through start and end timestamps, clients can obtain
// detailed insights into resource dynamics, facilitating targeted management and optimization
// strategies.
message GetPulumiResourceCountTimeSeriesByResourceIdInput {
  // type of resource id.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 1;
  // resource_id is a unique identifier for a Pulumi resource. This field targets the query to
  // retrieve time series data specifically for the resource specified, allowing for granular analysis
  // of its utilization and count changes over time. Such specificity is vital for detailed resource
  // tracking, performance evaluation, and planning of scaling or optimization efforts.
  string resource_id = 2;

  // start_timestamp specifies the beginning of the time range for which resource count time series data
  // is requested. This field enables clients to demarcate the start of a period of interest, ensuring
  // that the analysis focuses on relevant temporal segments. Precision in defining this start point
  // enhances the utility of the data in understanding resource trends and making informed decisions.
  google.protobuf.Timestamp start_timestamp = 3;

  // end_timestamp defines the end of the time range for the query. In conjunction with start_timestamp,
  // it establishes a clear and focused window for data retrieval. This precision allows for the
  // extraction of time-bound insights into resource behavior, supporting accurate forecasting,
  // trend analysis, and strategic resource planning. The ability to specify an end point ensures
  // that the analysis is both relevant and confined to specific operational periods.
  google.protobuf.Timestamp end_timestamp = 4;
}

// input for rpc to get recommendation to resolve an error in stack-job
message GetErrorResolutionRecommendationInput {
  //id of the stack-job
  string stack_job_id = 1;
  //error message for which the recommendation is to be queried from chat-gpt
  string error_message = 2;
}
