syntax = "proto3";

package cloud.planton.apis.iac.v1.stackjob.model;

import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogressstatustype/stack_job_progress_status_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype/stack_job_operation_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/state.proto";

// wrapper for stack-job id
message StackJobId {
  string value= 1;
}

// list stack-jobs by resource type and id query input
message ListStackJobsByFiltersQueryInput {
  // page info
  cloud.planton.apis.commons.rpc.PageInfo page_info = 1;
  // id of the company to filter the stack-jobs
  string company_id = 2;
  // id of the product to filter the stack-jobs
  string product_id = 3;
  // id of the product env to filter the stack-jobs
  string environment_id = 4;
  // type of resource
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 5;
  // id of the resource
  string resource_id = 6;
  // stack operation type
  cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType operation_type = 7;
  // progress status of the stack-job
  cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressstatustype.StackJobProgressStatusType progress_status = 8;
}

// paginated list of stack-jobs
message StackJobList {
  // total number of pages
  int32 total_pages = 1;
  // list of stack-jobs
  repeated StackJob entries = 2;
}

// input for rpc to create a new stack job for any resource.
message CreateStackJobCommandInput {
  //id of the resource for which the stack-job is to be created.
  string resource_id = 1;
  //operation-type to be used for creating the stack-job.
  cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType stack_job_operation_type = 2;
  // reason for creating the stack job
  string message = 3 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
}

// GetStackJobMinutesByCompanyIdInput is intended for requests to retrieve the total minutes of stack job
// processing or usage associated with a given company. It focuses on identifying the company in question,
// facilitating the aggregation or reporting of stack job minutes at the company level.
message GetStackJobMinutesByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// StackJobMinutesMTB represents the total minutes a stack job has been running. This message is typically
// used to communicate or store information regarding the duration of stack jobs, making it a crucial
// component in monitoring, billing, or reporting systems that track job execution times.
message StackJobMinutesMTD {
  // minutes indicates the total duration of the stack job execution in minutes. This field uses an int32 type to
  // accommodate a wide range of values, from short tasks to long-running operations.
  int32 minutes = 1;
}

// GetPulumiResourceCountByCompanyIdInput is used for making requests to obtain the count of Pulumi
// resources associated with a specified company. The inclusion of the company_id field allows for
// targeted queries to assess the scope of Pulumi resource utilization within a particular company,
// supporting resource management, auditing, and planning activities in cloud infrastructure and development operations.
message GetPulumiResourceCountByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}

// TotalPulumiResourceCount represents the aggregate count of Pulumi resources, typically returned
// in response to queries assessing the volume of Pulumi-managed resources within a specific context,
// such as a company. This message is crucial for understanding the extent of Pulumi infrastructure
// deployment and utilization, aiding in resource management, planning, and optimization efforts
// for cloud infrastructure managed through Pulumi.
message TotalPulumiResourceCount {
  // count is the total number of Pulumi resources.
  int32 count = 1;
}

// GetPulumiResourceCountByContextInput is used to request the count of Pulumi resources
// associated with a specific company and product within the system. The system uniquely identifies
// companies and products by their respective IDs, and this message is utilized to retrieve resource
// counts for targeted company-product combinations.
message GetPulumiResourceCountByContextInput {
  // company_id uniquely identifies a company within the system.
  string company_id = 1;

  // product_id uniquely identifies a product associated with a company within the system.
  string product_id = 2;
}

// PulumiResourceCountDetailed provides a detailed accounting of Pulumi resources within a specific
// context defined by a combination of company, product, and environment identifiers. This message
// is designed to offer granular insights into the types and counts of resources deployed, aiding in
// infrastructure management and analysis.
message PulumiResourceCountDetailed {
  // company_id uniquely identifies a company within the system. This string identifier
  // ensures that resources are accurately associated with the correct corporate entity.
  string company_id = 1;

  // product_id uniquely identifies a product offered by the company within the system.
  // This aids in segmenting resources by product line or offering for more detailed analysis.
  string product_id = 2;

  // environment_id specifies the deployment environment of the Pulumi resources, such as
  // development, testing, or production. This differentiation allows for environment-specific
  // resource tracking and management.
  string environment_id = 3;

  // resource_id provides a unique identifier for each Pulumi resource within the given context.
  // This ID facilitates precise tracking and operations on individual resources.
  string resource_id = 4;

  // resource_kind describes the type of the Pulumi resource (e.g., vm, network, database), offering
  // insights into the infrastructure composition and enabling type-specific management practices.
  string resource_kind = 5;

  // resource_count represents the number of instances of the resource kind present within the
  // specified context. Note: Despite being a string, this field should contain a numeric value.
  int32 resource_count = 6;
}

// PulumiResourceCountDetailedList encapsulates a list of PulumiResourceCountDetailed messages,
// providing a collection of detailed information about Pulumi resources count for each planton cloud resource id
message PulumiResourceCountDetailedList {
  // entries is a repeated field containing PulumiResourceCountDetailed messages. Each entry
  // in this list represents detailed information about a specific planton cloud resource, including
  // its company, product, environment identifiers, resource kind, and count.
  repeated PulumiResourceCountDetailed entries = 1;
}

// GetStackJobMinutesByContextInput is intended for requests to retrieve the total minutes of stack job
// processing or usage associated with a given company or product. It focuses on identifying the company or product
// in question, facilitating the aggregation or reporting of stack job minutes at the company/ product level.
message GetStackJobMinutesByContextInput {
  // company_id uniquely identifies a company within the system.
  string company_id = 1;

  // product_id uniquely identifies a product associated with a company within the system.
  string product_id = 2;
}

