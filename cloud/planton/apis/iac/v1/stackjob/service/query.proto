syntax = "proto3";

package cloud.planton.apis.iac.v1.stackjob.service;

import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/io.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/progress/io.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/progress/pulumiengine/io.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/progress/pulumiengine/state.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/progress/snapshot/state.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/state.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "google/protobuf/wrappers.proto";

service StackJobQueryController {
  //list of stack-jobs
  //todo: need to add authorization
  rpc listByFilters(cloud.planton.apis.iac.v1.stackjob.model.ListStackJobsByFiltersQueryInput)
      returns(cloud.planton.apis.iac.v1.stackjob.model.StackJobList);
  //look up stack-job by stack-job-id
  //todo: need to add authorization
  rpc getById(cloud.planton.apis.iac.v1.stackjob.model.StackJobId)
      returns(cloud.planton.apis.iac.v1.stackjob.model.StackJob) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_skip_authorization) = true;
  }
  //rpc to get stack-job progress event stream
  //this rpc is required to support pulumi progress or diff view in the cli client which is an interactive client.
  rpc getProgressEventStream(cloud.planton.apis.iac.v1.stackjob.model.StackJobId)
      returns(stream cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent);
  //rpc to get snapshot of stack-job log
  //response is optimized to display the stack-job log on non-interactive client-apps
  rpc getStackJobProgressSnapshotStream(cloud.planton.apis.iac.v1.stackjob.model.StackJobId)
      returns (stream cloud.planton.apis.iac.v1.stackjob.model.progress.snapshot.StackJobProgressSnapshot);
  //retrieve all pulumi resources in a pulumi stack for a given stack-job-id
  rpc findPulumiResourcesByStackJobId(cloud.planton.apis.iac.v1.stackjob.model.StackJobId)
      returns (cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResources);
  // The getPulumiResourceCountByContext RPC retrieves the total count of Pulumi resources
  // for a given context. This context is defined by the combination of parameters specified in the
  // GetPulumiResourceCountByContextInput message, such as company and product identifiers. This operation
  // is crucial for understanding the scale of Pulumi infrastructure managed by a company for a specific product.
  rpc getPulumiResourceCountByContextSummary(cloud.planton.apis.iac.v1.stackjob.model.GetPulumiResourceCountByContextInput)
      returns (cloud.planton.apis.iac.v1.stackjob.model.TotalPulumiResourceCount);
  // getPulumiResourceCountByContextDetailed retrieves detailed information about Pulumi resources
  // within a given context. This context is specified by the GetPulumiResourceCountByContextInput message,
  // which includes identifiers for the company, product, and potentially other criteria to narrow down the query.
  rpc getPulumiResourceCountByContextDetailed(cloud.planton.apis.iac.v1.stackjob.model.GetPulumiResourceCountByContextInput)
      returns (cloud.planton.apis.iac.v1.stackjob.model.PulumiResourceCountDetailedList);
  // getStackJobMinutesNTDByContextInput retrieves the total running minutes of stack jobs associated with a specific company/ product.
  // This call is essential for systems needing to monitor, report, or bill based on the duration of stack jobs executed
  // within the context of a company/ product. It requires a GetStackJobMinutesByContextInput message containing the company_id/ product_id
  // for which the stack job minutes are being queried and returns a StackJobMinutesMTB message containing the total minutes.
  rpc getStackJobMinutesCurrentAndPreviousMonthByContext(cloud.planton.apis.iac.v1.stackjob.model.GetStackJobMinutesByContextInput)
      returns (cloud.planton.apis.iac.v1.stackjob.model.StackJobMinutesCurrentAndPreviousMonth);

  // getPulumiResourceCountTimeSeriesByContext retrieves a time series of Pulumi resource counts
  // within a specified context, defined by the combination of company and product identifiers.
  // This RPC is designed to provide clients with detailed insights into how resource usage has
  // evolved over time, enabling trend analysis, forecasting, and resource optimization strategies.
  rpc getPulumiResourceCountTimeSeriesByContext(cloud.planton.apis.iac.v1.stackjob.model.GetPulumiResourceCountTimeSeriesByContextInput)
      returns (cloud.planton.apis.iac.v1.stackjob.model.PulumiResourceCountTimeSeriesList);

  // getPulumiResourceCountTimeSeriesByResourceId retrieves a time series of Pulumi resource counts
  // for a specified resource over a defined time range. This RPC is intended for detailed analysis
  // of the usage and count fluctuations of individual Pulumi resources, enabling clients to track
  // specific resources' performance and plan for scaling or optimization based on historical data.

  // By providing a unique resource ID and a time window (start and end timestamps), clients can
  // obtain granular insights into how a particular resource's count has varied over time. This
  // capability is crucial for understanding resource utilization trends, identifying potential
  // bottlenecks, and making informed decisions about infrastructure management and optimization.
  rpc getPulumiResourceCountTimeSeriesByResourceId(cloud.planton.apis.iac.v1.stackjob.model.GetPulumiResourceCountTimeSeriesByResourceIdInput)
      returns (cloud.planton.apis.iac.v1.stackjob.model.PulumiResourceCountTimeSeriesList);

  // get a recommendation from chat-gpt for a specific error message of a failed stack-job
  rpc getErrorResolutionRecommendation(cloud.planton.apis.iac.v1.stackjob.model.GetErrorResolutionRecommendationInput)
      returns (google.protobuf.StringValue);
}
