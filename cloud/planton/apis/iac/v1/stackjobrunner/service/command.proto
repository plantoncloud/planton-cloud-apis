syntax = "proto3";

package cloud.planton.apis.iac.v1.stackjobrunner.service;

import "cloud/planton/apis/iac/v1/stackjobrunner/model/io.proto";
import "cloud/planton/apis/iac/v1/stackjobrunner/model/state.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";

service StackJobRunnerCommandController {
  //create stack-job-runner
  rpc create(cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) returns (cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.org_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create stack-job-runner";
  }
  //update stack-job-runner
  rpc update(cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) returns (cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = stack_job_runner;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to update stack-job-runner";
  }
  //delete stack-job-runner
  rpc delete(cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunnerId) returns (cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = stack_job_runner;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to delete stack-job-runner";
  }
  //restore stack-job-runner
  rpc restore(cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) returns (cloud.planton.apis.iac.v1.stackjobrunner.model.StackJobRunner) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = stack_job_runner;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to restore stack-job-runner";
  }
}
