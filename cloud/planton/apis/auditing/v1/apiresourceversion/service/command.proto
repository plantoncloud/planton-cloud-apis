syntax = "proto3";

package cloud.planton.apis.auditing.v1.apiresourceversion.service;

import "cloud/planton/apis/auditing/v1/apiresourceversion/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/io.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";

//api-resource-version command controller
service ApiResourceVersionCommandController {
  //create an api-resource-version resource
  rpc create(cloud.planton.apis.auditing.v1.apiresourceversion.model.ApiResourceVersion)
      returns (cloud.planton.apis.auditing.v1.apiresourceversion.model.ApiResourceVersion) {
    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.event_type) = created;
  }

  //when a stack-job is started in other microservices, the status of the stack-job should be updated
  // in the resource-versions that contain that stack-job-id.
  rpc startStackJobProgressFollower(cloud.planton.apis.iac.v1.stackjob.model.StackJobId)
      returns(cloud.planton.apis.auditing.v1.apiresourceversion.model.ApiResourceVersion);
}
