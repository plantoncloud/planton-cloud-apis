syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.environment.service;

import "cloud/planton/apis/code2cloud/v1/cloudaccount/model/provider/gcp/state.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/state.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/io.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";

//environment query controller
service EnvironmentQueryController {
  //look up environment using environment id
  rpc getById(cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentId)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.Environment) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view environment";
  }

  //find environments by product id
  rpc findByProductId(cloud.planton.apis.resourcemanager.v1.product.model.ProductId)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = product;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = product_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list environments of product";
  }

  //find environments by kube-cluster id
  rpc findByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list environments of kube cluster";
  }


  //look up environment using environment id
  rpc getByProductIdAndEnvironmentName(cloud.planton.apis.code2cloud.v1.environment.model.GetByProductIdAndEnvironmentNameQueryInput)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.Environment) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    //field-path can not be added as the target resource-id is not present in the request input
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view environment";
  }

  //look up the build engine environment for the product required for launching the microservice in build engine
  rpc getBuildEngineEnvironmentByProductId(cloud.planton.apis.resourcemanager.v1.product.model.ProductId)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.Environment) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = product;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = product_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view build-engine environment";
  }

  //look up the gcp project details by environment id required for fetching secrets for launching project in build engine.
  rpc getSecretsGcpProjectByEnvironmentId(cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentId)
      returns (cloud.planton.apis.code2cloud.v1.cloudaccount.model.provider.gcp.GcpProject) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view secrets gcp project of the environment";
  }
}

//environment secrets query controller
service EnvironmentSecretQueryController {
  //lookup product secrets using product secret id
  rpc getById(cloud.planton.apis.code2cloud.v1.environment.model.GetByEnvironmentSecretIdInput)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentSecret) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view environment secret";
  }
  //get value of a product secret
  rpc getValue(cloud.planton.apis.code2cloud.v1.environment.model.GetByEnvironmentSecretIdInput)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentSecretValue) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view environment secret value";
  }
}

//environment variables query controller
service EnvironmentVariableQueryController {
  //lookup environment variables using environment variable id
  rpc getById(cloud.planton.apis.code2cloud.v1.environment.model.GetByEnvironmentVariableIdInput)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentVariable) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view environment variable";
  }
  //get value of a environment variable
  rpc getValue(cloud.planton.apis.code2cloud.v1.environment.model.GetByEnvironmentVariableIdInput)
      returns (cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentVariableValue) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view environment variable value";
  }
}
