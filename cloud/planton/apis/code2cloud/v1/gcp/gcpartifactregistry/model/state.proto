syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.gcp.gcpartifactregistry.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/state.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/state.proto";

//gcp-artifact-registry
message GcpArtifactRegistry {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = gcp_artifact_registry;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.env_id";

  //api-version
  string api_version = 1 [
    (buf.validate.field).string.const = 'code2cloud.planton.cloud/v1'
  ];


  //resource-kind
  string kind = 2;

  //metadata
  //id format "<id-prefix>-<env-id>-<normalized-resource-name>"
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.name.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must start with a lowercase letter",
      // https://regex101.com/r/qpK7XF/1
      expression: "this.name.matches('^[a-z].*$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.name.matches('[^-]$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 30 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 30"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //resource spec
  GcpArtifactRegistrySpec spec = 4;

  //resource status
  GcpArtifactRegistryStatus status = 5;
}

//gcp-artifact-registry spec
message GcpArtifactRegistrySpec {
  //environment-info
  cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 99;

  //stack-job settings
  cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings stack_job_settings = 98;

  //gcp-credential-id to be used for setting up gcp-provider in stack-job
  string gcp_credential_id = 97;

  //id of the gcp project in which the artifact-registry resources are to be created.
  string project_id = 1 [
    (buf.validate.field).required = true
  ];

  //gcp region in which the gcp-artifact-registry is to be created ex: us-west2.
  //choosing the closest region for the kube-clusters in which the environments are
  //hosted reduces the service startup time as the container images are downloaded faster.
  string region = 2 [
    (buf.validate.field).required = true
  ];

  //flag to control access to artifacts published to repositories without any authentication.
  //this is useful for publishing artifacts for opensource projects.
  bool is_external = 3;
}

//gcp-artifact-registry status
message GcpArtifactRegistryStatus {
  //lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  //audit-info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  //stack-job id
  string stack_job_id = 97;

  //stack-outputs for gcp-artifact-registry
  GcpArtifactRegistryStackOutputs stack_outputs = 1;
}

//gcp-artifact-registry stack outputs
message GcpArtifactRegistryStackOutputs {
  //email of the reader service account.
  string reader_service_account_email = 1;

  //base64 encoded key of the reader service account.
  string reader_service_account_key_base64 = 2;

  //email of the writer service account.
  string writer_service_account_email = 3;

  //base64 encoded key of the writer service account.
  string writer_service_account_key_base64 = 4;

  //name of the docker repo.
  string docker_repo_name = 5;

  //hostname of the docker repo.
  string docker_repo_hostname = 6;

  //url for the docker repository.
  string docker_repo_url = 7;

  //name of the maven repo.
  string maven_repo_name = 8;

  //url for the maven repository.
  string maven_repo_url = 9;

  //name of the npm repo.
  string npm_repo_name = 10;

  //name of the python repo.
  string python_repo_name = 11;
}
