syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/networking/enums/dnsrecordtype/dns_record_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/state.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/state.proto";

//gcp-dns-zone
message GcpDnsZone {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = gcp_dns_zone;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.env_id";

  //api-version
  string api_version = 1[
    (buf.validate.field).string.const = 'code2cloud.planton.cloud/v1'
  ];

  //resource-kind
  string kind = 2;

  //metadata
  //id format "<id-prefix>-<env-id>-<normalized-resource-name>"
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name should be any valid DNS Domain Name",
      // https://regex101.com/library/SEg6KL
      expression: "this.name.matches('^(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 65 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 65"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  GcpDnsZoneSpec spec = 4;

  //status
  GcpDnsZoneStatus status = 5;
}

//gcp-dns-zone spec
message GcpDnsZoneSpec {
  //environment-info
  cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 99;

  //stack-job settings
  cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings stack_job_settings = 98;

  //gcp-credential-id to be used for setting up gcp-provider in stack-job
  string gcp_credential_id = 97;

  // The ID of the GCP Project where the Managed Zone is created.
  string project_id = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];

  // An optional list of GCP service accounts to be granted permissions to manage DNS records in the Managed Zone.
  // These accounts are primarily created as workload identities like cert-manager,
  // and are added when new environments are created or updated.
  repeated string iam_service_accounts = 2;

  // The DNS records that are added to the Zone.
  repeated GcpDnsRecord records = 3;
}

//gcp-dns-zone status
message GcpDnsZoneStatus {
  //lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  //audit-info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  //stack-job id
  string stack_job_id = 97;

  //stack-outputs
  //  stack outputs
  GcpDnsZoneStackOutputs stack_outputs = 1;
}

//gcp-dns-zone stack-outputs
message GcpDnsZoneStackOutputs {
  // The list of nameservers for the Managed Zone created for the DNS Domain.
  repeated string nameservers = 1;
}

//gcp-dns-zone dns-record
message GcpDnsRecord {
  string id = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];
  // dns record type.
  cloud.planton.apis.commons.networking.enums.dnsrecordtype.DnsRecordType record_type = 2 [
    (buf.validate.field).required = true
  ];

  // name of the gcp-dns-zone ex: example.com or dev.example.com.
  // this value should always end with a dot.
  string name = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "name",
      message: "Name should be any valid DNS Domain Name",
      expression: "this.matches('^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    }
  ];

  // values for the gcp-dns-zone record.
  // if the gcp_dns_zone_record_type is cname then each value in the list should end with a dot.
  repeated string values = 4;

  // ttl for the domain record in seconds.
  int32 ttl_seconds = 5 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.int32_default) = 60
  ];
}
