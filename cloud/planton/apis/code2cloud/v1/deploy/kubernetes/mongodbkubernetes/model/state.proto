syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.deploy.kubernetes.mongodbkubernetes.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/state.proto";
import "cloud/planton/apis/commons/kubernetes/enums/kubernetesworkloadingresstype/kubernetes_workload_ingress_type.proto";
import "cloud/planton/apis/commons/kubernetes/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";

//mongodb-kubernetes
message MongodbKubernetes {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = mongodb_kubernetes;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.env_id";

  //id format "<id-prefix>-<env-id>-<normalized-resource-name>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.name.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Must start with a lowercase letter",
      // https://regex101.com/r/qpK7XF/1
      expression: "this.name.matches('^[a-z].*$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.name.matches('[^-]$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 30 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 30"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  MongodbKubernetesSpec spec = 4;

  //status
  MongodbKubernetesStatus status = 5;
}

//mongodb-kubernetes spec
message MongodbKubernetesSpec {
  //environment-info
  cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 1;

  //mongodb-container spec
  MongodbKubernetesSpecContainerSpec container = 2 [
    (buf.validate.field).required = true
  ];

  //mongodb-kubernetes ingress-spec
  cloud.planton.apis.commons.kubernetes.model.IngressSpec ingress = 3;

  // helm_values is a map of key-value pairs that provide additional customization options for the Helm chart used
  // to deploy the Mongodb Kubernetes. These values allow for further refinement of the deployment, such as customizing
  // resource limits, setting environment variables, or specifying version tags. For detailed information on the available
  // options, refer to the Helm chart documentation at:
  // https://artifacthub.io/packages/helm/bitnami/mongodb
  map<string, string> helm_values = 4;
}

//mongodb-kubernetes status.
message MongodbKubernetesStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  //stack-outputs
  MongodbKubernetesStatusStackOutputs stack_outputs = 1;
}

// mongodb-kubernetes kubernetes mongodb-container spec
message MongodbKubernetesSpecContainerSpec {
  option (buf.validate.message).cel = {
    id: "spec.kubernetes.container.disk_size.mandatory",
    expression: "this.is_persistence_enabled && size(this.disk_size) == 0"
        "? 'disk size is mandatory to enable persistence'"
        ": ''"
  };

  //number of mongodb pods.
  //recommended default 1
  int32 replicas = 1 [
    (buf.validate.field).required = true
  ];

  //mongodb container cpu and memory resources.
  //recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  cloud.planton.apis.commons.kubernetes.model.ContainerResources resources = 2 [
    (buf.validate.field).required = true
  ];

  //flag to toggle persistence for mongodb data.
  //when enabled, mongodb in-memory data will be persisted to a storage volume.
  //the backup data from persistent volume is restored into mongodb memory between pod restarts.
  //defaults to false.
  bool is_persistence_enabled = 3;

  //size of persistent volume attached to each mongodb pod
  //if the client does not provide a value, the default value is configured.
  //this attribute is ignored when persistence is not enabled.
  //this persistent volume is used for backing up in-memory data.
  //data from the persistent volume will be restored into memory between pod restarts.
  //this value can not be modified as kubernetes does not allow updating the stateful-set specification after creation.
  string disk_size = 4[
    (buf.validate.field).cel = {
      id: "spec.kubernetes.container.disk_size.is_valid",
      message: "disk size value is invalid",
      // https://regex101.com/r/EqH2xa/1
      expression: "this.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$') && size(this) > 0"
    }
  ];
}

//mongodb-kubernetes stack outputs.
message MongodbKubernetesStatusStackOutputs {
  // namespace specifies the Kubernetes namespace in which the MongoDB cluster is created.
  // Namespaces are a way to divide cluster resources between multiple users.
  string namespace = 1;

  // root_username is the username for the root account of the MongoDB cluster.
  // The root account has full access to all databases and collections within the MongoDB cluster.
  string root_username = 2;

  // root_password_secret_name is the name of the Kubernetes secret that stores the root password for the MongoDB cluster.
  // Kubernetes secrets are used to store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys.
  string root_password_secret_name = 3;

  //kubernetes service name for mongodb-kubernetes
  //ex: main-mongodb-kubernetes
  //in the above example, "main" is the name of the mongodb-kubernetes
  string service = 4;

  //command to setup port-forwarding to open mongodb-kubernetes from developers laptop.
  //this might come handy when mongodb-kubernetes ingress is disabled for security reasons.
  //this is rendered by combining mongodb-kubernetes kubernetes service and namespace
  //ex: kubectl port-forward svc/mongodb-kubernetes -n kubernetes_namespace 27017:27017
  //running the command from this attribute makes it possible to access mongodb-kubernetes using http://localhost:8080
  string port_forward_command = 5;

  //kubernetes endpoint to connect to mongodb-kubernetes locally
  //ex: main-mongodb-kubernetes.namespace.svc.cluster.local:27017
  string kube_endpoint = 6;

  //public endpoint to open mongodb-kubernetes from clients outside kubernetes.
  //ex: https://mdc-planton-pcs-dev-main.data.dev.planton.live:27017
  string external_hostname = 7;

  //endpoint to open mongodb-kubernetes from clients inside kubernetes.
  //ex: https://mdc-planton-pcs-dev-main.data-internal.dev.planton.live:27017
  string internal_hostname = 8;
}
