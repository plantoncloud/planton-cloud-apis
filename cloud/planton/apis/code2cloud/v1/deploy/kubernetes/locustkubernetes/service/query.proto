syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.deploy.kubernetes.locustkubernetes.service;

import "cloud/planton/apis/resourcemanager/v1/environment/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/deploy/kubernetes/kubecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/deploy/kubernetes/locustkubernetes/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/deploy/kubernetes/locustkubernetes/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
<<<<<<< HEAD:cloud/planton/apis/code2cloud/v1/deploy/kubernetes/deploy/kubernetes/locustkubernetes/service/query.proto
||||||| b5f83a07:cloud/planton/apis/code2cloud/v1/deploy/kubernetes/locustkubernetes/service/query.proto
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";
=======
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
>>>>>>> main:cloud/planton/apis/code2cloud/v1/deploy/kubernetes/locustkubernetes/service/query.proto

//locust-kubernetes query controller
service LocustKubernetesQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = locust_kubernetes;
  //look up locust-kubernetes using locust-kubernetes id
  rpc get(cloud.planton.apis.code2cloud.v1.deploy.kubernetes.locustkubernetes.model.LocustKubernetesId)
      returns (cloud.planton.apis.code2cloud.v1.deploy.kubernetes.locustkubernetes.model.LocustKubernetes) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = locust_kubernetes;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = locust_kubernetes_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view locust-kubernetes";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }
}
