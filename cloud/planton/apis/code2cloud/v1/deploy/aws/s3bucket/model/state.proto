syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.deploy.aws.s3bucket.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";

//s3-bucket
message S3Bucket {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = s3_bucket;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.env_id";

  //id format "<id-prefix>-<env-id>-<normalized-resource-name>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be a Valid Bucket Name on AWS/GCP/AZURE/Others",
      //https://regex101.com/r/d1Viju/1
      expression: "this.name.matches('^[a-z0-9](?:[a-z0-9_-]*[a-z0-9])?$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 3 and 63 characters long",
      expression: "size(this.name) > 2 && size(this.name) <= 63"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  S3BucketSpec spec = 4;

  //status
  S3BucketStatus status = 5;
}

//s3-bucket spec
message S3BucketSpec {
  //environment-info
  cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 1;

  //flag to indicate if s3-bucket should have external(public) access.
  //defaults to "false"
  bool is_public = 2;
}

//s3-bucket status
message S3BucketStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  // stack-outputs
  S3BucketStatusStackOutputs stack_outputs = 1;
}

//s3-bucket stack outputs
message S3BucketStatusStackOutputs {
  //id of the storage-bucket created on aws
  string bucket_id = 1;
}
