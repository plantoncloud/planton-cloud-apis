syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.deploy.gcp.gcpclouddnszone.service;

import "cloud/planton/apis/code2cloud/v1/deploy/gcp/gcpclouddnszone/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/deploy/gcp/gcpclouddnszone/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/io.proto";
import "google/protobuf/wrappers.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";

//gcp-cloud-dns-zone query controller
service GcpCloudDnsZoneQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = gcp_cloud_dns_zone;

  // get details of a gcp-cloud-dns-zone id
  rpc get(cloud.planton.apis.code2cloud.v1.deploy.gcp.gcpclouddnszone.model.GcpCloudDnsZoneId)
      returns (cloud.planton.apis.code2cloud.v1.deploy.gcp.gcpclouddnszone.model.GcpCloudDnsZone) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = gcp_cloud_dns_zone;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get gcp-cloud-dns-zone";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }
}
