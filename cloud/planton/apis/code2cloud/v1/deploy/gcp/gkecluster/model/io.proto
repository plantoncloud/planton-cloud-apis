syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.deploy.gcp.kubecluster.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/code2cloud/v1/deploy/gcp/kubecluster/model/state.proto";
import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";

// wrapper for kube-cluster id
message KubeClusterId {
  string value = 1 [
    (buf.validate.field).required = true
  ];
}

//list of kube-clusters
message KubeClusterList {
  repeated KubeCluster entries = 1;
}

// input for paginated rpc requests with kube-cluster-id filter
message ListByKubeClusterIdInput {
  //page info
  cloud.planton.apis.commons.rpc.PageInfo page_info = 1 [
    (buf.validate.field).required = true
  ];
  //kube-cluster id
  string kube_cluster_id = 2 [
    (buf.validate.field).required = true
  ];
}

// google cloud region
message GcpRegion {
  //identifier for the region ex: us-central1
  string identifier = 1;
  // description for the region ex: US Ohio
  string description = 2;
}

// list of gcp regions
message GcpRegionList {
  repeated GcpRegion entries = 1;
}

//wrapper for google region identifier
message GcpRegionIdentifier {
  string value = 1;
}

// google cloud zone
message GcpZone {
  // identifier to which the zone belongs to
  string region = 1;
  //identifier for the zone ex: us-central1-1
  string identifier = 2;
  // description for the region ex: US Ohio AZ 1
  string description = 3;
}

// wrapper for gcp zones
message GcpZoneList {
  repeated GcpZone entries = 1;
}

message KubeClusterGcpNodePoolCommandInput {
  string kube_cluster_id = 1;
  KubeClusterNodePoolGcp gcp_node_pool = 2;
}

// AddOrUpdateKubeClusterNodePoolGcpCommandInput is a protobuf message designed to add or update or restore a GCP Node Pool in a specific Kube Cluster.
message AddOrUpdateKubeClusterNodePoolGcpCommandInput {

  // kube_cluster_id uniquely identifies the Kube Cluster to which the operation applies.
  string kube_cluster_id = 1 [
    (buf.validate.field).required = true
  ];

  // gcp_node_pool encapsulates the details about the Node Pool to be added or updated in the specified Kube Cluster.
  KubeClusterNodePoolGcp gcp_node_pool = 2 [
    (buf.validate.field).required = true
  ];

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3 [
    (buf.validate.field).required = true
  ];
}

// DeleteOrRestoreKubeClusterNodePoolGcpCommandInput is a protobuf message designed for operations that either
// soft delete (i.e., set an 'inactive' flag) or restore a GCP Node Pool in a specific Kube Cluster.
// Soft deleting is typically used as a safer alternative to permanent deletion, providing an option for recovery.
message DeleteKubeClusterNodePoolGcpCommandInput {
  // kube_cluster_id is the unique identifier of the Kube Cluster that contains the Node Pool
  // which is targeted for deletion or restoration. This ID helps the server locate the specific Kube Cluster.
  string kube_cluster_id = 1 [
    (buf.validate.field).required = true
  ];

  // node_pool_id is the unique identifier of the Node Pool within the specified Kube Cluster
  // that needs to be deleted or restored. The server uses this ID to pinpoint the Node Pool for the operation.
  string node_pool_id = 2 [
    (buf.validate.field).required = true
  ];

  // A descriptive message explaining the reason for the change or operation.
  // This is used for history logging purposes.
  string version_message = 3 [
    (buf.validate.field).required = true
  ];
}

// GetByKubeClusterNodePoolGcpIdInput is a protobuf message used to retrieve a specific GCP Node Pool within a particular Kube Cluster.
// This message requires a Kube Cluster identifier and a Node Pool identifier to execute the retrieve value operation successfully.
message GetByKubeClusterNodePoolGcpIdInput {

  // kube_cluster_id is a unique identifier of the Kube Cluster. This ID is used by the server to identify
  // and locate the specific Kube Cluster that contains the Node Pool of interest.
  string kube_cluster_id = 1 [
    (buf.validate.field).required = true
  ];

  // node_pool_id is the unique identifier of the GCP Node Pool within the specified Kube Cluster.
  // The server uses this ID to locate the specific Node Pool to be retrieved.
  string node_pool_id = 2 [
    (buf.validate.field).required = true
  ];
}

// kubernetes-cluster components
message KubeClusterComponents {
  // kube-system
  KubeSystem kube_system = 1;
  // istio-system and istio-ingress
  // https://github.com/istio/istio
  Istio istio = 2;
  // cert-manager https://github.com/cert-manager/cert-manager
  CertManager cert_manager = 3;
  // external-secrets https://github.com/external-secrets/external-secrets
  ExternalSecrets external_secrets = 4;
  // kafka-operator https://github.com/strimzi/strimzi-kafka-operator
  KafkaOperator kafka_operator = 5;
  // postgres-operator https://github.com/zalando/postgres-operator
  PostgresOperator postgres_operator = 6;
  // prometheus https://github.com/prometheus/prometheus
  Prometheus prometheus = 7;
  // open-cost https://github.com/opencost/opencost
  OpenCost open_cost = 8;
  // planton-cloud-kube-agent https://github.com/plantoncloud-inc/planton-cloud-kube-agent
  PlantonCloudKubeAgent planton_cloud_kube_agent = 9;
  // kube-cost https://www.kubecost.com/
  KubeCost kube_cost = 10;
  // solr-operator https://github.com/apache/solr-operator
  SolrOperator solr_operator = 11;
}

// kube-system components
message KubeSystem {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// istio https://github.com/istio/istio
message Istio {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// cert-manager https://github.com/cert-manager/cert-manager
message CertManager {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// external-secrets https://github.com/external-secrets/external-secrets
message ExternalSecrets {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// kafka-operator https://github.com/strimzi/strimzi-kafka-operator
message KafkaOperator {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// postgres-operator https://github.com/zalando/postgres-operator
message PostgresOperator {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// prometheus https://github.com/prometheus/prometheus
message Prometheus {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// open-cost https://github.com/opencost/opencost
message OpenCost {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// planton-cloud-kube-agent https://github.com/plantoncloud-inc/planton-cloud-kube-agent
message PlantonCloudKubeAgent {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// kube-cost https://www.kubecost.com/
message KubeCost {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// solr-operator https://github.com/apache/solr-operator
message SolrOperator {
  repeated cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod pods = 1;
}

// input for rpc requests that require kubernetes-cluster id, namespace and pod id
message ByKubeClusterByNamespaceByPodInput {
  // id of the kubernetes-cluster
  string kube_cluster_id = 1;
  // name of the kubernetes namespace
  string namespace = 2;
  // id of the kubernetes pod
  string pod_id = 3;
}

// input for rpc requests that require kubernetes-cluster id, namespace
message ByKubeClusterByNamespaceInput {
  // id of the kubernetes-cluster
  string kube_cluster_id = 1 [
    (buf.validate.field).required = true
  ];
  // name of the kubernetes namespace
  string namespace = 2 [
    (buf.validate.field).required = true
  ];
}

// input for rpc to find all api-resources created for an API Resource on Planton Cloud.
message StreamKubeClusterNamespaceKubernetesObjectsInput {
  //id of the kube-cluster
  string kube_cluster_id = 1;
  //kubernetes namespace
  string namespace = 2;
}

// kubernetes object in a kube-cluster
message KubeClusterKubernetesObject {
  // id of the kube-cluster
  string kube_cluster_id = 1;
  //kubernetes object
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject kubernetes_object = 2;
}

// kubernetes object of a planton-cloud api-resource
message ApiResourceKubernetesObject {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //kubernetes object
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject kubernetes_object = 2;
}

// input for rpc to update a kubernetes object in a kube-cluster
message UpdateKubeClusterKubernetesObjectInput {
  // kubernetes object in a kube-cluster
  KubeClusterKubernetesObject kube_cluster_kubernetes_object = 1;
  // base64 encoded of the updated kubernetes object yaml
  string updated_object_yaml_base64 = 2;
}

// input for rpc to update a kubernetes object of a planton-cloud api-resource
message UpdateApiResourceKubernetesObjectInput {
  //kubernetes object of a planton-cloud api-resource
  ApiResourceKubernetesObject api_resource_kubernetes_object = 1;
  // base64 encoded of the updated kubernetes object yaml
  string updated_object_yaml_base64 = 2;
}

// input for rpc to find list of pods on kube-cluster
message FindKubeClusterPodsInput {
  //id of the kube-cluster
  string kube_cluster_id = 1;
  //kubernetes namespace
  string namespace = 2;
  //details of the parent kubernetes object(pod-manager) to be used to filter pods list
  //if a parent is not specified, pods of all pod-managers will be included in the response.
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject pod_manager = 3;
}

// input for rpc to find list of pods of a planton-cloud api-resource
message FindApiResourcePodsInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //details of the parent kubernetes object(pod-manager) to be used to filter pods list
  //if a parent is not specified, pods of all pod-managers will be included in the response.
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject pod_manager = 2;
}

// input for rpc to stream logs of a pod on kube-cluster based on specified filters
message StreamKubeClusterPodLogsInput {
  //id of the kube-cluster
  string kube_cluster_id = 1;
  //options to configure pod log stream
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions options = 2;
}

// input for rpc to stream logs of a planton-cloud api-resource on specified filters
message StreamApiResourcePodLogsInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //options to configure pod log stream
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions options = 2;
}

// input for rpc to exec into a kube-cluster pod container
// input for rpc to exec into a pod container that belongs to a planton-cloud api-resource
message ExecIntoKubeClusterPodContainerInput {
  //id of the kube-cluster
  string kube_cluster_id = 1;
  // options required for performing exec into a pod container
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodContainerExecOptions options = 2;
}

// input for rpc to exec into a pod container that belongs to a planton-cloud api-resource
message ExecIntoApiResourcePodContainerInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  // options required for performing exec into a pod container
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodContainerExecOptions options = 2;
}

//id of the stream created for the shell session
message BrowserExecIntoPodContainerResponse {
  //pod container exec shell session id
  string shell_session_id = 1;
  //shell command execution response
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.ExecIntoPodContainerResponse command_response = 2;
}

// input for rpc to execute next command for a shell session in a pod container from a browser
message BrowserExecuteNextCommandInPodContainerInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //pod container exec shell session id
  string shell_session_id = 2;
  // command to execute inside an existing shell session of a pod container
  string command = 3;
}
