syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.service;

import "cloud/planton/apis/code2cloud/v1/deploy/gcp/gkecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/deploy/gcp/gkecluster/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/protobuf/custom.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/io.proto";
import "google/protobuf/wrappers.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";

// gke-cluster query controller
service GkeClusterQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = gke_cluster;
  // lookup gke-cluster using gke-cluster id
  rpc get(cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GkeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GkeCluster) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = gke_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view gke-cluster";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }
}

// gke gke-cluster container node pool query controller
service GkeClusterNodePoolQueryController {
  // lookup gcp container node pool env using container-nodepool-id
  rpc getByGcpContainerNodePoolId(cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GetByGkeClusterNodePoolIdInput)
      returns (cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GkeClusterNodePool) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = gke_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "gke_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get container node pool";
  }
}

// gcp query controller
service GcpQueryController {
  // list all gcp regions
  rpc findRegions(cloud.planton.apis.commons.protobuf.CustomEmpty)
      returns (cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GcpRegionList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }

  // list all zones in a gcp region
  rpc findZonesByRegionIdentifier(cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GcpRegionIdentifier)
      returns (cloud.planton.apis.code2cloud.v1.deploy.gcp.gkecluster.model.GcpZoneList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }
}
