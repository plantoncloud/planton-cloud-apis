syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.postgres.service;

import "cloud/planton/apis/v1/code2cloud/kubecluster/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/postgres/model/io.proto";
import "cloud/planton/apis/v1/code2cloud/postgres/model/state.proto";
import "cloud/planton/apis/v1/code2cloud/environment/model/io.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/v1/iam/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/v1/resourcemanager/product/model/io.proto";

//postgres-cluster query controller
service PostgresClusterQueryController {
  //list all postgres-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.commons.rpc.PageInfo)
      returns(cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusterList);

  //look up a postgres-cluster using postgres-cluster id
  rpc getById(cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusterId)
      returns (cloud.planton.apis.v1.code2cloud.postgres.model.PostgresCluster) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_kind = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster";
  }

  //find postgres-clusters by product id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByProductId(cloud.planton.apis.v1.resourcemanager.product.model.ProductId)
      returns (cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusters);

  //find postgres-clusters by environment id.
  //response contains only objects that the authenticated user account id has viewer access to.
  rpc findByEnvironmentId(cloud.planton.apis.v1.code2cloud.environment.model.EnvironmentId)
      returns (cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusters);

  //find postgres-clusters by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.v1.code2cloud.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusters);

  //look up postgres-cluster password
  //password is retrieved from the kubernetes cluster.
  rpc getPassword(cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusterId)
      returns (cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusterPassword) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_kind = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_update;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster password";
  }

  //lookup pods of a postgres-cluster deployment
  rpc findPods(cloud.planton.apis.v1.code2cloud.postgres.model.PostgresClusterId)
      returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).resource_kind = postgres_cluster;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).permission = postgres_cluster_get;
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view postgres-cluster pods";
  }
}
