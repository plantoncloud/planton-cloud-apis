syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.kubecluster.service;

import "cloud/planton/apis/code2cloud/v1/cloudaccount/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/state.proto";
import "cloud/planton/apis/commons/protobuf/custom.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/company/model/io.proto";
import "google/protobuf/wrappers.proto";

// kube-cluster query controller
service KubeClusterQueryController {
  // lookup kube-cluster using kube-cluster id
  rpc getById(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeCluster) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-cluster";
  }

  // find kube-clusters by company id
  rpc findByCompanyId(cloud.planton.apis.resourcemanager.v1.company.model.CompanyId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusters) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = company;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = company_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-clusters of company";
  }

  // find kube-clusters in a cloud account.
  rpc findByCloudAccountId(cloud.planton.apis.code2cloud.v1.cloudaccount.model.CloudAccountId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusters) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = cloud_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = cloud_account_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-clusters of cloud-account";
  }

  // find kube-clusters by company id to create environment.
  // this will be used to populate drop down of kube-clusters in create environment form.
  // the response should only include kube-clusters that a company is authorised to create environment.
  // the authorization is verified by looking up kube-clusters with `company-environment-creator` relation with the company id provided in input.
  rpc findEnvironmentCreateKubeClusters(cloud.planton.apis.resourcemanager.v1.company.model.CompanyId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusters){
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = company;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = company_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-clusters of company to create environment";
  }

  // lookup components in a kube-cluster of a kube-cluster
  rpc getKubeClusterComponentsByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterComponents) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-cluster kube-cluster components";
  }

  // find workload namespaces in a kube-cluster.
  rpc findWorkloadNamespacesByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.WorkloadNamespaces) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get workload namespaces in kube-cluster";
  }

  // find workload pods part of all environments hosted in a kube-cluster.
  rpc findWorkloadPodsByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.WorkloadPods) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get workload pods in kube-cluster";
  }

  // find workload pods part of all environments hosted in a kube-cluster.
  rpc findSslCertificatesByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Certificates) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get workload pods in kube-cluster";
  }

  // get a pod details
  rpc getPod(cloud.planton.apis.code2cloud.v1.kubecluster.model.ByKubeClusterByNamespaceByPodInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get pod in kube-cluster";
  }

  // get a log stream for a pod running in a kube-cluster kube-cluster
  rpc getPodLogStream(cloud.planton.apis.code2cloud.v1.kubecluster.model.ByKubeClusterByNamespaceByPodInput)
      returns (stream google.protobuf.StringValue) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to stream pod logs";
  }

  //find all kubernetes api-resources corresponding to the api-resource on planton cloud.
  rpc findKubernetesApiResources(cloud.planton.apis.code2cloud.v1.kubecluster.model.FindKubernetesApiResourcesInput)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.FindKubernetesApiResourcesResponse);
}

// gcp kube-cluster container node pool query controller
service KubeClusterNodePoolGcpQueryController {
  // lookup gcp container node pool env using container-nodepool-id
  rpc getByGcpContainerNodePoolId(cloud.planton.apis.code2cloud.v1.kubecluster.model.GetByKubeClusterNodePoolGcpIdInput)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterNodePoolGcp) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get container node pool";
  }
}

// gcp query controller
service GcpQueryController {
  // list all gcp regions
  rpc findRegions(cloud.planton.apis.commons.protobuf.CustomEmpty)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.GcpRegions) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }

  // list all zones in a gcp region
  rpc findZonesByRegionIdentifier(cloud.planton.apis.code2cloud.v1.kubecluster.model.GcpRegionIdentifier)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.GcpZones) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }
}
