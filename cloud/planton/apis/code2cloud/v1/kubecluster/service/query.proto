syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.kubecluster.service;

import "cloud/planton/apis/code2cloud/v1/cloudaccount/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/protobuf/custom.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/company/model/io.proto";
import "google/protobuf/wrappers.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";

// kube-cluster query controller
service KubeClusterQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = kube_cluster;
  // lookup kube-cluster using kube-cluster id
  rpc getById(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeCluster) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-cluster";
  }

  // find kube-clusters by company id
  rpc findByCompanyId(cloud.planton.apis.resourcemanager.v1.company.model.CompanyId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusters) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = company;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = company_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-clusters of company";
  }

  // find kube-clusters in a cloud account.
  rpc findByCloudAccountId(cloud.planton.apis.code2cloud.v1.cloudaccount.model.CloudAccountId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusters) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = cloud_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = cloud_account_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-clusters of cloud-account";
  }

  // find kube-clusters by company id to create environment.
  // this will be used to populate drop down of kube-clusters in create environment form.
  // the response should only include kube-clusters that a company is authorised to create environment.
  // the authorization is verified by looking up kube-clusters with `company-environment-creator` relation with the company id provided in input.
  rpc findEnvironmentCreateKubeClusters(cloud.planton.apis.resourcemanager.v1.company.model.CompanyId)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusters){
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = company;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = company_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kube-clusters of company to create environment";
  }
}

// gcp kube-cluster container node pool query controller
service KubeClusterNodePoolGcpQueryController {
  // lookup gcp container node pool env using container-nodepool-id
  rpc getByGcpContainerNodePoolId(cloud.planton.apis.code2cloud.v1.kubecluster.model.GetByKubeClusterNodePoolGcpIdInput)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterNodePoolGcp) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get container node pool";
  }
}

// gcp query controller
service GcpQueryController {
  // list all gcp regions
  rpc findRegions(cloud.planton.apis.commons.protobuf.CustomEmpty)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.GcpRegions) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }

  // list all zones in a gcp region
  rpc findZonesByRegionIdentifier(cloud.planton.apis.code2cloud.v1.kubecluster.model.GcpRegionIdentifier)
      returns (cloud.planton.apis.code2cloud.v1.kubecluster.model.GcpZones) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }
}

// kube-cluster kubernetes objects query controller
service KubeClusterKubernetesObjectQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = kube_cluster;
  //get detailed object of a kubernetes object
  rpc get(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterKubernetesObject)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObjectDetail) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup kubernetes object";
  }

  //find list of namespaces on a kubernetes cluster
  rpc findNamespaces(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesNamespaces) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup kubernetes namespaces";
  }

  //stream all kubernetes objects from a kubernetes namespace in kube-cluster.
  //this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
  //because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
  rpc streamKubernetesObjects(cloud.planton.apis.code2cloud.v1.kubecluster.model.StreamKubeClusterNamespaceKubernetesObjectsInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObjects) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup kubernetes objects in namespace";
  }

  //find list of pods in a kube-cluster on the specified filters
  rpc findPods(cloud.planton.apis.code2cloud.v1.kubecluster.model.FindKubeClusterPodsInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pods) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup kubernetes pods";
  }

  //stream logs of all kubernetes pods running in a kube-cluster on the specified filters
  rpc streamPodLogs(cloud.planton.apis.code2cloud.v1.kubecluster.model.StreamKubeClusterPodLogsInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogLine) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kube_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kube_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "kube_cluster_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to stream pod logs";
  }
}

// planton-cloud api-resource kubernetes objects query controller
service ApiResourceKubernetesObjectQueryController {
  //get detailed object of a kubernetes object that belongs to a planton-cloud api-resource.
  rpc get(cloud.planton.apis.code2cloud.v1.kubecluster.model.ApiResourceKubernetesObject)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObjectDetail);

  //stream all kubernetes objects corresponding to a planton-cloud api-resource.
  //this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
  //because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
  rpc streamKubernetesObjects(cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObjects);

  //find list of pods that belong to a planton-cloud api-resource with provided filters
  rpc findPods(cloud.planton.apis.code2cloud.v1.kubecluster.model.FindApiResourcePodsInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pods);

  //stream logs of all kubernetes pods that correspond to a planton-cloud api-resource based
  // on the specified filters
  rpc streamPodLogs(cloud.planton.apis.code2cloud.v1.kubecluster.model.StreamApiResourcePodLogsInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogLine);
}
