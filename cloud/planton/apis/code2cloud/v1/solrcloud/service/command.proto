syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.solrcloud.service;

import "cloud/planton/apis/code2cloud/v1/solrcloud/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/solrcloud/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/io.proto";

//solr-cloud command controller
service SolrCloudCommandController {
  //preview create solr-cloud
  rpc previewCreate(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview create solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create solr-cloud
  rpc create(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = created;
  }
  //preview update an existing solr-cloud
  rpc previewUpdate(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview update solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update an existing solr-cloud
  rpc update(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to update solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = updated;
  }
  //preview deleting an existing solr-cloud
  rpc previewDelete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview delete solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete an existing solr-cloud
  rpc delete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to delete solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restoring a deleted solr-cloud
  rpc previewRestore(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview restore solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted solr-cloud
  rpc restore(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to restore solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for solr-cloud
  rpc createStackJob(cloud.planton.apis.iac.v1.stackjob.model.CreateStackJobCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create stack-job for solr-cloud";
  }
  //restart a solr-cloud running in a environment.
  //solr-cloud is restarted by deleting running "solr" pods which will be automatically recreated by kubernetes
  rpc restart(cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloudId)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to restart solr-cloud";
  }
  //pause a solr-cloud running in a environment.
  //solr-cloud is paused by scaling down number of replicas of
  //the kubernetes deployment/stateful sets to zero in the environment.
  rpc pause(cloud.planton.apis.commons.apiresource.model.ApiResourcePauseCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to pause solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //unpause a previously paused solr-cloud running in a environment.
  //unpause is done by scaling the number of pods back to the number of
  //replicas configured for the solr-cloud.
  rpc unpause(cloud.planton.apis.commons.apiresource.model.ApiResourceUnPauseCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to unpause solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //preview refresh a solr-cloud that was previously created
  rpc previewRefresh(cloud.planton.apis.commons.apiresource.model.ApiResourceRefreshCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview refresh solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //refresh a solr-cloud that was previously created
  rpc refresh(cloud.planton.apis.commons.apiresource.model.ApiResourceRefreshCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.solrcloud.model.SolrCloud) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = solr_cloud;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = solr_cloud_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to refresh solr-cloud";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = refreshed;
  }
}
