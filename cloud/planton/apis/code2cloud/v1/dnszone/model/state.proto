syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.dnszone.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/code2cloud/v1/cloudaccount/enums/dnszoneprovider/dns_zone_provder.proto";
import "cloud/planton/apis/code2cloud/v1/dnszone/enums/dnsrecordtype/dns_record_type.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";

//dns-zone
message DnsZone {
  option (buf.validate.message).cel = {
    id: "metadata",
    message: "Name is mandatory",
    expression: "has(this.metadata)"
  };
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = dns_zone;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = company;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.company_id";

  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_prefix) = "dns";
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1 [
    (buf.validate.field).string.const = "code2cloud.planton.cloud/v1"
  ];

  //resource kind
  string kind = 2 [
    (buf.validate.field).string.const = "DnsZone"
  ];

  // metadata for the resource
  // Name is a valid, unique DNS domain name within the Platon Cloud.
  // Id value is automatically computed in the format 'dns-<company_id>-<normalized-domain-name>',
  // and its uniqueness is guaranteed by the backend.
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name should be any valid DNS Domain Name",
      // https://regex101.com/library/SEg6KL
      expression: "this.name.matches('^(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 65 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 65"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //dns-zone spec
  DnsZoneSpec spec = 4;

  //dns-zone status
  DnsZoneStatus status = 5;
}

// Specification for the DNS Zone
message DnsZoneSpec {
  // The ID of the company that owns the DNS Zone. This is required and immutable.
  string company_id = 1 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // The DNS records that are added to the Zone.
  repeated DnsRecord records = 2;

  //provider for dns-zone
  cloud.planton.apis.code2cloud.v1.cloudaccount.enums.dnszoneprovider.DnsZoneProvider zone_provider = 3 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // specification for zone to be created in google cloud dns.
  // this attribute is only populated when zone provider is google cloud dns.
  DnsZoneGcpSpec gcp = 4;

  // specification for zone to be created in aws route53.
  // this attribute is only populated when zone provider is aws route53.
  DnsZoneAwsSpec aws = 5;
}

// Status for the DNS Zone
message DnsZoneStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  //status for the zone created in google cloud dns.
  //this attribute is populated only when the zone provider is google cloud dns
  DnsZoneGcpStatus gcp = 1;

  //status for the zone created in aws route53.
  //this attribute is populated only when the zone provider is aws route53
  DnsZoneAwsStatus aws = 2;
}

// specification for zone to be created in google cloud dns service
message DnsZoneGcpSpec {
  // The ID of the GCP Cloud Account where the Managed Zone should be created.
  // The Managed Zone is created in the core-infra project of the provided Cloud Account,
  // necessary for delegating domain control to Platon Cloud.
  string gcp_cloud_account_id = 1 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  // The ID of the GCP Project where the Managed Zone is created.
  string project_id = 2 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];

  // An optional list of GCP service accounts to be granted permissions to manage DNS records in the Managed Zone.
  // These accounts are primarily created as workload identities like cert-manager,
  // and are added when new environments are created or updated.
  repeated string iam_service_accounts = 3;
}

// status for zone created in google cloud dns service
message DnsZoneGcpStatus {
  // The list of nameservers for the Managed Zone created for the DNS Domain.
  repeated string nameservers = 1;
}

// specification for zone to be created in aws route53
message DnsZoneAwsSpec {
  // The ID of the AWS Cloud Account where the Managed Zone should be created.
  string aws_cloud_account_id = 1 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];
}

// status for zone created in aws route53
message DnsZoneAwsStatus {
  // The list of nameservers for the Managed Zone created for the DNS Domain.
  repeated string nameservers = 1;
}

// dns-record
message DnsRecord {
  // dns-zone record type.
  cloud.planton.apis.code2cloud.v1.dnszone.enums.dnsrecordtype.DnsRecordType record_type = 1 [
    (buf.validate.field).required = true
  ];

  // name of the dns-zone ex: example.com or dev.example.com.
  // this value should always end with a dot.
  string name = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "name",
      message: "Name should be any valid DNS Domain Name",
      expression: "this.matches('^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    }
  ];

  // values for the dns-zone record.
  // if the dns_zone_record_type is cname then each value in the list should end with a dot.
  repeated string values = 3;

  // ttl for the domain record in seconds.
  int32 ttl_seconds = 4 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.int32_default) = 60
  ];
}
