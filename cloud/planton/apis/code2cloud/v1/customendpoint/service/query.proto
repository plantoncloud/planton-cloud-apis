syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.customendpoint.service;

import "cloud/planton/apis/code2cloud/v1/customendpoint/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/customendpoint/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";

//custom-endpoint query controller
service CustomEndpointQueryController {
  //list all custom-endpoints on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.commons.rpc.PageInfo)
      returns (cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointList);

  //look up custom-endpoint using custom-endpoint id
  rpc getById(cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointId)
      returns (cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpoint) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = custom_endpoint;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view custom-endpoint";
  }

  //find custom-endpoints by product id.
  //response contains only the endpoint domains that the authenticated user account id as viewer access to.
  rpc findByProductId(cloud.planton.apis.resourcemanager.v1.product.model.ProductId)
      returns (cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpoints);

  //check cert status for custom-endpoint
  rpc getCustomEndpointCertStatus(cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointId)
      returns (cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointCertStatus) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = custom_endpoint;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to check custom-endpoint certificate status";
  }

  //check status of dns resolution for custom-endpoint.
  //confirms if the dns of the custom-endpoint domain is resolving to the correct address.
  rpc getCustomEndpointDsnResolutionStatus(cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointId)
      returns (cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointDnsResolutionStatus) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = custom_endpoint;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to check custom-endpoint dnszone status";
  }

  //find certificates for custom-endpoint
  rpc findCustomEndpointCertificates(cloud.planton.apis.code2cloud.v1.customendpoint.model.CustomEndpointId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Certificates) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = custom_endpoint;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = custom_endpoint_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to look up custom-endpoint certificates";
  }
}
