syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.kafkacluster.service;

import "cloud/planton/apis/code2cloud/v1/kafkacluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/kafkacluster/model/state.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/io.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";

//kafka-cluster query controller
service KafkaClusterQueryController {
  //list all kafka-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.commons.rpc.PageInfo)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusterList);

  //look up kafka-cluster using kafka-cluster id
  rpc getById(cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaCluster) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kafka_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kafka_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kafka-cluster";
  }

  //find kafka-clusters by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.resourcemanager.v1.product.model.ProductId)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusters);

  //find kafka-clusters by environment
  rpc findByEnvironmentId(cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentId)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusters);

  //find kafka-clusters by kube-cluster
  rpc findByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusters);

  //look up kafka-cluster sasl password
  //password is retrieved from the kubernetes cluster.
  rpc getPassword(cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusterPassword) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kafka_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kafka_cluster_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kafka-cluster password";
  }

  //lookup pods of a kafka-cluster deployed to a environment
  rpc findPods(cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusterId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pods) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kafka_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kafka_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kafka-cluster pods";
  }
}

//kafka-topic query controller
service KafkaTopicQueryController {
  //find kafka topics by kafka-cluster id
  rpc findByKafkaClusterId(cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaClusterId)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaTopics) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kafka_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kafka_cluster_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kafka topics";
  }

  //look up kafka topic using kafka topic id
  rpc getById(cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaTopicQueryInput)
      returns (cloud.planton.apis.code2cloud.v1.kafkacluster.model.KafkaTopic) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kafka_cluster;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = kafka_cluster_get;
    //note: field-path can not be added as the kafka-cluster-id is not present in the input.
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view kafka topics";
  }
}
