syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.redis.service;

import "cloud/planton/apis/code2cloud/v1/kubecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/redis/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/redis/model/state.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/io.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/authz/extensions/extensions.proto";
import "cloud/planton/apis/v1/integration/kubernetes/resource/pod.proto";
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";

//redis-cluster query controller
service RedisClusterQueryController {
  //list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
  rpc list(cloud.planton.apis.commons.rpc.PageInfo)
      returns (cloud.planton.apis.code2cloud.v1.redis.model.RedisClusterList);

  //look up redis-cluster using redis-cluster id
  rpc getById(cloud.planton.apis.code2cloud.v1.redis.model.RedisClusterId)
      returns (cloud.planton.apis.code2cloud.v1.redis.model.RedisCluster) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = redis_cluster;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = redis_cluster_get;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to view redis-cluster";
  }

  //find redis-clusters by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.resourcemanager.v1.product.model.ProductId)
      returns (cloud.planton.apis.code2cloud.v1.redis.model.RedisClusters);

  //find redis-clusters by environment
  rpc findByEnvironmentId(cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentId)
      returns (cloud.planton.apis.code2cloud.v1.redis.model.RedisClusters);
  //find redis-clusters by kube-cluster

  rpc findByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.redis.model.RedisClusters);

  //look up redis-cluster sasl password
  //password is retrieved from the kubernetes cluster.
  rpc getPassword(cloud.planton.apis.code2cloud.v1.redis.model.RedisClusterId)
      returns (cloud.planton.apis.code2cloud.v1.redis.model.RedisClusterPassword) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = redis_cluster;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = redis_cluster_update;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to view redis-cluster password";
  }

  //lookup pods of a redis-cluster deployed to a environment
  rpc findPods(cloud.planton.apis.code2cloud.v1.redis.model.RedisClusterId)
      returns (cloud.planton.apis.v1.integration.kubernetes.resource.Pods) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = redis_cluster;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = redis_cluster_get;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to view redis-cluster pods";
  }
}
