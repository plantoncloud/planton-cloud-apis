syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.argocdinstance.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/state.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/enums/kubernetesworkloadingresstype/kubernetes_workload_ingress_type.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";

//argocd-instance
message ArgoCDInstance {
  option (buf.validate.message).cel = {
    id: "metadata",
    message: "Name is mandatory",
    expression: "has(this.metadata)"
  };
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = argocd_instance;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.is_runnable) = true;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.environment_id";

  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_prefix) = "acd";
  //id format "rdc-<environment-id>-<argocd-instance-name>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1 [
    (buf.validate.field).string.const = "code2cloud.planton.cloud/v1"
  ];

  //resource kind
  string kind = 2 [
    (buf.validate.field).string.const = "ArgoCDInstance"
  ];

  //resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3[
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 10,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.name.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Must start with a lowercase letter",
      // https://regex101.com/r/qpK7XF/1
      expression: "this.name.matches('^[a-z].*$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.name.matches('[^-]$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 12 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 12"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  ArgoCDInstanceSpec spec = 4;

  //status
  ArgoCDInstanceStatus status = 5;
}

//argocd-instance spec
message ArgoCDInstanceSpec {
  //resource parent
  cloud.planton.apis.code2cloud.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 1;

  //kubernetes spec
  ArgoCDInstanceSpecKubernetesSpec kubernetes = 2;
}

//argocd-instance status.
message ArgoCDInstanceStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.RunnableApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  //kubernetes status
  ArgoCDInstanceStatusKubernetesStatus kubernetes = 1;
}

// argocd-instance kubernetes spec
message ArgoCDInstanceSpecKubernetesSpec {
  //jenkins-container spec
  ArgoCDInstanceSpecKubernetesSpecRedisContainerSpec jenkins_container = 1;

  //argocd-instance ingress-spec
  ArgoCDInstanceSpecKubernetesSpecIngressSpec ingress = 2;

}

// argocd-instance kubernetes jenkins-container spec
message ArgoCDInstanceSpecKubernetesSpecRedisContainerSpec {
  //jenkins container cpu and memory resources.
  //recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  cloud.planton.apis.code2cloud.v1.kubecluster.model.ContainerResources resources = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
}

// argocd-instance kubernetes ingress spec
message ArgoCDInstanceSpecKubernetesSpecIngressSpec {
  option (buf.validate.message).cel = {
    id: "ingres.enabled.endpoint_domain_name.mandatory",
    expression: "this.is_enabled && size(this.endpoint_domain_name) == 0"
        "? 'endpoint domain name is mandatory to enable ingress'"
        ": ''"
  };
  option (buf.validate.message).cel = {
    id: "ingres.enabled.ingress_type.mandatory",
    expression: "this.is_enabled && this.ingress_type == 0"
        "? 'ingress type is mandatory to enable ingress'"
        ": ''"
  };
  //toggle to control ingress
  bool is_enabled = 1;
  //ingress type
  cloud.planton.apis.code2cloud.v1.kubecluster.enums.kubernetesworkloadingresstype.KubernetesWorkloadIngressType ingress_type = 2;
  //endpoint domain to be used for creating internal and external endpoints for kafka-cluster.
  //if the chosen ingress-type is `ingress-controller`, only tls enabled endpoint domains are allowed for creating jenkins endpoints.
  string endpoint_domain_name = 3;
}

//argocd-instance kubernetes status
message ArgoCDInstanceStatusKubernetesStatus {
  //kubernetes namespace in which argocd-instance is created.
  string namespace = 1;

  //kubernetes service name for argocd-instance.
  //ex: main-argocd-instance
  //in the above example, "main" is the name of the argocd-instance
  string service = 2;

  //command to setup port-forwarding to open argocd-instance from developers laptop.
  //this might come handy when argocd-instance ingress is disabled for security reasons.
  //this is rendered by combining argocd_instance_kubernetes_service and kubernetes_namespace
  //ex: kubectl port-forward svc/argocd_instance_kubernetes_service -n kubernetes_namespace 6379:6379
  //running the command from this attribute makes it possible to access argocd-instance using http://localhost:8080/jenkins
  string port_forward_command = 3;

  //kubernetes endpoint to connect to argocd-instance from the web browser.
  //ex: main-argocd-instance.namespace.svc.cluster.local:6379
  string kube_endpoint = 4;

  //public endpoint to open argocd-instance from clients outside kubernetes.
  //ex: https://rdc-planton-pcs-dev-main.data.dev.planton.live:6379/jenkins
  string ingress_endpoint = 5;
}
