syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.grafanainstance.service;

import "cloud/planton/apis/code2cloud/v1/environment/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/grafanainstance/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/grafanainstance/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";

//argocd-instance query controller
service GrafanaInstanceQueryController {
  //list all argocd-instances on planton cluster for the requested page.
  rpc list(cloud.planton.apis.commons.rpc.PageInfo)
      returns (cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstanceList);

  //look up argocd-instance using argocd-instance id
  rpc getById(cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstanceId)
      returns (cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstance) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = grafana_instance;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = grafana_instance_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view argocd-instance";
  }

  //find argocd-instances by product id.
  //response contains only the resources that the authenticated user account has viewer access to.
  rpc findByProductId(cloud.planton.apis.resourcemanager.v1.product.model.ProductId)
      returns (cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstances);

  //find argocd-instances by environment
  rpc findByEnvironmentId(cloud.planton.apis.code2cloud.v1.environment.model.EnvironmentId)
      returns (cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstances);
  //find argocd-instances by kube-cluster

  rpc findByKubeClusterId(cloud.planton.apis.code2cloud.v1.kubecluster.model.KubeClusterId)
      returns (cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstances);

  //lookup pods of a argocd-instance deployed to a environment
  rpc findPods(cloud.planton.apis.code2cloud.v1.grafanainstance.model.GrafanaInstanceId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pods) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = grafana_instance;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = grafana_instance_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view argocd-instance pods";
  }
}
