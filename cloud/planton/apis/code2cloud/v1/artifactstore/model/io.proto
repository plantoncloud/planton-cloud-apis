syntax = "proto3";

package cloud.planton.apis.v1.code2cloud.artifactstore.model;

import "cloud/planton/apis/v1/code2cloud/artifactstore/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination/google/model.proto";
import "google/protobuf/timestamp.proto";

//wrapper for artifact-store id
message ArtifactStoreId {
  string value = 1;
}

//response for paginated query to list artifact-stores
message ArtifactStoreList {
  int32 total_pages = 1;
  repeated ArtifactStore entries = 2;
}

//list of artifact-stores
message ArtifactStores {
  repeated ArtifactStore entries = 1;
}

//input to get a paginated list of resources with (proxy google artifact-registry server)
message ListByArtifactStoreIdRepoNameInput {
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  cloud.planton.apis.commons.pagination.google.GooglePageInfo page_info = 1;
  //id of the artifact-store
  string artifact_store_id = 2;
  //name of the repository
  string repo_name = 3;
}

//https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/artifact.proto
//docker image definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
message DockerImage {
  //Required. registry_location, project_id, repository_name and image id forms a unique
  //image
  //name:`projects/<project_id>/locations/<location>/repository/<repository_name>/dockerImages/<docker_image>`.
  //For example,
  //"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/
  //nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
  //where "us-west4" is the registry_location, "test-project" is the
  //project_id, "test-repo" is the repository_name and
  //"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf"
  //is the image's digest.
  string name = 1;

  //Required. URL to access the image.
  //Example:
  //us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
  string uri = 2;

  //Tags attached to this image.
  repeated string tags = 3;

  //Calculated size of the image.
  //This field is returned as the 'metadata.imageSizeBytes' field in the
  //Version resource.
  int64 image_size_bytes = 4;

  //Time the image was uploaded.
  google.protobuf.Timestamp upload_time = 5;

  //Media type of this image, e.g.
  //"application/vnd.docker.distribution.manifest.v2+json".
  //This field is returned as the 'metadata.mediaType' field in the
  //Version resource.
  string media_type = 6;

  //The time this image was built.
  //This field is returned as the 'metadata.buildTime' field in the
  //Version resource.
  //The build time is returned to the client as an RFC 3339 string, which can
  //be easily used with the JavaScript Date constructor.
  google.protobuf.Timestamp build_time = 7;
}

//response for paginated query to list docker images from artifact-store docker repo (proxy google artifact-registry server)
message ArtifactStoreDockerImageList {
  //docker images list
  repeated DockerImage entries = 1;
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  string next_page_token = 2;
}

//https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/package.proto
//artifact package definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
//Packages are named collections of versions in google artifact-store
message ArtifactStorePackage {

  //The name of the package, for example:
  //"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1".
  //If the package ID part contains slashes, the slashes are escaped.
  string name = 1;

  //The display name of the package.
  string display_name = 2;

  //The time when the package was created.
  google.protobuf.Timestamp create_time = 5;

  //The time when the package was last updated. This includes publishing a new
  //version of the package.
  google.protobuf.Timestamp update_time = 6;
}

//response for paginated query to list packages from artifact-store repository (proxy google artifact-registry server)
message ArtifactStorePackageList {
  // list of artifact-store packages
  repeated ArtifactStorePackage entries = 1;
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  string next_page_token = 2;
}

//https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/version.proto
//The body of a version resource. A version resource represents a
//collection of components, such as files and other data. This may correspond
//to a version in many package management schemes.
//artifact package version definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
message ArtifactStorePackageVersion {
  //The name of the version, for example:
  //"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1".
  //If the package or version ID parts contain slashes, the slashes are
  //escaped.
  string name = 1;
  //Optional. Description of the version, as specified in its metadata.
  string description = 3;
  //The time when the version was created.
  google.protobuf.Timestamp create_time = 5;
  //The time when the version was last updated.
  google.protobuf.Timestamp update_time = 6;
}

//input to get a paginated list of package versions with (proxy google artifact-registry server)
message ListByArtifactStoreIdPackageNameInput {
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  cloud.planton.apis.commons.pagination.google.GooglePageInfo page_info = 1;
  //id of the artifact-store
  string artifact_store_id = 2;
  //name of the package required to retrieve versions
  string package_name = 3;
}

//response for paginated query to list packages from artifact-store repository (proxy google artifact-registry server)
message ArtifactStorePackageVersionList {
  // list of artifact-store packages
  repeated ArtifactStorePackageVersion entries = 1;
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  string next_page_token = 2;
}

//input for command to delete a package version from artifact-store
message DelArtifactStorePackageVersionCommandInput {
  //id of the artifact-store
  string artifact_store_id = 1;
  //name of the package required to retrieve versions
  string package_version_name = 2;
}
