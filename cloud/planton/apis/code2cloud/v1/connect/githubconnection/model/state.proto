syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.connect.githubconnection.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/code2cloud/v1/connect/githubconnection/enums/githubappinstallownertype/github_app_install_owner_type.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";

//github-connection
message GithubConnection {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = github_connection;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = organization;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.org_id";

  //id format "<id-prefix>-<org-id>-<normalized-resource-name>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.name.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must start with a lowercase letter",
      // https://regex101.com/r/qpK7XF/1
      expression: "this.name.matches('^[a-z].*$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.name.matches('[^-]$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 30 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 30"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  GithubConnectionSpec spec = 4;

  //status
  GithubConnectionStatus status = 5;
}

//github-connection spec
message GithubConnectionSpec {
  //Specifies the organization to which the github-connection belongs.
  string org_id = 1 [
    (buf.validate.field).required = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  //Specifies the host of the github-connection, such as "https://github.com".
  string github_connection_host = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.hostname = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true
  ];

  //ID of the Github App installation provided by Github after successful app installation via OAuth flow.
  int64 app_install_id = 3 [
    (buf.validate.field).required = true
  ];

  //Specifies the owner type for Github App installation: User or Org.
  cloud.planton.apis.code2cloud.v1.connect.githubconnection.enums.githubappinstallownertype.GithubAppInstallOwnerType app_install_owner_type = 4 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];
}

//github-connection status
message GithubConnectionStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;
}
