syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.connect.gcpconnection.service;

import "cloud/planton/apis/code2cloud/v1/connect/gcpconnection/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/connect/gcpconnection/model/state.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/io.proto";

// gcp-connection query controller
service GcpConnectionQueryController {
  //look up a gcp-connection by id
  rpc getById(cloud.planton.apis.code2cloud.v1.connect.gcpconnection.model.GcpConnectionId) returns (cloud.planton.apis.code2cloud.v1.connect.gcpconnection.model.GcpConnection) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = gcp_connection;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view gcp-connection";
  }
  //find gcp-connections by organization id.
  //the response should only include gcp-connections in a organization that the authenticated user account has viewer access to.
  //authorization is handled internally by running get authorized cloud account ids
  rpc findByOrgId(cloud.planton.apis.resourcemanager.v1.organization.model.OrgId) returns (cloud.planton.apis.code2cloud.v1.connect.gcpconnection.model.GcpConnectionList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list gcp-connections by organization id";
  }
  // find gcp-connections by organization id to create artifact store.
  // this will be used to populate drop down of gcp-connections in create artifact store form.
  // the response should only include gcp-connections that a organization is authorised to create artifact stores.
  // the authorization is verified by looking up gcp-connections with `organization-artifact-creator` relation for the organization id provided in input.
  // the response should only include public attributes of a gcp-connection. all non-public attributes should be excluded from the response.
  rpc findGcpConnectionsToCreateArtifactRegistry(cloud.planton.apis.resourcemanager.v1.organization.model.OrgId) returns (cloud.planton.apis.code2cloud.v1.connect.gcpconnection.model.GcpConnectionList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list gcp-connections by organization id";
  }
  // find gcp-connections by organization id to create kube-cluster.
  // this will be used to populate drop down of gcp-connections in create kube-cluster form.
  // the response should only include gcp-connections that a organization is authorised to create kube-cluster.
  // the authorization is verified by looking up gcp-connections with `organization-kube-cluster-creator` relation for the organization id provided in input.
  // the response should only include public attributes of a gcp-connection. all non-public attributes should be excluded from the response.
  rpc findGcpConnectionsToCreateGkeCluster(cloud.planton.apis.resourcemanager.v1.organization.model.OrgId) returns (cloud.planton.apis.code2cloud.v1.connect.gcpconnection.model.GcpConnectionList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list gcp-connections by organization id";
  }
  // find gcp-connections by organization id to create dns managed zone.
  // this will be used to populate drop down of gcp-connections in create dns managed zone form.
  // the response should only include gcp-connections that a organization is authorised to create dns managed zone.
  // the authorization is verified by looking up gcp-connections with `organization-dns-managed-zone-creator` relation for the organization id provided in input.
  // the response should only include public attributes of a gcp-connection. all non-public attributes should be excluded from the response.
  rpc findGcpConnectionsToCreateCloudDnsZones(cloud.planton.apis.resourcemanager.v1.organization.model.OrgId) returns (cloud.planton.apis.code2cloud.v1.connect.gcpconnection.model.GcpConnectionList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list gcp-connections by organization id";
  }
}
