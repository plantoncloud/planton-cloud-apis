syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.service;

import "cloud/planton/apis/code2cloud/v1/connect/kubernetesclustercredential/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/connect/kubernetesclustercredential/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/io.proto";

// kubernetes-cluster-credential query controller
service KubernetesClusterCredentialQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = kubernetes_cluster_credential;

  //look up a kubernetes-cluster-credential by id
  rpc get(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterCredentialId) returns (cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterCredential) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = kubernetes_cluster_credential;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup kubernetes-cluster-credential";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }
}

// kubernetes-cluster kubernetes objects query controller
// todo: add authorization for rpcs
service KubernetesClusterKubernetesObjectQueryController {
  //get detailed object of a kubernetes object
  rpc get(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterKubernetesObject)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObjectDetail);

  //find list of namespaces on a kubernetes cluster
  rpc findNamespaces(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterCredentialId)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesNamespaces);

  //stream all kubernetes objects from a kubernetes namespace in kube-cluster.
  //this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
  //because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
  rpc streamKubernetesObjects(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterNamespaceKubernetesObjectsInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObjects);

  //find list of pods in a kube-cluster on the specified filters
  rpc findPods(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.FindKubernetesClusterPodsInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pods);

  //get details of a pod
  rpc getPod(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterKubernetesObject)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pod);

  //stream logs of all kubernetes pods running in a kube-cluster on the specified filters
  rpc streamPodLogs(cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterPodLogsInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogLine);
}
