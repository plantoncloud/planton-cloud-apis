syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";

// wrapper for organization credential id
message KubernetesClusterCredentialId {
  string value = 1 [
    (buf.validate.field).required = true
  ];
}

// kubernetes-cluster kubernetes object
message KubernetesClusterKubernetesObject {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //kubernetes object
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject kubernetes_object = 2;
}

// input for rpc to find all api-resources created for an API Resource on Planton Cloud.
message StreamKubernetesClusterNamespaceKubernetesObjectsInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //kubernetes namespace
  string namespace = 2;
}

// input for rpc to update a kubernetes object in a kube-cluster
message UpdateKubernetesClusterKubernetesObjectInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //kubernetes object
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject kubernetes_object = 2;
  // base64 encoded of the updated kubernetes object yaml
  string updated_object_yaml_base64 = 3;
}

// input for rpc to find list of pods on kube-cluster
message FindKubernetesClusterPodsInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //kubernetes namespace
  string namespace = 2;
  //details of the parent kubernetes object(pod-manager) to be used to filter pods list
  //if a parent is not specified, pods of all pod-managers will be included in the response.
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject pod_manager = 3;
}

// input for rpc to stream logs of a pod on kube-cluster based on specified filters
message StreamKubernetesClusterPodLogsInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //options to configure pod log stream
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions options = 2;
}

// input for rpc to exec into a kube-cluster pod container
// input for rpc to exec into a pod container that belongs to a planton-cloud api-resource
message ExecIntoKubernetesClusterPodContainerInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  // options required for performing exec into a pod container
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodContainerExecOptions options = 2;
}

//id of the stream created for the shell session
message BrowserExecIntoPodContainerResponse {
  //pod container exec shell session id
  string shell_session_id = 1;
  //shell command execution response
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.ExecIntoPodContainerResponse command_response = 2;
}

// input for rpc to execute next command for a shell session in a pod container from a browser
message BrowserExecuteNextCommandInPodContainerInput {
  //planton-cloud api-resource
  cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId api_resource = 1;
  //pod container exec shell session id
  string shell_session_id = 2;
  // command to execute inside an existing shell session of a pod container
  string command = 3;
}
