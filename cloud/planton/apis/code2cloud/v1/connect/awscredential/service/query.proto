syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.connect.awscredential.service;

import "cloud/planton/apis/code2cloud/v1/connect/awscredential/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/connect/awscredential/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/organization/model/io.proto";

// aws-credential query controller
service AwsCredentialQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = aws_credential;
  //look up a aws-credential by id
  rpc getById(cloud.planton.apis.code2cloud.v1.connect.awscredential.model.AwsCredentialId) returns (cloud.planton.apis.code2cloud.v1.connect.awscredential.model.AwsCredential) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = aws_credential;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view aws-credential";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }

  //find aws-credentials by organization id.
  //the response should only include aws-credentials in a organization that the authenticated user account has viewer access to.
  //authorization is handled internally by running get authorized aws-credential ids
  rpc findByOrgId(cloud.planton.apis.resourcemanager.v1.organization.model.OrgId) returns (cloud.planton.apis.code2cloud.v1.connect.awscredential.model.AwsCredentialList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list aws-credentials by organization id";
  }
}
