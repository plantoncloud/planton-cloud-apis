syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.aws.route53zone.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";
import "cloud/planton/apis/commons/networking/enums/dnsrecordtype/dns_record_type.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/state.proto";
import "cloud/planton/apis/resourcemanager/v1/environment/model/state.proto";

//route53-zone
message Route53Zone {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = route53_zone;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.env_id";

  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1;

  //resource kind
  string kind = 2;

  // metadata for the resource
  // Name is a valid, unique DNS domain name within the Platon Cloud.
  // Id value is automatically computed in the format 'dns-<org_id>-<normalized-domain-name>',
  // and its uniqueness is guaranteed by the backend.
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name should be any valid DNS Domain Name",
      // https://regex101.com/library/SEg6KL
      expression: "this.name.matches('^(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 65 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 65"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //route53-zone spec
  Route53ZoneSpec spec = 4;

  //route53-zone status
  Route53ZoneStatus status = 5;
}

// Specification for the Route53 Zone
message Route53ZoneSpec {
  //environment-info
  cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 99;

  //stack-job settings
  cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings stack_job_settings = 98;

  //aws-credential-id to be used for setting up aws-provider in stack-job
  string aws_credential_id = 97;

  // The DNS records that are added to the Zone.
  repeated Route53ZoneDnsRecord records = 1;
}

// Status for the Route53 Zone
message Route53ZoneStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  //stack-outputs
  //  stack outputs
  Route53ZoneStatusStackOutputs stack_outputs = 1;
}

// Status for the Route53 Zone
message Route53ZoneStatusStackOutputs {
  // The list of nameservers for the Managed Zone created for the DNS Domain.
  repeated string nameservers = 1;
}

// route53-zone dns-record
message Route53ZoneDnsRecord {
  string id = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];
  // dns record type.
  cloud.planton.apis.commons.networking.enums.dnsrecordtype.DnsRecordType record_type = 2 [
    (buf.validate.field).required = true
  ];

  // name of the route53-zone ex: example.com or dev.example.com.
  // this value should always end with a dot.
  string name = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "name",
      message: "Name should be any valid DNS Domain Name",
      expression: "this.matches('^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')"
    }
  ];

  // values for the route53-zone record.
  // if the route53_zone_record_type is cname then each value in the list should end with a dot.
  repeated string values = 4;

  // ttl for the domain record in seconds.
  int32 ttl_seconds = 5 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.int32_default) = 60
  ];
}
