syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.microserviceinstance.model;

import "buf/validate/validate.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/state.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/enums/kubernetesworkloadingresstype/kubernetes_workload_ingress_type.proto";
import "cloud/planton/apis/code2cloud/v1/kubecluster/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";
import "cloud/planton/apis/integration/v1/kubernetes/apiresources/enums/podmanager/pod_manager.proto";

//microservice-instance
message MicroserviceInstance {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.resource_kind) = microservice_instance;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.is_runnable) = true;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).resource_kind = environment;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemessageoptions.owner).id_field_path = "spec.environment_info.environment_id";

  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_prefix) = "msi";
  //id format "msi-<environment-id>-<microservice-instance-name>"
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  //resource api-version
  string api_version = 1 [
    (buf.validate.field).string.const = "code2cloud.planton.cloud/v1"
  ];

  //resource kind
  string kind = 2 [
    (buf.validate.field).string.const = "MicroserviceInstance"
  ];

  //resource metadata
  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.name.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Must start with a lowercase letter",
      // https://regex101.com/r/qpK7XF/1
      expression: "this.name.matches('^[a-z].*$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.name.matches('[^-]$')"
    },
    (buf.validate.field).cel = {
      id: "metadata.name",
      message: "Name must be between 1 and 30 characters long",
      expression: "size(this.name) > 0 && size(this.name) <= 30"
    },
    (buf.validate.field).cel = {
      id: "metadata.version.message",
      message: "Version message is mandatory and cannot be empty",
      expression: "has(this.version.message)"
    }
  ];

  //spec
  MicroserviceInstanceSpec spec = 4;

  //status
  MicroserviceInstanceStatus status = 5;
}

//microservice-instance spec
message MicroserviceInstanceSpec {
  //resource parent
  cloud.planton.apis.code2cloud.v1.environment.model.ApiResourceEnvironmentInfo environment_info = 1;

  //version of the microservice being deployed. this is usually either "main" which is the default git branch name or
  //review-<id> where id is the merge request number
  string version = 2 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_immutable) = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 20,
    (buf.validate.field).cel = {
      id: "spec.version.chars",
      message: "Only lowercase letters, numbers, and hyphens are allowed",
      // https://regex101.com/r/NKTohE/1
      expression: "this.matches('^[a-z0-9-]+$')"
    },
    (buf.validate.field).cel = {
      id: "spec.version.no-hyphen-ending",
      message: "Must not end with a hyphen",
      // https://regex101.com/r/reQjcB/1
      expression: "this.matches('[^-]$')"
    }
  ];

  //microservice runtime configuration for kubernetes provider
  MicroserviceInstanceSpecKubernetes kubernetes = 3;

  //pipeline configuration required to update the microservice instance from ci/cd pipelines
  MicroserviceInstanceSpecPipeline pipeline = 4;
}

//microservice-instance kubernetes spec
message MicroserviceInstanceSpecKubernetes {
  //(required) type of the pod manager to use for the microservice deployment.
  //default is set to "deployment".
  cloud.planton.apis.integration.v1.kubernetes.apiresources.enums.podmanager.PodManager pod_manager = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];

  //container spec
  MicroserviceInstanceSpecKubernetesContainer container = 2 [
    (buf.validate.field).required = true
  ];

  //microservice instance ingress configuration on kubernetes
  MicroserviceInstanceSpecKubernetesIngress ingress = 3;

  //microservice instance availability configuration on kubernetes
  MicroserviceInstanceSpecKubernetesAvailability availability = 4;

  //flag to toggle workload identity for the microservice
  //default is set to "false".
  bool is_workload_identity_enabled = 5;
}

//microservice-instance-spec kubernetes container spec
message MicroserviceInstanceSpecKubernetesContainer {
  //microservice app container
  MicroserviceInstanceSpecKubernetesAppContainer app = 1 [
    (buf.validate.field).required = true
  ];

  //sidecar containers
  repeated cloud.planton.apis.code2cloud.v1.kubecluster.model.Container sidecars = 2;
}

//microservice-instance-spec kubernetes app container spec
message MicroserviceInstanceSpecKubernetesAppContainer {
  //container image. this value is computed during creation but is allowed for updates.
  //value is computed by combining the docker-repo of the artifact-store configured for environment and code project path.
  //
  //pull-secret-name: name of the image pull secret to be configured in kubernetes Deployment resource.
  //computed by looking up the container_image_artifact_store_id from the environment to which the
  //microservice deployment is created.
  cloud.planton.apis.code2cloud.v1.kubecluster.model.ContainerImage image = 1;

  //container resources
  cloud.planton.apis.code2cloud.v1.kubecluster.model.ContainerResources resources = 2;

  //microservice-instance environment variables and secrets.
  MicroserviceInstanceSpecKubernetesAppContainerEnv env = 3;

  //list of ports to be configured for the app container
  repeated MicroserviceInstanceSpecKubernetesContainerPort ports = 4;

  //list of container volume mounts
  repeated MicroserviceInstanceSpecKubernetesContainerVolumeMount volume_mounts = 5;
}

//microservice-instance-spec kubernetes app container environment variables spec
message MicroserviceInstanceSpecKubernetesAppContainerEnv {
  //map of variable
  map<string, string> variables = 1;
  //map of secrets
  map<string, string> secrets = 2;
}

//microservice-instance-spec kubernetes container port spec
message MicroserviceInstanceSpecKubernetesContainerPort {
  //name for the port ex: http, grpc
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "spec.kubernetes.container.app.ports.name",
      message: "name for ports must only contain lowercase alphanumeric characters and -. Port names must also start and end with an alphanumeric character. For example, the names 123-abc and web are valid, but 123_abc and -web are not.",
      // https://regex101.com/r/dugcdl/1
      expression: "this.matches('^[a-z0-9][a-z0-9-]*[a-z0-9]$')"
    }
  ];
  //container port
  int32 container_port = 2 [
    (buf.validate.field).required = true
  ];

  string network_protocol = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "spec.kubernetes.container.app.ports.network_protocol",
      message: 'the network protocol must be one of "SCTP", "TCP" and "UDP"',
      expression: 'this in ["SCTP", "TCP", "UDP"]',
    }
  ];
  //(required) application protocol for the microservice.
  //the default is set to "http"
  //https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol.
  //this field is used for setting up the name of the service port in kubernetes.
  //this attribute is used during microservice deployment.
  //this attribute is only relevant for deployment and stateful-set pod_managers.
  string app_protocol = 4 [
    (buf.validate.field).required = true
  ];
  //kubernetes service port
  int32 service_port = 5 [
    (buf.validate.field).required = true
  ];
}

//microservice-instance-spec kubernetes container volume mount spec
message MicroserviceInstanceSpecKubernetesContainerVolumeMount {
  // name for the volume mount ex: solr-collection
  string name = 1;
  // path to mount the volume inside the container
  string mount_path = 2;
  // size of the volume mount ex: 1Gi
  string size = 3;
}

//microservice-instance-spec kubernetes ingress spec
message MicroserviceInstanceSpecKubernetesIngress {
  option (buf.validate.message).cel = {
    id: "ingres.enabled.endpoint_domain_name.mandatory",
    expression: "this.is_enabled && size(this.endpoint_domain_name) == 0"
        "? 'endpoint domain name is mandatory to enable ingress'"
        ": ''"
  };
  option (buf.validate.message).cel = {
    id: "ingres.enabled.ingress_type.mandatory",
    expression: "this.is_enabled && this.ingress_type == 0"
        "? 'ingress type is mandatory to enable ingress'"
        ": ''"
  };
  //toggle to control ingress
  bool is_enabled = 1;
  //ingress type
  cloud.planton.apis.code2cloud.v1.kubecluster.enums.kubernetesworkloadingresstype.KubernetesWorkloadIngressType ingress_type = 2;
  //selected endpoint-domain from the environment endpoint-domains to configure dns
  string endpoint_domain_name = 3;
  //port on which the ingress requests are sent by the clients
  int32 listener_ingress_port = 4;
  //kubernetes service port to which the incoming ingress requests are forwarded
  int32 forward_service_port = 5;
}

//microservice-instance-spec kubernetes availability spec
message MicroserviceInstanceSpecKubernetesAvailability {
  //minimum number of pod replicas
  int32 min_replicas = 1;
  //horizontal pod autoscaling configuration
  MicroserviceInstanceSpecKubernetesAvailabilityHorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
}

//microservice-instance-spec kubernetes availability spec horizontal pod autoscaling
message MicroserviceInstanceSpecKubernetesAvailabilityHorizontalPodAutoscaling {
  //flag to toggle horizontal pod autoscaling
  bool is_enabled = 1;
  //percentage for target cpu utilization to trigger auto scaling. ex: 60.0
  double target_cpu_utilization_percent = 2;
  //target memory utilization to trigger auto scaling. ex: 1Gi
  string target_memory_utilization = 3;
}

//microservice-instance-spec pipeline configuration
message MicroserviceInstanceSpecPipeline {
  //flag to toggle pipelines for microservice-instance.
  //default is "false".
  bool is_enabled = 1;

  //id of the code project.
  //allowed values are the list of code projects in the same product.
  string code_project_id = 2 [
    (buf.validate.field).required = true
  ];

  //git branch configured to deploy new versions of microservice-instances
  string git_branch = 3 [
    (buf.validate.field).required = true
  ];

  //toggle to enable or disable review environments to control the creation of ephemeral
  //review environments for merge requests.
  //default is "false".
  bool is_review_deployments_enabled = 4;

  //toggle for manual gate on ci/cd deployment jobs
  bool is_manual_gate_required = 5;

  //environment url to access the microservice deployed from the deployment job
  string deployment_environment_url = 6 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_computed) = true
  ];
}

//microservice-instance-status
message MicroserviceInstanceStatus {
  // resource lifecycle
  cloud.planton.apis.commons.apiresource.model.RunnableApiResourceLifecycle lifecycle = 99;

  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAudit audit = 98;

  // id of the stack-job
  string stack_job_id = 97;

  //microservice-instance kubernetes status
  MicroserviceInstanceStatusKubernetesStatus kubernetes = 1;

  //id of the service account created for the workload identity
  string workload_identity_account_id = 2;
}

//microservice-instance-status  kubernetes status
message MicroserviceInstanceStatusKubernetesStatus {
  //kubernetes namespace in which microservice-instance is created.
  string namespace = 1;

  //kubernetes service name for microservice-instance.
  //ex: main-microservice-instance
  //in the above example, "main" is the name of the microservice-instance
  string service = 2;

  //command to setup port-forwarding to open microservice-instance from developers laptop.
  //this might come handy when microservice-instance ingress is disabled for security reasons.
  //this is rendered by combining microservice_instance_kubernetes_service and kubernetes_namespace
  //ex: kubectl port-forward svc/microservice_instance_kubernetes_service -n kubernetes_namespace 8080:8080
  //running the command from this attribute makes it possible to access microservice-instance using http://localhost:8080
  string port_forward_command = 3;

  //kubernetes endpoint to connect to microservice-instance from the web browser.
  //ex: main-microservice-instance.namespace.svc.instance.local:8080
  string kube_endpoint = 4;

  //public endpoint to open microservice-instance from clients outside kubernetes.
  //ex: https://ms-planton-pcs-dev-account.dev.planton.live:8080
  repeated string ingress_endpoints = 5;
}
