syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.server.service;

import "cloud/planton/apis/code2cloud/v1/codeserver/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/codeserver/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/iam/v1/authz/extensions/extensions.proto";

//code-server command controller
service CodeServerCommandController {
  //create code-server
  rpc create(cloud.planton.apis.code2cloud.v1.server.model.CodeServer)
      returns (cloud.planton.apis.code2cloud.v1.server.model.CodeServer) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = product;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = code_server_create;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "spec.product_id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to create code server";
  }

  //update an existing code-server
  rpc update(cloud.planton.apis.code2cloud.v1.server.model.CodeServer)
      returns (cloud.planton.apis.code2cloud.v1.server.model.CodeServer) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = code_server;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = code_server_update;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to update code server";
  }

  //delete an existing code-server
  rpc delete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.server.model.CodeServer) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = code_server;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = code_server_delete;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to delete code server";
  }

  //restore a deleted code server
  rpc restore(cloud.planton.apis.code2cloud.v1.server.model.CodeServer)
      returns (cloud.planton.apis.code2cloud.v1.server.model.CodeServer) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = code_server;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = code_server_restore;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to restore code server";
  }

  //synchronize code projects from the server.
  rpc synchronizeCodeProjects(cloud.planton.apis.code2cloud.v1.server.model.CodeServerId)
      returns (cloud.planton.apis.code2cloud.v1.server.model.CodeServer) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = code_server;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = code_server_synchronize;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to synchronize code server";
  }

  //attach a machine account to a code server by adding client-id and client-secret as
  //variables on organization on github or group on gitlab etc
  rpc attachMachineAccountByCodeServerId(cloud.planton.apis.code2cloud.v1.server.model.AttachMachineAccountByCodeServerIdCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.server.model.CodeServer) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = identity_account;
    //since this operation requires looking up client-secret, update permission is required.
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_account_update;
    //field-path can-not be added as the permission should be evaluated on the id of the machine-account which
    // needs to be looked up using the provided machine-account email.
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to attach machine account";
  }
}
