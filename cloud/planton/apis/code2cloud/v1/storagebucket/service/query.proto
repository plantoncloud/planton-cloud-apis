syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.storagebucket.service;

import "cloud/planton/apis/code2cloud/v1/storagebucket/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/storagebucket/model/state.proto";
import "cloud/planton/apis/code2cloud/v1/environment/model/io.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/resourcemanager/v1/product/model/io.proto";

//storage-bucket query controller
service StorageBucketQueryController {
  //look up a storage-bucket using storage-bucket id
  rpc getById(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucketId)
      returns(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view storage-bucket";
  }
}
