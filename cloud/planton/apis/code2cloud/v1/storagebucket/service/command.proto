syntax = "proto3";

package cloud.planton.apis.code2cloud.v1.storagebucket.service;

import "cloud/planton/apis/code2cloud/v1/storagebucket/model/io.proto";
import "cloud/planton/apis/code2cloud/v1/storagebucket/model/state.proto";
import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/iac/v1/stackjob/model/io.proto";

//storage-bucket command controller
service StorageBucketCommandController {
  //preview create storage-bucket
  rpc previewCreate(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview create storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //create storage-bucket
  rpc create(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.environment_info.environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = created;
  }
  //preview update an existing storage-bucket
  rpc previewUpdate(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview update storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //update an existing storage-bucket
  rpc update(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to update storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = updated;
  }
  //preview delete an existing storage-bucket
  rpc previewDelete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview delete storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_destroy_preview_requested;
  }
  //delete an existing storage-bucket
  rpc delete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to delete storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = deleted;
  }
  //preview restore a deleted storage-bucket
  rpc previewRestore(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview restore storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //restore a deleted storage-bucket
  rpc restore(cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to restore storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = restored;
  }
  //create-stack-job for storage-bucket
  rpc createStackJob(cloud.planton.apis.iac.v1.stackjob.model.CreateStackJobCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create stack-job for storage-bucket";
  }
  //preview refresh a storage-bucket that was previously created
  rpc previewRefresh(cloud.planton.apis.commons.apiresource.model.ApiResourceRefreshCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to preview refresh storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = stack_job_apply_preview_requested;
  }
  //refresh a storage-bucket that was previously created
  rpc refresh(cloud.planton.apis.commons.apiresource.model.ApiResourceRefreshCommandInput)
      returns (cloud.planton.apis.code2cloud.v1.storagebucket.model.StorageBucket) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = storage_bucket;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = storage_bucket_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to refresh storage-bucket";
    option (cloud.planton.apis.commons.rpc.method.options.event_type) = refreshed;
  }
}
