syntax = "proto3";

package cloud.planton.apis.commons.apiresource.testing.field.input;

import "buf/validate/validate.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions/api_resource_field_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions/api_resource_message_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions/api_resource_metadata_message_options.proto";

// A message with a string field that must match a regex, and a string field without regex.
message RegexFieldsTest {
  string regex_string_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_regex) = "^[a-z0-9]{1,9}$",
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.field_constraints_description) = "only lowercase letters (a-z) and digits (0-9). length must be between 1 and 9 characters."
  ];
  string no_regex_string_field = 2;
}

// A message with a string field that must match a regex, and a string field without regex.
message RegexFieldsProtoValidateTest {
  string regex_string_field = 1 [
    (buf.validate.field).cel = {
      id: "regex_string_field",
      message: "only lowercase letters (a-z) and digits (0-9). length must be between 1 and 9 characters.",
      expression: "this.matches('^[a-z0-9]{1,9}$')"
    }
  ];
  string no_regex_string_field = 2;
}

// A message with a string field that must match a regex, and a string field without regex.
message RegexSplitFieldsProtoValidateTest {
  string regex_string_field = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 9,
    (buf.validate.field).cel = {
      id: "regex_string_field",
      message: "only lowercase letters (a-z) and digits (0-9)",
      expression: "this.matches('^[a-z0-9]+$')"
    }
  ];
  string no_regex_string_field = 2;
}

// A message with a string field that must match a regex, and a string field without regex.
message RegexSplitWithNotRequiredFieldsProtoValidateTest {
  string regex_string_field = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 9,
    (buf.validate.field).cel = {
      id: "regex_string_field",
      message: "only lowercase letters (a-z) and digits (0-9)",
      expression: "this.matches('^[a-z0-9]+$')"
    }
  ];
  string no_regex_string_field = 2;
}


// A message with a string field that must match a regex, with no error message specified.
message RegexFieldsTestNoErrorMessage {
  string regex_string_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_regex) = "^[a-z0-9]{1,9}$"
  ];
}

// A message with a nested message that contains a string field that must match a regex.
message NestedRegexFieldsTest {
  RegexFieldsTest nested_regex_field = 1;
}

// A message with a required field and a non-required field.
message RequiredFieldsTest {
  string required_string_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
  string not_required_string_field = 2;
}

// A message with a required string field that must match a regex.
message RequiredFieldsWithRegexTest {
  string regex_required_string_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_regex) = "^[a-z0-9]{1,9}$",
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.field_constraints_description) = "only lowercase letters (a-z) and digits (0-9). length must be between 1 and 9 characters."
  ];
  string no_regex_required_string_field = 2 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
  string no_rules_string = 3;
}

// A message with a required field that must be a specific nested message.
message RequiredNestedMessageTest {
  RequiredFieldsTest nested_required_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
}

// A message with string fields having min and max length constraints.
message StringLengthFieldsTest {
  string short_string_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_min_length) = 5,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_max_length) = 10,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.field_constraints_description) = "String length must be between 5 and 10 characters."
  ];
  string long_string_field = 2 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_max_length) = 50,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.field_constraints_description) = "String length must be no more than 50 characters."
  ];
}

// A message with nested message containing string fields having min and max length constraints.
message NestedStringLengthFieldsTest {
  StringLengthFieldsTest nested_string_length_field = 1;
}

// A message with enum field.
message EnumFieldTest {
  enum SampleEnum {
    unspecified = 0;
    VALUE_1 = 1;
    VALUE_2 = 2;
  }
  SampleEnum enum_field = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.field_constraints_description) = "Enum value must be specified."
  ];
}

// A message with deeply nested messages.
message DeeplyNestedFieldTest {
  NestedRegexFieldsTest nested_field_1 = 1;
  NestedStringLengthFieldsTest nested_field_2 = 2 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
  EnumFieldTest nested_enum_field = 3;
}

// A message for testing multiple errors in the nested structure.
message MultipleErrorsTest {
  string field_1 = 1 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true,
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.string_regex) = "^[A-Z]{5}$",
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.field_constraints_description) = "Field must contain exactly 5 uppercase letters."
  ];
  DeeplyNestedFieldTest field_2 = 2 [
    (cloud.planton.apis.commons.apiresource.options.apiresourcefieldoptions.is_required) = true
  ];
}

message MetadataIdRequiredTest {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_required) = true;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_constraints_description) = "Id must be present.";

  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 1;
}

// Test case 2: Message with metadata where id has regex constraint
message MetadataIdRegexTest {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_required) = true;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_regex) = "^[a-z0-9]+(-[a-z0-9]+)*$";
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_constraints_description) = "At least 1 character. Lowercase letters, numbers, and hyphens. Must not start or end with hyphen.";

  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 1;
}

// Test case 3: Message with metadata where id has min and max length constraints
message MetadataIdLengthTest {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_required) = true;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_min_length) = 3;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_max_length) = 10;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.id_constraints_description) = "Id must be between 3 to 10 characters long.";

  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 1;
}

// Test case 4: Message with metadata where is_id_computed is true (validations on id should be skipped)
message MetadataIdComputedTest {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.is_id_computed) = true;

  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 1;
}

// Test case 5: Message with metadata where name has regex and length constraints
message MetadataNameConstraintsTest {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.name_regex) = "^[a-z0-9]+(-[a-z0-9]+)*$";
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.name_min_length) = 2;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.name_max_length) = 20;
  option (cloud.planton.apis.commons.apiresource.options.apiresourcemetadatamessageoptions.name_constraints_description) = "Name must be between 2 to 20 alphabetic characters.";

  cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata metadata = 1;
}
