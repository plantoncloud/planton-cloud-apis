syntax = "proto3";

package cloud.planton.apis.commons.apiresource.model;

import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/enums/apiresourcelookupfilter/api_resource_lookup_filter.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";

// A message defining the ownership of a resource.
message ApiResourceOwnerInfo {
  // The type of the owner, defined in the ApiResourceKind enum.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 1;
  // The field path of the owner id in a api-resource spec.
  string id_field_path = 2;
}

// wrapper for api-resource-id
message ApiResourceId {
  string value = 1;
}

// input for rpc to delete or previewing delete for any api resource
message ApiResourceDeleteCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for deleting the resource. This is used for audit purposes.
  // For example, "Deleting as it is no longer needed".
  string version_message = 2;
}

// input for rpc to pause or previewing pause for any api resource
message ApiResourcePauseCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for pausing the resource. This is used for audit purposes.
  // For example, "pause as it is temporarily not needed".
  string version_message = 2;
}

// input for rpc to un pause or previewing un pause for any api resource
message ApiResourceUnPauseCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for un pausing the resource. This is used for audit purposes.
  // For example, "un pause as the resource is now required again".
  string version_message = 2;
}

// input for rpc to refresh or previewing refresh for any api resource
message ApiResourceRefreshCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for refreshing the resource. This is used for audit purposes.
  // For example, "refreshing the state to update computed fields".
  string version_message = 2;
}

// Record is a message type that represents a single record object in list view.
// Record object has all fields that are required to show in list view
// It contains identifying and contextual information about the resource,
// such as its id, name, type, and the associated company, product, and
// product environment identifiers.
message ApiResourceRecord {
  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAuditInfo spec_audit = 98;
  // Unique identifier for the resource.
  // example for resource in planton cloud could be postgres_cluster/ kafka_cluster/ microservice_instance etc.;
  string id = 1;
  // A human-readable name for the resource.
  string name = 2;
  // The type of the resource.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind kind = 3;
  // Unique identifier for the company associated with this resource.
  string company_id = 4;
  // Unique identifier for the product associated with this resource.
  string product_id = 5;
  // Unique identifier for the product environment
  // (e.g. 'rbitex-rbx-prod','rbitex-rbx-dev', etc.) associated with this resource.
  string environment_id = 6;
  // flag to indicate if the resource is deleted.
  bool is_active = 7;
  // flag to indicate if the resource is paused
  bool is_paused = 8;
}

// ResourceList is a message type that represents a paginated list of Record objects.
// It contains information about the total number of pages in the list and an array of Record entries.
message ApiResourceRecordList {
  // The total number of pages in the paginated list of Record objects.
  int32 total_pages = 1;
  // An array of Record objects contained in the current page of the paginated list.
  repeated ApiResourceRecord entries = 2;
}

// The SearchByApiResourceKindInput message represents the input parameters required for
// executing a search operation based on a specified resource type within a given
// company's product.
message GetByApiResourceKindInput {
  // This is the unique identifier for the company
  // associated with the get query. The get operation will only consider resources
  // associated with this company.
  string company_id = 1;
  // This is the unique identifier for the product
  // associated with the get query. The get operation will only consider resources
  // that are linked with this product.
  string product_id = 2;
  // This field indicates the type of resource that the search operation will be focusing on.
  // The possible resource types are defined by the ApiResourceKind enum.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 3;
  // This field contains the pagination information used for retrieving specific paginated
  // data. It enables the client to specify the number of records per page and the page number.
  cloud.planton.apis.commons.rpc.PageInfo page_info = 4;
  //  this field is an enumeration used to dictate the active status of the resources
  //  included in the search results.
  cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter lookup_filter = 5;
}

// ResourceCount encapsulates count of a specific resource type within an organization.
// It includes the resource's type and name for clear identification and the total count of such resources.
// This message is useful in contexts where detailed inventory, asset management, or resource planning is required,
// allowing for precise tracking and reporting of various resources.
message ApiResourceCount {
  // resource_kind categorizes the resource, aiding in grouping and differentiating between various kinds
  // of resources (e.g., postgres_cluster, redis_cluster, kube_cluster etc.;).
  string resource_kind = 1;

  // resource_name provides the specific name or identifier of the resource, offering a more user readable
  // text that complements the resource_kind field.
  string resource_name = 2;

  // count represents the total number of resources of the specified type and name, enabling quantitative
  // assessments and management decisions based on the available resources.
  int32 count = 3;
}

// ResourcesCount aggregates multiple ResourceCount entries, providing a comprehensive overview
// of resource counts across different types and names within a specific context, such as a company.
// Each entry in the 'entries' field details the type, name, and count of a distinct resource.
message ApiResourcesCount {
  // entries is a collection of ResourceCount messages, each of which details the type, name,
  // and count of an individual resource. This repeated field allows for representing a diverse
  // array of resources within a single, structured response.
  repeated ApiResourceCount entries = 1;
}

// GetResourceCountByCompanyIdInput is used for requests aimed at obtaining the number of resources
// (such as postgres clusters, redis clusters, kubernetes clusters licenses, etc.) associated with a given company.
// The focus on company identification via the company_id field enables targeted queries for resource
// counts within the specified company's context, supporting operations like auditing, resource management,
// and planning.
message GetResourceCountByCompanyIdInput {
  // company_id uniquely identifies a company within the system. The field is formatted as a string.
  string company_id = 1;
}
