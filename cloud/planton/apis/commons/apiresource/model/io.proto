syntax = "proto3";

package cloud.planton.apis.commons.apiresource.model;

import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/apiresource/enums/apiresourcelookupfilter/api_resource_lookup_filter.proto";
import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";

// wrapper for api-resource-id
message ApiResourceId {
  string value = 1;
}

// input for rpc to delete or previewing delete for any api resource
message ApiResourceDeleteCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for deleting the resource. This is used for audit purposes.
  // For example, "Deleting as it is no longer needed".
  string version_message = 2;
}

// input for rpc to pause or previewing pause for any api resource
message ApiResourcePauseCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for pausing the resource. This is used for audit purposes.
  // For example, "pause as it is temporarily not needed".
  string version_message = 2;
}

// input for rpc to un pause or previewing un pause for any api resource
message ApiResourceUnPauseCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for un pausing the resource. This is used for audit purposes.
  // For example, "un pause as the resource is now required again".
  string version_message = 2;
}

// input for rpc to refresh or previewing refresh for any api resource
message ApiResourceRefreshCommandInput {
  //id of the resource.
  string resource_id = 1;
  // A descriptive message explaining the reason for refreshing the resource. This is used for audit purposes.
  // For example, "refreshing the state to update computed fields".
  string version_message = 2;
}

// Record is a message type that represents a single record object in list view.
// Record object has all fields that are required to show in list view
// It contains identifying and contextual information about the resource,
// such as its id, name, type, and the associated company, product, and
// product environment identifiers.
message ApiResourceRecord {
  // resource audit info
  cloud.planton.apis.commons.apiresource.model.ApiResourceAuditInfo spec_audit = 98;
  // Unique identifier for the resource.
  // example for resource in planton cloud could be postgres_cluster/ kafka_cluster/ microservice_instance etc.;
  string id = 1;
  // A human-readable name for the resource.
  string name = 2;
  // The type of the resource.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind kind = 3;
  // Unique identifier for the company associated with this resource.
  string company_id = 4;
  // Unique identifier for the product associated with this resource.
  string product_id = 5;
  // Unique identifier for the product environment
  // (e.g. 'rbitex-rbx-prod','rbitex-rbx-dev', etc.) associated with this resource.
  string environment_id = 6;
  // flag to indicate if the resource is deleted.
  bool is_active = 7;
  // flag to indicate if the resource is paused
  bool is_paused = 8;
}

// ResourceList is a message type that represents a paginated list of Record objects.
// It contains information about the total number of pages in the list and an array of Record entries.
message ApiResourceRecordList {
  // The total number of pages in the paginated list of Record objects.
  int32 total_pages = 1;
  // An array of Record objects contained in the current page of the paginated list.
  repeated ApiResourceRecord entries = 2;
}

// The GetByApiResourceKindInput message represents the input parameters required for
// executing a search operation based on a specified resource type within a given
// company's product.
message GetByApiResourceKindInput {
  // This is the unique identifier for the company
  // associated with the get query. The get operation will only consider resources
  // associated with this company.
  string company_id = 1;
  // This is the unique identifier for the product
  // associated with the get query. The get operation will only consider resources
  // that are linked with this product.
  string product_id = 2;
  // This field indicates the type of resource that the search operation will be focusing on.
  // The possible resource types are defined by the ApiResourceKind enum.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 3;
  // This field contains the pagination information used for retrieving specific paginated
  // data. It enables the client to specify the number of records per page and the page number.
  cloud.planton.apis.commons.rpc.PageInfo page_info = 4;
  //  this field is an enumeration used to dictate the active status of the resources
  //  included in the search results.
  cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter lookup_filter = 5;
}

// input required for generating a new java package for a new planton-cloud api-resource
message GenerateNewApiResourceJavaPackageCliCommandInput {
  //a list of source and destination directories
  //source directory to be used to get the files to work upon.
  //destination directory in which modified files will be finally located.
  repeated SourceDestinationDirectoryPair directories = 1;
  // replacements to be made to generate the package for the new api-resource
  // these replacements will be applied for every file inside each directory and its
  // sub-directories specified in the "directories".
  GenerateNewApiResourceJavaPackageCliCommandInputOrderedReplacements replacements = 2;
}

// replacement inputs for file & directory names along with file content replacements.
message GenerateNewApiResourceJavaPackageCliCommandInputOrderedReplacements {
  // a map of strings used for renaming files and directories.
  // all the keys will be matched in the source files/directories and replaced with the corresponding values.
  // usage of a repeated object instead of a map is an intentional design choice as the order of replacements is important.
  // maps by default are sorted by key name and that is not desirable.
  repeated FindReplaceStringPair file_and_dir_name = 1;
  // a map of strings used for replacing file contents.
  // all the keys will be matched in the source package and replaced with the corresponding values.
  // usage of a repeated object instead of a map is an intentional design choice as the order of replacements is important.
  // maps by default are sorted by key name and that is not desirable.
  repeated FindReplaceStringPair file_content = 2;
}

// string key value pair to find and replace for file names and content inside files
message FindReplaceStringPair {
  //string to find
  string find_string = 1;
  //string to replace
  string replace_string = 2;
}

// source and destination directory pair
message SourceDestinationDirectoryPair {
  //source directory path
  string source = 1;
  //destination directory path
  string destination = 2;
}

// The ListByResourceKindWithoutContext message represents the input parameters required for
// executing a search operation based on a specified resource type
message ListByResourceKindWithoutContext {
  // This field indicates the type of resource that the search operation will be focusing on.
  // The possible resource types are defined by the ApiResourceKind enum.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 1;
  // This field contains the pagination information used for retrieving specific paginated
  // data. It enables the client to specify the number of records per page and the page number.
  cloud.planton.apis.commons.rpc.PageInfo page_info = 2;
}
