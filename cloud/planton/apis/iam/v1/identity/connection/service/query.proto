syntax = "proto3";

package cloud.planton.apis.iam.v1.identity.connection.service;

import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/authz/extensions/extensions.proto";
import "cloud/planton/apis/iam/v1/identity/connection/model/state.proto";
import "cloud/planton/apis/iam/v1/identity/connection/model/io.proto";

// identity connection query controller
service IdentityConnectionQueryController {
  // lookup identity account by id.
  rpc getById(cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnectionId)
      returns (cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = identity_connection;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_connection_get;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to get identity connection";
  }
  // retrieve paginated list of all identity connections on planton cloud. this is intended for use on portal.
  rpc findByCompanyId(cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnectionCompanyId)
      returns (cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnections) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = identity_connection;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_connection_get;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to get identity connection";
  }
}
