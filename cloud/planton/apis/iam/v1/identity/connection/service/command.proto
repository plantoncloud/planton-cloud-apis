syntax = "proto3";

package cloud.planton.apis.iam.v1.identity.connection.service;

import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/iam/v1/authz/extensions/extensions.proto";
import "cloud/planton/apis/iam/v1/identity/connection/model/state.proto";

// identity connection command controller
service IdentityConnectionCommandController {
  // create new identity connection
  rpc create(cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection)
      returns (cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = company;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_connection_create;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to create identity connection";
  }
  // update an existing identity connection
  rpc update(cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection)
      returns (cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = identity_connection;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_connection_update;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to update identity connection";
  }
  // delete an existing identity connection
  rpc delete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteCommandInput)
      returns (cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = identity_connection;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_connection_delete;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to delete identity connection";
  }
  // restore an existing identity connection
  rpc restore(cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection)
      returns (cloud.planton.apis.iam.v1.identity.connection.model.IdentityConnection) {
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).resource_kind = identity_connection;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).permission = identity_connection_restore;
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.authz.extensions.authorization_config).error_msg = "unauthorized to restore identity connection";
  }
}
