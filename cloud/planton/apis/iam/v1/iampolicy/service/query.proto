syntax = "proto3";

package cloud.planton.apis.iam.v1.iampolicy.service;

import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/iam/v1/iampolicy/model/state.proto";
import "cloud/planton/apis/iam/v1/iampolicy/model/io.proto";

// iam policy query controller
service IamPolicyQueryController {
  // retrieve iam policies by type and id
  rpc getByApiResourceKindAndResourceId(cloud.planton.apis.iam.v1.iampolicy.model.GetIamPolicyByApiResourceKindAndResourceIdInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view iam policy";
  }

  // retrieve iam policies by type and id grouped by role
  rpc getByApiResourceKindAndResourceIdGroupByRole(cloud.planton.apis.iam.v1.iampolicy.model.GetIamPolicyByApiResourceKindAndResourceIdInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByRole) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view iam policy";
  }

  // retrieve iam policies by type and id grouped by role
  rpc getCompanyByApiResourceKindAndResourceIdGroupByRole(cloud.planton.apis.iam.v1.iampolicy.model.GetIamPolicyByApiResourceKindAndResourceIdInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByRole) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to view iam policy";
  }

  // checkAuthorization evaluates whether a specific action or access described by the AuthorizationInput
  // is authorized based on the configured IAM policies. This RPC is crucial for enforcing access controls
  // and ensuring that operations are performed by appropriately authorized users or services.
  //
  // The authorization decision is returned as an IsAuthorized message, indicating a binary outcome
  // (true if the action is authorized, false otherwise). Custom options are used to define the required
  // permission (iam_policy_get) and the error message to be returned if the authorization check fails
  // due to insufficient permissions.
  rpc checkAuthorization(cloud.planton.apis.iam.v1.iampolicy.model.AuthorizationInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IsAuthorized) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to check iam policy";
  }

  // listResources evaluates the provided AuthorizationInput to identify resources that the requesting
  // entity is authorized to access, based on IAM policies. This operation is essential for scenarios
  // where an entity needs to enumerate resources they have permissions to interact with.
  //
  // It returns an AuthorizedResourceIds message, which contains the IDs of all resources the entity is
  // authorized to access. Similar to checkAuthorization, this RPC utilizes custom options to specify the
  // required permission (iam_policy_get) and the error message for insufficient permissions scenarios.
  rpc listAuthorizedResourceIds(cloud.planton.apis.iam.v1.iampolicy.model.AuthorizationInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.AuthorizedResourceIds) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list authorized resources";
  }
}
