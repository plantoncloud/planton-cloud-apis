syntax = "proto3";

package cloud.planton.apis.iam.v1.iampolicy.service;

import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/iam/v1/iampolicy/model/io.proto";
import "cloud/planton/apis/iam/v1/iampolicy/model/state.proto";

// iam policy command controller
service IamPolicyCommandController {
  // add iam policies to a resource
  rpc add(cloud.planton.apis.iam.v1.iampolicy.model.AddIamPolicyInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to add iam policy";
  }
  // remove list of iam policies of a principal and resource
  rpc removeMultiple(cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPoliciesInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to remove iam policy";
  }

  rpc update(cloud.planton.apis.iam.v1.iampolicy.model.UpdateIamPolicyInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByPrincipal) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to update iam policy";
  }

  // add iam policies to a resource
  rpc addOrganization(cloud.planton.apis.iam.v1.iampolicy.model.AddIamPolicyInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to add iam policy";
  }

  // remove list of iam policies of a principal and resource
  rpc removeOrganizationMultiple(cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPoliciesInput)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to remove iam policy";
  }

  // add an owner for a resource.
  // this rpc is used by planton-cloud platform services when ever a new api resource is newly created.
  // a tuple is created on fga and the same tuple along with any contextual
  // information is stored in planton-cloud's database.
  rpc addApiResourceOwner(cloud.planton.apis.iam.v1.iampolicy.model.FgaTuple)
      returns (cloud.planton.apis.iam.v1.iampolicy.model.FgaTuple) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = iam_policy_update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to add resource owner";
  }
}
