syntax = "proto3";

package cloud.planton.apis.iam.v1.identityaccount.service;

import "cloud/planton/apis/commons/apiresource/model/io.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/iam/v1/identityaccount/model/io.proto";
import "cloud/planton/apis/iam/v1/identityaccount/model/state.proto";

// machine-account command controller
service MachineAccountCommandController {
  // create new machine account
  rpc create(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = create;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "spec.org_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to create machine account";
  }
  // update an existing machine account
  rpc update(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = update;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to update machine account";
  }
  // delete an existing machine account
  rpc delete(cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteInput)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = delete;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "resource_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to delete machine account";
  }
  // restore an existing machine account
  rpc restore(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = restore;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "metadata.id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to restore machine account";
  }

  // create a new access token in exchange for a valid machine identity account client credentials
  rpc createAccessToken(cloud.planton.apis.iam.v1.identityaccount.model.CreateMachineAccessTokenInput)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.AccessToken) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_public) = true;
  }
}
