syntax = "proto3";

package cloud.planton.apis.iam.v1.identityaccount.service;

import "cloud/planton/apis/commons/apiresource/model/state.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/iam/v1/iampolicy/options/rpcauthorizationmethodoptions/rpc_authorization_method_options.proto";
import "cloud/planton/apis/iam/v1/identityaccount/model/io.proto";
import "cloud/planton/apis/iam/v1/identityaccount/model/state.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcserviceoptions/api_resource_rpc_service_options.proto";
import "cloud/planton/apis/commons/apiresource/options/apiresourcerpcmethodoptions/api_resource_rpc_method_options.proto";

// machine-account query controller
service MachineAccountQueryController {
  option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcserviceoptions.api_resource_kind) = identity_account;
  // lookup machine account by identity account id.
  rpc getById(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountId)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = identity_account_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "value";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get machine account";

    option (cloud.planton.apis.commons.apiresource.options.apiresourcerpcmethodoptions.api_resource_state_operation_type) = read;
  }

  // retrieve paginated list of all machine accounts on planton-cloud.
  rpc findByOrganizationId(cloud.planton.apis.iam.v1.identityaccount.model.MachineAccountOrganizationId)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccounts) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.is_skip_authorization) = true;
  }

  // lookup machine account by identity account email.
  rpc getByEmail(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountEmail)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = identity_account_get;
    //field-path can not be added as authorization is performed on id
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get machine account";
  }

  // lookup machine-account by organization and name.
  rpc getByOrganizationByName(cloud.planton.apis.iam.v1.identityaccount.model.GetByOrganizationByNameQueryInput)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = identity_account_get;
    //note: can not add field-path as the permission is based on the email of the identity_account in database matching provided input.
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to lookup machine account";
  }

  // lookup the client secret for the machine account.
  // since client_secret for machine account is not stored in planton database, the client secret is
  // retrieved from the idp account and is passed on to the client as response.
  rpc getClientSecretByMachineAccountEmail(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountEmail)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.MachineAccountClientSecret) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = identity_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = identity_account_update;
    //field-path can-not be added as the permission should be evaluated on the id of the machine-account which
    // needs to be looked up using the provided machine-account email.
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get machine account client secret";
  }
}

// user-account query controller
service UserAccountQueryController {
  // retrieve paginated list of all user accounts on planton-cloud.
  rpc list(cloud.planton.apis.commons.rpc.PageInfo)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountsList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = platform;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = back_office_admin;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_id = "planton-cloud";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list all user accounts";
  }

  // lookup user-account by identity account id.
  rpc getById(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountId)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = platform;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = platform_microservice_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_id = "planton-cloud";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list all user accounts";
  }

  // lookup user-account by identity account email.
  rpc getByEmail(cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountEmail)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = platform;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = platform_microservice_account;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_id = "planton-cloud";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to list all user accounts";
  }

 // this is to check if a user is authorized to login to back office or not
 // like other queries this rpc does not return any data
 // instead it tries to check the authorization based on config given below
 // if rpc returns authorization error then the user is not supposed to login to backoffice
 // otherwise if rpc returns boolean response then the user is allowed to login to backoffice.
  rpc isBackofficeUser(google.protobuf.Empty) returns (google.protobuf.BoolValue) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = platform;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = login_to_back_office;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_id = "planton-cloud";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to login to back office";
  }

  // retrieve paginated list of all associate accounts of a organization.
  rpc listAssociatesByOrganizationId(cloud.planton.apis.iam.v1.identityaccount.model.ListWithIdentityOrganizationId)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.IdentityAccountsList) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = list_associates;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "org_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get associates";
  }

  rpc getMembersCountByOrganizationId(cloud.planton.apis.iam.v1.identityaccount.model.MembersCountByOrganizationIdInput)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.MembersCount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = organization;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = organization_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "org_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get organization members count";
  }

  rpc getMembersCountByEnvironmentId(cloud.planton.apis.iam.v1.identityaccount.model.MembersCountByEnvironmentIdInput)
      returns (cloud.planton.apis.iam.v1.identityaccount.model.MembersCount) {
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).resource_kind = environment;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).permission = environment_get;
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).field_path = "environment_id";
    option (cloud.planton.apis.iam.v1.iampolicy.options.rpcauthorizationmethodoptions.authorization_config).error_msg = "unauthorized to get environment members count";
  }
}
