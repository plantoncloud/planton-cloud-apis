syntax = "proto3";

package cloud.planton.apis.integration.v1.kubernetes.apiresources.service;

import "cloud/planton/apis/integration/v1/kubernetes/apiresources/model/io.proto";
import "google/protobuf/wrappers.proto";

service KubernetesApiResourcesQueryController {
  rpc getCertificateByNamespaceByName(cloud.planton.apis.integration.v1.kubernetes.apiresources.model.GetCertificateByNamespaceByNameQueryInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Certificate);
  rpc findCertificates(cloud.planton.apis.integration.v1.kubernetes.apiresources.model.FindCertificatesQueryInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Certificates);
  //stream all kubernetes api-resources corresponding to the api-resource on planton-cloud.
  rpc streamByNamespace(cloud.planton.apis.integration.v1.kubernetes.apiresources.model.StreamKubernetesApiResourcesByNamespaceInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesApiResources);
  //get detailed object of a kubernetes api-resource
  rpc getKubernetesApiResource(cloud.planton.apis.integration.v1.kubernetes.apiresources.model.GetKubernetesApiResourceInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesApiResourceDetail);
  //list pods from a namespace.
  rpc listPods(cloud.planton.apis.integration.v1.kubernetes.apiresources.model.ListPodsInput)
      returns (cloud.planton.apis.integration.v1.kubernetes.apiresources.model.Pods);
  //stream logs of a pod/s corresponding to the api-resource on planton-cloud based
  // on specified options.
  rpc streamPodLogs(cloud.planton.apis.integration.v1.kubernetes.apiresources.model.StreamPodLogsInput)
      returns (stream cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogLine);
}
