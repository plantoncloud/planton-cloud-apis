syntax = "proto3";

package cloud.planton.apis.integration.v1.kubernetes.apiresources.model;

// kubernetes workload namespace
message WorkloadNamespace {
  //id of the kube-cluster to which contains the workload namespace
  string kube_cluster_id = 1;
  //company to which the workload namespace belongs to
  string company_id = 2;
  //product to which the workload namespace belongs to
  string product_id = 3;
  //environment_id to which the workload namespace belongs to
  string environment_id = 4;
  //the workload for which the namespace is created
  string workload = 5;
  // name of the workload namespace
  string name = 6;
  // namespace labels
  map<string, string> labels = 7;
}

//list of workload namespaces
message WorkloadNamespaces {
  repeated WorkloadNamespace entries = 1;
}

// kubernetes pod
message Pod {
  // parent api-resource/pod-controller for the pod
  KubernetesApiResource pod_controller = 1;
  // namespace of the pod
  string namespace = 2;
  // name/id of the pod
  string name = 3;
  // pod labels
  map<string, string> labels = 4;
  // status of the pod
  string status = 5;
  //reason for the current status. this information is useful when pod in not in running state.
  string status_reason = 6;
  //description of the reason for the current status. this information is useful when pod in not in running state.
  string status_message = 7;
  // containers in the pod
  repeated PodContainer containers = 8;
  //value derived from containers for easy consumption by clients.
  //displaying the the list of containers in a pod in <ready>/<total> format is useful. this attribute is added to
  //make it easy to display the contents in that format.
  string containers_in_ready_state = 9;
  //sum of the restart counts of each individual container in the pod.
  //this attribute is being added to make it easy for user-facing clients to display this information.
  int32 containers_restart_count = 10;
}

//container in a kubernetes pod
message PodContainer {
  //name of the container
  string name = 1;
  //image used for the container
  string image = 2;
  //a container can be in running, waiting or terminated status.
  string status = 3;
  //reason for the current status of the container.
  //this is only relevant for waiting and terminated statuses.
  string status_reason = 4;
  //description of the reason for the current status. this information is useful when pod in not in running state.
  string status_message = 5;
  //number of times pod has restarted.
  int32 restart_count = 6;
}

// list of kubernetes pods
message Pods {
  repeated Pod entries = 1;
}

// workload pods
message WorkloadPods {
  //all pods with workload=microservice in a kube-cluster are included.
  repeated Pod microservice_pods = 1;
  //postgres cluster pods include all ancillary pods associated with the postgres cluster including entity-operator etc
  repeated Pod postgres_cluster_pods = 2;
  //kafka cluster pods include all ancillary pods associated with the kafka cluster including schema-registry, kowl etc
  repeated Pod kafka_cluster_pods = 3;
  //all pods associated with solr-cloud deployments
  repeated Pod solr_cloud_pods = 4;
  //all pods associated with redis-cluster deployments
  repeated Pod redis_cluster_pods = 5;
}

// kubernetes certificate
message Certificate {
  // namespace of the certificate
  string namespace = 1;
  // name of the certificate
  string name = 2;
  // certificate labels
  map<string, string> labels = 3;
  // primary domain in the certificate
  string primary_domain = 4;
  //additional domain names
  repeated string additional_domains = 5;
  //certificate issuer reference in the format clusterissuer/issuer-name or issuer/namespace/name
  string issuer_ref = 6;
  //name of the kubernetes secret in which certificate is stored
  string secret_name = 7;
  //status of the certificate
  bool is_ready = 8;
}

//list of certificates
message Certificates {
  repeated Certificate entries = 1;
}

message GetCertificateByNamespaceByNameQueryInput {
  //base64 encoded kube-config
  string kube_config_base64 = 1;
  //name of the kubernetes namespace to look for
  string namespace = 2;
  //name of the certificate
  string name = 3;
}

//input for query to get list of certificates in a namespace
message FindCertificatesQueryInput {
  //base64 encoded kube-config
  string kube_config_base64 = 1;
  //name of the kubernetes namespace to list certificates from
  string namespace = 2;
  //kubernetes label selector to filter results
  string label_selector = 3;
}

// kubernetes api-resource
message KubernetesApiResource {
  // kubernetes namespace
  string namespace = 1;
  // kubernetes api resource version
  string api_version = 2;
  // kubernetes api resource kind
  string kind = 3;
  // name of the kubernetes api resource
  string name = 4;
  // flag to indicate if the resource is a pod controller
  bool is_pod_controller = 5;
}

// list of KubernetesApiResources
message KubernetesApiResources {
  repeated KubernetesApiResource entries = 1;
}

// input for rpc to stream list of kubernetes api-resources in a given namespace
message StreamKubernetesApiResourcesByNamespaceInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  //name of the kubernetes namespace
  string namespace = 2;
}

// details of a kubernetes api-resource object
message KubernetesApiResourceDetail {
  //base64 encoded output of the kubernetes api-resource in "kubectl describe" formal
  string describe_format_base64 = 1;
  //base64 encoded output of the kubernetes api-resource in "kubectl get -o yaml" format
  string yaml_format_base64 = 2;
}

// input for rpc get kubernetes api-resource object
message GetKubernetesApiResourceInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  //kubernetes api-resource
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesApiResource kubernetes_api_resource = 2;
}

// input for rpc to list pods
message ListPodsInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes namespace
  string namespace = 2;
  //parent(pod-controller) kubernetes api-resource
  //if this is not specified, all pods from the namespace are included in the response
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesApiResource pod_controller = 3;
}

// input for rpc to stream logs of a pod
message StreamPodLogsInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes namespace
  string namespace = 2;
  //options to configure pod log stream
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions options = 3;
}

//options available to configure pod log stream
message PodLogStreamOptions {
  // pod-controller kubernetes api-resource i.e Deployment, StatefulSet, ReplicaSet etc
  // when specified, logs from all the pods with in the controller will be fetched from kubernetes cluster.
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesApiResource pod_controller = 1;
  // filter to be used for selecting pods from which the logs needs to be fetched. all pods are considered when this is not specified.
  // the filter input is used for fuzzy search.
  string pod_name_filter = 2;
  // filter to be used for selecting the containers within the pod. If not specified, logs from all the containers in the pod will be fetched.
  // the filter input is used for fuzzy search.
  string container_name_filter = 3;
  // If true, get logs for the previous instance of the container if it has restarted.
  // if this is set to true, the stream does not fetch the logs of restarted container.
  bool is_fetch_previous_container_logs = 4;
  // Filters the logs to include only those from the last specified time in format 20s, 1m, 1d etc.
  string since_duration = 5;
  // Limits the number of lines to include in the log output. If not specified, all lines will be included.
  int64 tail_lines = 6;
  //filter to be used for filtering log content.
  // the filter input is used for fuzzy search.
  string content_filter = 7;
}

// log line of a pod retried from kubernetes-cluster
message PodLogLine {
  //name/id of the pod
  string pod_name = 1;
  //name of the container to which the log line belongs to
  string container_name = 2;
  //log line content
  string log_line = 3;
}

// input for rpc to delete kubernetes api-resource
message DeleteKubernetesApiResourceInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes api-resource to be deleted
  KubernetesApiResource kubernetes_api_resource = 2;
}

// input for rpc to update kubernetes api-resource
message UpdateKubernetesApiResourceInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes api-resource to be deleted
  KubernetesApiResource kubernetes_api_resource = 2;
  // base64 encoded of the updated kubernetes api-resource manifest
  string updated_manifest_yaml_base64 = 3;
}

//input for rpc to exec into pod container
message ExecIntoPodContainerInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // pod information
  KubernetesApiResource pod = 2;
  // container name
  string container_name = 3;
  // shell to use to execute the commands ex: sh.
  // the shell specified here should exist inside the container.
  string shell = 4;
  // command to execute ex: pwd
  string command = 5;
}

//response for rpc to exec into pod container
message ExecIntoPodContainerResponse {
  // standard output of the executed command
  string stdout = 1;
  // standard error of the executed command
  string stderr = 2;
}
