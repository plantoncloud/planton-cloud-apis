syntax = "proto3";

package cloud.planton.apis.integration.v1.kubernetes.apiresources.model;

// kubernetes pod
message Pod {
  // pod-manager for the pod
  KubernetesObject pod_manager = 1;
  // namespace of the pod
  string namespace = 2;
  // name/id of the pod
  string name = 3;
  // pod labels
  map<string, string> labels = 4;
  // status of the pod
  string status = 5;
  //reason for the current status. this information is useful when pod in not in running state.
  string status_reason = 6;
  //description of the reason for the current status. this information is useful when pod in not in running state.
  string status_message = 7;
  // containers in the pod
  repeated PodContainer containers = 8;
  //value derived from containers for easy consumption by clients.
  //displaying the the list of containers in a pod in <ready>/<total> format is useful. this attribute is added to
  //make it easy to display the contents in that format.
  string containers_in_ready_state = 9;
  //sum of the restart counts of each individual container in the pod.
  //this attribute is being added to make it easy for user-facing clients to display this information.
  int32 containers_restart_count = 10;
}

//container in a kubernetes pod
message PodContainer {
  //name of the container
  string name = 1;
  //image used for the container
  string image = 2;
  //a container can be in running, waiting or terminated status.
  string status = 3;
  //reason for the current status of the container.
  //this is only relevant for waiting and terminated statuses.
  string status_reason = 4;
  //description of the reason for the current status. this information is useful when pod in not in running state.
  string status_message = 5;
  //number of times pod has restarted.
  int32 restart_count = 6;
}

// list of kubernetes pods
message Pods {
  repeated Pod entries = 1;
}

// kubernetes object
message KubernetesObject {
  // flag to indicate if the object is kubernetes system object ex: kube-dns pod etc
  bool is_system_object = 1;
  // kubernetes namespace
  string namespace = 2;
  // kubernetes api resource version
  string api_version = 3;
  // kubernetes api resource kind
  string kind = 4;
  // name of the kubernetes api resource
  string name = 5;
  // flag to indicate if the resource is a pod manager
  bool is_pod_manager = 6;
}

// list of KubernetesObjects
message KubernetesObjects {
  repeated KubernetesObject entries = 1;
}

// input for rpc to stream list of kubernetes objects in a given namespace
message StreamKubernetesObjectsByNamespaceInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  //name of the kubernetes namespace
  string namespace = 2;
}

// details of a kubernetes object
message KubernetesObjectDetail {
  //base64 encoded output of the kubernetes object in "kubectl describe" formal
  string describe_format_base64 = 1;
  //base64 encoded output of the kubernetes object in "kubectl get -o yaml" format
  string yaml_format_base64 = 2;
}

// input for rpc get kubernetes object
message GetKubernetesObjectInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  //kubernetes object
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject kubernetes_object = 2;
}

// input for rpc to find list of pods
message FindPodsInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes namespace
  string namespace = 2;
  //pod-manager kubernetes object
  //if this is not specified, all pods from the namespace are included in the response
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject pod_manager = 3;
}

// input for rpc to stream logs of a pod
message StreamPodLogsInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes namespace
  string namespace = 2;
  //options to configure pod log stream
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions options = 3;
}

//options available to configure pod log stream
message PodLogStreamOptions {
  // pod-manager kubernetes object i.e Deployment, StatefulSet, ReplicaSet etc
  // when specified, logs from all the pods with in the controller will be fetched from kubernetes cluster.
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject pod_manager = 1;
  // filter to be used for selecting pods from which the logs needs to be fetched. all pods are considered when this is not specified.
  // the filter input is used for fuzzy search.
  string pod_name_filter = 2;
  // filter to be used for selecting the containers within the pod. If not specified, logs from all the containers in the pod will be fetched.
  // the filter input is used for fuzzy search.
  string container_name_filter = 3;
  // If true, get logs for the previous instance of the container if it has restarted.
  // if this is set to true, the stream does not fetch the logs of restarted container.
  bool is_fetch_previous_container_logs = 4;
  // Filters the logs to include only those from the last specified time in format 20s, 1m, 1d etc.
  string since_duration = 5;
  // Limits the number of lines to include in the log output. If not specified, all lines will be included.
  int64 tail_lines = 6;
  //filter to be used for filtering log content.
  // the filter input is used for fuzzy search.
  string content_filter = 7;
}

// log line of a pod retried from kubernetes-cluster
message PodLogLine {
  //name/id of the pod
  string pod_name = 1;
  //name of the container to which the log line belongs to
  string container_name = 2;
  //log line content
  string log_line = 3;
}

// input for rpc to delete kubernetes object
message DeleteKubernetesObjectInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes object to be deleted
  KubernetesObject kubernetes_object = 2;
}

// input for rpc to update kubernetes object
message UpdateKubernetesObjectInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // kubernetes object to be deleted
  KubernetesObject kubernetes_object = 2;
  // base64 encoded of the updated kubernetes object yaml
  string updated_object_yaml_base64 = 3;
}

// options required for performing exec into a pod container
message PodContainerExecOptions {
  // pod details
  cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject pod = 1;
  // container name
  string container_name = 2;
  // shell to use to execute the commands ex: sh.
  // the shell specified here should exist inside the container.
  string shell = 3;
  // command to execute ex: pwd
  string command = 4;
}

//input for rpc to exec into pod container
message ExecIntoPodContainerInput {
  // base64 encoded kube-config to be used to make the api-call to kubernetes cluster.
  string kube_config_base64 = 1;
  // options required for performing exec into a pod container
  PodContainerExecOptions options = 2;
}

//response for rpc to exec into pod container
message ExecIntoPodContainerResponse {
  // standard output of the executed command
  string stdout = 1;
  // standard error of the executed command
  string stderr = 2;
}
