syntax = "proto3";

package cloud.planton.apis.integration.v1.kubernetes.cost.model;

import "cloud/planton/apis/commons/apiresource/enums/apiresourcekind/api_resource_kind.proto";
import "cloud/planton/apis/commons/rpc/pagination.proto";
import "cloud/planton/apis/integration/v1/kubernetes/cost/model/state.proto";
import "google/protobuf/timestamp.proto";

//list of cost allocations
message CostAllocations {
  repeated CostAllocation entries = 1;
}

//response for paginated query to list cost allocations
message CostAllocationList {
  int32 total_pages = 1;
  repeated CostAllocation entries = 2;
}

//input for paginated rpc to get list of cost allocations for a resources based on provided filters.
message ListByCostAllocationFiltersInput {
  // page info
  cloud.planton.apis.commons.rpc.PageInfo page_info = 1;
  // start timestamp
  google.protobuf.Timestamp start_ts = 2;
  // end timestamp
  google.protobuf.Timestamp end_ts = 3;
  // id of the environment for which the cost allocations are filtered for the resource requested.
  string env_id = 4;
  // type of the resource on planton-cloud.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 5;
  // id of the resource on planton-cloud.
  // ex: msk8s-planton-cloud-prod-iam-main which is the id of the microservice.
  string resource_id = 6;
}

message GetCostAggregateInput {
  // type of the resource on planton-cloud.
  cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind resource_kind = 1;
  // id of the resource on planton-cloud.
  // ex: msk8s-planton-cloud-prod-iam-main which is the id of the microservice.
  string resource_id = 2;
  //start timestamp
  google.protobuf.Timestamp start_ts = 3;
  //end timestamp
  google.protobuf.Timestamp end_ts = 4;
}

// wrapper for cost aggregate
message CostAggregate {
  double value = 1;
}
