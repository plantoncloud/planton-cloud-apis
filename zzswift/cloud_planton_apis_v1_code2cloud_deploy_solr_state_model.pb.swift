// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/solr/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///solr-cloud state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///event-type
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_Enums_SolrCloudEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  ///resource api version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///solr-cloud spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource parent
  public var owner: Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner {
    get {return _owner ?? Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  /// kubernetes spec
  public var kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState {
    get {return _kubernetes ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState()}
    set {_kubernetes = newValue}
  }
  /// Returns true if `kubernetes` has been explicitly set.
  public var hasKubernetes: Bool {return self._kubernetes != nil}
  /// Clears the value of `kubernetes`. Subsequent reads from it will return its default value.
  public mutating func clearKubernetes() {self._kubernetes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner? = nil
  fileprivate var _kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState? = nil
}

///solr-cloud status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  ///solr-cloud kubernetes status
  public var kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState {
    get {return _kubernetes ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState()}
    set {_kubernetes = newValue}
  }
  /// Returns true if `kubernetes` has been explicitly set.
  public var hasKubernetes: Bool {return self._kubernetes != nil}
  /// Clears the value of `kubernetes`. Subsequent reads from it will return its default value.
  public mutating func clearKubernetes() {self._kubernetes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState? = nil
}

///solr-cloud kubernetes spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///solr container spec
  public var solrContainer: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState {
    get {return _storage._solrContainer ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState()}
    set {_uniqueStorage()._solrContainer = newValue}
  }
  /// Returns true if `solrContainer` has been explicitly set.
  public var hasSolrContainer: Bool {return _storage._solrContainer != nil}
  /// Clears the value of `solrContainer`. Subsequent reads from it will return its default value.
  public mutating func clearSolrContainer() {_uniqueStorage()._solrContainer = nil}

  ///zookeeper container spec
  public var zookeeperContainer: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState {
    get {return _storage._zookeeperContainer ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState()}
    set {_uniqueStorage()._zookeeperContainer = newValue}
  }
  /// Returns true if `zookeeperContainer` has been explicitly set.
  public var hasZookeeperContainer: Bool {return _storage._zookeeperContainer != nil}
  /// Clears the value of `zookeeperContainer`. Subsequent reads from it will return its default value.
  public mutating func clearZookeeperContainer() {_uniqueStorage()._zookeeperContainer = nil}

  ///ingress spec
  public var ingress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState {
    get {return _storage._ingress ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState()}
    set {_uniqueStorage()._ingress = newValue}
  }
  /// Returns true if `ingress` has been explicitly set.
  public var hasIngress: Bool {return _storage._ingress != nil}
  /// Clears the value of `ingress`. Subsequent reads from it will return its default value.
  public mutating func clearIngress() {_uniqueStorage()._ingress = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///solr container spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///number of solr pods in solr-cloud
  ///recommended default 1.
  public var replicas: Int32 = 0

  ///solr container image
  ///example repo: solr example tag: 8.7.0
  public var image: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerImage {
    get {return _image ?? Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerImage()}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  public var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  public mutating func clearImage() {self._image = nil}

  ///solr container cpu and memory resources.
  ///recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  public var resources: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources {
    get {return _resources ?? Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources()}
    set {_resources = newValue}
  }
  /// Returns true if `resources` has been explicitly set.
  public var hasResources: Bool {return self._resources != nil}
  /// Clears the value of `resources`. Subsequent reads from it will return its default value.
  public mutating func clearResources() {self._resources = nil}

  ///size of persistent volume attached to each solr pod.
  ///recommended default 1Gi
  public var diskSize: String = String()

  ///solr config
  public var config: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState {
    get {return _config ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _image: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerImage? = nil
  fileprivate var _resources: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources? = nil
  fileprivate var _config: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState? = nil
}

/// solr config
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///jvm memory settings for solr
  public var javaMem: String = String()

  ///custom solr options
  ///ex: "-Dsolr.autoSoftCommit.maxTime=10000"
  public var opts: String = String()

  ///solr garbage collection tuning configuration
  ///ex: "-XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8"
  public var garbageCollectionTuning: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///solr-cloud kubernetes zookeeper spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///number of zookeeper pods in zookeeper cluster.
  ///recommended default 1
  public var replicas: Int32 = 0

  ///zookeeper container cpu and memory resources.
  ///recommended default "cpu-request: 50m, memory-request: 256Mi, cpu-limit: 1, memory-limit: 1Gi"
  public var resources: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources {
    get {return _resources ?? Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources()}
    set {_resources = newValue}
  }
  /// Returns true if `resources` has been explicitly set.
  public var hasResources: Bool {return self._resources != nil}
  /// Clears the value of `resources`. Subsequent reads from it will return its default value.
  public mutating func clearResources() {self._resources = nil}

  ///size of persistent volume attached to each zookeeper pod
  public var diskSize: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _resources: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources? = nil
}

///solr-cloud kubernetes ingress spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///standard-endpoint domain to be used for creating internal and external endpoints for solr-cloud.
  ///only tls enabled standard-endpoints are eligible for creating solr endpoints.
  public var standardEndpointID: String = String()

  ///endpoint-domain-name used for creating solr-cloud endpoints.
  ///value is computed from the configured standard-endpoint.
  public var endpointDomainName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///solr-cloud kubernetes status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///kubernetes namespace in which solr-cloud is created.
  public var namespace: String = String()

  ///kubernetes service name for solr-cloud dashboard.
  ///ex: main-solrcloud-common
  ///in the above example, "main" is the name of the solr-cloud
  public var service: String = String()

  ///command to setup port-forwarding to open solr-cloud from developers laptop.
  ///this might come handy when solr-cloud ingress is disabled for security reasons.
  ///this is rendered by combining solr_cloud_kubernetes_service and kubernetes_namespace
  ///ex: kubectl port-forward svc/solr_cloud_kubernetes_service -n kubernetes_namespace 8080:80
  ///running the command from this attribute makes it possible to access solr-cloud using http://localhost:8080/solr
  public var portForwardCommand: String = String()

  ///kubernetes endpoint that can be used by clients running in the same kubernetes cluster.
  ///ex: http://main-solrcloud-common.<namespace-name>:8983/solr
  public var kubeEndpoint: String = String()

  ///ingress endpoint to be used by solr clients running outside the kubernetes cluster.
  ///ex: https://slc-planton-pcs-dev-main.data.dev.planton.live:8983/solr
  public var ingressEndpoint: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.solr.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_Enums_SolrCloudEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "kubernetes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._kubernetes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._kubernetes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecState) -> Bool {
    if lhs._owner != rhs._owner {return false}
    if lhs._kubernetes != rhs._kubernetes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .same(proto: "kubernetes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._kubernetes) }()
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._kubernetes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusState) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs._kubernetes != rhs._kubernetes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudSpecKubernetesSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "solr_container"),
    2: .standard(proto: "zookeeper_container"),
    3: .same(proto: "ingress"),
  ]

  fileprivate class _StorageClass {
    var _solrContainer: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState? = nil
    var _zookeeperContainer: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState? = nil
    var _ingress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _solrContainer = source._solrContainer
      _zookeeperContainer = source._zookeeperContainer
      _ingress = source._ingress
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._solrContainer) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._zookeeperContainer) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._ingress) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._solrContainer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._zookeeperContainer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ingress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._solrContainer != rhs_storage._solrContainer {return false}
        if _storage._zookeeperContainer != rhs_storage._zookeeperContainer {return false}
        if _storage._ingress != rhs_storage._ingress {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudSpecKubernetesSpecSolrContainerSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replicas"),
    2: .same(proto: "image"),
    3: .same(proto: "resources"),
    4: .standard(proto: "disk_size"),
    5: .same(proto: "config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.replicas) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resources) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.diskSize) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.replicas != 0 {
      try visitor.visitSingularInt32Field(value: self.replicas, fieldNumber: 1)
    }
    try { if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._resources {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.diskSize.isEmpty {
      try visitor.visitSingularStringField(value: self.diskSize, fieldNumber: 4)
    }
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrContainerSpecState) -> Bool {
    if lhs.replicas != rhs.replicas {return false}
    if lhs._image != rhs._image {return false}
    if lhs._resources != rhs._resources {return false}
    if lhs.diskSize != rhs.diskSize {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudSpecKubernetesSpecSolrConfigSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "java_mem"),
    2: .same(proto: "opts"),
    3: .standard(proto: "garbage_collection_tuning"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.javaMem) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.opts) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.garbageCollectionTuning) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.javaMem.isEmpty {
      try visitor.visitSingularStringField(value: self.javaMem, fieldNumber: 1)
    }
    if !self.opts.isEmpty {
      try visitor.visitSingularStringField(value: self.opts, fieldNumber: 2)
    }
    if !self.garbageCollectionTuning.isEmpty {
      try visitor.visitSingularStringField(value: self.garbageCollectionTuning, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecSolrConfigSpecState) -> Bool {
    if lhs.javaMem != rhs.javaMem {return false}
    if lhs.opts != rhs.opts {return false}
    if lhs.garbageCollectionTuning != rhs.garbageCollectionTuning {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudSpecKubernetesSpecZookeeperContainerSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replicas"),
    2: .same(proto: "resources"),
    3: .standard(proto: "disk_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.replicas) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._resources) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.diskSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.replicas != 0 {
      try visitor.visitSingularInt32Field(value: self.replicas, fieldNumber: 1)
    }
    try { if let v = self._resources {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.diskSize.isEmpty {
      try visitor.visitSingularStringField(value: self.diskSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecZookeeperContainerSpecState) -> Bool {
    if lhs.replicas != rhs.replicas {return false}
    if lhs._resources != rhs._resources {return false}
    if lhs.diskSize != rhs.diskSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudSpecKubernetesSpecIngressSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "standard_endpoint_id"),
    2: .standard(proto: "endpoint_domain_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.standardEndpointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.endpointDomainName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.standardEndpointID.isEmpty {
      try visitor.visitSingularStringField(value: self.standardEndpointID, fieldNumber: 1)
    }
    if !self.endpointDomainName.isEmpty {
      try visitor.visitSingularStringField(value: self.endpointDomainName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudSpecKubernetesSpecIngressSpecState) -> Bool {
    if lhs.standardEndpointID != rhs.standardEndpointID {return false}
    if lhs.endpointDomainName != rhs.endpointDomainName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SolrCloudStatusKubernetesStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
    2: .same(proto: "service"),
    3: .standard(proto: "port_forward_command"),
    4: .standard(proto: "kube_endpoint"),
    5: .standard(proto: "ingress_endpoint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.portForwardCommand) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.kubeEndpoint) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ingressEndpoint) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 1)
    }
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 2)
    }
    if !self.portForwardCommand.isEmpty {
      try visitor.visitSingularStringField(value: self.portForwardCommand, fieldNumber: 3)
    }
    if !self.kubeEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeEndpoint, fieldNumber: 4)
    }
    if !self.ingressEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.ingressEndpoint, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_State_SolrCloudStatusKubernetesStatusState) -> Bool {
    if lhs.namespace != rhs.namespace {return false}
    if lhs.service != rhs.service {return false}
    if lhs.portForwardCommand != rhs.portForwardCommand {return false}
    if lhs.kubeEndpoint != rhs.kubeEndpoint {return false}
    if lhs.ingressEndpoint != rhs.ingressEndpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
