// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/cloudaccount/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// cloud account command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountCommandControllerClientInterface {

    ///create a cloud account resource
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>

    ///update an existing cloud account
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>

    ///delete a cloud account that was previously created
    ///warning: deleting a cloud account from planton cloud destroys the resources created by planton cloud in the account
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>

    ///restore a deleted cloud account.
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController", type: .unary)
        }
    }
}

/// cloud account query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountQueryControllerClientInterface {

    ///look up a cloud account by id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>

    ///todo: add authorization
    ///find cloud accounts by company id.
    ///the response should only include cloud accounts in a company that the authenticated user account has viewer access to.
    @available(iOS 13, *)
    func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts>

    ///todo: add authorization
    ///list all specifications for cloud-accounts  for the requested page. This is intended to be used on back-office portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountList>

    ///todo: add authorization
    /// find cloud accounts by company id to create artifact store.
    /// this will be used to populate drop down of cloud accounts in create artifact store form.
    /// the response should only include cloud accounts that a company is authorised to create artifact stores.
    /// the authorization is verified by looking up cloud accounts with `company-artifact-creator` relation for the company id provided in input.
    /// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
    @available(iOS 13, *)
    func `findArtifactStoreCreateCloudAccounts`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts>

    ///todo: add authorization
    /// find cloud accounts by company id to create kube-cluster.
    /// this will be used to populate drop down of cloud accounts in create kube-cluster form.
    /// the response should only include cloud accounts that a company is authorised to create kube-cluster.
    /// the authorization is verified by looking up cloud accounts with `company-kube-cluster-creator` relation for the company id provided in input.
    /// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
    @available(iOS 13, *)
    func `findKubeClusterCreateCloudAccounts`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts>

    ///todo: add authorization
    /// find cloud accounts by company id to create dns managed zone.
    /// this will be used to populate drop down of cloud accounts in create dns managed zone form.
    /// the response should only include cloud accounts that a company is authorised to create dns managed zone.
    /// the authorization is verified by looking up cloud accounts with `company-dns-managed-zone-creator` relation for the company id provided in input.
    /// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
    @available(iOS 13, *)
    func `findDnsZoneCreateCloudAccounts`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findByCompanyId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findArtifactStoreCreateCloudAccounts`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findArtifactStoreCreateCloudAccounts", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findKubeClusterCreateCloudAccounts`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findKubeClusterCreateCloudAccounts", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findDnsZoneCreateCloudAccounts`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccounts> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findDnsZoneCreateCloudAccounts", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController", type: .unary)
            public static let findByCompanyID = Connect.MethodSpec(name: "findByCompanyId", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController", type: .unary)
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController", type: .unary)
            public static let findArtifactStoreCreateCloudAccounts = Connect.MethodSpec(name: "findArtifactStoreCreateCloudAccounts", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController", type: .unary)
            public static let findKubeClusterCreateCloudAccounts = Connect.MethodSpec(name: "findKubeClusterCreateCloudAccounts", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController", type: .unary)
            public static let findDnsZoneCreateCloudAccounts = Connect.MethodSpec(name: "findDnsZoneCreateCloudAccounts", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController", type: .unary)
        }
    }
}

///cloud-account stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountStackControllerClientInterface {

    ///preview stack-job for cloud-account spec
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>

    ///apply stack for a cloud-account
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccountId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController", type: .unary)
        }
    }
}
