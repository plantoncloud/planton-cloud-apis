// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/dnszone/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// dns-zone state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// dns-zone event type
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_Enums_DnsZoneEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  /// api version for the resource
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  /// kind for the resource
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// metadata for the resource
  /// Name is a valid, unique DNS domain name within the Platon Cloud.
  /// Id value is automatically computed in the format 'dns-<company_id>-<normalized-domain-name>',
  /// and its uniqueness is guaranteed by the backend.
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///dns-zone spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///dns-zone status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specification for the DNS Domain
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the company that owns the DNS Zone. This is required and immutable.
  public var companyID: String = String()

  /// The DNS records that are added to the Zone.
  public var records: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsRecordState] = []

  ///provider for dns-zone
  public var zoneProvider: String = String()

  /// specification for zone to be created in google cloud dns.
  /// this attribute is only populated when zone provider is google cloud dns.
  public var gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState {
    get {return _gcp ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState()}
    set {_gcp = newValue}
  }
  /// Returns true if `gcp` has been explicitly set.
  public var hasGcp: Bool {return self._gcp != nil}
  /// Clears the value of `gcp`. Subsequent reads from it will return its default value.
  public mutating func clearGcp() {self._gcp = nil}

  /// specification for zone to be created in aws route53.
  /// this attribute is only populated when zone provider is aws route53.
  public var aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState {
    get {return _aws ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState()}
    set {_aws = newValue}
  }
  /// Returns true if `aws` has been explicitly set.
  public var hasAws: Bool {return self._aws != nil}
  /// Clears the value of `aws`. Subsequent reads from it will return its default value.
  public mutating func clearAws() {self._aws = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState? = nil
  fileprivate var _aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState? = nil
}

/// Status for the DNS Domain
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  ///status for the zone created in google cloud dns.
  ///this attribute is populated only when the zone provider is google cloud dns
  public var gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState {
    get {return _gcp ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState()}
    set {_gcp = newValue}
  }
  /// Returns true if `gcp` has been explicitly set.
  public var hasGcp: Bool {return self._gcp != nil}
  /// Clears the value of `gcp`. Subsequent reads from it will return its default value.
  public mutating func clearGcp() {self._gcp = nil}

  ///status for the zone created in aws route53.
  ///this attribute is populated only when the zone provider is aws route53
  public var aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState {
    get {return _aws ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState()}
    set {_aws = newValue}
  }
  /// Returns true if `aws` has been explicitly set.
  public var hasAws: Bool {return self._aws != nil}
  /// Clears the value of `aws`. Subsequent reads from it will return its default value.
  public mutating func clearAws() {self._aws = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState? = nil
  fileprivate var _aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState? = nil
}

/// specification for zone to be created in google cloud dns service
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the GCP Cloud Account where the Managed Zone should be created.
  /// The Managed Zone is created in the core-infra project of the provided Cloud Account,
  /// necessary for delegating domain control to Platon Cloud.
  public var gcpCloudAccountID: String = String()

  /// The ID of the GCP Project where the Managed Zone is created.
  public var projectID: String = String()

  /// An optional list of GCP service accounts to be granted permissions to manage DNS records in the Managed Zone.
  /// These accounts are primarily created as workload identities like cert-manager,
  /// and are added when new environments are created or updated.
  public var iamServiceAccounts: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// status for zone created in google cloud dns service
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of nameservers for the Managed Zone created for the DNS Domain.
  public var nameservers: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// specification for zone to be created in aws route53
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the AWS Cloud Account where the Managed Zone should be created.
  public var awsCloudAccountID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// status for zone created in aws route53
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of nameservers for the Managed Zone created for the DNS Domain.
  public var nameservers: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// dns record state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsRecordState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The audit information for system tracking
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// dns-zone record type.
  public var recordType: String = String()

  /// name of the dns-zone ex: example.com or dev.example.com.
  /// this value should always end with a dot.
  public var name: String = String()

  /// values for the dns-zone record.
  /// if the dns_zone_record_type is cname then each value in the list should end with a dot.
  public var values: [String] = []

  /// ttl for the domain record in seconds.
  public var ttlSeconds: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsRecordState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.dnszone.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_Enums_DnsZoneEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .same(proto: "records"),
    3: .standard(proto: "zone_provider"),
    4: .same(proto: "gcp"),
    5: .same(proto: "aws"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.records) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.zoneProvider) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._gcp) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._aws) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.records.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.records, fieldNumber: 2)
    }
    if !self.zoneProvider.isEmpty {
      try visitor.visitSingularStringField(value: self.zoneProvider, fieldNumber: 3)
    }
    try { if let v = self._gcp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._aws {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneSpecState) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.records != rhs.records {return false}
    if lhs.zoneProvider != rhs.zoneProvider {return false}
    if lhs._gcp != rhs._gcp {return false}
    if lhs._aws != rhs._aws {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .same(proto: "gcp"),
    2: .same(proto: "aws"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gcp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._aws) }()
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gcp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._aws {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneStatusState) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs._gcp != rhs._gcp {return false}
    if lhs._aws != rhs._aws {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneGcpSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_cloud_account_id"),
    2: .standard(proto: "project_id"),
    3: .standard(proto: "iam_service_accounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcpCloudAccountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.iamServiceAccounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcpCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpCloudAccountID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if !self.iamServiceAccounts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.iamServiceAccounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpSpecState) -> Bool {
    if lhs.gcpCloudAccountID != rhs.gcpCloudAccountID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.iamServiceAccounts != rhs.iamServiceAccounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneGcpStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nameservers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nameservers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nameservers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nameservers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneGcpStatusState) -> Bool {
    if lhs.nameservers != rhs.nameservers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneAwsSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aws_cloud_account_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.awsCloudAccountID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.awsCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.awsCloudAccountID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsSpecState) -> Bool {
    if lhs.awsCloudAccountID != rhs.awsCloudAccountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneAwsStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nameservers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nameservers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nameservers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nameservers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsZoneAwsStatusState) -> Bool {
    if lhs.nameservers != rhs.nameservers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsRecordState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsRecordState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .standard(proto: "record_type"),
    2: .same(proto: "name"),
    3: .same(proto: "values"),
    4: .standard(proto: "ttl_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.recordType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.ttlSeconds) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.recordType.isEmpty {
      try visitor.visitSingularStringField(value: self.recordType, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 3)
    }
    if self.ttlSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.ttlSeconds, fieldNumber: 4)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsRecordState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_State_DnsRecordState) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.recordType != rhs.recordType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.values != rhs.values {return false}
    if lhs.ttlSeconds != rhs.ttlSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
