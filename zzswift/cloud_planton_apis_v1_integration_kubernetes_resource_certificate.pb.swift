// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/integration/kubernetes/resource/certificate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// kubernetes certificate
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// namespace of the certificate
  public var namespace: String = String()

  /// name of the certificate
  public var name: String = String()

  /// certificate labels
  public var labels: Dictionary<String,String> = [:]

  /// primary domain in the certificate
  public var primaryDomain: String = String()

  ///additional domain names
  public var additionalDomains: [String] = []

  ///certificate issuer reference in the format clusterissuer/issuer-name or issuer/namespace/name
  public var issuerRef: String = String()

  ///name of the kubernetes secret in which certificate is stored
  public var secretName: String = String()

  ///status of the certificate
  public var isReady: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///list of certificates
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificate: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.integration.kubernetes.resource"

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Certificate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
    2: .same(proto: "name"),
    3: .same(proto: "labels"),
    4: .standard(proto: "primary_domain"),
    5: .standard(proto: "additional_domains"),
    6: .standard(proto: "issuer_ref"),
    7: .standard(proto: "secret_name"),
    8: .standard(proto: "is_ready"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.primaryDomain) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.additionalDomains) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.issuerRef) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.secretName) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 3)
    }
    if !self.primaryDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.primaryDomain, fieldNumber: 4)
    }
    if !self.additionalDomains.isEmpty {
      try visitor.visitRepeatedStringField(value: self.additionalDomains, fieldNumber: 5)
    }
    if !self.issuerRef.isEmpty {
      try visitor.visitSingularStringField(value: self.issuerRef, fieldNumber: 6)
    }
    if !self.secretName.isEmpty {
      try visitor.visitSingularStringField(value: self.secretName, fieldNumber: 7)
    }
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificate, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificate) -> Bool {
    if lhs.namespace != rhs.namespace {return false}
    if lhs.name != rhs.name {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.primaryDomain != rhs.primaryDomain {return false}
    if lhs.additionalDomains != rhs.additionalDomains {return false}
    if lhs.issuerRef != rhs.issuerRef {return false}
    if lhs.secretName != rhs.secretName {return false}
    if lhs.isReady != rhs.isReady {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Certificates"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
