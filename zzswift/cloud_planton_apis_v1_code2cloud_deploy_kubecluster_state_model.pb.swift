// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/kubecluster/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// kube-cluster state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// event_type is event type after the command is processed
  /// do refer the enums values for the possible event types
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_Enums_KubeClusterEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  /// api version for the resource
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  /// kind for the resource
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// metadata for the resource
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// kube-cluster spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// kube-cluster status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// KubeClusterSpec is a message type that defines the specifications for a kube-cluster on Planton Cloud.
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// company_id is a required, immutable field that uniquely identifies the company associated with the kube-cluster.
  public var companyID: String {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  /// endpoint_domains is a list of valid DNS domain names for the endpoints hosted in the environment.
  /// Each endpoint domain name must already exist and be associated with the company on Planton Cloud.
  public var endpointDomains: [String] {
    get {return _storage._endpointDomains}
    set {_uniqueStorage()._endpointDomains = newValue}
  }

  /// kube-cluster kubernetes addons spec
  public var kubernetesAddons: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState {
    get {return _storage._kubernetesAddons ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState()}
    set {_uniqueStorage()._kubernetesAddons = newValue}
  }
  /// Returns true if `kubernetesAddons` has been explicitly set.
  public var hasKubernetesAddons: Bool {return _storage._kubernetesAddons != nil}
  /// Clears the value of `kubernetesAddons`. Subsequent reads from it will return its default value.
  public mutating func clearKubernetesAddons() {_uniqueStorage()._kubernetesAddons = nil}

  /// provider is an enumeration field that represents the kubernetes provider for the kube-cluster.
  public var kubernetesProvider: String {
    get {return _storage._kubernetesProvider}
    set {_uniqueStorage()._kubernetesProvider = newValue}
  }

  /// gcp is a field for GCP-specific kube-cluster specifications.
  /// This field is only set if the kubernetes-provider is GCP GKE.
  public var gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState {
    get {return _storage._gcp ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState()}
    set {_uniqueStorage()._gcp = newValue}
  }
  /// Returns true if `gcp` has been explicitly set.
  public var hasGcp: Bool {return _storage._gcp != nil}
  /// Clears the value of `gcp`. Subsequent reads from it will return its default value.
  public mutating func clearGcp() {_uniqueStorage()._gcp = nil}

  /// aws is a field for AWS-specific kube-cluster specifications.
  /// This field is only set if the kubernetes-provider is AWS EKS.
  public var aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState {
    get {return _storage._aws ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState()}
    set {_uniqueStorage()._aws = newValue}
  }
  /// Returns true if `aws` has been explicitly set.
  public var hasAws: Bool {return _storage._aws != nil}
  /// Clears the value of `aws`. Subsequent reads from it will return its default value.
  public mutating func clearAws() {_uniqueStorage()._aws = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///kube-cluster kubernetes addons
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///flag to control postgres-operator installation
  public var isInstallPostgresOperator: Bool = false

  ///flag to control kafka-operator installation
  public var isInstallKafkaOperator: Bool = false

  ///flag to control solr-operator installation
  public var isInstallSolrOperator: Bool = false

  ///flag to control kubecost
  public var isInstallKubecost: Bool = false

  ///planton-cloud-kube-agent addon spec
  public var plantonCloudKubeAgent: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState {
    get {return _plantonCloudKubeAgent ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState()}
    set {_plantonCloudKubeAgent = newValue}
  }
  /// Returns true if `plantonCloudKubeAgent` has been explicitly set.
  public var hasPlantonCloudKubeAgent: Bool {return self._plantonCloudKubeAgent != nil}
  /// Clears the value of `plantonCloudKubeAgent`. Subsequent reads from it will return its default value.
  public mutating func clearPlantonCloudKubeAgent() {self._plantonCloudKubeAgent = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _plantonCloudKubeAgent: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState? = nil
}

///planton-cloud-kube-agent addon spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// flag to control planton-cloud-kube-agent installation
  public var isInstall: Bool = false

  /// machine_account_email is the email of the machine-account to be used by planton-cloud-kube-agent.
  /// this is only created if is_install is true.
  public var machineAccountEmail: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// kube-cluster status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  /// status of the kube-cluster.
  /// gcp status
  /// this attribute is only populated for kube-clusters created in google cloud accounts.
  public var gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState {
    get {return _gcp ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState()}
    set {_gcp = newValue}
  }
  /// Returns true if `gcp` has been explicitly set.
  public var hasGcp: Bool {return self._gcp != nil}
  /// Clears the value of `gcp`. Subsequent reads from it will return its default value.
  public mutating func clearGcp() {self._gcp = nil}

  /// status of the kube-cluster in aws
  public var aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState {
    get {return _aws ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState()}
    set {_aws = newValue}
  }
  /// Returns true if `aws` has been explicitly set.
  public var hasAws: Bool {return self._aws != nil}
  /// Clears the value of `aws`. Subsequent reads from it will return its default value.
  public mutating func clearAws() {self._aws = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState? = nil
  fileprivate var _aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState? = nil
}

/// specification state for kube-cluster in gcp
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the gcp cloud account to be used for creating kube-cluster resources.
  public var gcpCloudAccountID: String = String()

  /// gcp billing account id required to link kube-cluster projects.
  /// planton cloud creates one/two gcp projects per kube-cluster.
  /// these projects will be linked to this billing account.
  public var billingAccountID: String = String()

  /// valid gcp region in which to create the kube-cluster.
  /// warning: kube-cluster will recreated if this value is updated.
  /// https://cloud.google.com/compute/docs/regions-zones
  public var region: String = String()

  /// valid gcp zone in which to create the kube-cluster.
  /// https://cloud.google.com/compute/docs/regions-zones
  public var zone: String = String()

  /// flag to indicate that the cluster should be created in a shared vpc network.
  /// warning: kube-cluster will be recreated if this is updated.
  /// note: vpc network is created in a separate project when this is enabled.
  public var isCreateSharedVpc: Bool = false

  /// flag to toggle workload logs for kube-cluster environment.
  /// when workload logs is enabled, the logs from kubernetes pods would be sent to google cloud logging.
  /// warning: enabling log forwarding increases cloud bills depending on the log volume.
  public var isWorkloadLogsEnabled: Bool = false

  /// cluster autoscaling configuration
  public var clusterAutoscalingConfig: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState {
    get {return _clusterAutoscalingConfig ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState()}
    set {_clusterAutoscalingConfig = newValue}
  }
  /// Returns true if `clusterAutoscalingConfig` has been explicitly set.
  public var hasClusterAutoscalingConfig: Bool {return self._clusterAutoscalingConfig != nil}
  /// Clears the value of `clusterAutoscalingConfig`. Subsequent reads from it will return its default value.
  public mutating func clearClusterAutoscalingConfig() {self._clusterAutoscalingConfig = nil}

  /// kube-cluster node pools
  public var nodePools: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterNodePoolGcpState] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _clusterAutoscalingConfig: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState? = nil
}

///cluster autoscaling configuration for gke clusters.
/// https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Flag to control autoscaling of kubernetes worker nodes.
  /// When set to true, the cluster will automatically scale up or down based on the resource requirements.
  public var isEnabled: Bool = false

  /// The minimum number of CPU cores that the cluster can down up to when autoscaling is enabled.
  /// The number of CPU cores is a sum across all nodes in the cluster.
  public var cpuMinCores: Int64 = 0

  /// The maximum number of CPU cores that the cluster can scale up to when autoscaling is enabled.
  /// The number of CPU cores is a sum across all nodes in the cluster.
  public var cpuMaxCores: Int64 = 0

  /// The minimum amount of memory in gigabytes (GB) that the cluster can scale down to when autoscaling is enabled.
  /// The memory size is a sum across all nodes in the cluster.
  public var memoryMinGb: Int64 = 0

  /// The maximum amount of memory in gigabytes (GB) that the cluster can scale up to when autoscaling is enabled.
  /// The memory size is a sum across all nodes in the cluster.
  public var memoryMaxGb: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// status of the kube-cluster in gcp
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// a folder is created with the cloud account folder as parent for the kube-cluster.
  /// resources created for kube-cluster are linked to this folder as the parent.
  /// children for a cloud account are the gcp projects in the kube-cluster.
  public var folder: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Folder_State_GcpFolderState {
    get {return _storage._folder ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Folder_State_GcpFolderState()}
    set {_uniqueStorage()._folder = newValue}
  }
  /// Returns true if `folder` has been explicitly set.
  public var hasFolder: Bool {return _storage._folder != nil}
  /// Clears the value of `folder`. Subsequent reads from it will return its default value.
  public mutating func clearFolder() {_uniqueStorage()._folder = nil}

  /// projects created on google cloud for this kube-cluster
  /// this value is updated upon successful kube-cluster creation stack-job.
  /// gcp project info for the kube-cluster project
  public var containerClusterProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_State_GcpProjectState {
    get {return _storage._containerClusterProject ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_State_GcpProjectState()}
    set {_uniqueStorage()._containerClusterProject = newValue}
  }
  /// Returns true if `containerClusterProject` has been explicitly set.
  public var hasContainerClusterProject: Bool {return _storage._containerClusterProject != nil}
  /// Clears the value of `containerClusterProject`. Subsequent reads from it will return its default value.
  public mutating func clearContainerClusterProject() {_uniqueStorage()._containerClusterProject = nil}

  /// gcp project info for vpc-network project
  /// note: a separate project is only created when the kube-cluster is configured to use shared-vpc.
  /// if the kube-cluster is not configured to use a shared-vpc, this project info will be same as
  /// kube-cluster project details as the vpc-network is created in the same project as the kube-cluster.
  public var vpcNetworkProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_State_GcpProjectState {
    get {return _storage._vpcNetworkProject ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_State_GcpProjectState()}
    set {_uniqueStorage()._vpcNetworkProject = newValue}
  }
  /// Returns true if `vpcNetworkProject` has been explicitly set.
  public var hasVpcNetworkProject: Bool {return _storage._vpcNetworkProject != nil}
  /// Clears the value of `vpcNetworkProject`. Subsequent reads from it will return its default value.
  public mutating func clearVpcNetworkProject() {_uniqueStorage()._vpcNetworkProject = nil}

  /// kube-cluster endpoint.
  public var clusterEndpoint: String {
    get {return _storage._clusterEndpoint}
    set {_uniqueStorage()._clusterEndpoint = newValue}
  }

  /// kube-cluster certificate-authority-data.
  public var clusterCaData: String {
    get {return _storage._clusterCaData}
    set {_uniqueStorage()._clusterCaData = newValue}
  }

  /// ip address of the NAT for egress traffic.
  /// this is the ip addresses attached to all network requests originating from the kube-cluster.
  /// if server receiving requires the exact ip of the microservice to add it the firewall rules, this is the one.
  public var externalNatIp: String {
    get {return _storage._externalNatIp}
    set {_uniqueStorage()._externalNatIp = newValue}
  }

  /// internal ingress ip.
  public var internalIngressIp: String {
    get {return _storage._internalIngressIp}
    set {_uniqueStorage()._internalIngressIp = newValue}
  }

  /// internal ingress ip.
  public var externalIngressIp: String {
    get {return _storage._externalIngressIp}
    set {_uniqueStorage()._externalIngressIp = newValue}
  }

  /// google service account email created for cert-manager addon workload identity.
  /// this is the service account that is used by cert-manager component to update dns records
  /// to issue ssl certificates from letsencrypt provided for product endpoints.
  /// this service account is configured with permissions required to manage dns entries for issuing certs.
  public var certManagerGsaEmail: String {
    get {return _storage._certManagerGsaEmail}
    set {_uniqueStorage()._certManagerGsaEmail = newValue}
  }

  /// google service account email created for external-secrets addon workload identity.
  /// this is the service account that is used by external-secrets component to fetch secrets from the
  /// secrets-manager on the cloud provider and make them available to the microservices.
  public var externalSecretsGsaEmail: String {
    get {return _storage._externalSecretsGsaEmail}
    set {_uniqueStorage()._externalSecretsGsaEmail = newValue}
  }

  /// google service account email created for external-secrets addon workload identity.
  /// this key for this service account is used for deploying workloads like microservices,
  /// postgres clusters, kafka clusters onto the kube-cluster kube-cluster/s.
  public var workloadDeployerGsaEmail: String {
    get {return _storage._workloadDeployerGsaEmail}
    set {_uniqueStorage()._workloadDeployerGsaEmail = newValue}
  }

  /// base64 encoded workload deployer google service account key.
  /// this service account key is used as a credential for deploying workloads like microservices,
  /// postgres clusters, kafka clusters onto the kube-cluster kube-cluster/s.
  public var workloadDeployerGsaKeyBase64: String {
    get {return _storage._workloadDeployerGsaKeyBase64}
    set {_uniqueStorage()._workloadDeployerGsaKeyBase64 = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// gcp kube-cluster node pool state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterNodePoolGcpState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The audit information for system tracking
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// Name of the node pool. The name is added as a label to the node pool that can be used to schedule workloads.
  public var name: String = String()

  /// Unique ID of the node pool. Convention for the node-pool-id is 'np-<kube-cluster-id>-<node-pool-name>'.
  /// Planton Cloud ignores the input value and assigns the ID as per the convention.
  public var id: String = String()

  /// Type of machine for the node pool. For example, 'n2-custom-8-16234'.
  public var machineType: String = String()

  /// Minimum number of nodes in the node pool. Defaults to 1.
  public var minNodeCount: Int32 = 0

  /// Maximum number of nodes in the node pool. Defaults to 1.
  public var maxNodeCount: Int32 = 0

  /// Flag to enable spot instances on the node pool. Defaults to false.
  public var isSpotEnabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///specification for kube-cluster in aws
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the aws cloud account to be used for creating kube-cluster resources.
  public var awsCloudAccountID: String = String()

  /// valid aws region in which to create the kube-cluster.
  /// warning: kube-cluster will recreated if this value is updated.
  /// https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
  public var region: String = String()

  /// (optional) id of the vpc to be used for creating kube-cluster.
  /// if an id is not provided, a new vpc will be created.
  /// warning: kube-cluster will be recreated if this is updated.
  public var vpcID: String = String()

  /// aws eks worker node-groups management mode
  public var workersManagementMode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// status of the kube-cluster in aws
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id of the vpc in which the kube-cluster is created
  public var clusterVpcID: String = String()

  /// kube-cluster endpoint.
  public var clusterEndpoint: String = String()

  /// kube-cluster certificate-authority-data.
  /// this value is updated upon successful kube-cluster creation stack-job.
  public var clusterCaData: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterNodePoolGcpState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.kubecluster.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_Enums_KubeClusterEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "endpoint_domains"),
    3: .standard(proto: "kubernetes_addons"),
    4: .standard(proto: "kubernetes_provider"),
    5: .same(proto: "gcp"),
    6: .same(proto: "aws"),
  ]

  fileprivate class _StorageClass {
    var _companyID: String = String()
    var _endpointDomains: [String] = []
    var _kubernetesAddons: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState? = nil
    var _kubernetesProvider: String = String()
    var _gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState? = nil
    var _aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _companyID = source._companyID
      _endpointDomains = source._endpointDomains
      _kubernetesAddons = source._kubernetesAddons
      _kubernetesProvider = source._kubernetesProvider
      _gcp = source._gcp
      _aws = source._aws
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._companyID) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._endpointDomains) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._kubernetesAddons) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._kubernetesProvider) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._gcp) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._aws) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._companyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyID, fieldNumber: 1)
      }
      if !_storage._endpointDomains.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._endpointDomains, fieldNumber: 2)
      }
      try { if let v = _storage._kubernetesAddons {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._kubernetesProvider.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kubernetesProvider, fieldNumber: 4)
      }
      try { if let v = _storage._gcp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._aws {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterSpecState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._endpointDomains != rhs_storage._endpointDomains {return false}
        if _storage._kubernetesAddons != rhs_storage._kubernetesAddons {return false}
        if _storage._kubernetesProvider != rhs_storage._kubernetesProvider {return false}
        if _storage._gcp != rhs_storage._gcp {return false}
        if _storage._aws != rhs_storage._aws {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterAddonsSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_install_postgres_operator"),
    2: .standard(proto: "is_install_kafka_operator"),
    3: .standard(proto: "is_install_solr_operator"),
    4: .standard(proto: "is_install_kubecost"),
    5: .standard(proto: "planton_cloud_kube_agent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isInstallPostgresOperator) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isInstallKafkaOperator) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isInstallSolrOperator) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isInstallKubecost) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._plantonCloudKubeAgent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.isInstallPostgresOperator != false {
      try visitor.visitSingularBoolField(value: self.isInstallPostgresOperator, fieldNumber: 1)
    }
    if self.isInstallKafkaOperator != false {
      try visitor.visitSingularBoolField(value: self.isInstallKafkaOperator, fieldNumber: 2)
    }
    if self.isInstallSolrOperator != false {
      try visitor.visitSingularBoolField(value: self.isInstallSolrOperator, fieldNumber: 3)
    }
    if self.isInstallKubecost != false {
      try visitor.visitSingularBoolField(value: self.isInstallKubecost, fieldNumber: 4)
    }
    try { if let v = self._plantonCloudKubeAgent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsSpecState) -> Bool {
    if lhs.isInstallPostgresOperator != rhs.isInstallPostgresOperator {return false}
    if lhs.isInstallKafkaOperator != rhs.isInstallKafkaOperator {return false}
    if lhs.isInstallSolrOperator != rhs.isInstallSolrOperator {return false}
    if lhs.isInstallKubecost != rhs.isInstallKubecost {return false}
    if lhs._plantonCloudKubeAgent != rhs._plantonCloudKubeAgent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterAddonsPlantonCloudKubeAgentSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_install"),
    2: .standard(proto: "machine_account_email"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isInstall) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.machineAccountEmail) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isInstall != false {
      try visitor.visitSingularBoolField(value: self.isInstall, fieldNumber: 1)
    }
    if !self.machineAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.machineAccountEmail, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAddonsPlantonCloudKubeAgentSpecState) -> Bool {
    if lhs.isInstall != rhs.isInstall {return false}
    if lhs.machineAccountEmail != rhs.machineAccountEmail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .same(proto: "gcp"),
    2: .same(proto: "aws"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gcp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._aws) }()
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gcp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._aws {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterStatusState) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs._gcp != rhs._gcp {return false}
    if lhs._aws != rhs._aws {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_cloud_account_id"),
    2: .standard(proto: "billing_account_id"),
    3: .same(proto: "region"),
    4: .same(proto: "zone"),
    5: .standard(proto: "is_create_shared_vpc"),
    6: .standard(proto: "is_workload_logs_enabled"),
    7: .standard(proto: "cluster_autoscaling_config"),
    8: .standard(proto: "node_pools"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcpCloudAccountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.billingAccountID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.zone) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isCreateSharedVpc) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isWorkloadLogsEnabled) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._clusterAutoscalingConfig) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.nodePools) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.gcpCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpCloudAccountID, fieldNumber: 1)
    }
    if !self.billingAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.billingAccountID, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 3)
    }
    if !self.zone.isEmpty {
      try visitor.visitSingularStringField(value: self.zone, fieldNumber: 4)
    }
    if self.isCreateSharedVpc != false {
      try visitor.visitSingularBoolField(value: self.isCreateSharedVpc, fieldNumber: 5)
    }
    if self.isWorkloadLogsEnabled != false {
      try visitor.visitSingularBoolField(value: self.isWorkloadLogsEnabled, fieldNumber: 6)
    }
    try { if let v = self._clusterAutoscalingConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.nodePools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodePools, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpSpecState) -> Bool {
    if lhs.gcpCloudAccountID != rhs.gcpCloudAccountID {return false}
    if lhs.billingAccountID != rhs.billingAccountID {return false}
    if lhs.region != rhs.region {return false}
    if lhs.zone != rhs.zone {return false}
    if lhs.isCreateSharedVpc != rhs.isCreateSharedVpc {return false}
    if lhs.isWorkloadLogsEnabled != rhs.isWorkloadLogsEnabled {return false}
    if lhs._clusterAutoscalingConfig != rhs._clusterAutoscalingConfig {return false}
    if lhs.nodePools != rhs.nodePools {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpClusterAutoscalingConfigSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_enabled"),
    2: .standard(proto: "cpu_min_cores"),
    3: .standard(proto: "cpu_max_cores"),
    4: .standard(proto: "memory_min_gb"),
    5: .standard(proto: "memory_max_gb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.cpuMinCores) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.cpuMaxCores) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.memoryMinGb) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.memoryMaxGb) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 1)
    }
    if self.cpuMinCores != 0 {
      try visitor.visitSingularInt64Field(value: self.cpuMinCores, fieldNumber: 2)
    }
    if self.cpuMaxCores != 0 {
      try visitor.visitSingularInt64Field(value: self.cpuMaxCores, fieldNumber: 3)
    }
    if self.memoryMinGb != 0 {
      try visitor.visitSingularInt64Field(value: self.memoryMinGb, fieldNumber: 4)
    }
    if self.memoryMaxGb != 0 {
      try visitor.visitSingularInt64Field(value: self.memoryMaxGb, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpClusterAutoscalingConfigSpecState) -> Bool {
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.cpuMinCores != rhs.cpuMinCores {return false}
    if lhs.cpuMaxCores != rhs.cpuMaxCores {return false}
    if lhs.memoryMinGb != rhs.memoryMinGb {return false}
    if lhs.memoryMaxGb != rhs.memoryMaxGb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "folder"),
    2: .standard(proto: "container_cluster_project"),
    3: .standard(proto: "vpc_network_project"),
    4: .standard(proto: "cluster_endpoint"),
    5: .standard(proto: "cluster_ca_data"),
    6: .standard(proto: "external_nat_ip"),
    7: .standard(proto: "internal_ingress_ip"),
    8: .standard(proto: "external_ingress_ip"),
    9: .standard(proto: "cert_manager_gsa_email"),
    10: .standard(proto: "external_secrets_gsa_email"),
    11: .standard(proto: "workload_deployer_gsa_email"),
    12: .standard(proto: "workload_deployer_gsa_key_base64"),
  ]

  fileprivate class _StorageClass {
    var _folder: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Folder_State_GcpFolderState? = nil
    var _containerClusterProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_State_GcpProjectState? = nil
    var _vpcNetworkProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_State_GcpProjectState? = nil
    var _clusterEndpoint: String = String()
    var _clusterCaData: String = String()
    var _externalNatIp: String = String()
    var _internalIngressIp: String = String()
    var _externalIngressIp: String = String()
    var _certManagerGsaEmail: String = String()
    var _externalSecretsGsaEmail: String = String()
    var _workloadDeployerGsaEmail: String = String()
    var _workloadDeployerGsaKeyBase64: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _folder = source._folder
      _containerClusterProject = source._containerClusterProject
      _vpcNetworkProject = source._vpcNetworkProject
      _clusterEndpoint = source._clusterEndpoint
      _clusterCaData = source._clusterCaData
      _externalNatIp = source._externalNatIp
      _internalIngressIp = source._internalIngressIp
      _externalIngressIp = source._externalIngressIp
      _certManagerGsaEmail = source._certManagerGsaEmail
      _externalSecretsGsaEmail = source._externalSecretsGsaEmail
      _workloadDeployerGsaEmail = source._workloadDeployerGsaEmail
      _workloadDeployerGsaKeyBase64 = source._workloadDeployerGsaKeyBase64
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._folder) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._containerClusterProject) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._vpcNetworkProject) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._clusterEndpoint) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._clusterCaData) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._externalNatIp) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._internalIngressIp) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._externalIngressIp) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._certManagerGsaEmail) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._externalSecretsGsaEmail) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._workloadDeployerGsaEmail) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._workloadDeployerGsaKeyBase64) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._folder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._containerClusterProject {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._vpcNetworkProject {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._clusterEndpoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clusterEndpoint, fieldNumber: 4)
      }
      if !_storage._clusterCaData.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clusterCaData, fieldNumber: 5)
      }
      if !_storage._externalNatIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalNatIp, fieldNumber: 6)
      }
      if !_storage._internalIngressIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._internalIngressIp, fieldNumber: 7)
      }
      if !_storage._externalIngressIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalIngressIp, fieldNumber: 8)
      }
      if !_storage._certManagerGsaEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._certManagerGsaEmail, fieldNumber: 9)
      }
      if !_storage._externalSecretsGsaEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalSecretsGsaEmail, fieldNumber: 10)
      }
      if !_storage._workloadDeployerGsaEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workloadDeployerGsaEmail, fieldNumber: 11)
      }
      if !_storage._workloadDeployerGsaKeyBase64.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workloadDeployerGsaKeyBase64, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterGcpStatusState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._folder != rhs_storage._folder {return false}
        if _storage._containerClusterProject != rhs_storage._containerClusterProject {return false}
        if _storage._vpcNetworkProject != rhs_storage._vpcNetworkProject {return false}
        if _storage._clusterEndpoint != rhs_storage._clusterEndpoint {return false}
        if _storage._clusterCaData != rhs_storage._clusterCaData {return false}
        if _storage._externalNatIp != rhs_storage._externalNatIp {return false}
        if _storage._internalIngressIp != rhs_storage._internalIngressIp {return false}
        if _storage._externalIngressIp != rhs_storage._externalIngressIp {return false}
        if _storage._certManagerGsaEmail != rhs_storage._certManagerGsaEmail {return false}
        if _storage._externalSecretsGsaEmail != rhs_storage._externalSecretsGsaEmail {return false}
        if _storage._workloadDeployerGsaEmail != rhs_storage._workloadDeployerGsaEmail {return false}
        if _storage._workloadDeployerGsaKeyBase64 != rhs_storage._workloadDeployerGsaKeyBase64 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterNodePoolGcpState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterNodePoolGcpState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .standard(proto: "machine_type"),
    4: .standard(proto: "min_node_count"),
    5: .standard(proto: "max_node_count"),
    6: .standard(proto: "is_spot_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.machineType) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.minNodeCount) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.maxNodeCount) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isSpotEnabled) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.machineType.isEmpty {
      try visitor.visitSingularStringField(value: self.machineType, fieldNumber: 3)
    }
    if self.minNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.minNodeCount, fieldNumber: 4)
    }
    if self.maxNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.maxNodeCount, fieldNumber: 5)
    }
    if self.isSpotEnabled != false {
      try visitor.visitSingularBoolField(value: self.isSpotEnabled, fieldNumber: 6)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterNodePoolGcpState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterNodePoolGcpState) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs.machineType != rhs.machineType {return false}
    if lhs.minNodeCount != rhs.minNodeCount {return false}
    if lhs.maxNodeCount != rhs.maxNodeCount {return false}
    if lhs.isSpotEnabled != rhs.isSpotEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterAwsSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aws_cloud_account_id"),
    2: .same(proto: "region"),
    3: .standard(proto: "vpc_id"),
    4: .standard(proto: "workers_management_mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.awsCloudAccountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vpcID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.workersManagementMode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.awsCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.awsCloudAccountID, fieldNumber: 1)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 2)
    }
    if !self.vpcID.isEmpty {
      try visitor.visitSingularStringField(value: self.vpcID, fieldNumber: 3)
    }
    if !self.workersManagementMode.isEmpty {
      try visitor.visitSingularStringField(value: self.workersManagementMode, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsSpecState) -> Bool {
    if lhs.awsCloudAccountID != rhs.awsCloudAccountID {return false}
    if lhs.region != rhs.region {return false}
    if lhs.vpcID != rhs.vpcID {return false}
    if lhs.workersManagementMode != rhs.workersManagementMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterAwsStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_vpc_id"),
    2: .standard(proto: "cluster_endpoint"),
    3: .standard(proto: "cluster_ca_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clusterVpcID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clusterEndpoint) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clusterCaData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusterVpcID.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterVpcID, fieldNumber: 1)
    }
    if !self.clusterEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterEndpoint, fieldNumber: 2)
    }
    if !self.clusterCaData.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterCaData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterAwsStatusState) -> Bool {
    if lhs.clusterVpcID != rhs.clusterVpcID {return false}
    if lhs.clusterEndpoint != rhs.clusterEndpoint {return false}
    if lhs.clusterCaData != rhs.clusterCaData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
