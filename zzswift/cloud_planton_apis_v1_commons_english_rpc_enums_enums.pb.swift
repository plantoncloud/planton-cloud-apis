// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/english/rpc/enums/enums.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// english word enums added to avoid typing mistakes for the commonly used words for naming things
/// this enum is encapsulated inside a message as a few entries like "name" (a reserved word in few languages) can only be added to the enum if it is inside a message.
/// the recommended best practice to prefix the entry with enum name has been intentionally ignored to as the values of the entries are intended to be used to name resources.
public struct Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum WordEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case wordUnspecified // = 0
    case app // = 1
    case application // = 2
    case aws // = 3
    case azure // = 4
    case bill // = 5
    case company // = 6
    case config // = 7
    case cpu // = 8
    case debug // = 9
    case docker // = 10
    case domain // = 11
    case email // = 12
    case endpoint // = 13
    case external // = 14
    case file // = 15
    case gcp // = 16
    case google // = 17
    case hosting // = 18
    case hostname // = 19
    case id // = 20
    case ingress // = 21
    case instances // = 22
    case `internal` // = 23
    case ip // = 24
    case key // = 25
    case kubeconfig // = 26
    case kubernetes // = 27
    case localhost // = 28
    case machine // = 29
    case main // = 30
    case maven // = 31
    case memory // = 32
    case microservice // = 33
    case name // = 34
    case nameservers // = 35
    case namespace // = 36
    case network // = 37
    case npm // = 38
    case number // = 39
    case org // = 40
    case parent // = 41
    case postgres // = 42
    case product // = 43
    case project // = 44
    case python // = 45
    case repo // = 46
    case review // = 47
    case server // = 48
    case servers // = 49
    case share // = 50
    case sharedServices // = 51
    case spilo // = 52
    case spot // = 53
    case stunnel // = 54
    case team // = 55
    case type // = 56
    case username // = 57
    case util // = 58
    case version // = 59
    case workload // = 60
    case url // = 61
    case env // = 62
    case kafka // = 63
    case unknown // = 64
    case resource // = 65
    case resourceID // = 66
    case resourceType // = 67
    case environment // = 68
    case UNRECOGNIZED(Int)

    public init() {
      self = .wordUnspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .wordUnspecified
      case 1: self = .app
      case 2: self = .application
      case 3: self = .aws
      case 4: self = .azure
      case 5: self = .bill
      case 6: self = .company
      case 7: self = .config
      case 8: self = .cpu
      case 9: self = .debug
      case 10: self = .docker
      case 11: self = .domain
      case 12: self = .email
      case 13: self = .endpoint
      case 14: self = .external
      case 15: self = .file
      case 16: self = .gcp
      case 17: self = .google
      case 18: self = .hosting
      case 19: self = .hostname
      case 20: self = .id
      case 21: self = .ingress
      case 22: self = .instances
      case 23: self = .internal
      case 24: self = .ip
      case 25: self = .key
      case 26: self = .kubeconfig
      case 27: self = .kubernetes
      case 28: self = .localhost
      case 29: self = .machine
      case 30: self = .main
      case 31: self = .maven
      case 32: self = .memory
      case 33: self = .microservice
      case 34: self = .name
      case 35: self = .nameservers
      case 36: self = .namespace
      case 37: self = .network
      case 38: self = .npm
      case 39: self = .number
      case 40: self = .org
      case 41: self = .parent
      case 42: self = .postgres
      case 43: self = .product
      case 44: self = .project
      case 45: self = .python
      case 46: self = .repo
      case 47: self = .review
      case 48: self = .server
      case 49: self = .servers
      case 50: self = .share
      case 51: self = .sharedServices
      case 52: self = .spilo
      case 53: self = .spot
      case 54: self = .stunnel
      case 55: self = .team
      case 56: self = .type
      case 57: self = .username
      case 58: self = .util
      case 59: self = .version
      case 60: self = .workload
      case 61: self = .url
      case 62: self = .env
      case 63: self = .kafka
      case 64: self = .unknown
      case 65: self = .resource
      case 66: self = .resourceID
      case 67: self = .resourceType
      case 68: self = .environment
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .wordUnspecified: return 0
      case .app: return 1
      case .application: return 2
      case .aws: return 3
      case .azure: return 4
      case .bill: return 5
      case .company: return 6
      case .config: return 7
      case .cpu: return 8
      case .debug: return 9
      case .docker: return 10
      case .domain: return 11
      case .email: return 12
      case .endpoint: return 13
      case .external: return 14
      case .file: return 15
      case .gcp: return 16
      case .google: return 17
      case .hosting: return 18
      case .hostname: return 19
      case .id: return 20
      case .ingress: return 21
      case .instances: return 22
      case .internal: return 23
      case .ip: return 24
      case .key: return 25
      case .kubeconfig: return 26
      case .kubernetes: return 27
      case .localhost: return 28
      case .machine: return 29
      case .main: return 30
      case .maven: return 31
      case .memory: return 32
      case .microservice: return 33
      case .name: return 34
      case .nameservers: return 35
      case .namespace: return 36
      case .network: return 37
      case .npm: return 38
      case .number: return 39
      case .org: return 40
      case .parent: return 41
      case .postgres: return 42
      case .product: return 43
      case .project: return 44
      case .python: return 45
      case .repo: return 46
      case .review: return 47
      case .server: return 48
      case .servers: return 49
      case .share: return 50
      case .sharedServices: return 51
      case .spilo: return 52
      case .spot: return 53
      case .stunnel: return 54
      case .team: return 55
      case .type: return 56
      case .username: return 57
      case .util: return 58
      case .version: return 59
      case .workload: return 60
      case .url: return 61
      case .env: return 62
      case .kafka: return 63
      case .unknown: return 64
      case .resource: return 65
      case .resourceID: return 66
      case .resourceType: return 67
      case .environment: return 68
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word.WordEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word.WordEnum] = [
    .wordUnspecified,
    .app,
    .application,
    .aws,
    .azure,
    .bill,
    .company,
    .config,
    .cpu,
    .debug,
    .docker,
    .domain,
    .email,
    .endpoint,
    .external,
    .file,
    .gcp,
    .google,
    .hosting,
    .hostname,
    .id,
    .ingress,
    .instances,
    .internal,
    .ip,
    .key,
    .kubeconfig,
    .kubernetes,
    .localhost,
    .machine,
    .main,
    .maven,
    .memory,
    .microservice,
    .name,
    .nameservers,
    .namespace,
    .network,
    .npm,
    .number,
    .org,
    .parent,
    .postgres,
    .product,
    .project,
    .python,
    .repo,
    .review,
    .server,
    .servers,
    .share,
    .sharedServices,
    .spilo,
    .spot,
    .stunnel,
    .team,
    .type,
    .username,
    .util,
    .version,
    .workload,
    .url,
    .env,
    .kafka,
    .unknown,
    .resource,
    .resourceID,
    .resourceType,
    .environment,
  ]
}

#endif  // swift(>=4.2)

/// english acronym enums added to avoid typing mistakes for the commonly used acronyms for naming things
/// this enum is encapsulated inside a message as a few entries like "name" (a reserved word in few languages) can only be added to the enum if it is inside a message.
/// the recommended best practice to prefix the entry with enum name has been intentionally ignored to as the values of the entries are intended to be used to name resources.
public struct Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum AcronymEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case acronymUnspecified // = 0

    /// network
    case nw // = 1

    /// rpc
    case rpc // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .acronymUnspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acronymUnspecified
      case 1: self = .nw
      case 2: self = .rpc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .acronymUnspecified: return 0
      case .nw: return 1
      case .rpc: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym.AcronymEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym.AcronymEnum] = [
    .acronymUnspecified,
    .nw,
    .rpc,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word.WordEnum: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym.AcronymEnum: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.commons.english.rpc.enums"

extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Word"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word, rhs: Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Word.WordEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "word_unspecified"),
    1: .same(proto: "app"),
    2: .same(proto: "application"),
    3: .same(proto: "aws"),
    4: .same(proto: "azure"),
    5: .same(proto: "bill"),
    6: .same(proto: "company"),
    7: .same(proto: "config"),
    8: .same(proto: "cpu"),
    9: .same(proto: "debug"),
    10: .same(proto: "docker"),
    11: .same(proto: "domain"),
    12: .same(proto: "email"),
    13: .same(proto: "endpoint"),
    14: .same(proto: "external"),
    15: .same(proto: "file"),
    16: .same(proto: "gcp"),
    17: .same(proto: "google"),
    18: .same(proto: "hosting"),
    19: .same(proto: "hostname"),
    20: .same(proto: "id"),
    21: .same(proto: "ingress"),
    22: .same(proto: "instances"),
    23: .same(proto: "internal"),
    24: .same(proto: "ip"),
    25: .same(proto: "key"),
    26: .same(proto: "kubeconfig"),
    27: .same(proto: "kubernetes"),
    28: .same(proto: "localhost"),
    29: .same(proto: "machine"),
    30: .same(proto: "main"),
    31: .same(proto: "maven"),
    32: .same(proto: "memory"),
    33: .same(proto: "microservice"),
    34: .same(proto: "name"),
    35: .same(proto: "nameservers"),
    36: .same(proto: "namespace"),
    37: .same(proto: "network"),
    38: .same(proto: "npm"),
    39: .same(proto: "number"),
    40: .same(proto: "org"),
    41: .same(proto: "parent"),
    42: .same(proto: "postgres"),
    43: .same(proto: "product"),
    44: .same(proto: "project"),
    45: .same(proto: "python"),
    46: .same(proto: "repo"),
    47: .same(proto: "review"),
    48: .same(proto: "server"),
    49: .same(proto: "servers"),
    50: .same(proto: "share"),
    51: .same(proto: "shared_services"),
    52: .same(proto: "spilo"),
    53: .same(proto: "spot"),
    54: .same(proto: "stunnel"),
    55: .same(proto: "team"),
    56: .same(proto: "type"),
    57: .same(proto: "username"),
    58: .same(proto: "util"),
    59: .same(proto: "version"),
    60: .same(proto: "workload"),
    61: .same(proto: "url"),
    62: .same(proto: "env"),
    63: .same(proto: "kafka"),
    64: .same(proto: "unknown"),
    65: .same(proto: "resource"),
    66: .same(proto: "resource_id"),
    67: .same(proto: "resource_type"),
    68: .same(proto: "environment"),
  ]
}

extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Acronym"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym, rhs: Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_English_Rpc_Enums_Acronym.AcronymEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACRONYM_UNSPECIFIED"),
    1: .same(proto: "NW"),
    2: .same(proto: "RPC"),
  ]
}
