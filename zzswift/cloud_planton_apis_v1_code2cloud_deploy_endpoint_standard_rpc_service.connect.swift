// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/deploy/endpoint/standard/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///standard-endpoint command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointCommandControllerClientInterface {

    ///create standard-endpoint
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>

    ///update an existing standard-endpoint
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>

    ///delete standard-endpoint
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>

    ///restore a deleted standard-endpoint
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointCommandController", type: .unary)
        }
    }
}

///standard-endpoint query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointQueryControllerClientInterface {

    ///list all standard-endpoints on planton cloud for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList>

    ///look up standard-endpoint using standard-endpoint id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>

    ///find standard-endpoints by product id.
    ///response contains only the endpoint domains that the authenticated user account id as viewer access to.
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints>

    ///find standard-endpoints by environment id.
    ///response contains only the endpoint domains that the authenticated user account id as viewer access to.
    @available(iOS 13, *)
    func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints>

    ///find certificates for standard-endpoint
    @available(iOS 13, *)
    func `findStandardEndpointCertificates`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates>

    ///check status of dns resolution for standard-endpoint.
    ///confirms if the dns of the standard-endpoint domain is resolving to the correct address.
    @available(iOS 13, *)
    func `getStandardEndpointDsnResolutionStatus`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController/findByEnvironmentId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findStandardEndpointCertificates`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Certificates> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController/findStandardEndpointCertificates", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getStandardEndpointDsnResolutionStatus`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController/getStandardEndpointDsnResolutionStatus", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController", type: .unary)
            public static let findByEnvironmentID = Connect.MethodSpec(name: "findByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController", type: .unary)
            public static let findStandardEndpointCertificates = Connect.MethodSpec(name: "findStandardEndpointCertificates", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController", type: .unary)
            public static let getStandardEndpointDsnResolutionStatus = Connect.MethodSpec(name: "getStandardEndpointDsnResolutionStatus", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointQueryController", type: .unary)
        }
    }
}

///standard-endpoint stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStackControllerClientInterface {

    ///preview standard-endpoint stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>

    ///apply standard-endpoint stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc.StandardEndpointStackController", type: .unary)
        }
    }
}
