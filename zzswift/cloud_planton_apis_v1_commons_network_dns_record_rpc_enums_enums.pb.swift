// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/network/dns/record/rpc/enums/enums.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// dns record type
/// the recommended best practice to prefix the entry with enum name has been intentionally ignored to ensure that the enum's value matches the dns record type.
public enum Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0

  ///host address
  case a // = 1

  ///ipv6 host address
  case aaaa // = 2

  ///auto resolved alias
  case alias // = 3

  ///canonical name for an alias
  case cname // = 4

  ///mail exchange
  case mx // = 5

  ///name server
  case ns // = 6

  ///pointer
  case ptr // = 7

  ///start of authority
  case soa // = 8

  ///location of service
  case srv // = 9

  ///descriptive text
  case txt // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .a
    case 2: self = .aaaa
    case 3: self = .alias
    case 4: self = .cname
    case 5: self = .mx
    case 6: self = .ns
    case 7: self = .ptr
    case 8: self = .soa
    case 9: self = .srv
    case 10: self = .txt
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .a: return 1
    case .aaaa: return 2
    case .alias: return 3
    case .cname: return 4
    case .mx: return 5
    case .ns: return 6
    case .ptr: return 7
    case .soa: return 8
    case .srv: return 9
    case .txt: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType] = [
    .unspecified,
    .a,
    .aaaa,
    .alias,
    .cname,
    .mx,
    .ns,
    .ptr,
    .soa,
    .srv,
    .txt,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DNS_RECORD_TYPE_UNSPECIFIED"),
    1: .same(proto: "A"),
    2: .same(proto: "AAAA"),
    3: .same(proto: "ALIAS"),
    4: .same(proto: "CNAME"),
    5: .same(proto: "MX"),
    6: .same(proto: "NS"),
    7: .same(proto: "PTR"),
    8: .same(proto: "SOA"),
    9: .same(proto: "SRV"),
    10: .same(proto: "TXT"),
  ]
}
