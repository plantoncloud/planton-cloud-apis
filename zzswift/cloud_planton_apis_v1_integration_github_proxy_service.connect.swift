// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/integration/github/proxy/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///github proxy command controller
public protocol Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyCommandControllerClientInterface {

    ///create a new repository on github
    ///https://docs.github.com/en/rest/apps/installations?apiVersion=2022-11-28#add-a-repository-to-an-app-installation
    ///https://docs.github.com/en/rest/repos/repos#create-a-repository-for-the-authenticated-user
    ///https://docs.github.com/en/rest/repos/repos#create-an-organization-repository
    @available(iOS 13, *)
    func `creRepository`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_CreRepositoryCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///apply a cookiecutter template on a code project created on github
    @available(iOS 13, *)
    func `applyTemplate`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubApplyTemplateCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectProfile>

    ///add a list of secrets to a github repository
    @available(iOS 13, *)
    func `addSecretsToRepo`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_AddSecretsToRepoCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///add a list of secrets to a github organization
    @available(iOS 13, *)
    func `addSecretsToOrg`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_AddSecretsToOrgCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Server_Rpc_CodeServer>

    ///synchronization is achieved by first removing all yaml files prefixed with "pc:" inside .github/workflows and
    ///then add files in the input to .github/workflows directory.
    @available(iOS 13, *)
    func `synchronizeMagicPipelineFiles`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_SynchronizeGithubMagicPipelineFilesCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyCommandControllerClient: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `creRepository`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_CreRepositoryCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController/creRepository", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `applyTemplate`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubApplyTemplateCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectProfile> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController/applyTemplate", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `addSecretsToRepo`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_AddSecretsToRepoCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController/addSecretsToRepo", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `addSecretsToOrg`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_AddSecretsToOrgCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Server_Rpc_CodeServer> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController/addSecretsToOrg", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `synchronizeMagicPipelineFiles`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_SynchronizeGithubMagicPipelineFilesCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController/synchronizeMagicPipelineFiles", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let creRepository = Connect.MethodSpec(name: "creRepository", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController", type: .unary)
            public static let applyTemplate = Connect.MethodSpec(name: "applyTemplate", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController", type: .unary)
            public static let addSecretsToRepo = Connect.MethodSpec(name: "addSecretsToRepo", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController", type: .unary)
            public static let addSecretsToOrg = Connect.MethodSpec(name: "addSecretsToOrg", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController", type: .unary)
            public static let synchronizeMagicPipelineFiles = Connect.MethodSpec(name: "synchronizeMagicPipelineFiles", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyCommandController", type: .unary)
        }
    }
}

///github proxy query controller
public protocol Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyQueryControllerClientInterface {

    ///list repositories for the requested organization or user on github
    ///https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories
    ///todo: we have to add pagination support for response.
    @available(iOS 13, *)
    func `listRepositories`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_ListRepositoriesQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects>

    ///get the details of a repository on github
    @available(iOS 13, *)
    func `getRepository`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GetRepositoryQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///get details of a github app installation
    @available(iOS 13, *)
    func `getGithubAppInstallation`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubAppInstallation, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubAppInstallation>

    ///get code project profile of a code-project hosted on github
    @available(iOS 13, *)
    func `getGithubCodeProjectProfile`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GetGithubCodeProjectProfileQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectProfile>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyQueryControllerClient: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubProxyQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `listRepositories`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_ListRepositoriesQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController/listRepositories", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getRepository`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GetRepositoryQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController/getRepository", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getGithubAppInstallation`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubAppInstallation, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubAppInstallation> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController/getGithubAppInstallation", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getGithubCodeProjectProfile`(request: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GetGithubCodeProjectProfileQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectProfile> {
        return await self.client.unary(path: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController/getGithubCodeProjectProfile", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let listRepositories = Connect.MethodSpec(name: "listRepositories", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController", type: .unary)
            public static let getRepository = Connect.MethodSpec(name: "getRepository", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController", type: .unary)
            public static let getGithubAppInstallation = Connect.MethodSpec(name: "getGithubAppInstallation", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController", type: .unary)
            public static let getGithubCodeProjectProfile = Connect.MethodSpec(name: "getGithubCodeProjectProfile", service: "cloud.planton.apis.v1.integration.github.proxy.GithubProxyQueryController", type: .unary)
        }
    }
}
