// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/iam/identity/group/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///iam command controller
public protocol Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupCommandControllerClientInterface {

    /// create iam group
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup>

    /// update iam group
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup>

    /// delete iam group
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupCommandControllerClient: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupCommandController/delete", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupCommandController", type: .unary)
        }
    }
}

///iam query controller
public protocol Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupQueryControllerClientInterface {

    ///retrieve paginated list of all iam groups on planton cloud. this is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupList>

    ///lookup iam group by group id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup>

    ///list iam groups by company
    @available(iOS 13, *)
    func `listByCompanyID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_ListWithCompanyIdReq, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupList>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupQueryControllerClient: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroup> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `listByCompanyID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_ListWithCompanyIdReq, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Group_Rpc_IdentityGroupList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupQueryController/listByCompanyId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupQueryController", type: .unary)
            public static let listByCompanyID = Connect.MethodSpec(name: "listByCompanyId", service: "cloud.planton.apis.v1.iam.identity.group.rpc.IdentityGroupQueryController", type: .unary)
        }
    }
}
