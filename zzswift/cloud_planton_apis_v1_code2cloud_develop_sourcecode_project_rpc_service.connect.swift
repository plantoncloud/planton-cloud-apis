// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///code-project command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectCommandControllerClientInterface {

    ///add code-project that already exists on the code-server.
    @available(iOS 13, *)
    func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///create a code-project on selected code-server.
    ///new code projects created from planton cloud, can also choose an available code project template.
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///update an existing code-project
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///delete an existing code project.
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///restore a deleted code project of a product.
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///synchronize code projects of a product.
    ///this operation will run synchronization process on all code-servers of the product.
    @available(iOS 13, *)
    func `synchronizeByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product>

    ///synchronize code project with its counterpart on the code-server
    @available(iOS 13, *)
    func `synchronizeByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///attach a machine account to a code project on the code-server by adding client-id and client-secret as
    ///variables on the repository or project on github, gitlab etc
    @available(iOS 13, *)
    func `attachMachineAccountByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_AttachMachineAccountByCodeProjectIdCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/add", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/restore", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `synchronizeByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/synchronizeByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `synchronizeByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/synchronizeByCodeProjectId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `attachMachineAccountByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_AttachMachineAccountByCodeProjectIdCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController/attachMachineAccountByCodeProjectId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let add = Connect.MethodSpec(name: "add", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let synchronizeByProductID = Connect.MethodSpec(name: "synchronizeByProductId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let synchronizeByCodeProjectID = Connect.MethodSpec(name: "synchronizeByCodeProjectId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
            public static let attachMachineAccountByCodeProjectID = Connect.MethodSpec(name: "attachMachineAccountByCodeProjectId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectCommandController", type: .unary)
        }
    }
}

///code project query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectQueryControllerClientInterface {

    ///list all code projects on planton cloud for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectList>

    ///look up a code project by code project id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>

    ///find code projects by product id
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects>

    ///find code projects by code-server id
    @available(iOS 13, *)
    func `findByCodeServerID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Server_Rpc_CodeServerId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects>

    ///look up all code projects by code project url
    @available(iOS 13, *)
    func `findByCodeProjectURL`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectUrl, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects>

    ///find code project templates by product id to create new code project.
    ///this will be used to populate drop down of code project templates in create code project form.
    ///the response should only include code project templates that a product is authorised to use for creating new code projects.
    ///the authorization is verified by looking up code project template with `code-project-template-user` relation for the product id provided in input.
    @available(iOS 13, *)
    func `findTemplateCodeProjectsByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects>

    ///get code project profile by code project id
    @available(iOS 13, *)
    func `getCodeProjectProfileByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectProfile>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCodeServerID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Server_Rpc_CodeServerId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/findByCodeServerId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCodeProjectURL`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectUrl, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/findByCodeProjectUrl", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findTemplateCodeProjectsByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjects> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/findTemplateCodeProjectsByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getCodeProjectProfileByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectProfile> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController/getCodeProjectProfileById", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
            public static let findByCodeServerID = Connect.MethodSpec(name: "findByCodeServerId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
            public static let findByCodeProjectURL = Connect.MethodSpec(name: "findByCodeProjectUrl", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
            public static let findTemplateCodeProjectsByProductID = Connect.MethodSpec(name: "findTemplateCodeProjectsByProductId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
            public static let getCodeProjectProfileByID = Connect.MethodSpec(name: "getCodeProjectProfileById", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectQueryController", type: .unary)
        }
    }
}
