// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/iam/identity/account/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// machine-account command controller
public protocol Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountCommandControllerClientInterface {

    /// create new machine account
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// update an existing machine account
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// delete an existing machine account
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// restore an existing machine account
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountCommandControllerClient: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountCommandController", type: .unary)
        }
    }
}

/// machine-account query controller
public protocol Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountQueryControllerClientInterface {

    /// retrieve paginated list of all machine accounts on planton cloud. this is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountsList>

    /// lookup machine account by identity account id.
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// retrieve paginated list of all machine accounts on planton cloud. this is intended for use on portal.
    @available(iOS 13, *)
    func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountCompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccounts>

    /// lookup machine account by identity account email.
    @available(iOS 13, *)
    func `getByEmail`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// lookup machine-account by company and name.
    @available(iOS 13, *)
    func `getByCompanyByName`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_GetByCompanyByNameQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// lookup the client secret for the machine account.
    /// since client_secret for machine account is not stored in planton database, the client secret is
    /// retrieved from the idp account and is passed on to the client as response.
    @available(iOS 13, *)
    func `getClientSecretByMachineAccountEmail`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountClientSecret>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountQueryControllerClient: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountsList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountCompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccounts> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController/findByCompanyId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByEmail`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController/getByEmail", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByCompanyByName`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_GetByCompanyByNameQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController/getByCompanyByName", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getClientSecretByMachineAccountEmail`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_MachineAccountClientSecret> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController/getClientSecretByMachineAccountEmail", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController", type: .unary)
            public static let findByCompanyID = Connect.MethodSpec(name: "findByCompanyId", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController", type: .unary)
            public static let getByEmail = Connect.MethodSpec(name: "getByEmail", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController", type: .unary)
            public static let getByCompanyByName = Connect.MethodSpec(name: "getByCompanyByName", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController", type: .unary)
            public static let getClientSecretByMachineAccountEmail = Connect.MethodSpec(name: "getClientSecretByMachineAccountEmail", service: "cloud.planton.apis.v1.iam.identity.account.rpc.MachineAccountQueryController", type: .unary)
        }
    }
}

/// user-account query controller
public protocol Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_UserAccountQueryControllerClientInterface {

    /// retrieve paginated list of all user accounts on planton cloud. this is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountsList>

    ///todo: add authorization
    /// lookup user-account by identity account id.
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    ///todo: add authorization
    /// lookup user-account by identity account email.
    @available(iOS 13, *)
    func `getByEmail`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount>

    /// this is to check if a user is authorized to login to back office or not
    /// like other queries this rpc does not return any data
    /// instead it tries to check the authorization based on config given below
    /// if rpc returns authorization error then the user is not supposed to login to backoffice
    /// otherwise if rpc returns boolean response then the user is allowed to login to backoffice.
    @available(iOS 13, *)
    func `isBackofficeUser`(request: SwiftProtobuf.Google_Protobuf_Empty, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_BoolValue>

    /// retrieve paginated list of all associate accounts of a company. this is intended for use on portal.
    @available(iOS 13, *)
    func `listAssociatesByCompanyID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_ListWithIdentityCompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountsList>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_UserAccountQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_UserAccountQueryControllerClient: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_UserAccountQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountsList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByEmail`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountEmail, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccount> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController/getByEmail", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `isBackofficeUser`(request: SwiftProtobuf.Google_Protobuf_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_BoolValue> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController/isBackofficeUser", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `listAssociatesByCompanyID`(request: Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_ListWithIdentityCompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Identity_Account_Rpc_IdentityAccountsList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController/listAssociatesByCompanyId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController", type: .unary)
            public static let getByEmail = Connect.MethodSpec(name: "getByEmail", service: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController", type: .unary)
            public static let isBackofficeUser = Connect.MethodSpec(name: "isBackofficeUser", service: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController", type: .unary)
            public static let listAssociatesByCompanyID = Connect.MethodSpec(name: "listAssociatesByCompanyId", service: "cloud.planton.apis.v1.iam.identity.account.rpc.UserAccountQueryController", type: .unary)
        }
    }
}
