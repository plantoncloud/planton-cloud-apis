// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/endpoint/custom/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///custom-endpoint state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///event-type
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_Enums_CustomEndpointEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  ///resource api version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///custom-endpoint spec state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///the company to which the standard-endpoint belongs to.
  ///value is computed from the product.
  public var companyID: String = String()

  ///the product to which the custom-endpoint to be added.
  public var productID: String = String()

  ///the kube-cluster in which the custom-endpoint resources are created in.
  ///value is computed from the backend-environment.
  public var kubeClusterID: String = String()

  ///environment to which the requests to the endpoint domain are to be routed to.
  public var backendEnvironmentID: String = String()

  ///(optional for create) flag to toggle tls for standard-endpoint.
  ///defaults to "false".
  ///(important note) certificates are not created for endpoints that do not need tls.
  ///(important note) endpoint domains with out tls enabled are not eligible to be used for
  ///creating endpoints for postgres-clusters or kafka-clusters.
  public var isTlsEnabled: Bool = false

  ///flag to control virtual service configuration compatible for grpc-web clients.
  ///grpc-web clients would rely on extra headers added by envoy proxy.
  public var isGrpcWebCompatible: Bool = false

  ///id of the project on google cloud containing the dns zone for the endpoint-domain.
  ///this value is looked up from the dns-domains in the company dns data.
  ///this value is required for configuring the cert-issuer to perform dns validations.
  public var dnsZoneGcpProjectID: String = String()

  ///external ingress ip.
  ///ingress ip address configured for the ingress-endpoint-domain.
  ///this value is computed from the kube-cluster.
  public var externalIngressIp: String = String()

  ///email of the service account created for cert-manager component on the kube-cluster in which the
  ///environment that the standard-endpoint belongs to.
  ///this value is used for ensuring that the service account has required permissions to insert dns records in
  ///the dns zone to be able to complete dns01 challenges.
  ///this attribute is only populated if the environment is hosted in a gcp kube-cluster.
  ///this value is computed from the kube-cluster.
  public var certManagerGsaEmail: String = String()

  ///routes to configure backends for url paths of the domain.
  ///routes allow configuring requests to be routed to different microservices based on the url path.
  ///ex: if the endpoint domain name is console.example.com, then console.example.com/public/api/* can be
  ///to be sent to public-api microservice and console.example.com/private/api/* can be configured to route to
  ///route to private-api microservice.
  public var routes: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointRouteState] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///custom-endpoint status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///custom-endpoint route state
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointRouteState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  ///url path for the custom-endpoint route.
  ///(important) url path prefix combined with custom_endpoint_id combined form the composite key.
  ///(note) if endpoint domain name is console.example.com, and if the url_path_prefix is /api, then
  ///all requests that match console.example.com/api/* are forwarded to the backend microservice configured in
  ///this route.
  public var urlPathPrefix: String = String()

  ///id of the backend microservice-instance to configure the forwarding rule.
  ///ex: msi-planton-pcs-prod-company-main
  public var backendMicroserviceInstanceID: String = String()

  ///service port to which the requests matching the url
  ///defaults to 80 if the input contains 0.
  public var backendMicroserviceServicePort: Int32 = 0

  ///backend kubernetes endpoint to configure the forwarding rule.
  ///this value is computed from the status of the configured microservice-instance
  public var backendKubernetesEndpoint: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointRouteState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomEndpointState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_Enums_CustomEndpointEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomEndpointSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "kube_cluster_id"),
    4: .standard(proto: "backend_environment_id"),
    5: .standard(proto: "is_tls_enabled"),
    6: .standard(proto: "is_grpc_web_compatible"),
    7: .standard(proto: "dns_zone_gcp_project_id"),
    8: .standard(proto: "external_ingress_ip"),
    9: .standard(proto: "cert_manager_gsa_email"),
    10: .same(proto: "routes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.kubeClusterID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.backendEnvironmentID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isTlsEnabled) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isGrpcWebCompatible) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.dnsZoneGcpProjectID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.externalIngressIp) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.certManagerGsaEmail) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.routes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.kubeClusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeClusterID, fieldNumber: 3)
    }
    if !self.backendEnvironmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.backendEnvironmentID, fieldNumber: 4)
    }
    if self.isTlsEnabled != false {
      try visitor.visitSingularBoolField(value: self.isTlsEnabled, fieldNumber: 5)
    }
    if self.isGrpcWebCompatible != false {
      try visitor.visitSingularBoolField(value: self.isGrpcWebCompatible, fieldNumber: 6)
    }
    if !self.dnsZoneGcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.dnsZoneGcpProjectID, fieldNumber: 7)
    }
    if !self.externalIngressIp.isEmpty {
      try visitor.visitSingularStringField(value: self.externalIngressIp, fieldNumber: 8)
    }
    if !self.certManagerGsaEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.certManagerGsaEmail, fieldNumber: 9)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointSpecState) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.kubeClusterID != rhs.kubeClusterID {return false}
    if lhs.backendEnvironmentID != rhs.backendEnvironmentID {return false}
    if lhs.isTlsEnabled != rhs.isTlsEnabled {return false}
    if lhs.isGrpcWebCompatible != rhs.isGrpcWebCompatible {return false}
    if lhs.dnsZoneGcpProjectID != rhs.dnsZoneGcpProjectID {return false}
    if lhs.externalIngressIp != rhs.externalIngressIp {return false}
    if lhs.certManagerGsaEmail != rhs.certManagerGsaEmail {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomEndpointStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointStatusState) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointRouteState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomEndpointRouteState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .standard(proto: "url_path_prefix"),
    2: .standard(proto: "backend_microservice_instance_id"),
    3: .standard(proto: "backend_microservice_service_port"),
    4: .standard(proto: "backend_kubernetes_endpoint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.urlPathPrefix) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.backendMicroserviceInstanceID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.backendMicroserviceServicePort) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.backendKubernetesEndpoint) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.urlPathPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.urlPathPrefix, fieldNumber: 1)
    }
    if !self.backendMicroserviceInstanceID.isEmpty {
      try visitor.visitSingularStringField(value: self.backendMicroserviceInstanceID, fieldNumber: 2)
    }
    if self.backendMicroserviceServicePort != 0 {
      try visitor.visitSingularInt32Field(value: self.backendMicroserviceServicePort, fieldNumber: 3)
    }
    if !self.backendKubernetesEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.backendKubernetesEndpoint, fieldNumber: 4)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointRouteState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Custom_State_CustomEndpointRouteState) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.urlPathPrefix != rhs.urlPathPrefix {return false}
    if lhs.backendMicroserviceInstanceID != rhs.backendMicroserviceInstanceID {return false}
    if lhs.backendMicroserviceServicePort != rhs.backendMicroserviceServicePort {return false}
    if lhs.backendKubernetesEndpoint != rhs.backendKubernetesEndpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
