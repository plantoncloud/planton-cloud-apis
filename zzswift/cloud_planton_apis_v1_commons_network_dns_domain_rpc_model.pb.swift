// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/network/dns/domain/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cloud_Planton_Apis_V1_Commons_Network_Dns_Domain_Rpc_DnsDomain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// domain name example.com
  public var domainName: String = String()

  /// domain visibility. for private visibility internal reserved ips are added to the zone.
  /// for publicly visible domains external reserved domains are added to the zone.
  public var visibility: Cloud_Planton_Apis_V1_Commons_Network_Dns_Domain_Rpc_Enums_DnsDomainVisibility = .unspecified

  /// dns records to be added to the zone
  public var dnsRecords: [Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_DnsRecord] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Network_Dns_Domain_Rpc_DnsDomain: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.commons.network.dns.domain.rpc"

extension Cloud_Planton_Apis_V1_Commons_Network_Dns_Domain_Rpc_DnsDomain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsDomain"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "domain_name"),
    2: .same(proto: "visibility"),
    3: .standard(proto: "dns_records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domainName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.visibility) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.dnsRecords) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domainName.isEmpty {
      try visitor.visitSingularStringField(value: self.domainName, fieldNumber: 1)
    }
    if self.visibility != .unspecified {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 2)
    }
    if !self.dnsRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dnsRecords, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Network_Dns_Domain_Rpc_DnsDomain, rhs: Cloud_Planton_Apis_V1_Commons_Network_Dns_Domain_Rpc_DnsDomain) -> Bool {
    if lhs.domainName != rhs.domainName {return false}
    if lhs.visibility != rhs.visibility {return false}
    if lhs.dnsRecords != rhs.dnsRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
