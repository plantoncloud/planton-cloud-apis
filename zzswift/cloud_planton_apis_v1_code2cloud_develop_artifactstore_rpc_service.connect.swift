// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/develop/artifactstore/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///artifact-store command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreCommandControllerClientInterface {

    ///create artifact-store
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>

    ///update artifact-store
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>

    ///delete an artifact-store.
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>

    ///restore a deleted artifact-store.
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>

    ///restore a deleted artifact-store.
    @available(iOS 13, *)
    func `deleteArtifactStorePackageVersion`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController/restore", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `deleteArtifactStorePackageVersion`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController/deleteArtifactStorePackageVersion", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController", type: .unary)
            public static let deleteArtifactStorePackageVersion = Connect.MethodSpec(name: "deleteArtifactStorePackageVersion", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreCommandController", type: .unary)
        }
    }
}

///artifact-store query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreQueryControllerClientInterface {

    ///get artifact-store by id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>

    ///list all artifact-stores on planton cloud for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList>

    ///look up artifact-stores by product id.
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores>

    ///look up artifact-stores by code project url
    @available(iOS 13, *)
    func `findByCodeProjectURL`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectUrl, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores>

    ///list docker images from the artifact-store provided in the input
    ///(proxy google artifact-registry server)
    @available(iOS 13, *)
    func `listArtifactStoreDockerImages`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList>

    ///list maven/npm/python packages from the corresponding repositories of artifact-store provided in the input
    ///(proxy google artifact-registry server)
    @available(iOS 13, *)
    func `listArtifactStorePackages`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList>

    ///list maven/npm/python package versions from the corresponding repositories of artifact-store provided in the input
    ///(proxy google artifact-registry server)
    @available(iOS 13, *)
    func `listArtifactStorePackageVersions`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCodeProjectURL`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectUrl, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/findByCodeProjectUrl", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `listArtifactStoreDockerImages`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/listArtifactStoreDockerImages", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `listArtifactStorePackages`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/listArtifactStorePackages", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `listArtifactStorePackageVersions`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController/listArtifactStorePackageVersions", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
            public static let findByCodeProjectURL = Connect.MethodSpec(name: "findByCodeProjectUrl", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
            public static let listArtifactStoreDockerImages = Connect.MethodSpec(name: "listArtifactStoreDockerImages", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
            public static let listArtifactStorePackages = Connect.MethodSpec(name: "listArtifactStorePackages", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
            public static let listArtifactStorePackageVersions = Connect.MethodSpec(name: "listArtifactStorePackageVersions", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreQueryController", type: .unary)
        }
    }
}

///artifact-store stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStackControllerClientInterface {

    ///preview artifact-store stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>

    ///apply artifact-store stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc.ArtifactStoreStackController", type: .unary)
        }
    }
}
