// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/integration/kubernetes/cost/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///cost allocation
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _storage._sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_uniqueStorage()._sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return _storage._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {_uniqueStorage()._sysAudit = nil}

  public var companyID: String {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  public var kubeClusterID: String {
    get {return _storage._kubeClusterID}
    set {_uniqueStorage()._kubeClusterID = newValue}
  }

  public var environmentID: String {
    get {return _storage._environmentID}
    set {_uniqueStorage()._environmentID = newValue}
  }

  public var resourceType: String {
    get {return _storage._resourceType}
    set {_uniqueStorage()._resourceType = newValue}
  }

  public var resourceID: String {
    get {return _storage._resourceID}
    set {_uniqueStorage()._resourceID = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var startTs: String {
    get {return _storage._startTs}
    set {_uniqueStorage()._startTs = newValue}
  }

  public var endTs: String {
    get {return _storage._endTs}
    set {_uniqueStorage()._endTs = newValue}
  }

  public var minutes: Double {
    get {return _storage._minutes}
    set {_uniqueStorage()._minutes = newValue}
  }

  public var cpuCores: Double {
    get {return _storage._cpuCores}
    set {_uniqueStorage()._cpuCores = newValue}
  }

  public var cpuCoreRequestAverage: Double {
    get {return _storage._cpuCoreRequestAverage}
    set {_uniqueStorage()._cpuCoreRequestAverage = newValue}
  }

  public var cpuCoreUsageAverage: Double {
    get {return _storage._cpuCoreUsageAverage}
    set {_uniqueStorage()._cpuCoreUsageAverage = newValue}
  }

  public var cpuCoreHours: Double {
    get {return _storage._cpuCoreHours}
    set {_uniqueStorage()._cpuCoreHours = newValue}
  }

  public var cpuCost: Double {
    get {return _storage._cpuCost}
    set {_uniqueStorage()._cpuCost = newValue}
  }

  public var cpuCostAdjustment: Double {
    get {return _storage._cpuCostAdjustment}
    set {_uniqueStorage()._cpuCostAdjustment = newValue}
  }

  public var cpuEfficiency: Double {
    get {return _storage._cpuEfficiency}
    set {_uniqueStorage()._cpuEfficiency = newValue}
  }

  public var gpuCount: Double {
    get {return _storage._gpuCount}
    set {_uniqueStorage()._gpuCount = newValue}
  }

  public var gpuHours: Double {
    get {return _storage._gpuHours}
    set {_uniqueStorage()._gpuHours = newValue}
  }

  public var gpuCost: Double {
    get {return _storage._gpuCost}
    set {_uniqueStorage()._gpuCost = newValue}
  }

  public var gpuCostAdjustment: Double {
    get {return _storage._gpuCostAdjustment}
    set {_uniqueStorage()._gpuCostAdjustment = newValue}
  }

  public var networkTransferBytes: Double {
    get {return _storage._networkTransferBytes}
    set {_uniqueStorage()._networkTransferBytes = newValue}
  }

  public var networkReceiveBytes: Double {
    get {return _storage._networkReceiveBytes}
    set {_uniqueStorage()._networkReceiveBytes = newValue}
  }

  public var networkCost: Double {
    get {return _storage._networkCost}
    set {_uniqueStorage()._networkCost = newValue}
  }

  public var networkCrossZoneCost: Double {
    get {return _storage._networkCrossZoneCost}
    set {_uniqueStorage()._networkCrossZoneCost = newValue}
  }

  public var networkCrossRegionCost: Double {
    get {return _storage._networkCrossRegionCost}
    set {_uniqueStorage()._networkCrossRegionCost = newValue}
  }

  public var networkInternetCost: Double {
    get {return _storage._networkInternetCost}
    set {_uniqueStorage()._networkInternetCost = newValue}
  }

  public var networkCostAdjustment: Double {
    get {return _storage._networkCostAdjustment}
    set {_uniqueStorage()._networkCostAdjustment = newValue}
  }

  public var loadBalancerCost: Double {
    get {return _storage._loadBalancerCost}
    set {_uniqueStorage()._loadBalancerCost = newValue}
  }

  public var loadBalancerCostAdjustment: Double {
    get {return _storage._loadBalancerCostAdjustment}
    set {_uniqueStorage()._loadBalancerCostAdjustment = newValue}
  }

  public var pvBytes: Double {
    get {return _storage._pvBytes}
    set {_uniqueStorage()._pvBytes = newValue}
  }

  public var pvByteHours: Double {
    get {return _storage._pvByteHours}
    set {_uniqueStorage()._pvByteHours = newValue}
  }

  public var pvCost: Double {
    get {return _storage._pvCost}
    set {_uniqueStorage()._pvCost = newValue}
  }

  public var pvCostAdjustment: Double {
    get {return _storage._pvCostAdjustment}
    set {_uniqueStorage()._pvCostAdjustment = newValue}
  }

  public var ramBytes: Double {
    get {return _storage._ramBytes}
    set {_uniqueStorage()._ramBytes = newValue}
  }

  public var ramByteRequestAverage: Double {
    get {return _storage._ramByteRequestAverage}
    set {_uniqueStorage()._ramByteRequestAverage = newValue}
  }

  public var ramByteUsageAverage: Double {
    get {return _storage._ramByteUsageAverage}
    set {_uniqueStorage()._ramByteUsageAverage = newValue}
  }

  public var ramByteHours: Double {
    get {return _storage._ramByteHours}
    set {_uniqueStorage()._ramByteHours = newValue}
  }

  public var ramCost: Double {
    get {return _storage._ramCost}
    set {_uniqueStorage()._ramCost = newValue}
  }

  public var ramCostAdjustment: Double {
    get {return _storage._ramCostAdjustment}
    set {_uniqueStorage()._ramCostAdjustment = newValue}
  }

  public var ramEfficiency: Double {
    get {return _storage._ramEfficiency}
    set {_uniqueStorage()._ramEfficiency = newValue}
  }

  public var externalCost: Double {
    get {return _storage._externalCost}
    set {_uniqueStorage()._externalCost = newValue}
  }

  public var sharedCost: Double {
    get {return _storage._sharedCost}
    set {_uniqueStorage()._sharedCost = newValue}
  }

  public var totalCost: Double {
    get {return _storage._totalCost}
    set {_uniqueStorage()._totalCost = newValue}
  }

  public var totalEfficiency: Double {
    get {return _storage._totalEfficiency}
    set {_uniqueStorage()._totalEfficiency = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///list of cost allocations
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list cost allocations
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocationList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input for paginated rpc to get list of cost allocations for a resources based on provided filters.
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_ListByCostAllocationFiltersInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// page info
  public var pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo {
    get {return _pageInfo ?? Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  /// start timestamp
  public var startTs: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTs ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTs = newValue}
  }
  /// Returns true if `startTs` has been explicitly set.
  public var hasStartTs: Bool {return self._startTs != nil}
  /// Clears the value of `startTs`. Subsequent reads from it will return its default value.
  public mutating func clearStartTs() {self._startTs = nil}

  /// end timestamp
  public var endTs: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTs ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTs = newValue}
  }
  /// Returns true if `endTs` has been explicitly set.
  public var hasEndTs: Bool {return self._endTs != nil}
  /// Clears the value of `endTs`. Subsequent reads from it will return its default value.
  public mutating func clearEndTs() {self._endTs = nil}

  /// id of the product
  public var productID: String = String()

  /// id of the environment for which the cost allocations are filtered for the resource requested.
  public var environmentID: String = String()

  /// type of the resource on planton cloud.
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// id of the resource on planton cloud.
  /// ex: ms-planton-pcs-product which is the id of the microservice.
  public var resourceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo? = nil
  fileprivate var _startTs: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTs: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_GetCostAggregateInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type of the resource on planton cloud.
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// id of the resource on planton cloud.
  /// ex: ms-planton-pcs-product which is the id of the microservice.
  public var resourceID: String = String()

  ///start timestamp
  public var startTs: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTs ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTs = newValue}
  }
  /// Returns true if `startTs` has been explicitly set.
  public var hasStartTs: Bool {return self._startTs != nil}
  /// Clears the value of `startTs`. Subsequent reads from it will return its default value.
  public mutating func clearStartTs() {self._startTs = nil}

  ///end timestamp
  public var endTs: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTs ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTs = newValue}
  }
  /// Returns true if `endTs` has been explicitly set.
  public var hasEndTs: Bool {return self._endTs != nil}
  /// Clears the value of `endTs`. Subsequent reads from it will return its default value.
  public mutating func clearEndTs() {self._endTs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTs: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTs: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// wrapper for cost aggregate
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAggregate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocations: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocationList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_ListByCostAllocationFiltersInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_GetCostAggregateInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAggregate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.integration.kubernetes.cost.rpc"

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CostAllocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "kube_cluster_id"),
    4: .standard(proto: "environment_id"),
    5: .standard(proto: "resource_type"),
    6: .standard(proto: "resource_id"),
    7: .same(proto: "name"),
    8: .standard(proto: "start_ts"),
    9: .standard(proto: "end_ts"),
    10: .same(proto: "minutes"),
    11: .standard(proto: "cpu_cores"),
    12: .standard(proto: "cpu_core_request_average"),
    13: .standard(proto: "cpu_core_usage_average"),
    14: .standard(proto: "cpu_core_hours"),
    15: .standard(proto: "cpu_cost"),
    16: .standard(proto: "cpu_cost_adjustment"),
    17: .standard(proto: "cpu_efficiency"),
    18: .standard(proto: "gpu_count"),
    19: .standard(proto: "gpu_hours"),
    20: .standard(proto: "gpu_cost"),
    21: .standard(proto: "gpu_cost_adjustment"),
    22: .standard(proto: "network_transfer_bytes"),
    23: .standard(proto: "network_receive_bytes"),
    24: .standard(proto: "network_cost"),
    25: .standard(proto: "network_cross_zone_cost"),
    26: .standard(proto: "network_cross_region_cost"),
    27: .standard(proto: "network_internet_cost"),
    28: .standard(proto: "network_cost_adjustment"),
    29: .standard(proto: "load_balancer_cost"),
    30: .standard(proto: "load_balancer_cost_adjustment"),
    31: .standard(proto: "pv_bytes"),
    32: .standard(proto: "pv_byte_hours"),
    33: .standard(proto: "pv_cost"),
    34: .standard(proto: "pv_cost_adjustment"),
    35: .standard(proto: "ram_bytes"),
    36: .standard(proto: "ram_byte_request_average"),
    37: .standard(proto: "ram_byte_usage_average"),
    38: .standard(proto: "ram_byte_hours"),
    39: .standard(proto: "ram_cost"),
    40: .standard(proto: "ram_cost_adjustment"),
    41: .standard(proto: "ram_efficiency"),
    42: .standard(proto: "external_cost"),
    43: .standard(proto: "shared_cost"),
    44: .standard(proto: "total_cost"),
    45: .standard(proto: "total_efficiency"),
  ]

  fileprivate class _StorageClass {
    var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
    var _companyID: String = String()
    var _productID: String = String()
    var _kubeClusterID: String = String()
    var _environmentID: String = String()
    var _resourceType: String = String()
    var _resourceID: String = String()
    var _name: String = String()
    var _startTs: String = String()
    var _endTs: String = String()
    var _minutes: Double = 0
    var _cpuCores: Double = 0
    var _cpuCoreRequestAverage: Double = 0
    var _cpuCoreUsageAverage: Double = 0
    var _cpuCoreHours: Double = 0
    var _cpuCost: Double = 0
    var _cpuCostAdjustment: Double = 0
    var _cpuEfficiency: Double = 0
    var _gpuCount: Double = 0
    var _gpuHours: Double = 0
    var _gpuCost: Double = 0
    var _gpuCostAdjustment: Double = 0
    var _networkTransferBytes: Double = 0
    var _networkReceiveBytes: Double = 0
    var _networkCost: Double = 0
    var _networkCrossZoneCost: Double = 0
    var _networkCrossRegionCost: Double = 0
    var _networkInternetCost: Double = 0
    var _networkCostAdjustment: Double = 0
    var _loadBalancerCost: Double = 0
    var _loadBalancerCostAdjustment: Double = 0
    var _pvBytes: Double = 0
    var _pvByteHours: Double = 0
    var _pvCost: Double = 0
    var _pvCostAdjustment: Double = 0
    var _ramBytes: Double = 0
    var _ramByteRequestAverage: Double = 0
    var _ramByteUsageAverage: Double = 0
    var _ramByteHours: Double = 0
    var _ramCost: Double = 0
    var _ramCostAdjustment: Double = 0
    var _ramEfficiency: Double = 0
    var _externalCost: Double = 0
    var _sharedCost: Double = 0
    var _totalCost: Double = 0
    var _totalEfficiency: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sysAudit = source._sysAudit
      _companyID = source._companyID
      _productID = source._productID
      _kubeClusterID = source._kubeClusterID
      _environmentID = source._environmentID
      _resourceType = source._resourceType
      _resourceID = source._resourceID
      _name = source._name
      _startTs = source._startTs
      _endTs = source._endTs
      _minutes = source._minutes
      _cpuCores = source._cpuCores
      _cpuCoreRequestAverage = source._cpuCoreRequestAverage
      _cpuCoreUsageAverage = source._cpuCoreUsageAverage
      _cpuCoreHours = source._cpuCoreHours
      _cpuCost = source._cpuCost
      _cpuCostAdjustment = source._cpuCostAdjustment
      _cpuEfficiency = source._cpuEfficiency
      _gpuCount = source._gpuCount
      _gpuHours = source._gpuHours
      _gpuCost = source._gpuCost
      _gpuCostAdjustment = source._gpuCostAdjustment
      _networkTransferBytes = source._networkTransferBytes
      _networkReceiveBytes = source._networkReceiveBytes
      _networkCost = source._networkCost
      _networkCrossZoneCost = source._networkCrossZoneCost
      _networkCrossRegionCost = source._networkCrossRegionCost
      _networkInternetCost = source._networkInternetCost
      _networkCostAdjustment = source._networkCostAdjustment
      _loadBalancerCost = source._loadBalancerCost
      _loadBalancerCostAdjustment = source._loadBalancerCostAdjustment
      _pvBytes = source._pvBytes
      _pvByteHours = source._pvByteHours
      _pvCost = source._pvCost
      _pvCostAdjustment = source._pvCostAdjustment
      _ramBytes = source._ramBytes
      _ramByteRequestAverage = source._ramByteRequestAverage
      _ramByteUsageAverage = source._ramByteUsageAverage
      _ramByteHours = source._ramByteHours
      _ramCost = source._ramCost
      _ramCostAdjustment = source._ramCostAdjustment
      _ramEfficiency = source._ramEfficiency
      _externalCost = source._externalCost
      _sharedCost = source._sharedCost
      _totalCost = source._totalCost
      _totalEfficiency = source._totalEfficiency
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._companyID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._kubeClusterID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._environmentID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._resourceType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._resourceID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._startTs) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._endTs) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._minutes) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuCores) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuCoreRequestAverage) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuCoreUsageAverage) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuCoreHours) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuCost) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuCostAdjustment) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._cpuEfficiency) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._gpuCount) }()
        case 19: try { try decoder.decodeSingularDoubleField(value: &_storage._gpuHours) }()
        case 20: try { try decoder.decodeSingularDoubleField(value: &_storage._gpuCost) }()
        case 21: try { try decoder.decodeSingularDoubleField(value: &_storage._gpuCostAdjustment) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._networkTransferBytes) }()
        case 23: try { try decoder.decodeSingularDoubleField(value: &_storage._networkReceiveBytes) }()
        case 24: try { try decoder.decodeSingularDoubleField(value: &_storage._networkCost) }()
        case 25: try { try decoder.decodeSingularDoubleField(value: &_storage._networkCrossZoneCost) }()
        case 26: try { try decoder.decodeSingularDoubleField(value: &_storage._networkCrossRegionCost) }()
        case 27: try { try decoder.decodeSingularDoubleField(value: &_storage._networkInternetCost) }()
        case 28: try { try decoder.decodeSingularDoubleField(value: &_storage._networkCostAdjustment) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._loadBalancerCost) }()
        case 30: try { try decoder.decodeSingularDoubleField(value: &_storage._loadBalancerCostAdjustment) }()
        case 31: try { try decoder.decodeSingularDoubleField(value: &_storage._pvBytes) }()
        case 32: try { try decoder.decodeSingularDoubleField(value: &_storage._pvByteHours) }()
        case 33: try { try decoder.decodeSingularDoubleField(value: &_storage._pvCost) }()
        case 34: try { try decoder.decodeSingularDoubleField(value: &_storage._pvCostAdjustment) }()
        case 35: try { try decoder.decodeSingularDoubleField(value: &_storage._ramBytes) }()
        case 36: try { try decoder.decodeSingularDoubleField(value: &_storage._ramByteRequestAverage) }()
        case 37: try { try decoder.decodeSingularDoubleField(value: &_storage._ramByteUsageAverage) }()
        case 38: try { try decoder.decodeSingularDoubleField(value: &_storage._ramByteHours) }()
        case 39: try { try decoder.decodeSingularDoubleField(value: &_storage._ramCost) }()
        case 40: try { try decoder.decodeSingularDoubleField(value: &_storage._ramCostAdjustment) }()
        case 41: try { try decoder.decodeSingularDoubleField(value: &_storage._ramEfficiency) }()
        case 42: try { try decoder.decodeSingularDoubleField(value: &_storage._externalCost) }()
        case 43: try { try decoder.decodeSingularDoubleField(value: &_storage._sharedCost) }()
        case 44: try { try decoder.decodeSingularDoubleField(value: &_storage._totalCost) }()
        case 45: try { try decoder.decodeSingularDoubleField(value: &_storage._totalEfficiency) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._sysAudit) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._companyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyID, fieldNumber: 1)
      }
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 2)
      }
      if !_storage._kubeClusterID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kubeClusterID, fieldNumber: 3)
      }
      if !_storage._environmentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._environmentID, fieldNumber: 4)
      }
      if !_storage._resourceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resourceType, fieldNumber: 5)
      }
      if !_storage._resourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resourceID, fieldNumber: 6)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 7)
      }
      if !_storage._startTs.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTs, fieldNumber: 8)
      }
      if !_storage._endTs.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTs, fieldNumber: 9)
      }
      if _storage._minutes != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minutes, fieldNumber: 10)
      }
      if _storage._cpuCores != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuCores, fieldNumber: 11)
      }
      if _storage._cpuCoreRequestAverage != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuCoreRequestAverage, fieldNumber: 12)
      }
      if _storage._cpuCoreUsageAverage != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuCoreUsageAverage, fieldNumber: 13)
      }
      if _storage._cpuCoreHours != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuCoreHours, fieldNumber: 14)
      }
      if _storage._cpuCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuCost, fieldNumber: 15)
      }
      if _storage._cpuCostAdjustment != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuCostAdjustment, fieldNumber: 16)
      }
      if _storage._cpuEfficiency != 0 {
        try visitor.visitSingularDoubleField(value: _storage._cpuEfficiency, fieldNumber: 17)
      }
      if _storage._gpuCount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gpuCount, fieldNumber: 18)
      }
      if _storage._gpuHours != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gpuHours, fieldNumber: 19)
      }
      if _storage._gpuCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gpuCost, fieldNumber: 20)
      }
      if _storage._gpuCostAdjustment != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gpuCostAdjustment, fieldNumber: 21)
      }
      if _storage._networkTransferBytes != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkTransferBytes, fieldNumber: 22)
      }
      if _storage._networkReceiveBytes != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkReceiveBytes, fieldNumber: 23)
      }
      if _storage._networkCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkCost, fieldNumber: 24)
      }
      if _storage._networkCrossZoneCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkCrossZoneCost, fieldNumber: 25)
      }
      if _storage._networkCrossRegionCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkCrossRegionCost, fieldNumber: 26)
      }
      if _storage._networkInternetCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkInternetCost, fieldNumber: 27)
      }
      if _storage._networkCostAdjustment != 0 {
        try visitor.visitSingularDoubleField(value: _storage._networkCostAdjustment, fieldNumber: 28)
      }
      if _storage._loadBalancerCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._loadBalancerCost, fieldNumber: 29)
      }
      if _storage._loadBalancerCostAdjustment != 0 {
        try visitor.visitSingularDoubleField(value: _storage._loadBalancerCostAdjustment, fieldNumber: 30)
      }
      if _storage._pvBytes != 0 {
        try visitor.visitSingularDoubleField(value: _storage._pvBytes, fieldNumber: 31)
      }
      if _storage._pvByteHours != 0 {
        try visitor.visitSingularDoubleField(value: _storage._pvByteHours, fieldNumber: 32)
      }
      if _storage._pvCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._pvCost, fieldNumber: 33)
      }
      if _storage._pvCostAdjustment != 0 {
        try visitor.visitSingularDoubleField(value: _storage._pvCostAdjustment, fieldNumber: 34)
      }
      if _storage._ramBytes != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramBytes, fieldNumber: 35)
      }
      if _storage._ramByteRequestAverage != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramByteRequestAverage, fieldNumber: 36)
      }
      if _storage._ramByteUsageAverage != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramByteUsageAverage, fieldNumber: 37)
      }
      if _storage._ramByteHours != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramByteHours, fieldNumber: 38)
      }
      if _storage._ramCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramCost, fieldNumber: 39)
      }
      if _storage._ramCostAdjustment != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramCostAdjustment, fieldNumber: 40)
      }
      if _storage._ramEfficiency != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ramEfficiency, fieldNumber: 41)
      }
      if _storage._externalCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._externalCost, fieldNumber: 42)
      }
      if _storage._sharedCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._sharedCost, fieldNumber: 43)
      }
      if _storage._totalCost != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalCost, fieldNumber: 44)
      }
      if _storage._totalEfficiency != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalEfficiency, fieldNumber: 45)
      }
      try { if let v = _storage._sysAudit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sysAudit != rhs_storage._sysAudit {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._kubeClusterID != rhs_storage._kubeClusterID {return false}
        if _storage._environmentID != rhs_storage._environmentID {return false}
        if _storage._resourceType != rhs_storage._resourceType {return false}
        if _storage._resourceID != rhs_storage._resourceID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._startTs != rhs_storage._startTs {return false}
        if _storage._endTs != rhs_storage._endTs {return false}
        if _storage._minutes != rhs_storage._minutes {return false}
        if _storage._cpuCores != rhs_storage._cpuCores {return false}
        if _storage._cpuCoreRequestAverage != rhs_storage._cpuCoreRequestAverage {return false}
        if _storage._cpuCoreUsageAverage != rhs_storage._cpuCoreUsageAverage {return false}
        if _storage._cpuCoreHours != rhs_storage._cpuCoreHours {return false}
        if _storage._cpuCost != rhs_storage._cpuCost {return false}
        if _storage._cpuCostAdjustment != rhs_storage._cpuCostAdjustment {return false}
        if _storage._cpuEfficiency != rhs_storage._cpuEfficiency {return false}
        if _storage._gpuCount != rhs_storage._gpuCount {return false}
        if _storage._gpuHours != rhs_storage._gpuHours {return false}
        if _storage._gpuCost != rhs_storage._gpuCost {return false}
        if _storage._gpuCostAdjustment != rhs_storage._gpuCostAdjustment {return false}
        if _storage._networkTransferBytes != rhs_storage._networkTransferBytes {return false}
        if _storage._networkReceiveBytes != rhs_storage._networkReceiveBytes {return false}
        if _storage._networkCost != rhs_storage._networkCost {return false}
        if _storage._networkCrossZoneCost != rhs_storage._networkCrossZoneCost {return false}
        if _storage._networkCrossRegionCost != rhs_storage._networkCrossRegionCost {return false}
        if _storage._networkInternetCost != rhs_storage._networkInternetCost {return false}
        if _storage._networkCostAdjustment != rhs_storage._networkCostAdjustment {return false}
        if _storage._loadBalancerCost != rhs_storage._loadBalancerCost {return false}
        if _storage._loadBalancerCostAdjustment != rhs_storage._loadBalancerCostAdjustment {return false}
        if _storage._pvBytes != rhs_storage._pvBytes {return false}
        if _storage._pvByteHours != rhs_storage._pvByteHours {return false}
        if _storage._pvCost != rhs_storage._pvCost {return false}
        if _storage._pvCostAdjustment != rhs_storage._pvCostAdjustment {return false}
        if _storage._ramBytes != rhs_storage._ramBytes {return false}
        if _storage._ramByteRequestAverage != rhs_storage._ramByteRequestAverage {return false}
        if _storage._ramByteUsageAverage != rhs_storage._ramByteUsageAverage {return false}
        if _storage._ramByteHours != rhs_storage._ramByteHours {return false}
        if _storage._ramCost != rhs_storage._ramCost {return false}
        if _storage._ramCostAdjustment != rhs_storage._ramCostAdjustment {return false}
        if _storage._ramEfficiency != rhs_storage._ramEfficiency {return false}
        if _storage._externalCost != rhs_storage._externalCost {return false}
        if _storage._sharedCost != rhs_storage._sharedCost {return false}
        if _storage._totalCost != rhs_storage._totalCost {return false}
        if _storage._totalEfficiency != rhs_storage._totalEfficiency {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CostAllocations"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocations, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocations) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocationList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CostAllocationList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocationList, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAllocationList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_ListByCostAllocationFiltersInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListByCostAllocationFiltersInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_info"),
    2: .standard(proto: "start_ts"),
    3: .standard(proto: "end_ts"),
    4: .standard(proto: "product_id"),
    5: .standard(proto: "environment_id"),
    6: .standard(proto: "resource_type"),
    7: .standard(proto: "resource_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTs) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.resourceType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._startTs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._endTs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 4)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 5)
    }
    if self.resourceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resourceType, fieldNumber: 6)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_ListByCostAllocationFiltersInput, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_ListByCostAllocationFiltersInput) -> Bool {
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs._startTs != rhs._startTs {return false}
    if lhs._endTs != rhs._endTs {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_GetCostAggregateInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCostAggregateInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_type"),
    2: .standard(proto: "resource_id"),
    3: .standard(proto: "start_ts"),
    4: .standard(proto: "end_ts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.resourceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startTs) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._endTs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.resourceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resourceType, fieldNumber: 1)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 2)
    }
    try { if let v = self._startTs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._endTs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_GetCostAggregateInput, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_GetCostAggregateInput) -> Bool {
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs._startTs != rhs._startTs {return false}
    if lhs._endTs != rhs._endTs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAggregate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CostAggregate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAggregate, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Cost_Rpc_CostAggregate) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
