// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/develop/artifactstore/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///artifact-store state
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///event-type
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_Enums_ArtifactStoreEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  ///resource api version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///artifact-store spec state
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///company to which the artifact-store belongs to.
  public var companyID: String = String()

  ///product to which the artifact-store belongs to.
  public var productID: String = String()

  ///username used to pull and push changes to/from a repository on buf.build registry.
  ///this value is used in ci/cd pipelines of code-projects
  public var bufUsername: String = String()

  ///token used to pull and push changes to/from a repository on buf.build registry.
  ///this value is used in ci/cd pipelines of code-projects
  public var bufToken: String = String()

  ///base64 encoded git ssh key to clone golang code projects as part of code pipeline executions.
  ///used in code pipelines which would require git authentication to fetch dependencies that rely on git.
  ///both golang and swift code projects use git for dependency management.
  public var goModuleFetchGitSshKeyBase64: String = String()

  ///provider for the artifact-store repositories
  public var repoProvider: String = String()

  ///specification for google cloud artifact registry.
  ///this attribute is only populated when the artifact-store repo provider is artifact-registry on google cloud.
  public var gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState {
    get {return _gcpArtifactRegistry ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState()}
    set {_gcpArtifactRegistry = newValue}
  }
  /// Returns true if `gcpArtifactRegistry` has been explicitly set.
  public var hasGcpArtifactRegistry: Bool {return self._gcpArtifactRegistry != nil}
  /// Clears the value of `gcpArtifactRegistry`. Subsequent reads from it will return its default value.
  public mutating func clearGcpArtifactRegistry() {self._gcpArtifactRegistry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState? = nil
}

///artifact-store status state
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _storage._lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_uniqueStorage()._lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return _storage._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {_uniqueStorage()._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _storage._sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_uniqueStorage()._sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return _storage._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {_uniqueStorage()._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String {
    get {return _storage._stackJobID}
    set {_uniqueStorage()._stackJobID = newValue}
  }

  ///status for artifact-store repositories created on gcp artifact-registry.
  ///this is only populated when the gcp artifact-registry is configured as the repo-provider.
  public var gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState {
    get {return _storage._gcpArtifactRegistry ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState()}
    set {_uniqueStorage()._gcpArtifactRegistry = newValue}
  }
  /// Returns true if `gcpArtifactRegistry` has been explicitly set.
  public var hasGcpArtifactRegistry: Bool {return _storage._gcpArtifactRegistry != nil}
  /// Clears the value of `gcpArtifactRegistry`. Subsequent reads from it will return its default value.
  public mutating func clearGcpArtifactRegistry() {_uniqueStorage()._gcpArtifactRegistry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///spec for gcp artifact-registry repo provider for artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the gcp cloud account in which the artifact-store repositories are to be created.
  ///the allowed values for this attribute are all the gcp cloud accounts that the parent company of the product
  ///has required permissions to create artifact-store in.
  public var gcpCloudAccountID: String = String()

  ///id of the gcp project in which the artifact-registry resources are to be created.
  ///this is computed from the configured gcp cloud-account.
  ///artifact-registry resources are created in core-infra project created in the connected gcp cloud-account.
  public var projectID: String = String()

  ///gcp region in which the artifact-store is to be created ex: us-west2.
  ///choosing the closest region for the kube-clusters in which the environments of the product are
  ///hosted reduces the service startup time as the container images are downloaded faster.
  public var region: String = String()

  ///flag to control access to artifacts published to repositories without any authentication.
  ///this is useful for publishing artifacts for opensource projects.
  public var isExternal: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///status for gcp artifact-registry repo provider for artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///email of the reader service account.
  public var readerServiceAccountEmail: String = String()

  ///base64 encoded key of the reader service account.
  public var readerServiceAccountKeyBase64: String = String()

  ///email of the writer service account.
  public var writerServiceAccountEmail: String = String()

  ///base64 encoded key of the writer service account.
  public var writerServiceAccountKeyBase64: String = String()

  ///name of the docker repo.
  public var dockerRepoName: String = String()

  ///hostname of the docker repo.
  public var dockerRepoHostname: String = String()

  ///url for the docker repository.
  public var dockerRepoURL: String = String()

  ///name of the maven repo.
  public var mavenRepoName: String = String()

  ///url for the maven repository.
  public var mavenRepoURL: String = String()

  ///name of the npm repo.
  public var npmRepoName: String = String()

  ///name of the python repo.
  public var pythonRepoName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.develop.artifactstore.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_Enums_ArtifactStoreEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "buf_username"),
    4: .standard(proto: "buf_token"),
    5: .standard(proto: "go_module_fetch_git_ssh_key_base64"),
    6: .standard(proto: "repo_provider"),
    7: .standard(proto: "gcp_artifact_registry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bufUsername) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.bufToken) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.goModuleFetchGitSshKeyBase64) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.repoProvider) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._gcpArtifactRegistry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.bufUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.bufUsername, fieldNumber: 3)
    }
    if !self.bufToken.isEmpty {
      try visitor.visitSingularStringField(value: self.bufToken, fieldNumber: 4)
    }
    if !self.goModuleFetchGitSshKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.goModuleFetchGitSshKeyBase64, fieldNumber: 5)
    }
    if !self.repoProvider.isEmpty {
      try visitor.visitSingularStringField(value: self.repoProvider, fieldNumber: 6)
    }
    try { if let v = self._gcpArtifactRegistry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreSpecState) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.bufUsername != rhs.bufUsername {return false}
    if lhs.bufToken != rhs.bufToken {return false}
    if lhs.goModuleFetchGitSshKeyBase64 != rhs.goModuleFetchGitSshKeyBase64 {return false}
    if lhs.repoProvider != rhs.repoProvider {return false}
    if lhs._gcpArtifactRegistry != rhs._gcpArtifactRegistry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .standard(proto: "gcp_artifact_registry"),
  ]

  fileprivate class _StorageClass {
    var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
    var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
    var _stackJobID: String = String()
    var _gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lifecycle = source._lifecycle
      _sysAudit = source._sysAudit
      _stackJobID = source._stackJobID
      _gcpArtifactRegistry = source._gcpArtifactRegistry
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._gcpArtifactRegistry) }()
        case 97: try { try decoder.decodeSingularStringField(value: &_storage._stackJobID) }()
        case 98: try { try decoder.decodeSingularMessageField(value: &_storage._sysAudit) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._lifecycle) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._gcpArtifactRegistry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._stackJobID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stackJobID, fieldNumber: 97)
      }
      try { if let v = _storage._sysAudit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
      } }()
      try { if let v = _storage._lifecycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreStatusState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lifecycle != rhs_storage._lifecycle {return false}
        if _storage._sysAudit != rhs_storage._sysAudit {return false}
        if _storage._stackJobID != rhs_storage._stackJobID {return false}
        if _storage._gcpArtifactRegistry != rhs_storage._gcpArtifactRegistry {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreGcpArtifactRegistrySpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_cloud_account_id"),
    2: .standard(proto: "project_id"),
    3: .same(proto: "region"),
    4: .standard(proto: "is_external"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcpCloudAccountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isExternal) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcpCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpCloudAccountID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 3)
    }
    if self.isExternal != false {
      try visitor.visitSingularBoolField(value: self.isExternal, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistrySpecState) -> Bool {
    if lhs.gcpCloudAccountID != rhs.gcpCloudAccountID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.region != rhs.region {return false}
    if lhs.isExternal != rhs.isExternal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreGcpArtifactRegistryStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reader_service_account_email"),
    2: .standard(proto: "reader_service_account_key_base64"),
    3: .standard(proto: "writer_service_account_email"),
    4: .standard(proto: "writer_service_account_key_base64"),
    5: .standard(proto: "docker_repo_name"),
    6: .standard(proto: "docker_repo_hostname"),
    7: .standard(proto: "docker_repo_url"),
    8: .standard(proto: "maven_repo_name"),
    9: .standard(proto: "maven_repo_url"),
    10: .standard(proto: "npm_repo_name"),
    11: .standard(proto: "python_repo_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.readerServiceAccountEmail) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.readerServiceAccountKeyBase64) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.writerServiceAccountEmail) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.writerServiceAccountKeyBase64) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dockerRepoName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dockerRepoHostname) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.dockerRepoURL) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.mavenRepoName) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.mavenRepoURL) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.npmRepoName) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.pythonRepoName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.readerServiceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.readerServiceAccountEmail, fieldNumber: 1)
    }
    if !self.readerServiceAccountKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.readerServiceAccountKeyBase64, fieldNumber: 2)
    }
    if !self.writerServiceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.writerServiceAccountEmail, fieldNumber: 3)
    }
    if !self.writerServiceAccountKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.writerServiceAccountKeyBase64, fieldNumber: 4)
    }
    if !self.dockerRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoName, fieldNumber: 5)
    }
    if !self.dockerRepoHostname.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoHostname, fieldNumber: 6)
    }
    if !self.dockerRepoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoURL, fieldNumber: 7)
    }
    if !self.mavenRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.mavenRepoName, fieldNumber: 8)
    }
    if !self.mavenRepoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.mavenRepoURL, fieldNumber: 9)
    }
    if !self.npmRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.npmRepoName, fieldNumber: 10)
    }
    if !self.pythonRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.pythonRepoName, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_State_ArtifactStoreGcpArtifactRegistryStatusState) -> Bool {
    if lhs.readerServiceAccountEmail != rhs.readerServiceAccountEmail {return false}
    if lhs.readerServiceAccountKeyBase64 != rhs.readerServiceAccountKeyBase64 {return false}
    if lhs.writerServiceAccountEmail != rhs.writerServiceAccountEmail {return false}
    if lhs.writerServiceAccountKeyBase64 != rhs.writerServiceAccountKeyBase64 {return false}
    if lhs.dockerRepoName != rhs.dockerRepoName {return false}
    if lhs.dockerRepoHostname != rhs.dockerRepoHostname {return false}
    if lhs.dockerRepoURL != rhs.dockerRepoURL {return false}
    if lhs.mavenRepoName != rhs.mavenRepoName {return false}
    if lhs.mavenRepoURL != rhs.mavenRepoURL {return false}
    if lhs.npmRepoName != rhs.npmRepoName {return false}
    if lhs.pythonRepoName != rhs.pythonRepoName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
