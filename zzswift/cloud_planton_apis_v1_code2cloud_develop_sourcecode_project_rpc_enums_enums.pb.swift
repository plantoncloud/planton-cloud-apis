// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/rpc/enums/enums.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///deviation from the recommended best-practice of prefixing all enum entries with enum type in order to use the
///language to name and identify project specific folders.
public enum Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectLang: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case notApplicable // = 1
  case protobuf // = 2
  case golang // = 3
  case java // = 4
  case python // = 5
  case javascript // = 6
  case rust // = 7
  case docker // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notApplicable
    case 2: self = .protobuf
    case 3: self = .golang
    case 4: self = .java
    case 5: self = .python
    case 6: self = .javascript
    case 7: self = .rust
    case 8: self = .docker
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notApplicable: return 1
    case .protobuf: return 2
    case .golang: return 3
    case .java: return 4
    case .python: return 5
    case .javascript: return 6
    case .rust: return 7
    case .docker: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectLang: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectLang] = [
    .unspecified,
    .notApplicable,
    .protobuf,
    .golang,
    .java,
    .python,
    .javascript,
    .rust,
    .docker,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCat: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case notApplicable // = 1
  case cli // = 2
  case lib // = 3
  case microservice // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notApplicable
    case 2: self = .cli
    case 3: self = .lib
    case 4: self = .microservice
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notApplicable: return 1
    case .cli: return 2
    case .lib: return 3
    case .microservice: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCat] = [
    .unspecified,
    .notApplicable,
    .cli,
    .lib,
    .microservice,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatLibSubCat: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case notApplicable // = 1
  case javaJar // = 2
  case goModule // = 3
  case npmPackage // = 4
  case pythonPackage // = 5
  case dockerImage // = 6
  case proto // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notApplicable
    case 2: self = .javaJar
    case 3: self = .goModule
    case 4: self = .npmPackage
    case 5: self = .pythonPackage
    case 6: self = .dockerImage
    case 7: self = .proto
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notApplicable: return 1
    case .javaJar: return 2
    case .goModule: return 3
    case .npmPackage: return 4
    case .pythonPackage: return 5
    case .dockerImage: return 6
    case .proto: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatLibSubCat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatLibSubCat] = [
    .unspecified,
    .notApplicable,
    .javaJar,
    .goModule,
    .npmPackage,
    .pythonPackage,
    .dockerImage,
    .proto,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCat: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case notApplicable // = 1
  case api // = 2
  case job // = 3
  case webApp // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notApplicable
    case 2: self = .api
    case 3: self = .job
    case 4: self = .webApp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notApplicable: return 1
    case .api: return 2
    case .job: return 3
    case .webApp: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCat] = [
    .unspecified,
    .notApplicable,
    .api,
    .job,
    .webApp,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatApiSubSubCat: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case notApplicable // = 1
  case rest // = 2
  case grpc // = 3
  case graphql // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notApplicable
    case 2: self = .rest
    case 3: self = .grpc
    case 4: self = .graphql
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notApplicable: return 1
    case .rest: return 2
    case .grpc: return 3
    case .graphql: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatApiSubSubCat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatApiSubSubCat] = [
    .unspecified,
    .notApplicable,
    .rest,
    .grpc,
    .graphql,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatWebAppSubSubCat: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case notApplicable // = 1
  case docusaurus // = 2
  case nextjs // = 3
  case staticSite // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notApplicable
    case 2: self = .docusaurus
    case 3: self = .nextjs
    case 4: self = .staticSite
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notApplicable: return 1
    case .docusaurus: return 2
    case .nextjs: return 3
    case .staticSite: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatWebAppSubSubCat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatWebAppSubSubCat] = [
    .unspecified,
    .notApplicable,
    .docusaurus,
    .nextjs,
    .staticSite,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectLang: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCat: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatLibSubCat: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCat: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatApiSubSubCat: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatWebAppSubSubCat: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectLang: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_PROJECT_LANG_UNSPECIFIED"),
    1: .same(proto: "CODE_PROJECT_LANG_NOT_APPLICABLE"),
    2: .same(proto: "PROTOBUF"),
    3: .same(proto: "GOLANG"),
    4: .same(proto: "JAVA"),
    5: .same(proto: "PYTHON"),
    6: .same(proto: "JAVASCRIPT"),
    7: .same(proto: "RUST"),
    8: .same(proto: "DOCKER"),
  ]
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_PROJECT_CAT_UNSPECIFIED"),
    1: .same(proto: "CODE_PROJECT_CAT_NOT_APPLICABLE"),
    2: .same(proto: "CODE_PROJECT_CAT_CLI"),
    3: .same(proto: "CODE_PROJECT_CAT_LIB"),
    4: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE"),
  ]
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatLibSubCat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_UNSPECIFIED"),
    1: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_NOT_APPLICABLE"),
    2: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_JAVA_JAR"),
    3: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_GO_MODULE"),
    4: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_NPM_PACKAGE"),
    5: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_PYTHON_PACKAGE"),
    6: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_DOCKER_IMAGE"),
    7: .same(proto: "CODE_PROJECT_CAT_LIB_SUB_CAT_PROTO"),
  ]
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_UNSPECIFIED"),
    1: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_NOT_APPLICABLE"),
    2: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API"),
    3: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_JOB"),
    4: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP"),
  ]
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatApiSubSubCat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_UNSPECIFIED"),
    1: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_NOT_APPLICABLE"),
    2: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_REST"),
    3: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRPC"),
    4: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRAPHQL"),
  ]
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_Enums_CodeProjectCatMicroserviceSubCatWebAppSubSubCat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_UNSPECIFIED"),
    1: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NOT_APPLICABLE"),
    2: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_DOCUSAURUS"),
    3: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NEXTJS"),
    4: .same(proto: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_STATIC_SITE"),
  ]
}
