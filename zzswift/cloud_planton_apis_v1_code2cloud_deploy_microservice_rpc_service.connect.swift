// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/deploy/microservice/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///microservice-instance command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceCommandControllerClientInterface {

    ///create microservice-instance
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///update microservice-instance
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///delete microservice-instance
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///restore a deleted microservice-instance of a environment.
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///restart a microservice-instance running in a environment.
    ///microservice-instance is restarted by deleting running pods which will be automatically recreated by kubernetes.
    @available(iOS 13, *)
    func `restart`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///pause a microservice-instance running in a environment.
    ///microservice-instance is paused by scaling down number of replicas of
    ///the kubernetes deployment/stateful sets to zero in the environment.
    @available(iOS 13, *)
    func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///unpause a previously paused microservice-instance running in a environment.
    ///unpause is done by scaling the number of pods back to the number of
    ///replicas configured for the microservice-instance.
    @available(iOS 13, *)
    func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/restore", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restart`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/restart", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/pause", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController/unpause", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
            public static let restart = Connect.MethodSpec(name: "restart", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
            public static let pause = Connect.MethodSpec(name: "pause", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
            public static let unpause = Connect.MethodSpec(name: "unpause", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceCommandController", type: .unary)
        }
    }
}

///microservice-instance query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceQueryControllerClientInterface {

    ///list all microservice-instances on planton instance for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceList>

    ///look up microservice-instance using microservice-instance id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///find microservice-instances by product id.
    ///response contains only the resources that the authenticated user account has viewer access to.
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances>

    ///find microservice-instances by environment
    @available(iOS 13, *)
    func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances>

    ///find microservice-instances by kube-cluster
    @available(iOS 13, *)
    func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances>

    ///find microservice-instances in a environment for a code-project
    @available(iOS 13, *)
    func `findByEnvironmentIDByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_ByEnvironmentIdByCodeProjectIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances>

    ///lookup pods of a microservice-instance deployed to a environment
    @available(iOS 13, *)
    func `findPods`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Pods>

    ///get a log stream for a running instance of a microservice-instance
    @available(iOS 13, *)
    func `getLogStream`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_GetMicroserviceInstanceLogStreamQueryInput, Cloud_Planton_Apis_V1_Commons_Grpc_Stream_OutputLine>

    ///lookup a microservice-instance by code project id
    @available(iOS 13, *)
    func `getByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///lookup all microservice-instances by code project url
    @available(iOS 13, *)
    func `findByCodeProjectURL`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectUrl, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances>

    @available(iOS 13, *)
    func `getEnvVarMap`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceEnvVarMap>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/findByEnvironmentId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/findByKubeClusterId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByEnvironmentIDByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_ByEnvironmentIdByCodeProjectIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/findByEnvironmentIdByCodeProjectId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findPods`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Pods> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/findPods", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getLogStream`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_GetMicroserviceInstanceLogStreamQueryInput, Cloud_Planton_Apis_V1_Commons_Grpc_Stream_OutputLine> {
        return self.client.serverOnlyStream(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/getLogStream", headers: headers)
    }

    @available(iOS 13, *)
    public func `getByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/getByCodeProjectId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCodeProjectURL`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectUrl, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstances> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/findByCodeProjectUrl", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getEnvVarMap`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceEnvVarMap> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController/getEnvVarMap", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let findByEnvironmentID = Connect.MethodSpec(name: "findByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let findByKubeClusterID = Connect.MethodSpec(name: "findByKubeClusterId", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let findByEnvironmentIDByCodeProjectID = Connect.MethodSpec(name: "findByEnvironmentIdByCodeProjectId", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let findPods = Connect.MethodSpec(name: "findPods", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let getLogStream = Connect.MethodSpec(name: "getLogStream", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .serverStream)
            public static let getByCodeProjectID = Connect.MethodSpec(name: "getByCodeProjectId", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let findByCodeProjectURL = Connect.MethodSpec(name: "findByCodeProjectUrl", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
            public static let getEnvVarMap = Connect.MethodSpec(name: "getEnvVarMap", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceQueryController", type: .unary)
        }
    }
}

///microservice-instance stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceStackControllerClientInterface {

    ///preview microservice-instance stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>

    ///apply microservice-instance stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstanceId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Rpc_MicroserviceInstance> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.deploy.microservice.rpc.MicroserviceInstanceStackController", type: .unary)
        }
    }
}
