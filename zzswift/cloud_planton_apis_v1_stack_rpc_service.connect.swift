// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/stack/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Cloud_Planton_Apis_V1_Stack_Rpc_StackJobCommandControllerClientInterface {

    ///create stack-job
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJob>

    ///update stack-job
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJob>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Stack_Rpc_StackJobCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Stack_Rpc_StackJobCommandControllerClient: Cloud_Planton_Apis_V1_Stack_Rpc_StackJobCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJob> {
        return await self.client.unary(path: "cloud.planton.apis.v1.stack.rpc.StackJobCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJob> {
        return await self.client.unary(path: "cloud.planton.apis.v1.stack.rpc.StackJobCommandController/update", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.stack.rpc.StackJobCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.stack.rpc.StackJobCommandController", type: .unary)
        }
    }
}

public protocol Cloud_Planton_Apis_V1_Stack_Rpc_StackJobQueryControllerClientInterface {

    ///list of stack-jobs
    ///todo: need to add authorization
    @available(iOS 13, *)
    func `listByFilters`(request: Cloud_Planton_Apis_V1_Stack_Rpc_ListStackJobsByFiltersQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJobList>

    ///look up stack-job by stack-job-id
    ///todo: need to add authorization
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Stack_Rpc_StackJobId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJob>

    ///todo: need to add authorization
    ///get stack-job log stream for stacks that are in-progress
    @available(iOS 13, *)
    func `getLogStream`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Cloud_Planton_Apis_V1_Stack_Rpc_StackJobId, Cloud_Planton_Apis_V1_Commons_Grpc_Stream_OutputLine>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Stack_Rpc_StackJobQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Stack_Rpc_StackJobQueryControllerClient: Cloud_Planton_Apis_V1_Stack_Rpc_StackJobQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `listByFilters`(request: Cloud_Planton_Apis_V1_Stack_Rpc_ListStackJobsByFiltersQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJobList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.stack.rpc.StackJobQueryController/listByFilters", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Stack_Rpc_StackJobId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Stack_Rpc_StackJob> {
        return await self.client.unary(path: "cloud.planton.apis.v1.stack.rpc.StackJobQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getLogStream`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Cloud_Planton_Apis_V1_Stack_Rpc_StackJobId, Cloud_Planton_Apis_V1_Commons_Grpc_Stream_OutputLine> {
        return self.client.serverOnlyStream(path: "cloud.planton.apis.v1.stack.rpc.StackJobQueryController/getLogStream", headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let listByFilters = Connect.MethodSpec(name: "listByFilters", service: "cloud.planton.apis.v1.stack.rpc.StackJobQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.stack.rpc.StackJobQueryController", type: .unary)
            public static let getLogStream = Connect.MethodSpec(name: "getLogStream", service: "cloud.planton.apis.v1.stack.rpc.StackJobQueryController", type: .serverStream)
        }
    }
}
