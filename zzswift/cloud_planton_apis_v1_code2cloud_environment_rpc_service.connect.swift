// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///environment command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentCommandControllerClientInterface {

    ///create environment
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///update an existing environment
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///delete an existing environment
    ///deleting a environment involves cleaning of all product components deployed for that environment.
    ///microservices, secrets, postgres-clusters, kafka-cluster should be cleaned up in the corresponding environment
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///restore a deleted environment
    ///restoring a environment tries to restore all the individual resources that were destroyed as part of the delete operation.
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///clone an existing environment for a product
    ///a environment is cloned by creating the following resources with same spec as the source environment.
    ///1. microservice deployment environments
    ///2. secrets
    ///3. postgres-clusters
    ///4. kafka-clusters & kafka topics
    @available(iOS 13, *)
    func `clone`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///set the provided environment as the build engine environment.
    ///setting a environment as build engine env requires that existing build engine env is
    ///unset followed by setting a new env as build engine env.
    ///this rpc offers an alternate method to replace two sequential rpc calls required, one to unset
    ///the current build engine env and then to set a new env as build engine env.
    ///the implementation takes care of both the actions.
    @available(iOS 13, *)
    func `setBuildEngineEnvironment`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///pause a environment.
    ///a environment is paused by scaling down all the workloads to zero replicas.
    ///the workload include microservice deployments, postgres-clusters, kafka-clusters etc.
    @available(iOS 13, *)
    func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///unpause a environment.
    ///a environment is unpause by scaling back all the workloads.
    ///all microservice deployments are scaled back to the same number of replicas configured in the most recent successful deployment.
    ///postgres-clusters and kafka-clusters are configured to the same number of replicas configured.
    @available(iOS 13, *)
    func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///delete a namespace that is part of the environment running in a kube-cluster container cluster
    @available(iOS 13, *)
    func `deleteNamespace`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_WorkloadNamespace>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/restore", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `clone`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/clone", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `setBuildEngineEnvironment`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/setBuildEngineEnvironment", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/pause", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/unpause", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `deleteNamespace`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_WorkloadNamespace> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/deleteNamespace", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let clone = Connect.MethodSpec(name: "clone", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let setBuildEngineEnvironment = Connect.MethodSpec(name: "setBuildEngineEnvironment", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let pause = Connect.MethodSpec(name: "pause", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let unpause = Connect.MethodSpec(name: "unpause", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
            public static let deleteNamespace = Connect.MethodSpec(name: "deleteNamespace", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController", type: .unary)
        }
    }
}

///environment query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentQueryControllerClientInterface {

    ///list all environments on planton cloud for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList>

    ///look up environment using environment id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///find environments by product id
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments>

    ///find environments by kube-cluster id
    @available(iOS 13, *)
    func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments>

    ///look up environment using environment id
    @available(iOS 13, *)
    func `getByProductIDAndEnvironmentName`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///look up the build engine environment for the product required for launching the microservice in build engine
    @available(iOS 13, *)
    func `getBuildEngineEnvironmentByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///look up the gcp project details by environment id required for fetching secrets for launching project in build engine.
    @available(iOS 13, *)
    func `getSecretsGcpProjectByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject>

    ///find workload pods part of environment
    @available(iOS 13, *)
    func `findWorkloadPodsByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_WorkloadPods>

    ///find workload namespaces in a environment.
    @available(iOS 13, *)
    func `findWorkloadNamespacesByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_WorkloadNamespaces>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findByKubeClusterId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByProductIDAndEnvironmentName`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getByProductIdAndEnvironmentName", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getBuildEngineEnvironmentByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getBuildEngineEnvironmentByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getSecretsGcpProjectByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getSecretsGcpProjectByEnvironmentId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findWorkloadPodsByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_WorkloadPods> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findWorkloadPodsByEnvironmentId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findWorkloadNamespacesByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_WorkloadNamespaces> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findWorkloadNamespacesByEnvironmentId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let findByKubeClusterID = Connect.MethodSpec(name: "findByKubeClusterId", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let getByProductIDAndEnvironmentName = Connect.MethodSpec(name: "getByProductIdAndEnvironmentName", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let getBuildEngineEnvironmentByProductID = Connect.MethodSpec(name: "getBuildEngineEnvironmentByProductId", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let getSecretsGcpProjectByEnvironmentID = Connect.MethodSpec(name: "getSecretsGcpProjectByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let findWorkloadPodsByEnvironmentID = Connect.MethodSpec(name: "findWorkloadPodsByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
            public static let findWorkloadNamespacesByEnvironmentID = Connect.MethodSpec(name: "findWorkloadNamespacesByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController", type: .unary)
        }
    }
}

///environment secrets command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretCommandControllerClientInterface {

    ///add a env secret to a environment
    @available(iOS 13, *)
    func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///add multiple product secrets to existing list of product secrets of a environment
    @available(iOS 13, *)
    func `addMultiple`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///delete a environment secret.
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///update value of a product secret
    @available(iOS 13, *)
    func `updateValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/add", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `addMultiple`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/addMultiple", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `updateValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/updateValue", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let add = Connect.MethodSpec(name: "add", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController", type: .unary)
            public static let addMultiple = Connect.MethodSpec(name: "addMultiple", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController", type: .unary)
            public static let updateValue = Connect.MethodSpec(name: "updateValue", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController", type: .unary)
        }
    }
}

///environment secrets query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretQueryControllerClientInterface {

    ///lookup product secrets using product secret id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret>

    ///get value of a product secret
    @available(iOS 13, *)
    func `getValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController/getValue", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController", type: .unary)
            public static let getValue = Connect.MethodSpec(name: "getValue", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController", type: .unary)
        }
    }
}

///environment variables command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableCommandControllerClientInterface {

    ///add a environment variable to a product
    @available(iOS 13, *)
    func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///add multiple environment variables to existing list of environment variables of a environment
    @available(iOS 13, *)
    func `addMultiple`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///delete a environment variable.
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///update value of a environment variable
    @available(iOS 13, *)
    func `updateValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/add", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `addMultiple`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/addMultiple", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `updateValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/updateValue", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let add = Connect.MethodSpec(name: "add", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController", type: .unary)
            public static let addMultiple = Connect.MethodSpec(name: "addMultiple", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController", type: .unary)
            public static let updateValue = Connect.MethodSpec(name: "updateValue", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController", type: .unary)
        }
    }
}

///environment variables query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableQueryControllerClientInterface {

    ///lookup environment variables using environment variable id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable>

    ///get value of a environment variable
    @available(iOS 13, *)
    func `getValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getValue`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController/getValue", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController", type: .unary)
            public static let getValue = Connect.MethodSpec(name: "getValue", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController", type: .unary)
        }
    }
}

///environment stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStackControllerClientInterface {

    ///preview environment secrets stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>

    ///apply environment secrets stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController", type: .unary)
        }
    }
}
