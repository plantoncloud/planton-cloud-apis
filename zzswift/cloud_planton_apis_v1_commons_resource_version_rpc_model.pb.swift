// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/resource/version/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The ResourceVersion message represents a record of a resource state modification
/// in a system's resource. It stores the original and new states of the resource,
/// the differences between them in a unified diff format, as well as audit and
/// identification information.
public struct Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// System audit information, which typically includes data about
  /// when and by whom the version was created.
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _storage._sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_uniqueStorage()._sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return _storage._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {_uniqueStorage()._sysAudit = nil}

  /// A unique identifier (UUID) for the resource-version.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// The ID of the company to which the resource-version belongs.
  public var companyID: String {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  /// The ID of the product to which the resource-version belongs.
  /// This attribute is always empty for company level state.
  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  /// The ID of the product environment to which the resource-version belongs.
  /// This attribute is always empty for company level state.
  public var environmentID: String {
    get {return _storage._environmentID}
    set {_uniqueStorage()._environmentID = newValue}
  }

  /// The type of the resource for which the version was created.
  /// Resource types are defined in the ResourceType enum.
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType {
    get {return _storage._resourceType}
    set {_uniqueStorage()._resourceType = newValue}
  }

  /// The ID of the resource for which the version was created.
  public var resourceID: String {
    get {return _storage._resourceID}
    set {_uniqueStorage()._resourceID = newValue}
  }

  /// The original state of the resource, represented as a YAML string.
  public var originalStateYaml: String {
    get {return _storage._originalStateYaml}
    set {_uniqueStorage()._originalStateYaml = newValue}
  }

  /// The new state of the resource, represented as a YAML string.
  public var newStateYaml: String {
    get {return _storage._newStateYaml}
    set {_uniqueStorage()._newStateYaml = newValue}
  }

  /// The differences between the original and new state, represented in a unified diff format.
  public var diffUnifiedFormat: String {
    get {return _storage._diffUnifiedFormat}
    set {_uniqueStorage()._diffUnifiedFormat = newValue}
  }

  /// id of the stack-job created for the version. this will only be populated for versions created for resources that have stack.
  public var stackJobID: String {
    get {return _storage._stackJobID}
    set {_uniqueStorage()._stackJobID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// wrapper for resource-versions id
public struct Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The StateCommitByIdWithContextSize message represents a specific
/// resource-version along with the context size associated with it. The context size
/// is typically used to control the amount of information or data surrounding a
/// particular point of interest in the resource-version.
public struct Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionWithContextSizeInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier (usually a UUID) for the resource-version.
  /// It is used to look up or refer to a specific version.
  public var versionID: String = String()

  /// The context size associated with the resource-version. This could represent
  /// the amount of surrounding data or metadata to include when fetching or
  /// working with the version. The meaning of this value can vary depending on
  /// the specifics of your application.
  public var contextSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// list resource-versions by resource type and id query input
public struct Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ListResourceVersionsByFiltersQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// page info
  public var pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo {
    get {return _pageInfo ?? Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  /// id of the company to filter the resource-versions
  public var companyID: String = String()

  /// id of the product to filter the resource-versions
  public var productID: String = String()

  /// id of the product env to filter the resource-versions
  public var environmentID: String = String()

  /// type of resource
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// id of the resource
  public var resourceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo? = nil
}

/// paginated list of resource-versions
public struct Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// total number of pages
  public var totalPages: Int32 = 0

  /// list of resource-versions
  public var entries: [Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersion: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionWithContextSizeInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ListResourceVersionsByFiltersQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionList: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.commons.resource.version.rpc"

extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "id"),
    2: .standard(proto: "company_id"),
    3: .standard(proto: "product_id"),
    4: .standard(proto: "environment_id"),
    5: .standard(proto: "resource_type"),
    6: .standard(proto: "resource_id"),
    7: .standard(proto: "original_state_yaml"),
    8: .standard(proto: "new_state_yaml"),
    9: .standard(proto: "diff_unified_format"),
    10: .standard(proto: "stack_job_id"),
  ]

  fileprivate class _StorageClass {
    var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
    var _id: String = String()
    var _companyID: String = String()
    var _productID: String = String()
    var _environmentID: String = String()
    var _resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified
    var _resourceID: String = String()
    var _originalStateYaml: String = String()
    var _newStateYaml: String = String()
    var _diffUnifiedFormat: String = String()
    var _stackJobID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sysAudit = source._sysAudit
      _id = source._id
      _companyID = source._companyID
      _productID = source._productID
      _environmentID = source._environmentID
      _resourceType = source._resourceType
      _resourceID = source._resourceID
      _originalStateYaml = source._originalStateYaml
      _newStateYaml = source._newStateYaml
      _diffUnifiedFormat = source._diffUnifiedFormat
      _stackJobID = source._stackJobID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._companyID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._environmentID) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._resourceType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._resourceID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._originalStateYaml) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._newStateYaml) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._diffUnifiedFormat) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._stackJobID) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._sysAudit) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._companyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyID, fieldNumber: 2)
      }
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 3)
      }
      if !_storage._environmentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._environmentID, fieldNumber: 4)
      }
      if _storage._resourceType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._resourceType, fieldNumber: 5)
      }
      if !_storage._resourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resourceID, fieldNumber: 6)
      }
      if !_storage._originalStateYaml.isEmpty {
        try visitor.visitSingularStringField(value: _storage._originalStateYaml, fieldNumber: 7)
      }
      if !_storage._newStateYaml.isEmpty {
        try visitor.visitSingularStringField(value: _storage._newStateYaml, fieldNumber: 8)
      }
      if !_storage._diffUnifiedFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._diffUnifiedFormat, fieldNumber: 9)
      }
      if !_storage._stackJobID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stackJobID, fieldNumber: 10)
      }
      try { if let v = _storage._sysAudit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersion, rhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sysAudit != rhs_storage._sysAudit {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._environmentID != rhs_storage._environmentID {return false}
        if _storage._resourceType != rhs_storage._resourceType {return false}
        if _storage._resourceID != rhs_storage._resourceID {return false}
        if _storage._originalStateYaml != rhs_storage._originalStateYaml {return false}
        if _storage._newStateYaml != rhs_storage._newStateYaml {return false}
        if _storage._diffUnifiedFormat != rhs_storage._diffUnifiedFormat {return false}
        if _storage._stackJobID != rhs_storage._stackJobID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceVersionId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionId, rhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionWithContextSizeInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceVersionWithContextSizeInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_id"),
    2: .standard(proto: "context_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.versionID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.contextSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 1)
    }
    if self.contextSize != 0 {
      try visitor.visitSingularInt32Field(value: self.contextSize, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionWithContextSizeInput, rhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionWithContextSizeInput) -> Bool {
    if lhs.versionID != rhs.versionID {return false}
    if lhs.contextSize != rhs.contextSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ListResourceVersionsByFiltersQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListResourceVersionsByFiltersQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_info"),
    2: .standard(proto: "company_id"),
    3: .standard(proto: "product_id"),
    4: .standard(proto: "environment_id"),
    5: .standard(proto: "resource_type"),
    6: .standard(proto: "resource_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.resourceType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 2)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 3)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 4)
    }
    if self.resourceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resourceType, fieldNumber: 5)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ListResourceVersionsByFiltersQueryInput, rhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ListResourceVersionsByFiltersQueryInput) -> Bool {
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResourceVersionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionList, rhs: Cloud_Planton_Apis_V1_Commons_Resource_Version_Rpc_ResourceVersionList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
