// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/resource/list/rpc/enums/enums.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Enums_StatusFilter: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0

  ///  When this value is used, the search operation will only return resources that are currently active.
  ///  This is suitable for scenarios where the client is only interested in resources that are in use or available for use
  case activeOnly // = 1

  /// When this value is selected, the search operation will return only resources that are currently inactive.
  /// This option is particularly useful when the client wants to review or clean up resources that are no longer in use
  case inactiveOnly // = 2

  /// This value indicates that the search operation should return all resources, regardless of their active status.
  /// This option allows clients to see a complete overview of resources, both active and inactive.
  case all // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .activeOnly
    case 2: self = .inactiveOnly
    case 3: self = .all
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .activeOnly: return 1
    case .inactiveOnly: return 2
    case .all: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Enums_StatusFilter: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Enums_StatusFilter] = [
    .unspecified,
    .activeOnly,
    .inactiveOnly,
    .all,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Enums_StatusFilter: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Enums_StatusFilter: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_FILTER_UNSPECIFIED"),
    1: .same(proto: "STATUS_FILTER_ACTIVE_ONLY"),
    2: .same(proto: "STATUS_FILTER_INACTIVE_ONLY"),
    3: .same(proto: "STATUS_FILTER_ALL"),
  ]
}
