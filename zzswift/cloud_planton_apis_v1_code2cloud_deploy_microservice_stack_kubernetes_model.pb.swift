// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/microservice/stack/kubernetes/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///input for microservice-instance stack
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///stack job
  public var stackJob: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob {
    get {return _stackJob ?? Cloud_Planton_Apis_V1_Stack_Rpc_StackJob()}
    set {_stackJob = newValue}
  }
  /// Returns true if `stackJob` has been explicitly set.
  public var hasStackJob: Bool {return self._stackJob != nil}
  /// Clears the value of `stackJob`. Subsequent reads from it will return its default value.
  public mutating func clearStackJob() {self._stackJob = nil}

  ///pulumi stack credentials
  public var credentialsInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput {
    get {return _credentialsInput ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput()}
    set {_credentialsInput = newValue}
  }
  /// Returns true if `credentialsInput` has been explicitly set.
  public var hasCredentialsInput: Bool {return self._credentialsInput != nil}
  /// Clears the value of `credentialsInput`. Subsequent reads from it will return its default value.
  public mutating func clearCredentialsInput() {self._credentialsInput = nil}

  ///inputs used for creating stack resources
  public var resourceInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput {
    get {return _resourceInput ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput()}
    set {_resourceInput = newValue}
  }
  /// Returns true if `resourceInput` has been explicitly set.
  public var hasResourceInput: Bool {return self._resourceInput != nil}
  /// Clears the value of `resourceInput`. Subsequent reads from it will return its default value.
  public mutating func clearResourceInput() {self._resourceInput = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stackJob: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob? = nil
  fileprivate var _credentialsInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput? = nil
  fileprivate var _resourceInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput? = nil
}

///stack credentials input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///kubernetes provider credential for creating microservice-instance resources on container instance
  public var kubernetes: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential {
    get {return _kubernetes ?? Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential()}
    set {_kubernetes = newValue}
  }
  /// Returns true if `kubernetes` has been explicitly set.
  public var hasKubernetes: Bool {return self._kubernetes != nil}
  /// Clears the value of `kubernetes`. Subsequent reads from it will return its default value.
  public mutating func clearKubernetes() {self._kubernetes = nil}

  ///google provider credential for ensuring workload identity resources on google cloud
  public var google: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential {
    get {return _google ?? Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential()}
    set {_google = newValue}
  }
  /// Returns true if `google` has been explicitly set.
  public var hasGoogle: Bool {return self._google != nil}
  /// Clears the value of `google`. Subsequent reads from it will return its default value.
  public mutating func clearGoogle() {self._google = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _kubernetes: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential? = nil
  fileprivate var _google: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential? = nil
}

///stack resource input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///microservice-instance
  public var microserviceInstance: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_State_MicroserviceInstanceState {
    get {return _microserviceInstance ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_State_MicroserviceInstanceState()}
    set {_microserviceInstance = newValue}
  }
  /// Returns true if `microserviceInstance` has been explicitly set.
  public var hasMicroserviceInstance: Bool {return self._microserviceInstance != nil}
  /// Clears the value of `microserviceInstance`. Subsequent reads from it will return its default value.
  public mutating func clearMicroserviceInstance() {self._microserviceInstance = nil}

  ///input required for creating kubernetes secret resources to be used by deployment resources to pull private
  ///container images.
  ///a product can have many artifact-stores. each artifact-store has a separate service account credential.
  ///for each microservice that belongs to a product, one microservice environment is created per environment.
  ///the microservice environment will be configured with secrets required to pull private images from any of the product's
  ///artifact-stores. This model is particularly helpful during migrations during which images may be pushed to multiple
  ///artifact-stores.
  public var kubernetesImagePullSecrets: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_KubernetesImagePullSecretInput] = []

  ///container cluster project required to configure workload identity
  ///service account is created in container cluster project and a binding created to workload identity pool.
  public var containerClusterProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject {
    get {return _containerClusterProject ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject()}
    set {_containerClusterProject = newValue}
  }
  /// Returns true if `containerClusterProject` has been explicitly set.
  public var hasContainerClusterProject: Bool {return self._containerClusterProject != nil}
  /// Clears the value of `containerClusterProject`. Subsequent reads from it will return its default value.
  public mutating func clearContainerClusterProject() {self._containerClusterProject = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _microserviceInstance: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_State_MicroserviceInstanceState? = nil
  fileprivate var _containerClusterProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject? = nil
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_KubernetesImagePullSecretInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///name of the image pull secret to be used for naming the kubernetes secret.
  public var imagePullSecretName: String = String()

  ///base64 encoded key for the artifact reader google service account
  public var artifactReaderGsaKeyBase64: String = String()

  ///hostname of the docker repo ex: us-central1-docker.pkg.dev
  public var dockerRepoHostname: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///microservice-instance stack outputs
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///status of the microservice-instance upon stack-job
  public var microserviceInstanceStatus: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_State_MicroserviceInstanceStatusState {
    get {return _microserviceInstanceStatus ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_State_MicroserviceInstanceStatusState()}
    set {_microserviceInstanceStatus = newValue}
  }
  /// Returns true if `microserviceInstanceStatus` has been explicitly set.
  public var hasMicroserviceInstanceStatus: Bool {return self._microserviceInstanceStatus != nil}
  /// Clears the value of `microserviceInstanceStatus`. Subsequent reads from it will return its default value.
  public mutating func clearMicroserviceInstanceStatus() {self._microserviceInstanceStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _microserviceInstanceStatus: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_State_MicroserviceInstanceStatusState? = nil
}

///stack response
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///stack progress
  public var progress: Cloud_Planton_Apis_V1_Stack_Rpc_StackProgress {
    get {return _storage._progress ?? Cloud_Planton_Apis_V1_Stack_Rpc_StackProgress()}
    set {_uniqueStorage()._progress = newValue}
  }
  /// Returns true if `progress` has been explicitly set.
  public var hasProgress: Bool {return _storage._progress != nil}
  /// Clears the value of `progress`. Subsequent reads from it will return its default value.
  public mutating func clearProgress() {_uniqueStorage()._progress = nil}

  ///stack outputs
  public var outputs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs {
    get {return _storage._outputs ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs()}
    set {_uniqueStorage()._outputs = newValue}
  }
  /// Returns true if `outputs` has been explicitly set.
  public var hasOutputs: Bool {return _storage._outputs != nil}
  /// Clears the value of `outputs`. Subsequent reads from it will return its default value.
  public mutating func clearOutputs() {_uniqueStorage()._outputs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_KubernetesImagePullSecretInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.microservice.stack.kubernetes"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MicroserviceInstanceKubernetesStackInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stack_job"),
    2: .standard(proto: "credentials_input"),
    3: .standard(proto: "resource_input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stackJob) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._credentialsInput) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resourceInput) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stackJob {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._credentialsInput {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._resourceInput {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackInput) -> Bool {
    if lhs._stackJob != rhs._stackJob {return false}
    if lhs._credentialsInput != rhs._credentialsInput {return false}
    if lhs._resourceInput != rhs._resourceInput {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MicroserviceInstanceKubernetesStackCredentialsInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kubernetes"),
    2: .same(proto: "google"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._kubernetes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._google) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._kubernetes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._google {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackCredentialsInput) -> Bool {
    if lhs._kubernetes != rhs._kubernetes {return false}
    if lhs._google != rhs._google {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MicroserviceInstanceKubernetesStackResourceInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "microservice_instance"),
    2: .standard(proto: "kubernetes_image_pull_secrets"),
    3: .standard(proto: "container_cluster_project"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._microserviceInstance) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.kubernetesImagePullSecrets) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._containerClusterProject) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._microserviceInstance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.kubernetesImagePullSecrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.kubernetesImagePullSecrets, fieldNumber: 2)
    }
    try { if let v = self._containerClusterProject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResourceInput) -> Bool {
    if lhs._microserviceInstance != rhs._microserviceInstance {return false}
    if lhs.kubernetesImagePullSecrets != rhs.kubernetesImagePullSecrets {return false}
    if lhs._containerClusterProject != rhs._containerClusterProject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_KubernetesImagePullSecretInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubernetesImagePullSecretInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_pull_secret_name"),
    2: .standard(proto: "artifact_reader_gsa_key_base64"),
    3: .standard(proto: "docker_repo_hostname"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.imagePullSecretName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.artifactReaderGsaKeyBase64) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.dockerRepoHostname) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imagePullSecretName.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePullSecretName, fieldNumber: 1)
    }
    if !self.artifactReaderGsaKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.artifactReaderGsaKeyBase64, fieldNumber: 2)
    }
    if !self.dockerRepoHostname.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoHostname, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_KubernetesImagePullSecretInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_KubernetesImagePullSecretInput) -> Bool {
    if lhs.imagePullSecretName != rhs.imagePullSecretName {return false}
    if lhs.artifactReaderGsaKeyBase64 != rhs.artifactReaderGsaKeyBase64 {return false}
    if lhs.dockerRepoHostname != rhs.dockerRepoHostname {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MicroserviceInstanceKubernetesStackOutputs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "microservice_instance_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._microserviceInstanceStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._microserviceInstanceStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs) -> Bool {
    if lhs._microserviceInstanceStatus != rhs._microserviceInstanceStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MicroserviceInstanceKubernetesStackResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "progress"),
    3: .same(proto: "outputs"),
  ]

  fileprivate class _StorageClass {
    var _progress: Cloud_Planton_Apis_V1_Stack_Rpc_StackProgress? = nil
    var _outputs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackOutputs? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _progress = source._progress
      _outputs = source._outputs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._progress) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._outputs) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._progress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._outputs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResponse, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Microservice_Stack_Kubernetes_MicroserviceInstanceKubernetesStackResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._progress != rhs_storage._progress {return false}
        if _storage._outputs != rhs_storage._outputs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
