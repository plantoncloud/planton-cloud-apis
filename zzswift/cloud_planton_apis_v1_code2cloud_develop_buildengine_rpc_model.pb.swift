// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/develop/buildengine/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///build engine code project
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Buildengine_Rpc_BuildEngineProject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///code project directory
  public var codeProjectDir: String = String()

  ///company id
  public var companyID: String = String()

  ///product key
  public var productKey: String = String()

  ///product id
  public var productID: String = String()

  ///code project id
  public var codeProjectID: String = String()

  ///code project name
  public var codeProjectName: String = String()

  ///git remote origin url.
  ///either https or ssh url depending on the method supported for cloning the git project.
  ///this is the same url that should added to the code project that is linked to microservice resources.
  public var gitRemoteURL: String = String()

  ///name of the git branch checked out when code project profile is loaded
  public var gitBranch: String = String()

  ///name of the git branch checked out when code project profile is loaded
  public var gitCommitSha: String = String()

  ///normalized code project path used for ensuring uniqueness in tilt resources in build engine.
  public var codeProjectNormalizedPath: String = String()

  ///name of the environment to look up the deployment config for setting up dot-env
  ///this value is to be fetched from planton backend
  ///when planton backend is not available(offline mode), value for this attribute is set to "dev".
  public var environmentName: String = String()

  ///id of the environment to look up the deployment config for setting up dot-env
  ///this value is to be fetched from planton backend
  ///when planton backend is not available(offline mode), value for this attribute is set to "<product-id>-dev".
  public var environmentID: String = String()

  ///flag to indicate if project is required to be built before deployed to build engine environment.
  ///this flag is used to ensure link between build step and deployment step in tilt config file.
  public var isBuildRequired: Bool = false

  ///is code project deployable to a environment.
  public var isDeployable: Bool = false

  ///project tilt config snippet
  public var tiltConfigSnippet: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Buildengine_Rpc_BuildEngineProject: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.develop.buildengine.rpc"

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Buildengine_Rpc_BuildEngineProject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildEngineProject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "code_project_dir"),
    2: .standard(proto: "company_id"),
    3: .standard(proto: "product_key"),
    4: .standard(proto: "product_id"),
    5: .standard(proto: "code_project_id"),
    6: .standard(proto: "code_project_name"),
    7: .standard(proto: "git_remote_url"),
    8: .standard(proto: "git_branch"),
    9: .standard(proto: "git_commit_sha"),
    10: .standard(proto: "code_project_normalized_path"),
    11: .standard(proto: "environment_name"),
    12: .standard(proto: "environment_id"),
    13: .standard(proto: "is_build_required"),
    14: .standard(proto: "is_deployable"),
    15: .standard(proto: "tilt_config_snippet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codeProjectDir) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.productKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.codeProjectID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.codeProjectName) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.gitRemoteURL) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.gitBranch) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.gitCommitSha) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.codeProjectNormalizedPath) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.environmentName) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.isBuildRequired) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.isDeployable) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.tiltConfigSnippet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codeProjectDir.isEmpty {
      try visitor.visitSingularStringField(value: self.codeProjectDir, fieldNumber: 1)
    }
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 2)
    }
    if !self.productKey.isEmpty {
      try visitor.visitSingularStringField(value: self.productKey, fieldNumber: 3)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 4)
    }
    if !self.codeProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.codeProjectID, fieldNumber: 5)
    }
    if !self.codeProjectName.isEmpty {
      try visitor.visitSingularStringField(value: self.codeProjectName, fieldNumber: 6)
    }
    if !self.gitRemoteURL.isEmpty {
      try visitor.visitSingularStringField(value: self.gitRemoteURL, fieldNumber: 7)
    }
    if !self.gitBranch.isEmpty {
      try visitor.visitSingularStringField(value: self.gitBranch, fieldNumber: 8)
    }
    if !self.gitCommitSha.isEmpty {
      try visitor.visitSingularStringField(value: self.gitCommitSha, fieldNumber: 9)
    }
    if !self.codeProjectNormalizedPath.isEmpty {
      try visitor.visitSingularStringField(value: self.codeProjectNormalizedPath, fieldNumber: 10)
    }
    if !self.environmentName.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentName, fieldNumber: 11)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 12)
    }
    if self.isBuildRequired != false {
      try visitor.visitSingularBoolField(value: self.isBuildRequired, fieldNumber: 13)
    }
    if self.isDeployable != false {
      try visitor.visitSingularBoolField(value: self.isDeployable, fieldNumber: 14)
    }
    if !self.tiltConfigSnippet.isEmpty {
      try visitor.visitSingularStringField(value: self.tiltConfigSnippet, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Buildengine_Rpc_BuildEngineProject, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Buildengine_Rpc_BuildEngineProject) -> Bool {
    if lhs.codeProjectDir != rhs.codeProjectDir {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productKey != rhs.productKey {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.codeProjectID != rhs.codeProjectID {return false}
    if lhs.codeProjectName != rhs.codeProjectName {return false}
    if lhs.gitRemoteURL != rhs.gitRemoteURL {return false}
    if lhs.gitBranch != rhs.gitBranch {return false}
    if lhs.gitCommitSha != rhs.gitCommitSha {return false}
    if lhs.codeProjectNormalizedPath != rhs.codeProjectNormalizedPath {return false}
    if lhs.environmentName != rhs.environmentName {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.isBuildRequired != rhs.isBuildRequired {return false}
    if lhs.isDeployable != rhs.isDeployable {return false}
    if lhs.tiltConfigSnippet != rhs.tiltConfigSnippet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
