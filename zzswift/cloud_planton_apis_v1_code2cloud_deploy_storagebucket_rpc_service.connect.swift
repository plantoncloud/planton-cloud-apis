// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/deploy/storagebucket/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///storage-bucket command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketCommandControllerClientInterface {

    ///create storage-bucket
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>

    ///update an existing storage-bucket
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>

    ///delete an existing storage-bucket
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>

    ///restore a deleted storage-bucket
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController", type: .unary)
        }
    }
}

///storage-bucket query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketQueryControllerClientInterface {

    ///list all storage-buckets on planton-cloud for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketList>

    ///look up a storage-bucket using storage-bucket id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>

    ///find storage-buckets by product id.
    ///response contains only objects that the authenticated user account id has viewer access to.
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBuckets>

    ///find storage-buckets by environment id.
    ///response contains only objects that the authenticated user account id has viewer access to.
    @available(iOS 13, *)
    func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBuckets>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBuckets> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBuckets> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/findByEnvironmentId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController", type: .unary)
            public static let findByEnvironmentID = Connect.MethodSpec(name: "findByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController", type: .unary)
        }
    }
}

///storage-bucket stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketStackControllerClientInterface {

    ///preview storage-bucket stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>

    ///apply storage-bucket stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucketId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Storagebucket_Rpc_StorageBucket> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController", type: .unary)
        }
    }
}
