// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/environment/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///environment state
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///event-type
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_Enums_EnvironmentEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  ///resource api version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///environment spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///company to which the environment belongs to.
  ///the value is computed from product.
  public var companyID: String = String()

  ///product to which the environment belongs to
  public var productID: String = String()

  ///cloud-provider on which the storage-bucket is to be created.
  ///the value is computed from kube-cluster.
  public var kubernetesProvider: String = String()

  ///target kube-cluster to which the workloads like microservice-instances, postgres databases,
  ///kafka-clusters etc are deployed to.
  public var kubeClusterID: String = String()

  ///description for environment.
  public var description_p: String = String()

  ///id of the environment from which this environment is created.
  ///value is ignored when the environment is not cloned from another environment.
  public var clonedFrom: String = String()

  ///list of environment variables for the environment
  ///this attribute is ignored for environment creation.
  public var variables: [Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentVariableState] = []

  ///list of environment secrets for the environment
  ///this attribute is ignored for environment creation.
  public var secrets: [Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSecretState] = []

  ///flag to control inheritance of kube-cluster endpoint domains.
  ///new standard_endpoints are created for each endpoint_domain of the kube-cluster only when this flag is set.
  public var isInheritEndpointDomainsEnabled: Bool = false

  ///id of the gcp project in which the environment-secrets are to be created in secrets-manager.
  public var environmentSecretsGcpProjectID: String = String()

  ///microservice-instance spec for environment
  public var microserviceInstance: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState {
    get {return _microserviceInstance ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState()}
    set {_microserviceInstance = newValue}
  }
  /// Returns true if `microserviceInstance` has been explicitly set.
  public var hasMicroserviceInstance: Bool {return self._microserviceInstance != nil}
  /// Clears the value of `microserviceInstance`. Subsequent reads from it will return its default value.
  public mutating func clearMicroserviceInstance() {self._microserviceInstance = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _microserviceInstance: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState? = nil
}

///environment microservice-instance spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///flag to indicate of this environment is to be used as the build engine environment.
  ///default value is set to "false".
  ///at any point, only one environment in a product can be configured as build-engine environment.
  ///if there is already a environment which is configured as the build engine environment,
  ///then that environment needs to be updated to disable that first before enabling it on the new environment.
  public var isBuildEngineEnvironment: Bool = false

  ///microservice-instance pipeline spec
  public var pipeline: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState {
    get {return _pipeline ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState()}
    set {_pipeline = newValue}
  }
  /// Returns true if `pipeline` has been explicitly set.
  public var hasPipeline: Bool {return self._pipeline != nil}
  /// Clears the value of `pipeline`. Subsequent reads from it will return its default value.
  public mutating func clearPipeline() {self._pipeline = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pipeline: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState? = nil
}

///environment microservice-instance pipeline spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///toggle to enable or disable microservice-instance deployments to this environment.
  ///recommended default is "true"
  public var isEnabled: Bool = false

  ///list of environment ids that are considered as lower environments to this environment.
  ///in deployment pipelines for microservice-instances a successful deployment of all lower environments
  ///is required before deploying to this environment.
  ///this is used for creating dependency requirements on github/gitlab pipelines between deployment pipeline jobs.
  public var lowerEnvironmentIds: [String] = []

  ///id of the artifact-store required to construct the container image name.
  ///a product can have multiple artifact-stores. The container images are published to all artifact-stores.
  ///when creating a Deployment resource on kubernetes, only one container image name is allowed.
  ///this attribute will provide the ability to determine the artifact-store to be used for constructing the container
  ///image name to be used in the kubernetes Deployment resource.
  public var containerImageArtifactStoreID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///environment status
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///environment-var
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentVariableState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  ///the name must adhere to the following constraints:
  /// - it must be between 1 and 64 characters.
  /// - it can only contain english letters (a-z, a-z), numbers (0-9), hyphens (-), and underscores (_).
  /// - it cannot start with a hyphen or underscore.
  /// - it cannot end with a hyphen.
  /// - it must be unique within the environment.
  ///
  ///this can be represented by the following regular expression:
  /// "^[a-za-z0-9]([a-za-z0-9-_]{0,62}[a-za-z0-9])?$"
  ///
  ///note: in the above regular expression, {0,62} ensures the total length of the string
  ///      is 64 characters or less, including the starting and ending characters.
  public var name: String = String()

  ///human readable identifier for environment variable unique on planton cloud.
  ///value is computed using 'var-<environment-id>-<var-name>'.
  public var id: String = String()

  ///value for the environment variable.
  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///environment-secret
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSecretState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  ///the name must adhere to the following constraints:
  /// - it must be between 1 and 64 characters.
  /// - it can only contain english letters (a-z, a-z), numbers (0-9), hyphens (-), and underscores (_).
  /// - it cannot start with a hyphen or underscore.
  /// - it cannot end with a hyphen.
  /// - it must be unique within the environment.
  ///
  ///this can be represented by the following regular expression:
  /// "^[a-za-z0-9]([a-za-z0-9-_]{0,62}[a-za-z0-9])?$"
  ///
  ///note: in the above regular expression, {0,62} ensures the total length of the string
  ///      is 64 characters or less, including the starting and ending characters.
  public var name: String = String()

  ///human readable identifier for environment secret unique on planton cloud.
  ///value is computed using 'sec-<environment-id>-<secret-name>'.
  public var id: String = String()

  ///id of the secret resource on the secrets management service provider ex: google cloud secrets manager.
  ///value is same as the secret-id for google cloud secrets-manager backend.
  public var providerSecretID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentVariableState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSecretState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.environment.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_Enums_EnvironmentEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "kubernetes_provider"),
    4: .standard(proto: "kube_cluster_id"),
    5: .same(proto: "description"),
    6: .standard(proto: "cloned_from"),
    7: .same(proto: "variables"),
    8: .same(proto: "secrets"),
    9: .standard(proto: "is_inherit_endpoint_domains_enabled"),
    10: .standard(proto: "environment_secrets_gcp_project_id"),
    11: .standard(proto: "microservice_instance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.kubernetesProvider) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.kubeClusterID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.clonedFrom) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.variables) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.secrets) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isInheritEndpointDomainsEnabled) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.environmentSecretsGcpProjectID) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._microserviceInstance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.kubernetesProvider.isEmpty {
      try visitor.visitSingularStringField(value: self.kubernetesProvider, fieldNumber: 3)
    }
    if !self.kubeClusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeClusterID, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if !self.clonedFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.clonedFrom, fieldNumber: 6)
    }
    if !self.variables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.variables, fieldNumber: 7)
    }
    if !self.secrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.secrets, fieldNumber: 8)
    }
    if self.isInheritEndpointDomainsEnabled != false {
      try visitor.visitSingularBoolField(value: self.isInheritEndpointDomainsEnabled, fieldNumber: 9)
    }
    if !self.environmentSecretsGcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentSecretsGcpProjectID, fieldNumber: 10)
    }
    try { if let v = self._microserviceInstance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecState) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.kubernetesProvider != rhs.kubernetesProvider {return false}
    if lhs.kubeClusterID != rhs.kubeClusterID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.clonedFrom != rhs.clonedFrom {return false}
    if lhs.variables != rhs.variables {return false}
    if lhs.secrets != rhs.secrets {return false}
    if lhs.isInheritEndpointDomainsEnabled != rhs.isInheritEndpointDomainsEnabled {return false}
    if lhs.environmentSecretsGcpProjectID != rhs.environmentSecretsGcpProjectID {return false}
    if lhs._microserviceInstance != rhs._microserviceInstance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSpecMicroserviceInstanceSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_build_engine_environment"),
    2: .same(proto: "pipeline"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isBuildEngineEnvironment) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pipeline) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.isBuildEngineEnvironment != false {
      try visitor.visitSingularBoolField(value: self.isBuildEngineEnvironment, fieldNumber: 1)
    }
    try { if let v = self._pipeline {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecState) -> Bool {
    if lhs.isBuildEngineEnvironment != rhs.isBuildEngineEnvironment {return false}
    if lhs._pipeline != rhs._pipeline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_enabled"),
    2: .standard(proto: "lower_environment_ids"),
    3: .standard(proto: "container_image_artifact_store_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.lowerEnvironmentIds) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.containerImageArtifactStoreID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 1)
    }
    if !self.lowerEnvironmentIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.lowerEnvironmentIds, fieldNumber: 2)
    }
    if !self.containerImageArtifactStoreID.isEmpty {
      try visitor.visitSingularStringField(value: self.containerImageArtifactStoreID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) -> Bool {
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.lowerEnvironmentIds != rhs.lowerEnvironmentIds {return false}
    if lhs.containerImageArtifactStoreID != rhs.containerImageArtifactStoreID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentStatusState) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentVariableState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentVariableState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentVariableState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentVariableState) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSecretState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSecretState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .standard(proto: "provider_secret_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.providerSecretID) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.providerSecretID.isEmpty {
      try visitor.visitSingularStringField(value: self.providerSecretID, fieldNumber: 3)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSecretState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_State_EnvironmentSecretState) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs.providerSecretID != rhs.providerSecretID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
