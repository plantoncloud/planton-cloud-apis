// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/integration/gitlab/proxy/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///gitlab client info
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab host to send the request to ex: https://gitlab.com
  public var gitlabHost: String = String()

  ///gitlab authorization type
  public var authorizationType: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_Enums_GitlabApiAuthorizationType = .unspecified

  ///api or oauth token to be used to query gitlab server
  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input to list projects in a group and its subgroups on gitlab
///https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_ListProjectsQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for query to get project on gitlab
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetProjectQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///id of the project on gitlab
  public var gitlabProjectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for command to create a new git repository on gitlab
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_CreProjectCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///group path configured on the code-server
  ///proxy-server will only check for the groups starting from this path and does not check the parents of this group.
  ///the provided credentials may not have access to the parents of this group.
  public var codeServerGroupPath: String = String()

  ///path of the group on gitlab
  public var groupPath: String = String()

  ///name of the new project
  public var projectName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for command to apply a cookiecutter on a code project on github
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabApplyTemplateCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///github client info required to lookup template project info.
  ///code project templates is only supported for template projects hosted on github
  public var templateProjectGithubClientInfo: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubClientInfo {
    get {return _templateProjectGithubClientInfo ?? Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubClientInfo()}
    set {_templateProjectGithubClientInfo = newValue}
  }
  /// Returns true if `templateProjectGithubClientInfo` has been explicitly set.
  public var hasTemplateProjectGithubClientInfo: Bool {return self._templateProjectGithubClientInfo != nil}
  /// Clears the value of `templateProjectGithubClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearTemplateProjectGithubClientInfo() {self._templateProjectGithubClientInfo = nil}

  ///gitlab client info required to clone and publish template changes to target project
  public var targetProjectGitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _targetProjectGitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_targetProjectGitlabClientInfo = newValue}
  }
  /// Returns true if `targetProjectGitlabClientInfo` has been explicitly set.
  public var hasTargetProjectGitlabClientInfo: Bool {return self._targetProjectGitlabClientInfo != nil}
  /// Clears the value of `targetProjectGitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearTargetProjectGitlabClientInfo() {self._targetProjectGitlabClientInfo = nil}

  ///template code project
  public var templateProject: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject {
    get {return _templateProject ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject()}
    set {_templateProject = newValue}
  }
  /// Returns true if `templateProject` has been explicitly set.
  public var hasTemplateProject: Bool {return self._templateProject != nil}
  /// Clears the value of `templateProject`. Subsequent reads from it will return its default value.
  public mutating func clearTemplateProject() {self._templateProject = nil}

  ///code project for which the template should be applied
  public var targetCodeProject: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject {
    get {return _targetCodeProject ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject()}
    set {_targetCodeProject = newValue}
  }
  /// Returns true if `targetCodeProject` has been explicitly set.
  public var hasTargetCodeProject: Bool {return self._targetCodeProject != nil}
  /// Clears the value of `targetCodeProject`. Subsequent reads from it will return its default value.
  public mutating func clearTargetCodeProject() {self._targetCodeProject = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _templateProjectGithubClientInfo: Cloud_Planton_Apis_V1_Integration_Github_Proxy_GithubClientInfo? = nil
  fileprivate var _targetProjectGitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
  fileprivate var _templateProject: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject? = nil
  fileprivate var _targetCodeProject: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject? = nil
}

///input for command to add list of variables to a gitlab project
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToProjectCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///id of the project on gitlab
  public var gitlabProjectID: String = String()

  ///variables to be added to the project
  ///the key is the name of the variable and value is the value of the variable
  public var variables: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for command to add list of variables to a gitlab group
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToGroupCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///id of the group on gitlab
  public var gitlabGroupID: String = String()

  ///variables to be added to the group
  ///the key is the name of the variable and value is the value of the variable
  public var variables: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for query to get group on gitlab
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGroupQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///id of the group on gitlab
  public var gitlabGroupID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for query to get code project profile of a gitlab project
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGitlabCodeProjectProfileQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info required to clone project
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///id of the gitlab project
  public var gitlabProjectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

///input for command to add files to a project on gitlab
public struct Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddFilesToGitlabProjectCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///gitlab client info required to clone project and push changes
  public var gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo {
    get {return _gitlabClientInfo ?? Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo()}
    set {_gitlabClientInfo = newValue}
  }
  /// Returns true if `gitlabClientInfo` has been explicitly set.
  public var hasGitlabClientInfo: Bool {return self._gitlabClientInfo != nil}
  /// Clears the value of `gitlabClientInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGitlabClientInfo() {self._gitlabClientInfo = nil}

  ///id of the gitlab project to which the files are to be added
  public var gitlabProjectID: String = String()

  ///files to be added to the project
  public var codeProjectFiles: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectFile] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gitlabClientInfo: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_ListProjectsQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetProjectQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_CreProjectCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabApplyTemplateCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToProjectCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToGroupCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGroupQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGitlabCodeProjectProfileQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddFilesToGitlabProjectCommandInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.integration.gitlab.proxy"

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GitlabClientInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_host"),
    2: .standard(proto: "authorization_type"),
    3: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gitlabHost) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.authorizationType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gitlabHost.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabHost, fieldNumber: 1)
    }
    if self.authorizationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.authorizationType, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabClientInfo) -> Bool {
    if lhs.gitlabHost != rhs.gitlabHost {return false}
    if lhs.authorizationType != rhs.authorizationType {return false}
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_ListProjectsQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListProjectsQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_ListProjectsQueryInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_ListProjectsQueryInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetProjectQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProjectQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "gitlab_project_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gitlabProjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gitlabProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabProjectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetProjectQueryInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetProjectQueryInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.gitlabProjectID != rhs.gitlabProjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_CreProjectCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreProjectCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "code_server_group_path"),
    3: .standard(proto: "group_path"),
    4: .standard(proto: "project_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.codeServerGroupPath) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupPath) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.projectName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.codeServerGroupPath.isEmpty {
      try visitor.visitSingularStringField(value: self.codeServerGroupPath, fieldNumber: 2)
    }
    if !self.groupPath.isEmpty {
      try visitor.visitSingularStringField(value: self.groupPath, fieldNumber: 3)
    }
    if !self.projectName.isEmpty {
      try visitor.visitSingularStringField(value: self.projectName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_CreProjectCommandInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_CreProjectCommandInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.codeServerGroupPath != rhs.codeServerGroupPath {return false}
    if lhs.groupPath != rhs.groupPath {return false}
    if lhs.projectName != rhs.projectName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabApplyTemplateCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GitlabApplyTemplateCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "template_project_github_client_info"),
    2: .standard(proto: "target_project_gitlab_client_info"),
    3: .standard(proto: "template_project"),
    4: .standard(proto: "target_code_project"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._templateProjectGithubClientInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._targetProjectGitlabClientInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._templateProject) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._targetCodeProject) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._templateProjectGithubClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._targetProjectGitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._templateProject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._targetCodeProject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabApplyTemplateCommandInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GitlabApplyTemplateCommandInput) -> Bool {
    if lhs._templateProjectGithubClientInfo != rhs._templateProjectGithubClientInfo {return false}
    if lhs._targetProjectGitlabClientInfo != rhs._targetProjectGitlabClientInfo {return false}
    if lhs._templateProject != rhs._templateProject {return false}
    if lhs._targetCodeProject != rhs._targetCodeProject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToProjectCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddVariablesToProjectCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "gitlab_project_id"),
    3: .same(proto: "variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gitlabProjectID) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.variables) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gitlabProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabProjectID, fieldNumber: 2)
    }
    if !self.variables.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.variables, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToProjectCommandInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToProjectCommandInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.gitlabProjectID != rhs.gitlabProjectID {return false}
    if lhs.variables != rhs.variables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToGroupCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddVariablesToGroupCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "gitlab_group_id"),
    3: .same(proto: "variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gitlabGroupID) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.variables) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gitlabGroupID.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabGroupID, fieldNumber: 2)
    }
    if !self.variables.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.variables, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToGroupCommandInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddVariablesToGroupCommandInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.gitlabGroupID != rhs.gitlabGroupID {return false}
    if lhs.variables != rhs.variables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGroupQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGroupQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "gitlab_group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gitlabGroupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gitlabGroupID.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabGroupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGroupQueryInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGroupQueryInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.gitlabGroupID != rhs.gitlabGroupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGitlabCodeProjectProfileQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGitlabCodeProjectProfileQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "gitlab_project_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gitlabProjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gitlabProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabProjectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGitlabCodeProjectProfileQueryInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_GetGitlabCodeProjectProfileQueryInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.gitlabProjectID != rhs.gitlabProjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddFilesToGitlabProjectCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddFilesToGitlabProjectCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gitlab_client_info"),
    2: .standard(proto: "gitlab_project_id"),
    3: .standard(proto: "code_project_files"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gitlabClientInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gitlabProjectID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.codeProjectFiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gitlabClientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gitlabProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.gitlabProjectID, fieldNumber: 2)
    }
    if !self.codeProjectFiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.codeProjectFiles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddFilesToGitlabProjectCommandInput, rhs: Cloud_Planton_Apis_V1_Integration_Gitlab_Proxy_AddFilesToGitlabProjectCommandInput) -> Bool {
    if lhs._gitlabClientInfo != rhs._gitlabClientInfo {return false}
    if lhs.gitlabProjectID != rhs.gitlabProjectID {return false}
    if lhs.codeProjectFiles != rhs.codeProjectFiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
