// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/billing/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///billing-account
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource api version
  public var apiVersion: String = String()

  /// resource kind
  public var kind: String = String()

  /// metadata for the resource
  /// identifier for billing account
  /// name of the billing account.
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// spec
  public var spec: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec {
    get {return _spec ?? Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {self._spec = nil}

  /// status
  public var status: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus {
    get {return _status ?? Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
  fileprivate var _spec: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec? = nil
  fileprivate var _status: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus? = nil
}

///specification for billing-account.
///a billing account is created upon company creation.
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the company for which the billing account is created
  public var companyID: String = String()

  /// Represents the customer's information on Stripe.
  /// StripeCustomer is a separate message, not shown here, which presumably includes necessary
  /// Stripe-specific information like the customer ID, email, etc.
  public var stripeCustomer: Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer {
    get {return _stripeCustomer ?? Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer()}
    set {_stripeCustomer = newValue}
  }
  /// Returns true if `stripeCustomer` has been explicitly set.
  public var hasStripeCustomer: Bool {return self._stripeCustomer != nil}
  /// Clears the value of `stripeCustomer`. Subsequent reads from it will return its default value.
  public mutating func clearStripeCustomer() {self._stripeCustomer = nil}

  /// A list of BillingSubscription objects associated with this billing account.
  /// BillingSubscription is another message type, not shown here, which contains details about individual subscriptions.
  public var subscriptions: [Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscription] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stripeCustomer: Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer? = nil
}

public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// System audit information associated with this billing subscription.
  /// SysAudit is a separate message defined elsewhere, which includes necessary system audit information.
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// Unique identifier for the specific billing subscription.
  /// This identifier is unique per billing subscription and is used to correlate the billing subscription with its associated data.
  public var id: String = String()

  /// Specifies the type of the resource being billed using an enumeration from the cloud.planton.apis.v1.commons.resource.enums package.
  /// The resource type helps categorize and manage resources more effectively, ensuring the right billing strategy for each type.
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// StripeSubscription object associated with this billing subscription.
  /// StripeSubscription is a separate message, which includes necessary Stripe-specific subscription information.
  public var subscription: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription {
    get {return _subscription ?? Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription()}
    set {_subscription = newValue}
  }
  /// Returns true if `subscription` has been explicitly set.
  public var hasSubscription: Bool {return self._subscription != nil}
  /// Clears the value of `subscription`. Subsequent reads from it will return its default value.
  public mutating func clearSubscription() {self._subscription = nil}

  /// List of BillingItemState objects associated with this billing subscription.
  /// BillingItemState is another message type, containing details about individual billing items.
  public var billingItems: [Cloud_Planton_Apis_V1_Billing_Rpc_BillingItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _subscription: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription? = nil
}

public struct Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the customer created for the company on stripe
  public var customerID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the subscription created for the company on stripe
  public var subscriptionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///status for billing-account
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

/// BillingItemState is a protocol message that represents the state of a billing item.
/// This message is used to manage and track billing related information for various resources.
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id is the unique identifier for the specific billing item.
  /// This identifier is unique per billing item and is used to correlate the billing item with its associated data.
  public var id: String = String()

  /// Specifies the type of the resource being billed using an enumeration from the cloud.planton.apis.v1.commons.resource.enums package.
  /// The resource type helps categorize and manage resources more effectively, ensuring the right billing strategy for each type.
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// StripeSubscriptionItem object associated with this billing item.
  /// StripeSubscriptionItem is a separate message, which includes necessary Stripe-specific subscription item information.
  public var subscriptionItem: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem {
    get {return _subscriptionItem ?? Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem()}
    set {_subscriptionItem = newValue}
  }
  /// Returns true if `subscriptionItem` has been explicitly set.
  public var hasSubscriptionItem: Bool {return self._subscriptionItem != nil}
  /// Clears the value of `subscriptionItem`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionItem() {self._subscriptionItem = nil}

  /// Represents the association between a billing subscription and its corresponding resources.
  /// Each entry in this list maps a billing subscription to a specific resource, allowing for a many-to-many relationship.
  /// This ensures that a single billing subscription can be associated with multiple resources and vice versa.
  public var resourceMapping: [Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscriptionResourceMapping] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _subscriptionItem: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem? = nil
}

/// Represents the mapping state of a billing subscription to a resource.
/// This message provides details about the association between a billing subscription and a specific resource.
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscriptionResourceMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// System audit information, containing metadata like creation and modification timestamps.
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// Unique identifier for the billing subscription resource mapping.
  public var id: String = String()

  /// Identifier for the associated resource.
  public var resourceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

public struct Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// stripe_price_id represents the unique identifier for the price of the resource in Stripe.
  /// Stripe is a payment processing platform, and each distinct price point or billing model has a unique identifier within Stripe.
  /// This field corresponds to this identifier and is used for billing and payment processing.
  public var priceID: String = String()

  /// stripe_subscription_item_id represents the unique identifier for the subscription item in Stripe.
  /// This is the identifier of the specific item within a subscription that this BillingItemState represents.
  /// It is used for tracking the billing state of the item within its subscription.
  public var subscriptionItemID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for id of the billing account.
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///list of billing accounts.
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccounts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var billingAccounts: [Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated requests to list all billing accounts.
public struct Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var billingAccounts: [Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response to the query to get stripe customer portal session.
///https://stripe.com/docs/api/customer_portal/sessions/create
public struct Cloud_Planton_Apis_V1_Billing_Rpc_GetCustomerPortalSessionQueryResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///url for the customer portal session.
  public var url: String = String()

  ///url to which the user should be returned to upon managing the billing on customer portal.
  public var returnURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscription: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingItem: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscriptionResourceMapping: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccounts: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Billing_Rpc_GetCustomerPortalSessionQueryResp: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.billing.rpc"

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingAccount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.apiVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.apiVersion, fieldNumber: 1)
    }
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 2)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccount) -> Bool {
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingAccountSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "stripe_customer"),
    3: .same(proto: "subscriptions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._stripeCustomer) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.subscriptions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    try { if let v = self._stripeCustomer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.subscriptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subscriptions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountSpec) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs._stripeCustomer != rhs._stripeCustomer {return false}
    if lhs.subscriptions != rhs.subscriptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingSubscription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "id"),
    2: .standard(proto: "resource_type"),
    3: .same(proto: "subscription"),
    4: .standard(proto: "billing_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.resourceType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._subscription) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.billingItems) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.resourceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resourceType, fieldNumber: 2)
    }
    try { if let v = self._subscription {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.billingItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.billingItems, fieldNumber: 4)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscription, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscription) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.id != rhs.id {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs._subscription != rhs._subscription {return false}
    if lhs.billingItems != rhs.billingItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StripeCustomer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "customer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.customerID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.customerID.isEmpty {
      try visitor.visitSingularStringField(value: self.customerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_StripeCustomer) -> Bool {
    if lhs.customerID != rhs.customerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StripeSubscription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscription_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscription) -> Bool {
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingAccountStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountStatus) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "id"),
    2: .standard(proto: "resource_type"),
    3: .standard(proto: "subscription_item"),
    4: .standard(proto: "resource_mapping"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.resourceType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._subscriptionItem) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.resourceMapping) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.resourceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resourceType, fieldNumber: 2)
    }
    try { if let v = self._subscriptionItem {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.resourceMapping.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resourceMapping, fieldNumber: 4)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingItem, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingItem) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.id != rhs.id {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs._subscriptionItem != rhs._subscriptionItem {return false}
    if lhs.resourceMapping != rhs.resourceMapping {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscriptionResourceMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingSubscriptionResourceMapping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "id"),
    2: .standard(proto: "resource_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 2)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscriptionResourceMapping, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingSubscriptionResourceMapping) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.id != rhs.id {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StripeSubscriptionItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "price_id"),
    2: .standard(proto: "subscription_item_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.priceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subscriptionItemID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.priceID.isEmpty {
      try visitor.visitSingularStringField(value: self.priceID, fieldNumber: 1)
    }
    if !self.subscriptionItemID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionItemID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_StripeSubscriptionItem) -> Bool {
    if lhs.priceID != rhs.priceID {return false}
    if lhs.subscriptionItemID != rhs.subscriptionItemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingAccountId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountId, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccounts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingAccounts"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "billing_accounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.billingAccounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.billingAccounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.billingAccounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccounts, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccounts) -> Bool {
    if lhs.billingAccounts != rhs.billingAccounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BillingAccountList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .standard(proto: "billing_accounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.billingAccounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.billingAccounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.billingAccounts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountList, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_BillingAccountList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.billingAccounts != rhs.billingAccounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Billing_Rpc_GetCustomerPortalSessionQueryResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCustomerPortalSessionQueryResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "return_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.returnURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.returnURL.isEmpty {
      try visitor.visitSingularStringField(value: self.returnURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Billing_Rpc_GetCustomerPortalSessionQueryResp, rhs: Cloud_Planton_Apis_V1_Billing_Rpc_GetCustomerPortalSessionQueryResp) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.returnURL != rhs.returnURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
