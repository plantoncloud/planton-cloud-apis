// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/iam/authz/policy/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// iam policy command controller
public protocol Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyCommandControllerClientInterface {

    /// add iam policies to a resource
    @available(iOS 13, *)
    func `add`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal>

    /// remove list of iam policies of a principal and resource
    @available(iOS 13, *)
    func `removeMultiple`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyCommandControllerClient: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `add`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController/add", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `removeMultiple`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController/removeMultiple", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let add = Connect.MethodSpec(name: "add", service: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController", type: .unary)
            public static let removeMultiple = Connect.MethodSpec(name: "removeMultiple", service: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController", type: .unary)
        }
    }
}

/// iam policy query controller
public protocol Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyQueryControllerClientInterface {

    /// retrieve iam policies by type and id
    @available(iOS 13, *)
    func `getByResourceTypeAndResourceID`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal>

    /// retrieve iam policies by type and id grouped by role
    @available(iOS 13, *)
    func `getByResourceTypeAndResourceIDGroupByRole`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyQueryControllerClient: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `getByResourceTypeAndResourceID`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController/getByResourceTypeAndResourceId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByResourceTypeAndResourceIDGroupByRole`(request: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController/getByResourceTypeAndResourceIdGroupByRole", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getByResourceTypeAndResourceID = Connect.MethodSpec(name: "getByResourceTypeAndResourceId", service: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController", type: .unary)
            public static let getByResourceTypeAndResourceIDGroupByRole = Connect.MethodSpec(name: "getByResourceTypeAndResourceIdGroupByRole", service: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController", type: .unary)
        }
    }
}
