// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/resource/list/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Record is a message type that represents a single record object in list view.
/// Record object has all fields that are required to show in list view
/// It contains identifying and contextual information about the resource,
/// such as its id, name, type, and the associated company, product, and
/// product environment identifiers.
public struct Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Record {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// Unique identifier for the resource.
  /// example for resource in planton cloud could be postgres_cluster/ kafka_cluster/ microservice_instance etc.;
  public var id: String = String()

  /// A human-readable name for the resource.
  public var name: String = String()

  /// The type of the resource.
  public var type: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// Unique identifier for the company associated with this resource.
  public var companyID: String = String()

  /// Unique identifier for the product associated with this resource.
  public var productID: String = String()

  /// Unique identifier for the product environment
  /// (e.g. 'rbitex-rbx-prod','rbitex-rbx-dev', etc.) associated with this resource.
  public var environmentID: String = String()

  /// flag to indicate if the resource is deleted.
  public var isActive: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

/// ResourceList is a message type that represents a paginated list of Record objects.
/// It contains information about the total number of pages in the list and an array of Record entries.
public struct Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_RecordList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The total number of pages in the paginated list of Record objects.
  public var totalPages: Int32 = 0

  /// An array of Record objects contained in the current page of the paginated list.
  public var entries: [Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Record] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The SearchByResourceTypeInput message represents the input parameters required for
/// executing a search operation based on a specified resource type within a given
/// company's product.
public struct Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_GetByResourceTypeInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is the unique identifier for the company
  /// associated with the get query. The get operation will only consider resources
  /// associated with this company.
  public var companyID: String = String()

  /// This is the unique identifier for the product
  /// associated with the get query. The get operation will only consider resources
  /// that are linked with this product.
  public var productID: String = String()

  /// This field indicates the type of resource that the search operation will be focusing on.
  /// The possible resource types are defined by the ResourceType enum.
  public var resourceType: Cloud_Planton_Apis_V1_Commons_Resource_Enums_ResourceType = .unspecified

  /// This field contains the pagination information used for retrieving specific paginated
  /// data. It enables the client to specify the number of records per page and the page number.
  public var pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo {
    get {return _pageInfo ?? Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  ///  this field is an enumeration used to dictate the active status of the resources
  ///  included in the search results.
  public var statusFilter: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Enums_StatusFilter = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Record: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_RecordList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_GetByResourceTypeInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.commons.resource.list.rpc"

extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Record"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    98: .standard(proto: "sys_audit"),
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .standard(proto: "company_id"),
    5: .standard(proto: "product_id"),
    6: .standard(proto: "environment_id"),
    7: .standard(proto: "is_active"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isActive) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 4)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 5)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 6)
    }
    if self.isActive != false {
      try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 7)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Record, rhs: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_Record) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.isActive != rhs.isActive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_RecordList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RecordList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_RecordList, rhs: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_RecordList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_GetByResourceTypeInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetByResourceTypeInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "resource_type"),
    4: .standard(proto: "page_info"),
    5: .standard(proto: "status_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.resourceType) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.statusFilter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if self.resourceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resourceType, fieldNumber: 3)
    }
    try { if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.statusFilter != .unspecified {
      try visitor.visitSingularEnumField(value: self.statusFilter, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_GetByResourceTypeInput, rhs: Cloud_Planton_Apis_V1_Commons_Resource_List_Rpc_GetByResourceTypeInput) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs.statusFilter != rhs.statusFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
