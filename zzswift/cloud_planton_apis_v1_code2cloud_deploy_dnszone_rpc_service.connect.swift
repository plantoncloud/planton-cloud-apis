// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/deploy/dnszone/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///dns-zone command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneCommandControllerClientInterface {

    /// add a new dns-zone to a company
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    /// update an existing dns-zone of a company
    /// only dns-zone records can be updated as part of this operations
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    /// delete an dns-zone of a company
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    /// restore a delete dns-zone
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneCommandController", type: .unary)
        }
    }
}

///dns-zone query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneQueryControllerClientInterface {

    ///todo: add authorization
    /// find dns-zones by company id
    ///the response should only include dns-zones in a company that the authenticated user account has viewer access to.
    @available(iOS 13, *)
    func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones>

    ///todo: add authorization
    /// get details of a dns-zone id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    ///todo: add authorization
    /// get details of the exact or a parent of the provided dns-zone name
    @available(iOS 13, *)
    func `getExactOrParentDnsZoneByDomainName`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    ///todo: add authorization
    /// list all dns-zones for the requested page. This is intended to be used on back-office portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList>

    ///todo: add authorization
    /// checks if the nameservers for the dns-zone are resolving to the nameservers of the managed zone.
    @available(iOS 13, *)
    func `isNameserversDelegated`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_BoolValue>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController/findByCompanyId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getExactOrParentDnsZoneByDomainName`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController/getExactOrParentDnsZoneByDomainName", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `isNameserversDelegated`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_BoolValue> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController/isNameserversDelegated", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let findByCompanyID = Connect.MethodSpec(name: "findByCompanyId", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController", type: .unary)
            public static let getExactOrParentDnsZoneByDomainName = Connect.MethodSpec(name: "getExactOrParentDnsZoneByDomainName", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController", type: .unary)
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController", type: .unary)
            public static let isNameserversDelegated = Connect.MethodSpec(name: "isNameserversDelegated", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneQueryController", type: .unary)
        }
    }
}

///dns-record command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecordCommandControllerClientInterface {

    /// add a new dns-zone to a company
    @available(iOS 13, *)
    func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    /// update an existing dns-zone of a company
    /// only dns-zone records can be updated as part of this operations
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    /// delete an dns-zone of a company
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecordCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecordCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecordCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `add`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsRecordCommandController/add", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsRecordCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsRecordCommandController/delete", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let add = Connect.MethodSpec(name: "add", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsRecordCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsRecordCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsRecordCommandController", type: .unary)
        }
    }
}

///dns-zone stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStackControllerClientInterface {

    ///preview dns-zone stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>

    ///apply dns-zone stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc.DnsZoneStackController", type: .unary)
        }
    }
}
