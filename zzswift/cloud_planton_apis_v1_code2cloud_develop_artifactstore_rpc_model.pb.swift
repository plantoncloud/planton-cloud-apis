// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/develop/artifactstore/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource api-version
  public var apiVersion: String = String()

  ///resource kind
  public var kind: String = String()

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  ///resource spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec {
    get {return _spec ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {self._spec = nil}

  ///resource status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus {
    get {return _status ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
  fileprivate var _spec: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec? = nil
  fileprivate var _status: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus? = nil
}

///artifact-store spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///company to which the artifact-store belongs to.
  public var companyID: String = String()

  ///product to which the artifact-store belongs to.
  public var productID: String = String()

  ///username used to pull and push changes to/from a repository on buf.build registry.
  ///this value is used in ci/cd pipelines of code-projects
  public var bufUsername: String = String()

  ///token used to pull and push changes to/from a repository on buf.build registry.
  ///this value is used in ci/cd pipelines of code-projects
  public var bufToken: String = String()

  ///base64 encoded git ssh key to clone golang code projects as part of code pipeline executions.
  ///used in code pipelines which would require git authentication to fetch dependencies that rely on git.
  ///both golang and swift code projects use git for dependency management.
  public var goModuleFetchGitSshKeyBase64: String = String()

  ///provider for the artifact-store repositories
  public var repoProvider: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_Enums_ArtifactStoreRepoProvider = .unspecified

  ///specification for google cloud artifact registry.
  ///this attribute is only populated when the artifact-store repo provider is artifact-registry on google cloud.
  public var gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec {
    get {return _gcpArtifactRegistry ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec()}
    set {_gcpArtifactRegistry = newValue}
  }
  /// Returns true if `gcpArtifactRegistry` has been explicitly set.
  public var hasGcpArtifactRegistry: Bool {return self._gcpArtifactRegistry != nil}
  /// Clears the value of `gcpArtifactRegistry`. Subsequent reads from it will return its default value.
  public mutating func clearGcpArtifactRegistry() {self._gcpArtifactRegistry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec? = nil
}

///artifact-store status
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _storage._lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_uniqueStorage()._lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return _storage._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {_uniqueStorage()._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _storage._sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_uniqueStorage()._sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return _storage._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {_uniqueStorage()._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String {
    get {return _storage._stackJobID}
    set {_uniqueStorage()._stackJobID = newValue}
  }

  ///status for artifact-store repositories created on gcp artifact-registry.
  ///this is only populated when the gcp artifact-registry is configured as the repo-provider.
  public var gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus {
    get {return _storage._gcpArtifactRegistry ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus()}
    set {_uniqueStorage()._gcpArtifactRegistry = newValue}
  }
  /// Returns true if `gcpArtifactRegistry` has been explicitly set.
  public var hasGcpArtifactRegistry: Bool {return _storage._gcpArtifactRegistry != nil}
  /// Clears the value of `gcpArtifactRegistry`. Subsequent reads from it will return its default value.
  public mutating func clearGcpArtifactRegistry() {_uniqueStorage()._gcpArtifactRegistry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///spec for gcp artifact-registry repo provider for artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the gcp cloud account in which the artifact-store repositories are to be created.
  ///the allowed values for this attribute are all the gcp cloud accounts that the parent company of the product
  ///has required permissions to create artifact-store in.
  public var gcpCloudAccountID: String = String()

  ///id of the gcp project in which the artifact-registry resources are to be created.
  ///this is computed from the configured gcp cloud-account.
  ///artifact-registry resources are created in core-infra project created in the connected gcp cloud-account.
  public var projectID: String = String()

  ///gcp region in which the artifact-store is to be created ex: us-west2.
  ///choosing the closest region for the kube-clusters in which the environments of the product are
  ///hosted reduces the service startup time as the container images are downloaded faster.
  public var region: String = String()

  ///flag to control access to artifacts published to repositories without any authentication.
  ///this is useful for publishing artifacts for opensource projects.
  public var isExternal: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///status for gcp artifact-registry repo provider for artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///email of the reader service account.
  public var readerServiceAccountEmail: String = String()

  ///base64 encoded key of the reader service account.
  public var readerServiceAccountKeyBase64: String = String()

  ///email of the writer service account.
  public var writerServiceAccountEmail: String = String()

  ///base64 encoded key of the writer service account.
  public var writerServiceAccountKeyBase64: String = String()

  ///name of the docker repo.
  public var dockerRepoName: String = String()

  ///hostname of the docker repo.
  public var dockerRepoHostname: String = String()

  ///url for the docker repository.
  public var dockerRepoURL: String = String()

  ///name of the maven repo.
  public var mavenRepoName: String = String()

  ///url for the maven repository.
  public var mavenRepoURL: String = String()

  ///name of the npm repo.
  public var npmRepoName: String = String()

  ///name of the python repo.
  public var pythonRepoName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for artifact-store id
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list artifact-stores
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///list of artifact-stores
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input to get a paginated list of resources with (proxy google artifact-registry server)
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The token to retrieve the next page of packages, or empty if there are no
  ///more packages to return.
  ///note: this style of pagination is different from the rest of the system. the reason for different style is because
  ///this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  public var pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_Google_GooglePageInfo {
    get {return _pageInfo ?? Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_Google_GooglePageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  ///id of the artifact-store
  public var artifactStoreID: String = String()

  ///name of the repository
  public var repoName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_Google_GooglePageInfo? = nil
}

///https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/artifact.proto
///docker image definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DockerImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Required. registry_location, project_id, repository_name and image id forms a unique
  ///image
  ///name:`projects/<project_id>/locations/<location>/repository/<repository_name>/dockerImages/<docker_image>`.
  ///For example,
  ///"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/
  ///nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
  ///where "us-west4" is the registry_location, "test-project" is the
  ///project_id, "test-repo" is the repository_name and
  ///"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf"
  ///is the image's digest.
  public var name: String = String()

  ///Required. URL to access the image.
  ///Example:
  ///us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
  public var uri: String = String()

  ///Tags attached to this image.
  public var tags: [String] = []

  ///Calculated size of the image.
  ///This field is returned as the 'metadata.imageSizeBytes' field in the
  ///Version resource.
  public var imageSizeBytes: Int64 = 0

  ///Time the image was uploaded.
  public var uploadTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _uploadTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uploadTime = newValue}
  }
  /// Returns true if `uploadTime` has been explicitly set.
  public var hasUploadTime: Bool {return self._uploadTime != nil}
  /// Clears the value of `uploadTime`. Subsequent reads from it will return its default value.
  public mutating func clearUploadTime() {self._uploadTime = nil}

  ///Media type of this image, e.g.
  ///"application/vnd.docker.distribution.manifest.v2+json".
  ///This field is returned as the 'metadata.mediaType' field in the
  ///Version resource.
  public var mediaType: String = String()

  ///The time this image was built.
  ///This field is returned as the 'metadata.buildTime' field in the
  ///Version resource.
  ///The build time is returned to the client as an RFC 3339 string, which can
  ///be easily used with the JavaScript Date constructor.
  public var buildTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _buildTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_buildTime = newValue}
  }
  /// Returns true if `buildTime` has been explicitly set.
  public var hasBuildTime: Bool {return self._buildTime != nil}
  /// Clears the value of `buildTime`. Subsequent reads from it will return its default value.
  public mutating func clearBuildTime() {self._buildTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _uploadTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _buildTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///response for paginated query to list docker images from artifact-store docker repo (proxy google artifact-registry server)
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///docker images list
  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DockerImage] = []

  ///The token to retrieve the next page of packages, or empty if there are no
  ///more packages to return.
  ///note: this style of pagination is different from the rest of the system. the reason for different style is because
  ///this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/package.proto
///artifact package definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
///Packages are named collections of versions in google artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The name of the package, for example:
  ///"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1".
  ///If the package ID part contains slashes, the slashes are escaped.
  public var name: String = String()

  ///The display name of the package.
  public var displayName: String = String()

  ///The time when the package was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  ///The time when the package was last updated. This includes publishing a new
  ///version of the package.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///response for paginated query to list packages from artifact-store repository (proxy google artifact-registry server)
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of artifact-store packages
  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackage] = []

  ///The token to retrieve the next page of packages, or empty if there are no
  ///more packages to return.
  ///note: this style of pagination is different from the rest of the system. the reason for different style is because
  ///this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/version.proto
///The body of a version resource. A version resource represents a
///collection of components, such as files and other data. This may correspond
///to a version in many package management schemes.
///artifact package version definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The name of the version, for example:
  ///"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1".
  ///If the package or version ID parts contain slashes, the slashes are
  ///escaped.
  public var name: String = String()

  ///Optional. Description of the version, as specified in its metadata.
  public var description_p: String = String()

  ///The time when the version was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  ///The time when the version was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///input to get a paginated list of package versions with (proxy google artifact-registry server)
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The token to retrieve the next page of packages, or empty if there are no
  ///more packages to return.
  ///note: this style of pagination is different from the rest of the system. the reason for different style is because
  ///this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  public var pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_Google_GooglePageInfo {
    get {return _pageInfo ?? Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_Google_GooglePageInfo()}
    set {_pageInfo = newValue}
  }
  /// Returns true if `pageInfo` has been explicitly set.
  public var hasPageInfo: Bool {return self._pageInfo != nil}
  /// Clears the value of `pageInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPageInfo() {self._pageInfo = nil}

  ///id of the artifact-store
  public var artifactStoreID: String = String()

  ///name of the package required to retrieve versions
  public var packageName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pageInfo: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_Google_GooglePageInfo? = nil
}

///response for paginated query to list packages from artifact-store repository (proxy google artifact-registry server)
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of artifact-store packages
  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion] = []

  ///The token to retrieve the next page of packages, or empty if there are no
  ///more packages to return.
  ///note: this style of pagination is different from the rest of the system. the reason for different style is because
  ///this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input for command to delete a package version from artifact-store
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the artifact-store
  public var artifactStoreID: String = String()

  ///name of the package required to retrieve versions
  public var packageVersionName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DockerImage: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackage: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.develop.artifactstore.rpc"

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStore"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.apiVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.apiVersion, fieldNumber: 1)
    }
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 2)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStore) -> Bool {
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "buf_username"),
    4: .standard(proto: "buf_token"),
    5: .standard(proto: "go_module_fetch_git_ssh_key_base64"),
    6: .standard(proto: "repo_provider"),
    7: .standard(proto: "gcp_artifact_registry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bufUsername) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.bufToken) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.goModuleFetchGitSshKeyBase64) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.repoProvider) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._gcpArtifactRegistry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.bufUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.bufUsername, fieldNumber: 3)
    }
    if !self.bufToken.isEmpty {
      try visitor.visitSingularStringField(value: self.bufToken, fieldNumber: 4)
    }
    if !self.goModuleFetchGitSshKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.goModuleFetchGitSshKeyBase64, fieldNumber: 5)
    }
    if self.repoProvider != .unspecified {
      try visitor.visitSingularEnumField(value: self.repoProvider, fieldNumber: 6)
    }
    try { if let v = self._gcpArtifactRegistry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreSpec) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.bufUsername != rhs.bufUsername {return false}
    if lhs.bufToken != rhs.bufToken {return false}
    if lhs.goModuleFetchGitSshKeyBase64 != rhs.goModuleFetchGitSshKeyBase64 {return false}
    if lhs.repoProvider != rhs.repoProvider {return false}
    if lhs._gcpArtifactRegistry != rhs._gcpArtifactRegistry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .standard(proto: "gcp_artifact_registry"),
  ]

  fileprivate class _StorageClass {
    var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
    var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
    var _stackJobID: String = String()
    var _gcpArtifactRegistry: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lifecycle = source._lifecycle
      _sysAudit = source._sysAudit
      _stackJobID = source._stackJobID
      _gcpArtifactRegistry = source._gcpArtifactRegistry
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._gcpArtifactRegistry) }()
        case 97: try { try decoder.decodeSingularStringField(value: &_storage._stackJobID) }()
        case 98: try { try decoder.decodeSingularMessageField(value: &_storage._sysAudit) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._lifecycle) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._gcpArtifactRegistry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._stackJobID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stackJobID, fieldNumber: 97)
      }
      try { if let v = _storage._sysAudit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
      } }()
      try { if let v = _storage._lifecycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lifecycle != rhs_storage._lifecycle {return false}
        if _storage._sysAudit != rhs_storage._sysAudit {return false}
        if _storage._stackJobID != rhs_storage._stackJobID {return false}
        if _storage._gcpArtifactRegistry != rhs_storage._gcpArtifactRegistry {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreGcpArtifactRegistrySpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_cloud_account_id"),
    2: .standard(proto: "project_id"),
    3: .same(proto: "region"),
    4: .standard(proto: "is_external"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcpCloudAccountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isExternal) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcpCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpCloudAccountID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 3)
    }
    if self.isExternal != false {
      try visitor.visitSingularBoolField(value: self.isExternal, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistrySpec) -> Bool {
    if lhs.gcpCloudAccountID != rhs.gcpCloudAccountID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.region != rhs.region {return false}
    if lhs.isExternal != rhs.isExternal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreGcpArtifactRegistryStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reader_service_account_email"),
    2: .standard(proto: "reader_service_account_key_base64"),
    3: .standard(proto: "writer_service_account_email"),
    4: .standard(proto: "writer_service_account_key_base64"),
    5: .standard(proto: "docker_repo_name"),
    6: .standard(proto: "docker_repo_hostname"),
    7: .standard(proto: "docker_repo_url"),
    8: .standard(proto: "maven_repo_name"),
    9: .standard(proto: "maven_repo_url"),
    10: .standard(proto: "npm_repo_name"),
    11: .standard(proto: "python_repo_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.readerServiceAccountEmail) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.readerServiceAccountKeyBase64) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.writerServiceAccountEmail) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.writerServiceAccountKeyBase64) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dockerRepoName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dockerRepoHostname) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.dockerRepoURL) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.mavenRepoName) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.mavenRepoURL) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.npmRepoName) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.pythonRepoName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.readerServiceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.readerServiceAccountEmail, fieldNumber: 1)
    }
    if !self.readerServiceAccountKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.readerServiceAccountKeyBase64, fieldNumber: 2)
    }
    if !self.writerServiceAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.writerServiceAccountEmail, fieldNumber: 3)
    }
    if !self.writerServiceAccountKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.writerServiceAccountKeyBase64, fieldNumber: 4)
    }
    if !self.dockerRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoName, fieldNumber: 5)
    }
    if !self.dockerRepoHostname.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoHostname, fieldNumber: 6)
    }
    if !self.dockerRepoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerRepoURL, fieldNumber: 7)
    }
    if !self.mavenRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.mavenRepoName, fieldNumber: 8)
    }
    if !self.mavenRepoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.mavenRepoURL, fieldNumber: 9)
    }
    if !self.npmRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.npmRepoName, fieldNumber: 10)
    }
    if !self.pythonRepoName.isEmpty {
      try visitor.visitSingularStringField(value: self.pythonRepoName, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreGcpArtifactRegistryStatus) -> Bool {
    if lhs.readerServiceAccountEmail != rhs.readerServiceAccountEmail {return false}
    if lhs.readerServiceAccountKeyBase64 != rhs.readerServiceAccountKeyBase64 {return false}
    if lhs.writerServiceAccountEmail != rhs.writerServiceAccountEmail {return false}
    if lhs.writerServiceAccountKeyBase64 != rhs.writerServiceAccountKeyBase64 {return false}
    if lhs.dockerRepoName != rhs.dockerRepoName {return false}
    if lhs.dockerRepoHostname != rhs.dockerRepoHostname {return false}
    if lhs.dockerRepoURL != rhs.dockerRepoURL {return false}
    if lhs.mavenRepoName != rhs.mavenRepoName {return false}
    if lhs.mavenRepoURL != rhs.mavenRepoURL {return false}
    if lhs.npmRepoName != rhs.npmRepoName {return false}
    if lhs.pythonRepoName != rhs.pythonRepoName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStores"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStores) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListByArtifactStoreIdRepoNameInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_info"),
    2: .standard(proto: "artifact_store_id"),
    3: .standard(proto: "repo_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.artifactStoreID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.repoName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.artifactStoreID.isEmpty {
      try visitor.visitSingularStringField(value: self.artifactStoreID, fieldNumber: 2)
    }
    if !self.repoName.isEmpty {
      try visitor.visitSingularStringField(value: self.repoName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdRepoNameInput) -> Bool {
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs.artifactStoreID != rhs.artifactStoreID {return false}
    if lhs.repoName != rhs.repoName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DockerImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DockerImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "uri"),
    3: .same(proto: "tags"),
    4: .standard(proto: "image_size_bytes"),
    5: .standard(proto: "upload_time"),
    6: .standard(proto: "media_type"),
    7: .standard(proto: "build_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.imageSizeBytes) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._uploadTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.mediaType) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._buildTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 3)
    }
    if self.imageSizeBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.imageSizeBytes, fieldNumber: 4)
    }
    try { if let v = self._uploadTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.mediaType.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaType, fieldNumber: 6)
    }
    try { if let v = self._buildTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DockerImage, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DockerImage) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.imageSizeBytes != rhs.imageSizeBytes {return false}
    if lhs._uploadTime != rhs._uploadTime {return false}
    if lhs.mediaType != rhs.mediaType {return false}
    if lhs._buildTime != rhs._buildTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStoreDockerImageList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStoreDockerImageList) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStorePackage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackage, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackage) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStorePackageList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageList) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStorePackageVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .same(proto: "description"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersion) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListByArtifactStoreIdPackageNameInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_info"),
    2: .standard(proto: "artifact_store_id"),
    3: .standard(proto: "package_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pageInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.artifactStoreID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.packageName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.artifactStoreID.isEmpty {
      try visitor.visitSingularStringField(value: self.artifactStoreID, fieldNumber: 2)
    }
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ListByArtifactStoreIdPackageNameInput) -> Bool {
    if lhs._pageInfo != rhs._pageInfo {return false}
    if lhs.artifactStoreID != rhs.artifactStoreID {return false}
    if lhs.packageName != rhs.packageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtifactStorePackageVersionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_ArtifactStorePackageVersionList) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DelArtifactStorePackageVersionCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "artifact_store_id"),
    2: .standard(proto: "package_version_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.artifactStoreID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.packageVersionName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.artifactStoreID.isEmpty {
      try visitor.visitSingularStringField(value: self.artifactStoreID, fieldNumber: 1)
    }
    if !self.packageVersionName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageVersionName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Artifactstore_Rpc_DelArtifactStorePackageVersionCommandInput) -> Bool {
    if lhs.artifactStoreID != rhs.artifactStoreID {return false}
    if lhs.packageVersionName != rhs.packageVersionName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
