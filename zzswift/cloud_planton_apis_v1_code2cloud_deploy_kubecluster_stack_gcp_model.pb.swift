// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/kubecluster/stack/gcp/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///stack job
  public var stackJob: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob {
    get {return _stackJob ?? Cloud_Planton_Apis_V1_Stack_Rpc_StackJob()}
    set {_stackJob = newValue}
  }
  /// Returns true if `stackJob` has been explicitly set.
  public var hasStackJob: Bool {return self._stackJob != nil}
  /// Clears the value of `stackJob`. Subsequent reads from it will return its default value.
  public mutating func clearStackJob() {self._stackJob = nil}

  /// pulumi stack credentials
  public var credentialsInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput {
    get {return _credentialsInput ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput()}
    set {_credentialsInput = newValue}
  }
  /// Returns true if `credentialsInput` has been explicitly set.
  public var hasCredentialsInput: Bool {return self._credentialsInput != nil}
  /// Clears the value of `credentialsInput`. Subsequent reads from it will return its default value.
  public mutating func clearCredentialsInput() {self._credentialsInput = nil}

  /// inputs used for creating stack resources
  public var resourceInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput {
    get {return _resourceInput ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput()}
    set {_resourceInput = newValue}
  }
  /// Returns true if `resourceInput` has been explicitly set.
  public var hasResourceInput: Bool {return self._resourceInput != nil}
  /// Clears the value of `resourceInput`. Subsequent reads from it will return its default value.
  public mutating func clearResourceInput() {self._resourceInput = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stackJob: Cloud_Planton_Apis_V1_Stack_Rpc_StackJob? = nil
  fileprivate var _credentialsInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput? = nil
  fileprivate var _resourceInput: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput? = nil
}

/// stack credentials input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///google provider credential input
  public var google: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential {
    get {return _google ?? Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential()}
    set {_google = newValue}
  }
  /// Returns true if `google` has been explicitly set.
  public var hasGoogle: Bool {return self._google != nil}
  /// Clears the value of `google`. Subsequent reads from it will return its default value.
  public mutating func clearGoogle() {self._google = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _google: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential? = nil
}

/// stack resource input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cloud-account in which the kube-cluster resources are to be created.
  public var cloudAccount: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount {
    get {return _cloudAccount ?? Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount()}
    set {_cloudAccount = newValue}
  }
  /// Returns true if `cloudAccount` has been explicitly set.
  public var hasCloudAccount: Bool {return self._cloudAccount != nil}
  /// Clears the value of `cloudAccount`. Subsequent reads from it will return its default value.
  public mutating func clearCloudAccount() {self._cloudAccount = nil}

  ///details of the kube-cluster
  public var kubeCluster: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState {
    get {return _kubeCluster ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState()}
    set {_kubeCluster = newValue}
  }
  /// Returns true if `kubeCluster` has been explicitly set.
  public var hasKubeCluster: Bool {return self._kubeCluster != nil}
  /// Clears the value of `kubeCluster`. Subsequent reads from it will return its default value.
  public mutating func clearKubeCluster() {self._kubeCluster = nil}

  ///input required to configure kube-clusters.
  public var container: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput {
    get {return _container ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput()}
    set {_container = newValue}
  }
  /// Returns true if `container` has been explicitly set.
  public var hasContainer: Bool {return self._container != nil}
  /// Clears the value of `container`. Subsequent reads from it will return its default value.
  public mutating func clearContainer() {self._container = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cloudAccount: Cloud_Planton_Apis_V1_Code2cloud_Cloudaccount_Rpc_CloudAccount? = nil
  fileprivate var _kubeCluster: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_State_KubeClusterState? = nil
  fileprivate var _container: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput? = nil
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubePodServiceSecondaryRangeCidr {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pod: String = String()

  public var service: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///ingress ip address
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// internal ip address to configure the internal load balancer
  public var `internal`: String = String()

  /// external ip address to configure the external load balancer
  public var external: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// kube-cluster gcp stack iam resource input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the gcp project created for kube-cluster
  public var containerClusterGcpProjectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// container stack cluster module input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cluster: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput {
    get {return _cluster ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput()}
    set {_cluster = newValue}
  }
  /// Returns true if `cluster` has been explicitly set.
  public var hasCluster: Bool {return self._cluster != nil}
  /// Clears the value of `cluster`. Subsequent reads from it will return its default value.
  public mutating func clearCluster() {self._cluster = nil}

  public var addon: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons {
    get {return _addon ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons()}
    set {_addon = newValue}
  }
  /// Returns true if `addon` has been explicitly set.
  public var hasAddon: Bool {return self._addon != nil}
  /// Clears the value of `addon`. Subsequent reads from it will return its default value.
  public mutating func clearAddon() {self._addon = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cluster: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput? = nil
  fileprivate var _addon: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons? = nil
}

/// kube-cluster gcp stack kube-cluster module input
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cluster name
  public var clusterName: String = String()

  /// kube-cluster config parameters
  public var containerClusterConfig: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig {
    get {return _containerClusterConfig ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig()}
    set {_containerClusterConfig = newValue}
  }
  /// Returns true if `containerClusterConfig` has been explicitly set.
  public var hasContainerClusterConfig: Bool {return self._containerClusterConfig != nil}
  /// Clears the value of `containerClusterConfig`. Subsequent reads from it will return its default value.
  public mutating func clearContainerClusterConfig() {self._containerClusterConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _containerClusterConfig: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig? = nil
}

/// cluster config
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// api server ip cidr should be cut from the cidr block whitelisted in the vpc network to allow webhook calls.
  /// when creating multiple kube-clusters, specifying an overlapping cidr would result in error.
  public var apiServerIpCidr: String = String()

  /// secondary range set number to select for cora/dora kube-cluster.
  /// one set can be used only by one cluster.
  /// this value should be different for each kube-cluster in a gcp project.
  public var kubePodSecondaryRangeCidrSetNum: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_Enums_GkeKubePodServiceSecondaryRangeCidrSetNum = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// inputs for istio addon
  public var istio: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio {
    get {return _storage._istio ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio()}
    set {_uniqueStorage()._istio = newValue}
  }
  /// Returns true if `istio` has been explicitly set.
  public var hasIstio: Bool {return _storage._istio != nil}
  /// Clears the value of `istio`. Subsequent reads from it will return its default value.
  public mutating func clearIstio() {_uniqueStorage()._istio = nil}

  /// inputs for traefik addon
  public var traefik: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik {
    get {return _storage._traefik ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik()}
    set {_uniqueStorage()._traefik = newValue}
  }
  /// Returns true if `traefik` has been explicitly set.
  public var hasTraefik: Bool {return _storage._traefik != nil}
  /// Clears the value of `traefik`. Subsequent reads from it will return its default value.
  public mutating func clearTraefik() {_uniqueStorage()._traefik = nil}

  /// inputs for ingress-nginx addon
  public var ingressNginx: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx {
    get {return _storage._ingressNginx ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx()}
    set {_uniqueStorage()._ingressNginx = newValue}
  }
  /// Returns true if `ingressNginx` has been explicitly set.
  public var hasIngressNginx: Bool {return _storage._ingressNginx != nil}
  /// Clears the value of `ingressNginx`. Subsequent reads from it will return its default value.
  public mutating func clearIngressNginx() {_uniqueStorage()._ingressNginx = nil}

  /// inputs for linkerd addon
  public var linkerd: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd {
    get {return _storage._linkerd ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd()}
    set {_uniqueStorage()._linkerd = newValue}
  }
  /// Returns true if `linkerd` has been explicitly set.
  public var hasLinkerd: Bool {return _storage._linkerd != nil}
  /// Clears the value of `linkerd`. Subsequent reads from it will return its default value.
  public mutating func clearLinkerd() {_uniqueStorage()._linkerd = nil}

  /// inputs for cert-manager addon
  public var certManager: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager {
    get {return _storage._certManager ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager()}
    set {_uniqueStorage()._certManager = newValue}
  }
  /// Returns true if `certManager` has been explicitly set.
  public var hasCertManager: Bool {return _storage._certManager != nil}
  /// Clears the value of `certManager`. Subsequent reads from it will return its default value.
  public mutating func clearCertManager() {_uniqueStorage()._certManager = nil}

  /// inputs for external-secrets addon
  public var externalSecrets: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets {
    get {return _storage._externalSecrets ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets()}
    set {_uniqueStorage()._externalSecrets = newValue}
  }
  /// Returns true if `externalSecrets` has been explicitly set.
  public var hasExternalSecrets: Bool {return _storage._externalSecrets != nil}
  /// Clears the value of `externalSecrets`. Subsequent reads from it will return its default value.
  public mutating func clearExternalSecrets() {_uniqueStorage()._externalSecrets = nil}

  /// inputs for strimzi addon
  public var strimzi: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi {
    get {return _storage._strimzi ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi()}
    set {_uniqueStorage()._strimzi = newValue}
  }
  /// Returns true if `strimzi` has been explicitly set.
  public var hasStrimzi: Bool {return _storage._strimzi != nil}
  /// Clears the value of `strimzi`. Subsequent reads from it will return its default value.
  public mutating func clearStrimzi() {_uniqueStorage()._strimzi = nil}

  /// inputs for reflector addon
  public var reflector: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector {
    get {return _storage._reflector ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector()}
    set {_uniqueStorage()._reflector = newValue}
  }
  /// Returns true if `reflector` has been explicitly set.
  public var hasReflector: Bool {return _storage._reflector != nil}
  /// Clears the value of `reflector`. Subsequent reads from it will return its default value.
  public mutating func clearReflector() {_uniqueStorage()._reflector = nil}

  /// inputs for postgres-operator addon
  public var postgresOperator: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator {
    get {return _storage._postgresOperator ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator()}
    set {_uniqueStorage()._postgresOperator = newValue}
  }
  /// Returns true if `postgresOperator` has been explicitly set.
  public var hasPostgresOperator: Bool {return _storage._postgresOperator != nil}
  /// Clears the value of `postgresOperator`. Subsequent reads from it will return its default value.
  public mutating func clearPostgresOperator() {_uniqueStorage()._postgresOperator = nil}

  /// inputs for open-cost addon
  /// https://www.opencost.io/
  public var openCost: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost {
    get {return _storage._openCost ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost()}
    set {_uniqueStorage()._openCost = newValue}
  }
  /// Returns true if `openCost` has been explicitly set.
  public var hasOpenCost: Bool {return _storage._openCost != nil}
  /// Clears the value of `openCost`. Subsequent reads from it will return its default value.
  public mutating func clearOpenCost() {_uniqueStorage()._openCost = nil}

  /// inputs for planton-cloud-kube-agent addon
  public var plantonCloudKubeAgent: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent {
    get {return _storage._plantonCloudKubeAgent ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent()}
    set {_uniqueStorage()._plantonCloudKubeAgent = newValue}
  }
  /// Returns true if `plantonCloudKubeAgent` has been explicitly set.
  public var hasPlantonCloudKubeAgent: Bool {return _storage._plantonCloudKubeAgent != nil}
  /// Clears the value of `plantonCloudKubeAgent`. Subsequent reads from it will return its default value.
  public mutating func clearPlantonCloudKubeAgent() {_uniqueStorage()._plantonCloudKubeAgent = nil}

  /// inputs for kube-cost addon
  /// https://www.kubecost.com/
  public var kubeCost: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost {
    get {return _storage._kubeCost ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost()}
    set {_uniqueStorage()._kubeCost = newValue}
  }
  /// Returns true if `kubeCost` has been explicitly set.
  public var hasKubeCost: Bool {return _storage._kubeCost != nil}
  /// Clears the value of `kubeCost`. Subsequent reads from it will return its default value.
  public mutating func clearKubeCost() {_uniqueStorage()._kubeCost = nil}

  /// inputs for solr-operator addon
  /// https://github.com/apache/solr-operator
  public var solrOperator: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator {
    get {return _storage._solrOperator ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator()}
    set {_uniqueStorage()._solrOperator = newValue}
  }
  /// Returns true if `solrOperator` has been explicitly set.
  public var hasSolrOperator: Bool {return _storage._solrOperator != nil}
  /// Clears the value of `solrOperator`. Subsequent reads from it will return its default value.
  public mutating func clearSolrOperator() {_uniqueStorage()._solrOperator = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy istio service mesh
  public var enabled: Bool = false

  /// virtual service
  /// create gateway while deploying istio. gateway is referenced in virtual service
  /// istio-base config
  public var base: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase {
    get {return _base ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  public var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  public mutating func clearBase() {self._base = nil}

  /// istio-daemon config
  public var daemon: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon {
    get {return _daemon ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon()}
    set {_daemon = newValue}
  }
  /// Returns true if `daemon` has been explicitly set.
  public var hasDaemon: Bool {return self._daemon != nil}
  /// Clears the value of `daemon`. Subsequent reads from it will return its default value.
  public mutating func clearDaemon() {self._daemon = nil}

  /// istio-ingress config
  public var ingress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress {
    get {return _ingress ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress()}
    set {_ingress = newValue}
  }
  /// Returns true if `ingress` has been explicitly set.
  public var hasIngress: Bool {return self._ingress != nil}
  /// Clears the value of `ingress`. Subsequent reads from it will return its default value.
  public mutating func clearIngress() {self._ingress = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _base: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase? = nil
  fileprivate var _daemon: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon? = nil
  fileprivate var _ingress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress? = nil
}

/// istio-base config
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// istio-daemon config
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// istio-ingress config
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy istio ingress controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy traefik ingress controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy ingress-nginx controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy linkerd mesh
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy cert-manager controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy external-secrets controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy strimzi controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///https://github.com/emberstack/kubernetes-reflector
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy reflector controller
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///configuration for postgres-operator addon
///https://postgres-operator.readthedocs.io
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy postgres-operator
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///configuration for open-cost addon
///https://www.opencost.io/
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy open-cost
  public var enabled: Bool = false

  /// size of the disk for prometheus data used for storing open-cost data
  public var prometheusDataDiskSizeGb: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///configuration for planton-cloud-kube-agent
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy planton-cloud-kube-agent
  public var enabled: Bool = false

  ///id of the company on planton-cloud
  public var companyID: String = String()

  ///id of the kube-cluster on planton-cloud
  public var kubeClusterID: String = String()

  ///client-id of the machine-account with permissions to post data to planton-cloud
  public var machineAccountEmail: String = String()

  ///client-secret of the machine-account with permissions to post data to planton-cloud
  public var clientSecret: String = String()

  ///docker image for planton-cloud-kube-agent
  ///https://github.com/plantoncloud-inc/planton-cloud-kube-agent
  public var dockerImage: String = String()

  ///grpc api endpoint for planton-cloud-service
  public var plantonCloudServiceApiEndpoint: String = String()

  ///rest api endpoint for open-cost or kube-cost cost-analyzer
  public var openCostApiEndpoint: String = String()

  ///polling intervalue in seconds
  public var openCostPollingIntervalSeconds: Int32 = 0

  ///number of buffer minutes before the machine account token is rotated in a running deployment of planton-cloud-kube-agent.
  public var tokenExpirationBufferMinutes: Int32 = 0

  ///polling intervalue to check for the expiration of the machine account token in a running deployment of planton-cloud-kube-agent.
  public var tokenExpirationCheckIntervalSeconds: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///configuration for kube-cost addon
///https://www.kubecost.com/
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy kube-cost
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// configuration for solr-operator addon
/// https://github.com/apache/solr-operator
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// toggle to deploy solr-operator
  public var enabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// kube-cluster gcp stack outputs
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var projects: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs {
    get {return _storage._projects ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs()}
    set {_uniqueStorage()._projects = newValue}
  }
  /// Returns true if `projects` has been explicitly set.
  public var hasProjects: Bool {return _storage._projects != nil}
  /// Clears the value of `projects`. Subsequent reads from it will return its default value.
  public mutating func clearProjects() {_uniqueStorage()._projects = nil}

  public var network: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs {
    get {return _storage._network ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs()}
    set {_uniqueStorage()._network = newValue}
  }
  /// Returns true if `network` has been explicitly set.
  public var hasNetwork: Bool {return _storage._network != nil}
  /// Clears the value of `network`. Subsequent reads from it will return its default value.
  public mutating func clearNetwork() {_uniqueStorage()._network = nil}

  public var iam: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs {
    get {return _storage._iam ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs()}
    set {_uniqueStorage()._iam = newValue}
  }
  /// Returns true if `iam` has been explicitly set.
  public var hasIam: Bool {return _storage._iam != nil}
  /// Clears the value of `iam`. Subsequent reads from it will return its default value.
  public mutating func clearIam() {_uniqueStorage()._iam = nil}

  public var container: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs {
    get {return _storage._container ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs()}
    set {_uniqueStorage()._container = newValue}
  }
  /// Returns true if `container` has been explicitly set.
  public var hasContainer: Bool {return _storage._container != nil}
  /// Clears the value of `container`. Subsequent reads from it will return its default value.
  public mutating func clearContainer() {_uniqueStorage()._container = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///cluster endpoint
  public var clusterEndpoint: String = String()

  ///base64 encoded cluster cert-authority-data
  public var clusterCaData: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// kube-cluster gcp stack projects outputs
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gcpFolder: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Folder_Rpc_GcpFolder {
    get {return _gcpFolder ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Folder_Rpc_GcpFolder()}
    set {_gcpFolder = newValue}
  }
  /// Returns true if `gcpFolder` has been explicitly set.
  public var hasGcpFolder: Bool {return self._gcpFolder != nil}
  /// Clears the value of `gcpFolder`. Subsequent reads from it will return its default value.
  public mutating func clearGcpFolder() {self._gcpFolder = nil}

  public var containerClusterProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject {
    get {return _containerClusterProject ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject()}
    set {_containerClusterProject = newValue}
  }
  /// Returns true if `containerClusterProject` has been explicitly set.
  public var hasContainerClusterProject: Bool {return self._containerClusterProject != nil}
  /// Clears the value of `containerClusterProject`. Subsequent reads from it will return its default value.
  public mutating func clearContainerClusterProject() {self._containerClusterProject = nil}

  public var vpcNetworkProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject {
    get {return _vpcNetworkProject ?? Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject()}
    set {_vpcNetworkProject = newValue}
  }
  /// Returns true if `vpcNetworkProject` has been explicitly set.
  public var hasVpcNetworkProject: Bool {return self._vpcNetworkProject != nil}
  /// Clears the value of `vpcNetworkProject`. Subsequent reads from it will return its default value.
  public mutating func clearVpcNetworkProject() {self._vpcNetworkProject = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gcpFolder: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Folder_Rpc_GcpFolder? = nil
  fileprivate var _containerClusterProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject? = nil
  fileprivate var _vpcNetworkProject: Cloud_Planton_Apis_V1_Commons_Cloud_Gcp_Resource_Project_Rpc_GcpProject? = nil
}

/// kube-cluster gcp stack network outputs
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// nat ip address
  public var externalNatIpAddress: String = String()

  /// ingress ip addresses created for workloads
  public var ingressIpAddress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress {
    get {return _ingressIpAddress ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress()}
    set {_ingressIpAddress = newValue}
  }
  /// Returns true if `ingressIpAddress` has been explicitly set.
  public var hasIngressIpAddress: Bool {return self._ingressIpAddress != nil}
  /// Clears the value of `ingressIpAddress`. Subsequent reads from it will return its default value.
  public mutating func clearIngressIpAddress() {self._ingressIpAddress = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ingressIpAddress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress? = nil
}

/// kube-cluster gcp stack iam outputs
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// email of the google service account created for cert-manager addon to setup workload identity
  public var certManagerGsaEmail: String = String()

  /// email of the google service account created for external-secrets addon to setup workload identity
  public var externalSecretsGsaEmail: String = String()

  /// email of the google service account created for deploying workloads to kube-cluster
  public var workloadDeployerGsaEmail: String = String()

  /// base64 encoded key of workload deployer google service account
  public var workloadDeployerGsaKeyBase64: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///stack response
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///stack progress
  public var progress: Cloud_Planton_Apis_V1_Stack_Rpc_StackProgress {
    get {return _progress ?? Cloud_Planton_Apis_V1_Stack_Rpc_StackProgress()}
    set {_progress = newValue}
  }
  /// Returns true if `progress` has been explicitly set.
  public var hasProgress: Bool {return self._progress != nil}
  /// Clears the value of `progress`. Subsequent reads from it will return its default value.
  public mutating func clearProgress() {self._progress = nil}

  ///stack outputs
  public var outputs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs {
    get {return _outputs ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs()}
    set {_outputs = newValue}
  }
  /// Returns true if `outputs` has been explicitly set.
  public var hasOutputs: Bool {return self._outputs != nil}
  /// Clears the value of `outputs`. Subsequent reads from it will return its default value.
  public mutating func clearOutputs() {self._outputs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _progress: Cloud_Planton_Apis_V1_Stack_Rpc_StackProgress? = nil
  fileprivate var _outputs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubePodServiceSecondaryRangeCidr: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stack_job"),
    2: .standard(proto: "credentials_input"),
    3: .standard(proto: "resource_input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stackJob) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._credentialsInput) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resourceInput) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stackJob {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._credentialsInput {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._resourceInput {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackInput) -> Bool {
    if lhs._stackJob != rhs._stackJob {return false}
    if lhs._credentialsInput != rhs._credentialsInput {return false}
    if lhs._resourceInput != rhs._resourceInput {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackCredentialsInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "google"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._google) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._google {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackCredentialsInput) -> Bool {
    if lhs._google != rhs._google {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackResourceInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cloud_account"),
    2: .standard(proto: "kube_cluster"),
    7: .same(proto: "container"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._cloudAccount) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._kubeCluster) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._container) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cloudAccount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._kubeCluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._container {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResourceInput) -> Bool {
    if lhs._cloudAccount != rhs._cloudAccount {return false}
    if lhs._kubeCluster != rhs._kubeCluster {return false}
    if lhs._container != rhs._container {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubePodServiceSecondaryRangeCidr: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubePodServiceSecondaryRangeCidr"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pod"),
    2: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pod) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.service) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pod.isEmpty {
      try visitor.visitSingularStringField(value: self.pod, fieldNumber: 1)
    }
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubePodServiceSecondaryRangeCidr, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubePodServiceSecondaryRangeCidr) -> Bool {
    if lhs.pod != rhs.pod {return false}
    if lhs.service != rhs.service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IngressIpAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "internal"),
    2: .same(proto: "external"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.`internal`) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.external) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.`internal`.isEmpty {
      try visitor.visitSingularStringField(value: self.`internal`, fieldNumber: 1)
    }
    if !self.external.isEmpty {
      try visitor.visitSingularStringField(value: self.external, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_IngressIpAddress) -> Bool {
    if lhs.`internal` != rhs.`internal` {return false}
    if lhs.external != rhs.external {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackIamInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "container_cluster_gcp_project_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.containerClusterGcpProjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.containerClusterGcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.containerClusterGcpProjectID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamInput) -> Bool {
    if lhs.containerClusterGcpProjectID != rhs.containerClusterGcpProjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackContainerInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cluster"),
    2: .same(proto: "addon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._cluster) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._addon) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cluster {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._addon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerInput) -> Bool {
    if lhs._cluster != rhs._cluster {return false}
    if lhs._addon != rhs._addon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackContainerClusterInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_name"),
    3: .standard(proto: "container_cluster_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clusterName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._containerClusterConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.clusterName.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterName, fieldNumber: 1)
    }
    try { if let v = self._containerClusterConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackContainerClusterInput) -> Bool {
    if lhs.clusterName != rhs.clusterName {return false}
    if lhs._containerClusterConfig != rhs._containerClusterConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClusterConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_server_ip_cidr"),
    2: .standard(proto: "kube_pod_secondary_range_cidr_set_num"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiServerIpCidr) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.kubePodSecondaryRangeCidrSetNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiServerIpCidr.isEmpty {
      try visitor.visitSingularStringField(value: self.apiServerIpCidr, fieldNumber: 1)
    }
    if self.kubePodSecondaryRangeCidrSetNum != .unspecified {
      try visitor.visitSingularEnumField(value: self.kubePodSecondaryRangeCidrSetNum, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterConfig) -> Bool {
    if lhs.apiServerIpCidr != rhs.apiServerIpCidr {return false}
    if lhs.kubePodSecondaryRangeCidrSetNum != rhs.kubePodSecondaryRangeCidrSetNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Addons"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "istio"),
    2: .same(proto: "traefik"),
    3: .standard(proto: "ingress_nginx"),
    4: .same(proto: "linkerd"),
    5: .standard(proto: "cert_manager"),
    6: .standard(proto: "external_secrets"),
    7: .same(proto: "strimzi"),
    8: .same(proto: "reflector"),
    9: .standard(proto: "postgres_operator"),
    10: .standard(proto: "open_cost"),
    11: .standard(proto: "planton_cloud_kube_agent"),
    12: .standard(proto: "kube_cost"),
    13: .standard(proto: "solr_operator"),
  ]

  fileprivate class _StorageClass {
    var _istio: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio? = nil
    var _traefik: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik? = nil
    var _ingressNginx: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx? = nil
    var _linkerd: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd? = nil
    var _certManager: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager? = nil
    var _externalSecrets: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets? = nil
    var _strimzi: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi? = nil
    var _reflector: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector? = nil
    var _postgresOperator: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator? = nil
    var _openCost: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost? = nil
    var _plantonCloudKubeAgent: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent? = nil
    var _kubeCost: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost? = nil
    var _solrOperator: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _istio = source._istio
      _traefik = source._traefik
      _ingressNginx = source._ingressNginx
      _linkerd = source._linkerd
      _certManager = source._certManager
      _externalSecrets = source._externalSecrets
      _strimzi = source._strimzi
      _reflector = source._reflector
      _postgresOperator = source._postgresOperator
      _openCost = source._openCost
      _plantonCloudKubeAgent = source._plantonCloudKubeAgent
      _kubeCost = source._kubeCost
      _solrOperator = source._solrOperator
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._istio) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._traefik) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._ingressNginx) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._linkerd) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._certManager) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._externalSecrets) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._strimzi) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._reflector) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._postgresOperator) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._openCost) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._plantonCloudKubeAgent) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._kubeCost) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._solrOperator) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._istio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._traefik {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ingressNginx {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._linkerd {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._certManager {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._externalSecrets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._strimzi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._reflector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._postgresOperator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._openCost {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._plantonCloudKubeAgent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._kubeCost {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._solrOperator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_Addons) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._istio != rhs_storage._istio {return false}
        if _storage._traefik != rhs_storage._traefik {return false}
        if _storage._ingressNginx != rhs_storage._ingressNginx {return false}
        if _storage._linkerd != rhs_storage._linkerd {return false}
        if _storage._certManager != rhs_storage._certManager {return false}
        if _storage._externalSecrets != rhs_storage._externalSecrets {return false}
        if _storage._strimzi != rhs_storage._strimzi {return false}
        if _storage._reflector != rhs_storage._reflector {return false}
        if _storage._postgresOperator != rhs_storage._postgresOperator {return false}
        if _storage._openCost != rhs_storage._openCost {return false}
        if _storage._plantonCloudKubeAgent != rhs_storage._plantonCloudKubeAgent {return false}
        if _storage._kubeCost != rhs_storage._kubeCost {return false}
        if _storage._solrOperator != rhs_storage._solrOperator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsIstio"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .same(proto: "base"),
    3: .same(proto: "daemon"),
    4: .same(proto: "ingress"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._daemon) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ingress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._daemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._ingress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstio) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs._base != rhs._base {return false}
    if lhs._daemon != rhs._daemon {return false}
    if lhs._ingress != rhs._ingress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsIstioBase"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioBase) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsIstioDaemon"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioDaemon) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsIstioIngress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIstioIngress) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsTraefik"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsTraefik) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsIngressNginx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsIngressNginx) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsLinkerd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsLinkerd) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsCertManager"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsCertManager) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsExternalSecrets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsExternalSecrets) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsStrimzi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsStrimzi) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsReflector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsReflector) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsPostgresOperator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPostgresOperator) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsOpenCost"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "prometheus_data_disk_size_gb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.prometheusDataDiskSizeGb) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.prometheusDataDiskSizeGb.isEmpty {
      try visitor.visitSingularStringField(value: self.prometheusDataDiskSizeGb, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsOpenCost) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.prometheusDataDiskSizeGb != rhs.prometheusDataDiskSizeGb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsPlantonCloudKubeAgent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "company_id"),
    3: .standard(proto: "kube_cluster_id"),
    4: .standard(proto: "machine_account_email"),
    5: .standard(proto: "client_secret"),
    6: .standard(proto: "docker_image"),
    7: .standard(proto: "planton_cloud_service_api_endpoint"),
    8: .standard(proto: "open_cost_api_endpoint"),
    9: .standard(proto: "open_cost_polling_interval_seconds"),
    10: .standard(proto: "token_expiration_buffer_minutes"),
    11: .standard(proto: "token_expiration_check_interval_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.kubeClusterID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.machineAccountEmail) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.clientSecret) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dockerImage) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.plantonCloudServiceApiEndpoint) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.openCostApiEndpoint) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.openCostPollingIntervalSeconds) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.tokenExpirationBufferMinutes) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.tokenExpirationCheckIntervalSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 2)
    }
    if !self.kubeClusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeClusterID, fieldNumber: 3)
    }
    if !self.machineAccountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.machineAccountEmail, fieldNumber: 4)
    }
    if !self.clientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.clientSecret, fieldNumber: 5)
    }
    if !self.dockerImage.isEmpty {
      try visitor.visitSingularStringField(value: self.dockerImage, fieldNumber: 6)
    }
    if !self.plantonCloudServiceApiEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.plantonCloudServiceApiEndpoint, fieldNumber: 7)
    }
    if !self.openCostApiEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.openCostApiEndpoint, fieldNumber: 8)
    }
    if self.openCostPollingIntervalSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.openCostPollingIntervalSeconds, fieldNumber: 9)
    }
    if self.tokenExpirationBufferMinutes != 0 {
      try visitor.visitSingularInt32Field(value: self.tokenExpirationBufferMinutes, fieldNumber: 10)
    }
    if self.tokenExpirationCheckIntervalSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.tokenExpirationCheckIntervalSeconds, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsPlantonCloudKubeAgent) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.kubeClusterID != rhs.kubeClusterID {return false}
    if lhs.machineAccountEmail != rhs.machineAccountEmail {return false}
    if lhs.clientSecret != rhs.clientSecret {return false}
    if lhs.dockerImage != rhs.dockerImage {return false}
    if lhs.plantonCloudServiceApiEndpoint != rhs.plantonCloudServiceApiEndpoint {return false}
    if lhs.openCostApiEndpoint != rhs.openCostApiEndpoint {return false}
    if lhs.openCostPollingIntervalSeconds != rhs.openCostPollingIntervalSeconds {return false}
    if lhs.tokenExpirationBufferMinutes != rhs.tokenExpirationBufferMinutes {return false}
    if lhs.tokenExpirationCheckIntervalSeconds != rhs.tokenExpirationCheckIntervalSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsKubeCost"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsKubeCost) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddonsSolrOperator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_AddonsSolrOperator) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackOutputs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "projects"),
    2: .same(proto: "network"),
    3: .same(proto: "iam"),
    4: .same(proto: "container"),
  ]

  fileprivate class _StorageClass {
    var _projects: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs? = nil
    var _network: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs? = nil
    var _iam: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs? = nil
    var _container: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _projects = source._projects
      _network = source._network
      _iam = source._iam
      _container = source._container
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._projects) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._network) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._iam) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._container) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._projects {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._network {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._iam {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._container {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackOutputs) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._projects != rhs_storage._projects {return false}
        if _storage._network != rhs_storage._network {return false}
        if _storage._iam != rhs_storage._iam {return false}
        if _storage._container != rhs_storage._container {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClusterOutputs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_endpoint"),
    2: .standard(proto: "cluster_ca_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clusterEndpoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clusterCaData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clusterEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterEndpoint, fieldNumber: 1)
    }
    if !self.clusterCaData.isEmpty {
      try visitor.visitSingularStringField(value: self.clusterCaData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_ClusterOutputs) -> Bool {
    if lhs.clusterEndpoint != rhs.clusterEndpoint {return false}
    if lhs.clusterCaData != rhs.clusterCaData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackProjectsOutputs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_folder"),
    2: .standard(proto: "container_cluster_project"),
    3: .standard(proto: "vpc_network_project"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gcpFolder) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._containerClusterProject) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._vpcNetworkProject) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gcpFolder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._containerClusterProject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._vpcNetworkProject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackProjectsOutputs) -> Bool {
    if lhs._gcpFolder != rhs._gcpFolder {return false}
    if lhs._containerClusterProject != rhs._containerClusterProject {return false}
    if lhs._vpcNetworkProject != rhs._vpcNetworkProject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackNetworkOutputs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_nat_ip_address"),
    2: .standard(proto: "ingress_ip_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.externalNatIpAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ingressIpAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.externalNatIpAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.externalNatIpAddress, fieldNumber: 1)
    }
    try { if let v = self._ingressIpAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackNetworkOutputs) -> Bool {
    if lhs.externalNatIpAddress != rhs.externalNatIpAddress {return false}
    if lhs._ingressIpAddress != rhs._ingressIpAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackIamOutputs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cert_manager_gsa_email"),
    2: .standard(proto: "external_secrets_gsa_email"),
    3: .standard(proto: "workload_deployer_gsa_email"),
    4: .standard(proto: "workload_deployer_gsa_key_base64"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.certManagerGsaEmail) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalSecretsGsaEmail) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workloadDeployerGsaEmail) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.workloadDeployerGsaKeyBase64) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.certManagerGsaEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.certManagerGsaEmail, fieldNumber: 1)
    }
    if !self.externalSecretsGsaEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.externalSecretsGsaEmail, fieldNumber: 2)
    }
    if !self.workloadDeployerGsaEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.workloadDeployerGsaEmail, fieldNumber: 3)
    }
    if !self.workloadDeployerGsaKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.workloadDeployerGsaKeyBase64, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackIamOutputs) -> Bool {
    if lhs.certManagerGsaEmail != rhs.certManagerGsaEmail {return false}
    if lhs.externalSecretsGsaEmail != rhs.externalSecretsGsaEmail {return false}
    if lhs.workloadDeployerGsaEmail != rhs.workloadDeployerGsaEmail {return false}
    if lhs.workloadDeployerGsaKeyBase64 != rhs.workloadDeployerGsaKeyBase64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubeClusterGcpStackResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "progress"),
    3: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._progress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._outputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._progress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._outputs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResponse, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Stack_Gcp_KubeClusterGcpStackResponse) -> Bool {
    if lhs._progress != rhs._progress {return false}
    if lhs._outputs != rhs._outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
