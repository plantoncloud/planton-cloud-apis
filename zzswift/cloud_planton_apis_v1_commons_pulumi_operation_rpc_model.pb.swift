// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/pulumi/operation/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// pulumi google provider credential
public struct Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// base64 encoded google service account key to be used by the pulumi google provider
  public var serviceAccountKeyBase64: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// pulumi kubernetes provider credential
public struct Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// base64 encoded kubeconfig to be used by pulumi kubernetes provider
  public var kubeconfigBase64: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// pulumi aws provider credential
public struct Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_AwsProviderCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// aws access key id
  public var awsAccessKeyID: String = String()

  /// aws secret access key
  public var awsSecretAccessKey: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_AwsProviderCredential: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.commons.pulumi.operation.rpc"

extension Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GoogleProviderCredential"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_account_key_base64"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceAccountKeyBase64) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceAccountKeyBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAccountKeyBase64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential, rhs: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_GoogleProviderCredential) -> Bool {
    if lhs.serviceAccountKeyBase64 != rhs.serviceAccountKeyBase64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KubernetesProviderCredential"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "kubeconfig_base64"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.kubeconfigBase64) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kubeconfigBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeconfigBase64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential, rhs: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_KubernetesProviderCredential) -> Bool {
    if lhs.kubeconfigBase64 != rhs.kubeconfigBase64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_AwsProviderCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AwsProviderCredential"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aws_access_key_id"),
    2: .standard(proto: "aws_secret_access_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.awsAccessKeyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.awsSecretAccessKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.awsAccessKeyID.isEmpty {
      try visitor.visitSingularStringField(value: self.awsAccessKeyID, fieldNumber: 1)
    }
    if !self.awsSecretAccessKey.isEmpty {
      try visitor.visitSingularStringField(value: self.awsSecretAccessKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_AwsProviderCredential, rhs: Cloud_Planton_Apis_V1_Commons_Pulumi_Operation_Rpc_AwsProviderCredential) -> Bool {
    if lhs.awsAccessKeyID != rhs.awsAccessKeyID {return false}
    if lhs.awsSecretAccessKey != rhs.awsSecretAccessKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
