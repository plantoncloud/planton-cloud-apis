// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/environment/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///environment
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource api-version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///environment spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///company to which the environment belongs to.
  ///the value is computed from product.
  public var companyID: String = String()

  ///product to which the environment belongs to
  public var productID: String = String()

  ///kubernetes-provider for the configured kube-cluster
  ///the value is computed from kube-cluster.
  public var kubernetesProvider: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_Enums_KubernetesProvider = .unspecified

  ///target kube-cluster to which the workloads like microservice-instances, postgres databases,
  ///kafka-clusters etc are deployed to.
  public var kubeClusterID: String = String()

  ///description for environment.
  public var description_p: String = String()

  ///id of the environment from which this environment is created.
  ///value is ignored when the environment is not cloned from another environment.
  public var clonedFrom: String = String()

  ///list of environment variables for the environment
  ///this attribute is ignored for environment creation.
  public var variables: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable] = []

  ///list of environment secrets for the environment
  ///this attribute is ignored for environment creation.
  public var secrets: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret] = []

  ///flag to control inheritance of kube-cluster endpoint domains.
  ///new standard_endpoints are created for each endpoint_domain of the kube-cluster only when this flag is set.
  public var isInheritEndpointDomainsEnabled: Bool = false

  ///id of the gcp project in which the environment-secrets are to be created in secrets-manager.
  public var environmentSecretsGcpProjectID: String = String()

  ///microservice-instance spec for environment
  public var microserviceInstance: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec {
    get {return _microserviceInstance ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec()}
    set {_microserviceInstance = newValue}
  }
  /// Returns true if `microserviceInstance` has been explicitly set.
  public var hasMicroserviceInstance: Bool {return self._microserviceInstance != nil}
  /// Clears the value of `microserviceInstance`. Subsequent reads from it will return its default value.
  public mutating func clearMicroserviceInstance() {self._microserviceInstance = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _microserviceInstance: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec? = nil
}

///environment microservice-instance spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///flag to indicate of this environment is to be used as the build engine environment.
  ///default value is set to "false".
  ///at any point, only one environment in a product can be configured as build-engine environment.
  ///if there is already a environment which is configured as the build engine environment,
  ///then that environment needs to be updated to disable that first before enabling it on the new environment.
  public var isBuildEngineEnvironment: Bool = false

  ///microservice-instance pipeline spec
  public var pipeline: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec {
    get {return _pipeline ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec()}
    set {_pipeline = newValue}
  }
  /// Returns true if `pipeline` has been explicitly set.
  public var hasPipeline: Bool {return self._pipeline != nil}
  /// Clears the value of `pipeline`. Subsequent reads from it will return its default value.
  public mutating func clearPipeline() {self._pipeline = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pipeline: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec? = nil
}

///environment microservice-instance pipeline spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///toggle to enable or disable microservice-instance deployments to this environment.
  ///recommended default is "true"
  public var isEnabled: Bool = false

  ///list of environment ids that are considered as lower environments to this environment.
  ///in deployment pipelines for microservice-instances a successful deployment of all lower environments
  ///is required before deploying to this environment.
  ///this is used for creating dependency requirements on github/gitlab pipelines between deployment pipeline jobs.
  public var lowerEnvironmentIds: [String] = []

  ///id of the artifact-store required to construct the container image name.
  ///a product can have multiple artifact-stores. The container images are published to all artifact-stores.
  ///when creating a Deployment resource on kubernetes, only one container image name is allowed.
  ///this attribute will provide the ability to determine the artifact-store to be used for constructing the container
  ///image name to be used in the kubernetes Deployment resource.
  public var containerImageArtifactStoreID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///environment status
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///list of environments
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for environment id field
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list environments
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productID: String = String()

  public var environmentName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input for rpc requests that require environment id, namespace
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the environment
  public var environmentID: String = String()

  ///name of the kubernetes namespace
  public var namespace: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input for command to clone environment
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the environment to clone
  public var sourceEnvironmentID: String = String()

  ///spec for new environment
  public var newEnvironment: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment {
    get {return _newEnvironment ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment()}
    set {_newEnvironment = newValue}
  }
  /// Returns true if `newEnvironment` has been explicitly set.
  public var hasNewEnvironment: Bool {return self._newEnvironment != nil}
  /// Clears the value of `newEnvironment`. Subsequent reads from it will return its default value.
  public mutating func clearNewEnvironment() {self._newEnvironment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _newEnvironment: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment? = nil
}

///environment-var
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  ///the name must adhere to the following constraints:
  /// - it must be between 1 and 64 characters.
  /// - it can only contain english letters (a-z, a-z), numbers (0-9), hyphens (-), and underscores (_).
  /// - it cannot start with a hyphen or underscore.
  /// - it cannot end with a hyphen.
  /// - it must be unique within the environment.
  ///
  ///this can be represented by the following regular expression:
  /// "^[a-za-z0-9]([a-za-z0-9-_]{0,62}[a-za-z0-9])?$"
  ///
  ///note: in the above regular expression, {0,62} ensures the total length of the string
  ///      is 64 characters or less, including the starting and ending characters.
  public var name: String = String()

  ///human readable identifier for environment variable unique on planton cloud.
  ///value is computed using 'var-<environment-id>-<secret-name>'.
  public var id: String = String()

  ///value for the environment variable.
  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///wrapper for list of environment variables
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariables {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list environment variables
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for product var id
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for environment var value
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input for command to add multiple environment variables to a environment
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///id of the environment to which the env variables are to be added
  public var environmentID: String = String()

  ///key, value pairs of the variables to be added to the environment
  public var environmentVariables: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///environment-secret
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  ///the name must adhere to the following constraints:
  /// - it must be between 1 and 64 characters.
  /// - it can only contain english letters (a-z, a-z), numbers (0-9), hyphens (-), and underscores (_).
  /// - it cannot start with a hyphen or underscore.
  /// - it cannot end with a hyphen.
  /// - it must be unique within the environment.
  ///
  ///this can be represented by the following regular expression:
  /// "^[a-za-z0-9]([a-za-z0-9-_]{0,62}[a-za-z0-9])?$"
  ///
  ///note: in the above regular expression, {0,62} ensures the total length of the string
  ///      is 64 characters or less, including the starting and ending characters.
  public var name: String = String()

  ///human readable identifier for environment secret unique on planton cloud.
  ///value is computed using 'sec-<environment-id>-<secret-name>'.
  public var id: String = String()

  ///id of the secret resource on the secrets management service provider ex: google cloud secrets manager.
  ///value is same as the secret-id for google cloud secrets-manager backend.
  public var providerSecretID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///wrapper for list of secrets
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecrets {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list environment secrets
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for environment secret id
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for environment secret value
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///AddEnvironmentSecretsCommandInput is used to encapsulate the details required
///for adding multiple environment secrets to a environment. This
///message is typically used to transmit data between client and server in
///an add operation concerning multiple environment secrets associated
///with a specific environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment to which the environment
  ///secrets are being added. This field must be populated with a valid product
  ///environment ID, which can be obtained from the environment entity
  ///itself. The server uses this ID to identify the correct environment
  ///to which the secrets should be added.
  public var environmentID: String = String()

  ///The list of environment secrets that need to be added to the specified product
  ///environment. Each entry in this list represents a single environment secret.
  ///This is a list of instances of the `EnvironmentSecret` message, each encapsulating
  ///the details of a single environment secret, such as its name and value. The server
  ///will iterate over this list and add each secret to the environment.
  public var environmentSecrets: [Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///AddEnvironmentSecretCommandInput is used to encapsulate the details required
///for adding secrets to a environment. This message is typically used to
///transmit data between client and server in an add operation
///concerning environment secret associated with a specific environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment to which the secrets are
  ///being added. This field must be populated with a valid environment id,
  ///which can be obtained from the environment entity itself. The server
  ///uses this ID to identify the correct environment to which the secrets should be added.
  public var environmentID: String = String()

  ///secret that need to be added to the specified environment.
  ///This is an instance of the `EnvironmentSecret` message, which encapsulates the
  ///details of a single environment secret, such as its name and value.
  public var environmentSecret: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret {
    get {return _environmentSecret ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret()}
    set {_environmentSecret = newValue}
  }
  /// Returns true if `environmentSecret` has been explicitly set.
  public var hasEnvironmentSecret: Bool {return self._environmentSecret != nil}
  /// Clears the value of `environmentSecret`. Subsequent reads from it will return its default value.
  public mutating func clearEnvironmentSecret() {self._environmentSecret = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _environmentSecret: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret? = nil
}

///UpdateEnvironmentSecretValCommandInput is used to encapsulate the details required
///for updating the value of a secret in a environment. This
///message is typically used to transmit data between client and server during
///an update operation concerning the value of a specific environment secret
///associated with a particular environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment in which the secret is located.
  ///This field must be populated with a valid environment ID, which can be
  ///obtained from the environment entity itself. The server uses this ID to
  ///identify the correct environment where the secret value needs to be updated.
  public var environmentID: String = String()

  ///The unique identifier for the secret whose value is to be updated. This field
  ///must be populated with a valid secret id, which can be obtained from the
  ///EnvironmentSecret entity itself. The server uses this ID to identify the
  ///correct secret within the specified environment.
  public var secretID: String = String()

  ///The new value for the secret. This field should be populated with the updated
  ///value that needs to be set for the secret. This value will replace the existing
  ///secret value in the specified environment.
  public var secretValue: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///DeleteOrRestoreEnvironmentSecretCommandInput is used to encapsulate the details required
///for deleting or restoring a secret in a environment. This message is typically used
///to transmit data between client and server during a delete or restore operation concerning
///a specific environment secret associated with a particular environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment from which the secret is to be deleted.
  ///This field must be populated with a valid environment id, which can be
  ///obtained from the environment entity itself. The server uses this id to
  ///identify the correct environment where the secret needs to be deleted.
  public var environmentID: String = String()

  ///The unique identifier for the secret to be deleted. This field
  ///must be populated with a valid secret ID, which can be obtained from the
  ///EnvironmentSecret entity itself. The server uses this ID to identify the
  ///correct secret within the specified environment that needs to be deleted.
  public var secretID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///GetByEnvironmentSecretIdInput is used to encapsulate the details required
///for retrieving a secret associated with a specific environment by its unique identifier.
///This message is typically used to transmit data between client and server during a retrievalue operation
///concerning a specific environment secret associated with a particular environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment in which the secret resides.
  ///This field must be populated with a valid environment ID, which can be
  ///obtained from the environment entity itself. The server uses this ID to
  ///identify the correct environment where the secret is located.
  public var environmentID: String = String()

  ///The unique identifier for the secret to be retrieved. This field
  ///must be populated with a valid secret ID, which can be obtained from the
  ///EnvironmentSecret entity itself. The server uses this ID to identify the
  ///correct secret within the specified environment that needs to be retrieved.
  public var secretID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///AddEnvironmentVariableCommandInput is used to encapsulate the details required
///for adding a new environment variable to a specific environment, or updating
///an existing one. This message is typically used to transmit data between the client and
///server during an add operation concerning a specific environment variable
///associated with a particular environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment to which the environment
  ///variable needs to be added. This field must be populated with a valid
  ///environment ID, which can be obtained from the environment entity itself.
  ///The server uses this ID to identify the correct environment where the
  ///environment variable needs to be added.
  public var environmentID: String = String()

  ///The environment variable that needs to be added within the product
  ///environment. This field should be populated with a valid EnvironmentVariable object,
  ///which encapsulates the details of the environment variable.
  public var variable: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable {
    get {return _variable ?? Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable()}
    set {_variable = newValue}
  }
  /// Returns true if `variable` has been explicitly set.
  public var hasVariable: Bool {return self._variable != nil}
  /// Clears the value of `variable`. Subsequent reads from it will return its default value.
  public mutating func clearVariable() {self._variable = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _variable: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable? = nil
}

///DeleteOrRestoreEnvironmentVariableCommandInput is used to encapsulate the details required for
///deleting or restore an environment variable of a specific environment.
///This message is typically used to transmit data between the client and the server
///during a delete or restore operation concerning a specific environment variable associated
///with a particular environment.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///The unique identifier for the environment from which the environment
  ///variable needs to be deleted. This field must be populated with a valid
  ///environment ID, which can be obtained from the environment entity itself.
  ///The server uses this ID to identify the correct environment from which
  ///the environment variable needs to be deleted.
  public var environmentID: String = String()

  ///The unique identifier for the environment variable that needs to be deleted
  ///from the environment. This field should be populated with a valid
  ///environment variable ID, which can be obtained from the environment variable entity itself.
  ///The server uses this ID to identify the correct environment variable that
  ///needs to be deleted.
  public var variableID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///UpdateEnvironmentVariableValueCommandInput is a protobuf message that is used when a request to update the value of a specific
///environment variable in a environment is made. This message encapsulates all necessary details needed
///to successfully execute this operation.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///environment_id is a string that uniquely identifies the environment in which the environment
  ///variable is to be updated. This ID is used by the server to locate the specific environment.
  public var environmentID: String = String()

  ///environment_var_id is a string that uniquely identifies the environment variable within the environment
  ///that is to be updated. This ID is used by the server to locate the specific environment variable.
  public var variableID: String = String()

  ///_value is a string that represents the new value to be assigned to the specified environment variable.
  ///The server will update the current value of the environment variable with this new value.
  public var variableValue: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///GetByEnvironmentVariableIdInput is a protobuf message designed to provide the necessary information
///when retrieving a specific environment variable in a particular environment.
///It encapsulates the identifying details required to locate and retrieve the required environment variable.
public struct Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///environment_id is a string that uniquely identifies the environment where the target
  ///environment variable is located. This ID is essential for the server to locate the specific environment.
  public var environmentID: String = String()

  ///var_id is a string that uniquely identifies the environment variable within the identified product
  ///environment that needs to be retrieved. This ID is used by the server to find the specific environment variable.
  public var variableID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariables: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecrets: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.environment.rpc"

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Environment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "kubernetes_provider"),
    4: .standard(proto: "kube_cluster_id"),
    5: .same(proto: "description"),
    6: .standard(proto: "cloned_from"),
    7: .same(proto: "variables"),
    8: .same(proto: "secrets"),
    9: .standard(proto: "is_inherit_endpoint_domains_enabled"),
    10: .standard(proto: "environment_secrets_gcp_project_id"),
    11: .standard(proto: "microservice_instance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.kubernetesProvider) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.kubeClusterID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.clonedFrom) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.variables) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.secrets) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isInheritEndpointDomainsEnabled) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.environmentSecretsGcpProjectID) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._microserviceInstance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if self.kubernetesProvider != .unspecified {
      try visitor.visitSingularEnumField(value: self.kubernetesProvider, fieldNumber: 3)
    }
    if !self.kubeClusterID.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeClusterID, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if !self.clonedFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.clonedFrom, fieldNumber: 6)
    }
    if !self.variables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.variables, fieldNumber: 7)
    }
    if !self.secrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.secrets, fieldNumber: 8)
    }
    if self.isInheritEndpointDomainsEnabled != false {
      try visitor.visitSingularBoolField(value: self.isInheritEndpointDomainsEnabled, fieldNumber: 9)
    }
    if !self.environmentSecretsGcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentSecretsGcpProjectID, fieldNumber: 10)
    }
    try { if let v = self._microserviceInstance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpec) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.kubernetesProvider != rhs.kubernetesProvider {return false}
    if lhs.kubeClusterID != rhs.kubeClusterID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.clonedFrom != rhs.clonedFrom {return false}
    if lhs.variables != rhs.variables {return false}
    if lhs.secrets != rhs.secrets {return false}
    if lhs.isInheritEndpointDomainsEnabled != rhs.isInheritEndpointDomainsEnabled {return false}
    if lhs.environmentSecretsGcpProjectID != rhs.environmentSecretsGcpProjectID {return false}
    if lhs._microserviceInstance != rhs._microserviceInstance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSpecMicroserviceInstanceSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_build_engine_environment"),
    2: .same(proto: "pipeline"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isBuildEngineEnvironment) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pipeline) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.isBuildEngineEnvironment != false {
      try visitor.visitSingularBoolField(value: self.isBuildEngineEnvironment, fieldNumber: 1)
    }
    try { if let v = self._pipeline {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpec) -> Bool {
    if lhs.isBuildEngineEnvironment != rhs.isBuildEngineEnvironment {return false}
    if lhs._pipeline != rhs._pipeline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSpecMicroserviceInstanceSpecPipelineSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_enabled"),
    2: .standard(proto: "lower_environment_ids"),
    3: .standard(proto: "container_image_artifact_store_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.lowerEnvironmentIds) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.containerImageArtifactStoreID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 1)
    }
    if !self.lowerEnvironmentIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.lowerEnvironmentIds, fieldNumber: 2)
    }
    if !self.containerImageArtifactStoreID.isEmpty {
      try visitor.visitSingularStringField(value: self.containerImageArtifactStoreID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSpecMicroserviceInstanceSpecPipelineSpec) -> Bool {
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.lowerEnvironmentIds != rhs.lowerEnvironmentIds {return false}
    if lhs.containerImageArtifactStoreID != rhs.containerImageArtifactStoreID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentStatus) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Environments"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_Environments) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetByProductIdAndEnvironmentNameQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .standard(proto: "environment_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.environmentName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    if !self.environmentName.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByProductIdAndEnvironmentNameQueryInput) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.environmentName != rhs.environmentName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ByEnvironmentByNamespaceInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .same(proto: "namespace"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_ByEnvironmentByNamespaceInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloneEnvironmentCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_environment_id"),
    2: .standard(proto: "new_environment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourceEnvironmentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._newEnvironment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sourceEnvironmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceEnvironmentID, fieldNumber: 1)
    }
    try { if let v = self._newEnvironment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_CloneEnvironmentCommandInput) -> Bool {
    if lhs.sourceEnvironmentID != rhs.sourceEnvironmentID {return false}
    if lhs._newEnvironment != rhs._newEnvironment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentVariable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariable) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariables: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentVariables"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariables, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariables) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentVariableList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentVariableId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentVariableValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentVariableValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddEnvironmentVariablesCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "environment_variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.environmentVariables) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.environmentVariables.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.environmentVariables, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariablesCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.environmentVariables != rhs.environmentVariables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSecret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .standard(proto: "provider_secret_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.providerSecretID) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.providerSecretID.isEmpty {
      try visitor.visitSingularStringField(value: self.providerSecretID, fieldNumber: 3)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecret) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs.providerSecretID != rhs.providerSecretID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecrets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSecrets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecrets, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecrets) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSecretList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSecretId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentSecretValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentSecretValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddEnvironmentSecretsCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "environment_secrets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.environmentSecrets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.environmentSecrets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.environmentSecrets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretsCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.environmentSecrets != rhs.environmentSecrets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddEnvironmentSecretCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "environment_secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._environmentSecret) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    try { if let v = self._environmentSecret {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentSecretCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs._environmentSecret != rhs._environmentSecret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateEnvironmentSecretValueCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "secret_id"),
    3: .standard(proto: "secret_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.secretID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.secretValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.secretID.isEmpty {
      try visitor.visitSingularStringField(value: self.secretID, fieldNumber: 2)
    }
    if !self.secretValue.isEmpty {
      try visitor.visitSingularStringField(value: self.secretValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentSecretValueCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.secretID != rhs.secretID {return false}
    if lhs.secretValue != rhs.secretValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteOrRestoreEnvironmentSecretCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "secret_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.secretID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.secretID.isEmpty {
      try visitor.visitSingularStringField(value: self.secretID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentSecretCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.secretID != rhs.secretID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetByEnvironmentSecretIdInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "secret_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.secretID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.secretID.isEmpty {
      try visitor.visitSingularStringField(value: self.secretID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentSecretIdInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.secretID != rhs.secretID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddEnvironmentVariableCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .same(proto: "variable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._variable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    try { if let v = self._variable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_AddEnvironmentVariableCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs._variable != rhs._variable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteOrRestoreEnvironmentVariableCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "variable_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.variableID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.variableID.isEmpty {
      try visitor.visitSingularStringField(value: self.variableID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_DeleteOrRestoreEnvironmentVariableCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.variableID != rhs.variableID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateEnvironmentVariableValueCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "variable_id"),
    3: .standard(proto: "variable_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.variableID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.variableValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.variableID.isEmpty {
      try visitor.visitSingularStringField(value: self.variableID, fieldNumber: 2)
    }
    if !self.variableValue.isEmpty {
      try visitor.visitSingularStringField(value: self.variableValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_UpdateEnvironmentVariableValueCommandInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.variableID != rhs.variableID {return false}
    if lhs.variableValue != rhs.variableValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetByEnvironmentVariableIdInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_id"),
    2: .standard(proto: "variable_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.environmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.variableID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 1)
    }
    if !self.variableID.isEmpty {
      try visitor.visitSingularStringField(value: self.variableID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_GetByEnvironmentVariableIdInput) -> Bool {
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.variableID != rhs.variableID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
