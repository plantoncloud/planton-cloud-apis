// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/postgres/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///postgres-cluster
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource api-version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///postgres-cluster spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource parent
  public var owner: Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner {
    get {return _owner ?? Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  /// kubernetes spec
  public var kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec {
    get {return _kubernetes ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec()}
    set {_kubernetes = newValue}
  }
  /// Returns true if `kubernetes` has been explicitly set.
  public var hasKubernetes: Bool {return self._kubernetes != nil}
  /// Clears the value of `kubernetes`. Subsequent reads from it will return its default value.
  public mutating func clearKubernetes() {self._kubernetes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner? = nil
  fileprivate var _kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec? = nil
}

///postgres-cluster status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  ///postgres-cluster kubernetes status
  public var kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus {
    get {return _kubernetes ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus()}
    set {_kubernetes = newValue}
  }
  /// Returns true if `kubernetes` has been explicitly set.
  public var hasKubernetes: Bool {return self._kubernetes != nil}
  /// Clears the value of `kubernetes`. Subsequent reads from it will return its default value.
  public mutating func clearKubernetes() {self._kubernetes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_RunnableResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _kubernetes: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus? = nil
}

///postgres-cluster kubernetes spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// postgres-container spec
  public var postgresContainer: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec {
    get {return _postgresContainer ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec()}
    set {_postgresContainer = newValue}
  }
  /// Returns true if `postgresContainer` has been explicitly set.
  public var hasPostgresContainer: Bool {return self._postgresContainer != nil}
  /// Clears the value of `postgresContainer`. Subsequent reads from it will return its default value.
  public mutating func clearPostgresContainer() {self._postgresContainer = nil}

  ///postgres-cluster ingress
  public var ingress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec {
    get {return _ingress ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec()}
    set {_ingress = newValue}
  }
  /// Returns true if `ingress` has been explicitly set.
  public var hasIngress: Bool {return self._ingress != nil}
  /// Clears the value of `ingress`. Subsequent reads from it will return its default value.
  public mutating func clearIngress() {self._ingress = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _postgresContainer: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec? = nil
  fileprivate var _ingress: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec? = nil
}

///postgres-cluster kubernetes ingress spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///number of replicas of postgres pods
  ///recommended default is 1
  public var replicas: Int32 = 0

  ///postgres container cpu and memory resources.
  ///recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  public var resources: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources {
    get {return _resources ?? Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources()}
    set {_resources = newValue}
  }
  /// Returns true if `resources` has been explicitly set.
  public var hasResources: Bool {return self._resources != nil}
  /// Clears the value of `resources`. Subsequent reads from it will return its default value.
  public mutating func clearResources() {self._resources = nil}

  ///storage to allocate for each postgres instance in gb. ex: 1Gi
  ///default is set if the client does not provide a value.
  public var diskSize: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _resources: Cloud_Planton_Apis_V1_Commons_Kubernetes_ContainerResources? = nil
}

///postgres-cluster kubernetes ingress spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///standard-endpoint domain to be used for creating internal and external endpoints for postgres-cluster.
  ///only tls enabled standard-endpoints are eligible for creating postgres endpoints.
  public var standardEndpointID: String = String()

  ///endpoint-domain-name used for creating postgres-cluster endpoints.
  ///value is computed from the configured standard-endpoint.
  public var endpointDomainName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///postgres-cluster kubernetes status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///name of the kubernetes namespace in which the postgres-cluster has been created.
  public var namespace: String = String()

  ///name of the kubernetes service created for postgres-cluster.
  public var service: String = String()

  ///command to setup port-forwarding to open postgres-cluster from developers laptop.
  ///this might come handy when postgres-cluster ingress is disabled for security reasons.
  ///this is rendered by combining kubernetes_service and kubernetes_namespace
  ///ex: kubectl port-forward svc/kubernetes_service -n kubernetes_namespace 5432:5432
  ///running the command from this attribute makes it possible to access postgres-cluster using localhost:5432
  public var portForwardCommand: String = String()

  ///kubernetes endpoint for clients running in the same kubernetes cluster.
  ///ex: main-microservice-instance.namespace.svc.instance.local:8080
  public var kubeEndpoint: String = String()

  ///external postgres-cluster hostname. port is always 5432.
  public var externalClusterHostname: String = String()

  ///internal postgres-cluster hostname. port is always 5432.
  public var internalClusterHostname: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for id field of postgres-cluster
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///list of postgres-clusters
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list postgres-clusters
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///wrapper for postgres-cluster password
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterPassword {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusters: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterPassword: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.postgres.rpc"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresCluster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresCluster) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "kubernetes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._kubernetes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._kubernetes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpec) -> Bool {
    if lhs._owner != rhs._owner {return false}
    if lhs._kubernetes != rhs._kubernetes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .same(proto: "kubernetes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._kubernetes) }()
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._kubernetes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatus) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs._kubernetes != rhs._kubernetes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterSpecKubernetesSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "postgres_container"),
    3: .same(proto: "ingress"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._postgresContainer) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ingress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._postgresContainer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ingress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpec) -> Bool {
    if lhs._postgresContainer != rhs._postgresContainer {return false}
    if lhs._ingress != rhs._ingress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterSpecKubernetesSpecPostgresContainerSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replicas"),
    2: .same(proto: "resources"),
    3: .standard(proto: "disk_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.replicas) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._resources) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.diskSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.replicas != 0 {
      try visitor.visitSingularInt32Field(value: self.replicas, fieldNumber: 1)
    }
    try { if let v = self._resources {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.diskSize.isEmpty {
      try visitor.visitSingularStringField(value: self.diskSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecPostgresContainerSpec) -> Bool {
    if lhs.replicas != rhs.replicas {return false}
    if lhs._resources != rhs._resources {return false}
    if lhs.diskSize != rhs.diskSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterSpecKubernetesSpecIngressSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "standard_endpoint_id"),
    2: .standard(proto: "endpoint_domain_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.standardEndpointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.endpointDomainName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.standardEndpointID.isEmpty {
      try visitor.visitSingularStringField(value: self.standardEndpointID, fieldNumber: 1)
    }
    if !self.endpointDomainName.isEmpty {
      try visitor.visitSingularStringField(value: self.endpointDomainName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterSpecKubernetesSpecIngressSpec) -> Bool {
    if lhs.standardEndpointID != rhs.standardEndpointID {return false}
    if lhs.endpointDomainName != rhs.endpointDomainName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterStatusKubernetesStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
    2: .same(proto: "service"),
    3: .standard(proto: "port_forward_command"),
    4: .standard(proto: "kube_endpoint"),
    5: .standard(proto: "external_cluster_hostname"),
    6: .standard(proto: "internal_cluster_hostname"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.portForwardCommand) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.kubeEndpoint) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.externalClusterHostname) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.internalClusterHostname) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 1)
    }
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 2)
    }
    if !self.portForwardCommand.isEmpty {
      try visitor.visitSingularStringField(value: self.portForwardCommand, fieldNumber: 3)
    }
    if !self.kubeEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeEndpoint, fieldNumber: 4)
    }
    if !self.externalClusterHostname.isEmpty {
      try visitor.visitSingularStringField(value: self.externalClusterHostname, fieldNumber: 5)
    }
    if !self.internalClusterHostname.isEmpty {
      try visitor.visitSingularStringField(value: self.internalClusterHostname, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterStatusKubernetesStatus) -> Bool {
    if lhs.namespace != rhs.namespace {return false}
    if lhs.service != rhs.service {return false}
    if lhs.portForwardCommand != rhs.portForwardCommand {return false}
    if lhs.kubeEndpoint != rhs.kubeEndpoint {return false}
    if lhs.externalClusterHostname != rhs.externalClusterHostname {return false}
    if lhs.internalClusterHostname != rhs.internalClusterHostname {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusters, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusters) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterPassword: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostgresClusterPassword"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterPassword, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Postgres_Rpc_PostgresClusterPassword) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
