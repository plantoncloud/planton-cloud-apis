// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/deploy/redis/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///redis-cluster command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterCommandControllerClientInterface {

    ///create redis-cluster
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///update an existing redis-cluster
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///delete an existing redis-cluster
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///restore a previously deleted redis-cluster
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///restart a redis-cluster running in a environment.
    ///redis-cluster is restarted by deleting running "redis" pods which will be automatically recreated by kubernetes
    @available(iOS 13, *)
    func `restart`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///pause a redis-cluster running in a environment.
    ///redis-cluster is paused by scaling down number of replicas of
    ///the kubernetes stateful sets to zero in the environment.
    @available(iOS 13, *)
    func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///unpause a previously paused redis-cluster running in a environment.
    ///unpause is done by scaling the number of pods back to the number of
    ///replicas configured for the redis-cluster.
    @available(iOS 13, *)
    func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/restore", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restart`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/restart", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/pause", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController/unpause", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
            public static let restart = Connect.MethodSpec(name: "restart", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
            public static let pause = Connect.MethodSpec(name: "pause", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
            public static let unpause = Connect.MethodSpec(name: "unpause", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterCommandController", type: .unary)
        }
    }
}

///redis-cluster query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterQueryControllerClientInterface {

    ///list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterList>

    ///look up redis-cluster using redis-cluster id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///find redis-clusters by product id.
    ///response contains only the resources that the authenticated user account has viewer access to.
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusters>

    ///find redis-clusters by environment
    @available(iOS 13, *)
    func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusters>

    @available(iOS 13, *)
    func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusters>

    ///look up redis-cluster sasl password
    ///password is retrieved from the kubernetes cluster.
    @available(iOS 13, *)
    func `getPassword`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterPassword>

    ///lookup pods of a redis-cluster deployed to a environment
    @available(iOS 13, *)
    func `findPods`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Pods>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusters> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusters> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/findByEnvironmentId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusters> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/findByKubeClusterId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getPassword`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterPassword> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/getPassword", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findPods`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Pods> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController/findPods", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
            public static let findByEnvironmentID = Connect.MethodSpec(name: "findByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
            public static let findByKubeClusterID = Connect.MethodSpec(name: "findByKubeClusterId", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
            public static let getPassword = Connect.MethodSpec(name: "getPassword", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
            public static let findPods = Connect.MethodSpec(name: "findPods", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterQueryController", type: .unary)
        }
    }
}

///redis-cluster stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterStackControllerClientInterface {

    ///preview redis-cluster stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>

    ///apply redis-cluster stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Redis_Rpc_RedisCluster> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.deploy.redis.rpc.RedisClusterStackController", type: .unary)
        }
    }
}
