// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/dnszone/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///dns-zone
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource api-version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  /// resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// metadata for the resource
  /// Name is a valid, unique DNS domain name within the Platon Cloud.
  /// Id value is automatically computed in the format 'dns-<company_id>-<normalized-domain-name>',
  /// and its uniqueness is guaranteed by the backend.
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///dns-zone spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///dns-zone status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specification for the DNS Zone
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the company that owns the DNS Zone. This is required and immutable.
  public var companyID: String = String()

  /// The DNS records that are added to the Zone.
  public var records: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord] = []

  ///provider for dns-zone
  public var zoneProvider: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_Enums_DnsZoneProvider = .unspecified

  /// specification for zone to be created in google cloud dns.
  /// this attribute is only populated when zone provider is google cloud dns.
  public var gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec {
    get {return _gcp ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec()}
    set {_gcp = newValue}
  }
  /// Returns true if `gcp` has been explicitly set.
  public var hasGcp: Bool {return self._gcp != nil}
  /// Clears the value of `gcp`. Subsequent reads from it will return its default value.
  public mutating func clearGcp() {self._gcp = nil}

  /// specification for zone to be created in aws route53.
  /// this attribute is only populated when zone provider is aws route53.
  public var aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec {
    get {return _aws ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec()}
    set {_aws = newValue}
  }
  /// Returns true if `aws` has been explicitly set.
  public var hasAws: Bool {return self._aws != nil}
  /// Clears the value of `aws`. Subsequent reads from it will return its default value.
  public mutating func clearAws() {self._aws = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec? = nil
  fileprivate var _aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec? = nil
}

/// Status for the DNS Zone
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  ///status for the zone created in google cloud dns.
  ///this attribute is populated only when the zone provider is google cloud dns
  public var gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus {
    get {return _gcp ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus()}
    set {_gcp = newValue}
  }
  /// Returns true if `gcp` has been explicitly set.
  public var hasGcp: Bool {return self._gcp != nil}
  /// Clears the value of `gcp`. Subsequent reads from it will return its default value.
  public mutating func clearGcp() {self._gcp = nil}

  ///status for the zone created in aws route53.
  ///this attribute is populated only when the zone provider is aws route53
  public var aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus {
    get {return _aws ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus()}
    set {_aws = newValue}
  }
  /// Returns true if `aws` has been explicitly set.
  public var hasAws: Bool {return self._aws != nil}
  /// Clears the value of `aws`. Subsequent reads from it will return its default value.
  public mutating func clearAws() {self._aws = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
  fileprivate var _gcp: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus? = nil
  fileprivate var _aws: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus? = nil
}

/// specification for zone to be created in google cloud dns service
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the GCP Cloud Account where the Managed Zone should be created.
  /// The Managed Zone is created in the core-infra project of the provided Cloud Account,
  /// necessary for delegating domain control to Platon Cloud.
  public var gcpCloudAccountID: String = String()

  /// The ID of the GCP Project where the Managed Zone is created.
  public var projectID: String = String()

  /// An optional list of GCP service accounts to be granted permissions to manage DNS records in the Managed Zone.
  /// These accounts are primarily created as workload identities like cert-manager,
  /// and are added when new environments are created or updated.
  public var iamServiceAccounts: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// status for zone created in google cloud dns service
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of nameservers for the Managed Zone created for the DNS Domain.
  public var nameservers: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// specification for zone to be created in aws route53
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the AWS Cloud Account where the Managed Zone should be created.
  public var awsCloudAccountID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// status for zone created in aws route53
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of nameservers for the Managed Zone created for the DNS Domain.
  public var nameservers: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// list of dns-zones
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// response for paginated query to list dns-zones
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// wrapper for dns-zone name
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// wrapper for dns-zone id
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// dns-record
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The audit information for system tracking
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// dns-zone record type.
  public var recordType: Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType = .unspecified

  /// name of the dns-zone ex: example.com or dev.example.com.
  /// this value should always end with a dot.
  public var name: String = String()

  /// values for the dns-zone record.
  /// if the dns_zone_record_type is cname then each value in the list should end with a dot.
  public var values: [String] = []

  /// ttl for the domain record in seconds.
  public var ttlSeconds: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

/// list of dns-records
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecords {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// AddOrUpdateDnsRecordCommandInput is used to encapsulate the details needed to either add
/// a new DNS record or update an existing one within a specific DNS zone.
/// This message is typically used to transmit data from the client to the server
/// during an add or update or restore operation on a DNS record within a specified DNS zone.
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field contains the unique identifier of the DNS zone within which the DNS record
  /// is to be added or updated. The ID should be a valid DNS zone ID, typically obtained
  /// from the DNS zone entity itself. This field is used by the server to determine
  /// the correct DNS zone where the DNS record is to be added or updated.
  public var dnsZoneID: String = String()

  /// This field contains the actual DNS record that is to be added or updated. The DNS record
  /// object should be populated with all necessary fields (like name, type, TTL, data etc.),
  /// which the server uses to create a new DNS record or update an existing one.
  public var dnsRecord: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord {
    get {return _dnsRecord ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord()}
    set {_dnsRecord = newValue}
  }
  /// Returns true if `dnsRecord` has been explicitly set.
  public var hasDnsRecord: Bool {return self._dnsRecord != nil}
  /// Clears the value of `dnsRecord`. Subsequent reads from it will return its default value.
  public mutating func clearDnsRecord() {self._dnsRecord = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dnsRecord: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord? = nil
}

/// DeleteOrRestoreDnsRecordCommandInput is a protobuf message that encapsulates the data
/// necessary for either soft deleting or restoring a specific DNS record within a DNS zone.
/// This message is typically used to send the relevant details from the client to the server.
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field carries the unique identifier of the DNS zone from which the DNS record
  /// is to be either soft deleted or restored. The server uses this ID to find the appropriate DNS zone.
  /// This is a required field.
  public var dnsZoneID: String = String()

  /// This field holds the type of the DNS record that is to be either soft deleted or restored.
  /// DNS record types include but are not limited to A, AAAA, CNAME, MX, etc.
  /// The server uses this information to find the DNS record of the correct type within the
  /// specified DNS zone. This is a required field.
  public var recordType: Cloud_Planton_Apis_V1_Commons_Network_Dns_Record_Rpc_Enums_DnsRecordType = .unspecified

  /// This field contains the name of the DNS record that is to be either soft deleted or restored.
  /// The DNS record name is a significant identifier used by the server to find the specific record
  /// within the specified DNS zone and of the provided type to either soft delete or restore.
  /// This is a required field.
  public var recordName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecords: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.dnszone.rpc"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZone"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZone) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .same(proto: "records"),
    3: .standard(proto: "zone_provider"),
    4: .same(proto: "gcp"),
    5: .same(proto: "aws"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.records) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.zoneProvider) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._gcp) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._aws) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.records.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.records, fieldNumber: 2)
    }
    if self.zoneProvider != .unspecified {
      try visitor.visitSingularEnumField(value: self.zoneProvider, fieldNumber: 3)
    }
    try { if let v = self._gcp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._aws {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneSpec) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.records != rhs.records {return false}
    if lhs.zoneProvider != rhs.zoneProvider {return false}
    if lhs._gcp != rhs._gcp {return false}
    if lhs._aws != rhs._aws {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
    1: .same(proto: "gcp"),
    2: .same(proto: "aws"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gcp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._aws) }()
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gcp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._aws {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneStatus) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs._gcp != rhs._gcp {return false}
    if lhs._aws != rhs._aws {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneGcpSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_cloud_account_id"),
    2: .standard(proto: "project_id"),
    3: .standard(proto: "iam_service_accounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gcpCloudAccountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.iamServiceAccounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gcpCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpCloudAccountID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    if !self.iamServiceAccounts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.iamServiceAccounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpSpec) -> Bool {
    if lhs.gcpCloudAccountID != rhs.gcpCloudAccountID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.iamServiceAccounts != rhs.iamServiceAccounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneGcpStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nameservers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nameservers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nameservers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nameservers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneGcpStatus) -> Bool {
    if lhs.nameservers != rhs.nameservers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneAwsSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "aws_cloud_account_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.awsCloudAccountID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.awsCloudAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.awsCloudAccountID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsSpec) -> Bool {
    if lhs.awsCloudAccountID != rhs.awsCloudAccountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneAwsStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nameservers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nameservers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nameservers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nameservers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneAwsStatus) -> Bool {
    if lhs.nameservers != rhs.nameservers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZones"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZones) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsDomainName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsDomainName) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsZoneId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsZoneId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .standard(proto: "record_type"),
    2: .same(proto: "name"),
    3: .same(proto: "values"),
    4: .standard(proto: "ttl_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.recordType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.ttlSeconds) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.recordType != .unspecified {
      try visitor.visitSingularEnumField(value: self.recordType, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 3)
    }
    if self.ttlSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.ttlSeconds, fieldNumber: 4)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecord) -> Bool {
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.recordType != rhs.recordType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.values != rhs.values {return false}
    if lhs.ttlSeconds != rhs.ttlSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecords: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DnsRecords"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecords, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DnsRecords) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddOrUpdateDnsRecordCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dns_zone_id"),
    2: .standard(proto: "dns_record"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dnsZoneID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dnsRecord) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dnsZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.dnsZoneID, fieldNumber: 1)
    }
    try { if let v = self._dnsRecord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_AddOrUpdateDnsRecordCommandInput) -> Bool {
    if lhs.dnsZoneID != rhs.dnsZoneID {return false}
    if lhs._dnsRecord != rhs._dnsRecord {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteDnsRecordCommandInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dns_zone_id"),
    2: .standard(proto: "record_type"),
    3: .standard(proto: "record_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dnsZoneID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.recordType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.recordName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dnsZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.dnsZoneID, fieldNumber: 1)
    }
    if self.recordType != .unspecified {
      try visitor.visitSingularEnumField(value: self.recordType, fieldNumber: 2)
    }
    if !self.recordName.isEmpty {
      try visitor.visitSingularStringField(value: self.recordName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Dnszone_Rpc_DeleteDnsRecordCommandInput) -> Bool {
    if lhs.dnsZoneID != rhs.dnsZoneID {return false}
    if lhs.recordType != rhs.recordType {return false}
    if lhs.recordName != rhs.recordName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
