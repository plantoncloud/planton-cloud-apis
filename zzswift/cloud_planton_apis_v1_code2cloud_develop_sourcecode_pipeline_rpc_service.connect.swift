// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/pipeline/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///code pipeline command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineCommandControllerClientInterface {

    ///add or update magic pipeline for a code project
    @available(iOS 13, *)
    func `addOrUpdatePipeline`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `addOrUpdatePipeline`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProject> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.common.rpc.CodePipelineCommandController/addOrUpdatePipeline", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let addOrUpdatePipeline = Connect.MethodSpec(name: "addOrUpdatePipeline", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.common.rpc.CodePipelineCommandController", type: .unary)
        }
    }
}

///code pipeline query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineQueryControllerClientInterface {

    ///generate code pipeline template for a code project
    @available(iOS 13, *)
    func `generateCodePipelineTemplate`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_GenerateCodePipelineTemplateQueryInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_GenerateCodePipelineTemplateQueryResp>

    ///get code-pipeline template files for a code project
    @available(iOS 13, *)
    func `getPipelineFilesByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectFiles>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_CodePipelineQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `generateCodePipelineTemplate`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_GenerateCodePipelineTemplateQueryInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Pipeline_Common_Rpc_GenerateCodePipelineTemplateQueryResp> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.common.rpc.CodePipelineQueryController/generateCodePipelineTemplate", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getPipelineFilesByCodeProjectID`(request: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_Rpc_CodeProjectFiles> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.common.rpc.CodePipelineQueryController/getPipelineFilesByCodeProjectId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let generateCodePipelineTemplate = Connect.MethodSpec(name: "generateCodePipelineTemplate", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.common.rpc.CodePipelineQueryController", type: .unary)
            public static let getPipelineFilesByCodeProjectID = Connect.MethodSpec(name: "getPipelineFilesByCodeProjectId", service: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.common.rpc.CodePipelineQueryController", type: .unary)
        }
    }
}
