// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/resourcemanager/company/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///company command controller
public protocol Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyCommandControllerClientInterface {

    ///create a new company on planton cloud
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company>

    ///update an existing company on planton cloud
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company>

    ///delete an existing company on planton cloud using company id
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company>

    ///restore a previously deleted company.
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyCommandControllerClient: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyCommandController", type: .unary)
        }
    }
}

///company query controller
public protocol Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyQueryControllerClientInterface {

    /// list all the companies on planton cloud for the requested page. This is intended to be used on back-office portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyList>

    /// get a company using company id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company>

    @available(iOS 13, *)
    func `findCompanies`(request: Cloud_Planton_Apis_V1_Commons_Protobuf_Custom_CustomEmpty, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Companies>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyQueryControllerClient: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Company> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findCompanies`(request: Cloud_Planton_Apis_V1_Commons_Protobuf_Custom_CustomEmpty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_Companies> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyQueryController/findCompanies", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyQueryController", type: .unary)
            public static let findCompanies = Connect.MethodSpec(name: "findCompanies", service: "cloud.planton.apis.v1.resourcemanager.company.rpc.CompanyQueryController", type: .unary)
        }
    }
}
