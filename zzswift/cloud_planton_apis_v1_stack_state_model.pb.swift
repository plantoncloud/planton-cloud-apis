// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/stack/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// stack-job state
public struct Cloud_Planton_Apis_V1_Stack_State_StackJobState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// system-audit information
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _storage._sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_uniqueStorage()._sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return _storage._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {_uniqueStorage()._sysAudit = nil}

  /// unique identifier(uuid) for stack-job
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// id of the company to which the stack-job belongs to
  public var companyID: String {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  /// id of the product to which the stack-job belongs to
  /// note: this attribute is always empty for company level stacks
  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  /// id of the product-env to which the stack-job belongs to
  /// note: this attribute is always empty for company level stacks
  public var environmentID: String {
    get {return _storage._environmentID}
    set {_uniqueStorage()._environmentID = newValue}
  }

  /// resource type for which the stack is executed
  public var resourceType: String {
    get {return _storage._resourceType}
    set {_uniqueStorage()._resourceType = newValue}
  }

  /// id of the resource for which the stack is executed
  public var resourceID: String {
    get {return _storage._resourceID}
    set {_uniqueStorage()._resourceID = newValue}
  }

  /// name of the stack
  public var stackName: String {
    get {return _storage._stackName}
    set {_uniqueStorage()._stackName = newValue}
  }

  /// (required) stack operation type
  public var operationType: String {
    get {return _storage._operationType}
    set {_uniqueStorage()._operationType = newValue}
  }

  /// path of the log file in the storage bucket
  public var logFile: String {
    get {return _storage._logFile}
    set {_uniqueStorage()._logFile = newValue}
  }

  /// status of the stack-job
  public var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// url of the stack-job on pulumi web console.
  /// note: this value is not persisted in the database.
  /// the value of this attributes is rendered by replacing the placeholders in
  /// "https://app.pulumi.com/${pulumiOrgName}/${pulumiProject}/${pulumiStackName}"
  /// value of pulumiOrgName is same for every single stack for each planton-cloud environment.
  /// value of pulumiProject is the company-id on planton-cloud.
  /// value of pulumiStack is stack_name attribute in this object.
  /// ex: https://app.pulumi.com/plantonstack-prod/cookie/afs-cookie-shop-main.ca-planton-hosting-gcp-main.artifact-store
  public var webURL: String {
    get {return _storage._webURL}
    set {_uniqueStorage()._webURL = newValue}
  }

  /// content of the log file.
  /// note: log content is not persisted in the database.
  /// log-content will only be included in response for stack-job details rpc calls.
  public var logContent: String {
    get {return _storage._logContent}
    set {_uniqueStorage()._logContent = newValue}
  }

  /// error message from stack-job. this attribute is only populated when stack-job-status is "failed"
  public var errorMessage: String {
    get {return _storage._errorMessage}
    set {_uniqueStorage()._errorMessage = newValue}
  }

  /// resource-count
  public var resourceCount: Int32 {
    get {return _storage._resourceCount}
    set {_uniqueStorage()._resourceCount = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Stack_State_StackJobState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.stack.state"

extension Cloud_Planton_Apis_V1_Stack_State_StackJobState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StackJobState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "sys_audit"),
    1: .same(proto: "id"),
    2: .standard(proto: "company_id"),
    3: .standard(proto: "product_id"),
    4: .standard(proto: "environment_id"),
    5: .standard(proto: "resource_type"),
    6: .standard(proto: "resource_id"),
    7: .standard(proto: "stack_name"),
    8: .standard(proto: "operation_type"),
    9: .standard(proto: "log_file"),
    10: .same(proto: "status"),
    11: .standard(proto: "web_url"),
    12: .standard(proto: "log_content"),
    13: .standard(proto: "error_message"),
    14: .standard(proto: "resource_count"),
  ]

  fileprivate class _StorageClass {
    var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
    var _id: String = String()
    var _companyID: String = String()
    var _productID: String = String()
    var _environmentID: String = String()
    var _resourceType: String = String()
    var _resourceID: String = String()
    var _stackName: String = String()
    var _operationType: String = String()
    var _logFile: String = String()
    var _status: String = String()
    var _webURL: String = String()
    var _logContent: String = String()
    var _errorMessage: String = String()
    var _resourceCount: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sysAudit = source._sysAudit
      _id = source._id
      _companyID = source._companyID
      _productID = source._productID
      _environmentID = source._environmentID
      _resourceType = source._resourceType
      _resourceID = source._resourceID
      _stackName = source._stackName
      _operationType = source._operationType
      _logFile = source._logFile
      _status = source._status
      _webURL = source._webURL
      _logContent = source._logContent
      _errorMessage = source._errorMessage
      _resourceCount = source._resourceCount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._companyID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._environmentID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._resourceType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._resourceID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._stackName) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._operationType) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._logFile) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._webURL) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._logContent) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._errorMessage) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._resourceCount) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._sysAudit) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._companyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyID, fieldNumber: 2)
      }
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 3)
      }
      if !_storage._environmentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._environmentID, fieldNumber: 4)
      }
      if !_storage._resourceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resourceType, fieldNumber: 5)
      }
      if !_storage._resourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resourceID, fieldNumber: 6)
      }
      if !_storage._stackName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stackName, fieldNumber: 7)
      }
      if !_storage._operationType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operationType, fieldNumber: 8)
      }
      if !_storage._logFile.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logFile, fieldNumber: 9)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 10)
      }
      if !_storage._webURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._webURL, fieldNumber: 11)
      }
      if !_storage._logContent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logContent, fieldNumber: 12)
      }
      if !_storage._errorMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._errorMessage, fieldNumber: 13)
      }
      if _storage._resourceCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._resourceCount, fieldNumber: 14)
      }
      try { if let v = _storage._sysAudit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Stack_State_StackJobState, rhs: Cloud_Planton_Apis_V1_Stack_State_StackJobState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sysAudit != rhs_storage._sysAudit {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._environmentID != rhs_storage._environmentID {return false}
        if _storage._resourceType != rhs_storage._resourceType {return false}
        if _storage._resourceID != rhs_storage._resourceID {return false}
        if _storage._stackName != rhs_storage._stackName {return false}
        if _storage._operationType != rhs_storage._operationType {return false}
        if _storage._logFile != rhs_storage._logFile {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._webURL != rhs_storage._webURL {return false}
        if _storage._logContent != rhs_storage._logContent {return false}
        if _storage._errorMessage != rhs_storage._errorMessage {return false}
        if _storage._resourceCount != rhs_storage._resourceCount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
