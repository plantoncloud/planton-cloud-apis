// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/iam/authz/role/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///iam role command controller
public protocol Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleCommandControllerClientInterface {

    /// create iam role
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole>

    /// update iam role
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole>

    /// delete iam role
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleCommandControllerClient: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleCommandController/delete", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleCommandController", type: .unary)
        }
    }
}

/// iam role query controller
public protocol Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleQueryControllerClientInterface {

    /// retrieve paginated list of all iam roles on planton cloud. this is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleList>

    /// lookup iam role by role id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole>

    /// lookup iam role by resource type and principal type
    @available(iOS 13, *)
    func `findByResourceTypeAndPrincipalType`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_ResourceTypeAndPrincipalTypeInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoles>

    /// lookup iam principal type by resource type
    /// returns the list of principal types that can be used to create relations with the resource
    /// for example cloud account is allowed to share at company and user level
    /// by this cloud account have two principal types to create relations with
    @available(iOS 13, *)
    func `getIamPrincipalTypesByResourceType`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamResourceTypeInput, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_PrincipalTypes>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleQueryControllerClient: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoleId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByResourceTypeAndPrincipalType`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_ResourceTypeAndPrincipalTypeInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRoles> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController/findByResourceTypeAndPrincipalType", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getIamPrincipalTypesByResourceType`(request: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamResourceTypeInput, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_PrincipalTypes> {
        return await self.client.unary(path: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController/getIamPrincipalTypesByResourceType", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController", type: .unary)
            public static let findByResourceTypeAndPrincipalType = Connect.MethodSpec(name: "findByResourceTypeAndPrincipalType", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController", type: .unary)
            public static let getIamPrincipalTypesByResourceType = Connect.MethodSpec(name: "getIamPrincipalTypesByResourceType", service: "cloud.planton.apis.v1.iam.authz.role.rpc.IamRoleQueryController", type: .unary)
        }
    }
}
