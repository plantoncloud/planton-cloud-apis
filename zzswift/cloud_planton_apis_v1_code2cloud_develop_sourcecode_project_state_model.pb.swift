// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/state/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///code-project state
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///event-type
  public var eventType: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_Enums_CodeProjectEventType {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  ///resource api version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///code-project spec state
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///company to which the code project belongs to.
  ///value is computed from product.
  public var companyID: String = String()

  ///product to which the code-project belongs to.
  ///computed from code-server
  public var productID: String = String()

  ///code server to which the code-project belongs to.
  public var codeServerID: String = String()

  ///path of the group/owner/user on github or gitlab
  ///(note) the parent path should start with the code_server_group path
  ///when creating a project on gitlab, all the groups in the provided path are created if they do not exist.
  public var parentPath: String = String()

  ///web or clone(http/ssh) for the code project.
  ///important: this value is used for reverse lookup to generate the code pipelines and other
  ///operations performed using the cli.
  ///The cli reads the value using "git remote get-url origin" command.
  ///so, the value returned by "git remote get-url origin" should match this attribute.
  ///conditionally required while adding(add) a code-project project that already exists.
  ///is not required while creating a code project
  public var codeProjectURL: String = String()

  ///toggle to control code pipeline for the code project.
  public var isCodePipelineEnabled: Bool = false

  ///toggle to control code pipeline for the code project for merge request commits
  public var isReviewCodePipelineEnabled: Bool = false

  ///toggle to control code pipeline for the code project for tags
  public var isTagCodePipelineEnabled: Bool = false

  ///id of the code project on upstream code server.
  ///this is the id of repository on github/gitlab etc, if the code project was created as part of code-server sync.
  ///value is computed by looking up the repository on the code-server.
  public var upstreamCodeProjectID: String = String()

  ///browser url for the code project to be used for opening the code project on github/gitlab/bitbucket etc.
  ///value is either populated from the information received about the project on git server or is
  ///computed by applying string transformations on the clone url.
  public var browserURL: String = String()

  ///flag to indicate if the code project is a template project.
  ///a template project on github is marked as template project and is also a valid cookiecutter project.
  ///https://cookiecutter.readthedocs.io
  public var isTemplate: Bool = false

  ///configuration variables required to render a full project from a template project.
  ///https://cookiecutter.readthedocs.io/en/1.7.2/tutorial1.html#cookiecutter-json
  ///when a template code project is synchronized from github, if the project contains cookiecutter.json file in the
  ///root directory of the project in the default branch, then the json contents are loaded as key value map and are
  ///persistent in the planton cloud system.
  ///the stored configuration is used to allow the users to provide the values while creating new projects from the
  ///template project.
  public var cookiecutterJson: Dictionary<String,String> = [:]

  ///id of the template code project from which the code project is created.
  ///this value is only populated for code projects created using planton cloud.
  public var templateCodeProjectID: String = String()

  ///input values provided when code project is created using a template.
  ///this value is only populated for code projects created using planton cloud.
  ///conditionally required when creating a code-project from a template.
  public var cookiecutterInput: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///code-project status state
public struct Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.state"

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodeProjectState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .standard(proto: "event_type"),
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _eventType: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_Enums_CodeProjectEventType = .unspecified
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventType = source._eventType
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 99: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._eventType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._eventType, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodeProjectSpecState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "code_server_id"),
    4: .standard(proto: "parent_path"),
    5: .standard(proto: "code_project_url"),
    6: .standard(proto: "is_code_pipeline_enabled"),
    7: .standard(proto: "is_review_code_pipeline_enabled"),
    8: .standard(proto: "is_tag_code_pipeline_enabled"),
    9: .standard(proto: "upstream_code_project_id"),
    10: .standard(proto: "browser_url"),
    11: .standard(proto: "is_template"),
    12: .standard(proto: "cookiecutter_json"),
    13: .standard(proto: "template_code_project_id"),
    14: .standard(proto: "cookiecutter_input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.companyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.codeServerID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.parentPath) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.codeProjectURL) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isCodePipelineEnabled) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isReviewCodePipelineEnabled) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isTagCodePipelineEnabled) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.upstreamCodeProjectID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.browserURL) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.isTemplate) }()
      case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.cookiecutterJson) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.templateCodeProjectID) }()
      case 14: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.cookiecutterInput) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companyID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyID, fieldNumber: 1)
    }
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 2)
    }
    if !self.codeServerID.isEmpty {
      try visitor.visitSingularStringField(value: self.codeServerID, fieldNumber: 3)
    }
    if !self.parentPath.isEmpty {
      try visitor.visitSingularStringField(value: self.parentPath, fieldNumber: 4)
    }
    if !self.codeProjectURL.isEmpty {
      try visitor.visitSingularStringField(value: self.codeProjectURL, fieldNumber: 5)
    }
    if self.isCodePipelineEnabled != false {
      try visitor.visitSingularBoolField(value: self.isCodePipelineEnabled, fieldNumber: 6)
    }
    if self.isReviewCodePipelineEnabled != false {
      try visitor.visitSingularBoolField(value: self.isReviewCodePipelineEnabled, fieldNumber: 7)
    }
    if self.isTagCodePipelineEnabled != false {
      try visitor.visitSingularBoolField(value: self.isTagCodePipelineEnabled, fieldNumber: 8)
    }
    if !self.upstreamCodeProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.upstreamCodeProjectID, fieldNumber: 9)
    }
    if !self.browserURL.isEmpty {
      try visitor.visitSingularStringField(value: self.browserURL, fieldNumber: 10)
    }
    if self.isTemplate != false {
      try visitor.visitSingularBoolField(value: self.isTemplate, fieldNumber: 11)
    }
    if !self.cookiecutterJson.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.cookiecutterJson, fieldNumber: 12)
    }
    if !self.templateCodeProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.templateCodeProjectID, fieldNumber: 13)
    }
    if !self.cookiecutterInput.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.cookiecutterInput, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectSpecState) -> Bool {
    if lhs.companyID != rhs.companyID {return false}
    if lhs.productID != rhs.productID {return false}
    if lhs.codeServerID != rhs.codeServerID {return false}
    if lhs.parentPath != rhs.parentPath {return false}
    if lhs.codeProjectURL != rhs.codeProjectURL {return false}
    if lhs.isCodePipelineEnabled != rhs.isCodePipelineEnabled {return false}
    if lhs.isReviewCodePipelineEnabled != rhs.isReviewCodePipelineEnabled {return false}
    if lhs.isTagCodePipelineEnabled != rhs.isTagCodePipelineEnabled {return false}
    if lhs.upstreamCodeProjectID != rhs.upstreamCodeProjectID {return false}
    if lhs.browserURL != rhs.browserURL {return false}
    if lhs.isTemplate != rhs.isTemplate {return false}
    if lhs.cookiecutterJson != rhs.cookiecutterJson {return false}
    if lhs.templateCodeProjectID != rhs.templateCodeProjectID {return false}
    if lhs.cookiecutterInput != rhs.cookiecutterInput {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodeProjectStatusState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState, rhs: Cloud_Planton_Apis_V1_Code2cloud_Develop_Sourcecode_Project_State_CodeProjectStatusState) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
