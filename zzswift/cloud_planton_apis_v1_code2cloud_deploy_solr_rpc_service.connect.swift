// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/code2cloud/deploy/solr/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///solr-cloud command controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudCommandControllerClientInterface {

    ///create solr-cloud
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///update an existing solr-cloud
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///delete an existing solr-cloud
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///restore a deleted solr-cloud
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///restart a solr-cloud running in a environment.
    ///solr-cloud is restarted by deleting running "solr" pods which will be automatically recreated by kubernetes
    @available(iOS 13, *)
    func `restart`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///pause a solr-cloud running in a environment.
    ///solr-cloud is paused by scaling down number of replicas of
    ///the kubernetes deployment/stateful sets to zero in the environment.
    @available(iOS 13, *)
    func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///unpause a previously paused solr-cloud running in a environment.
    ///unpause is done by scaling the number of pods back to the number of
    ///replicas configured for the solr-cloud.
    @available(iOS 13, *)
    func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudCommandControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/restore", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restart`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/restart", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `pause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/pause", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `unpause`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/unpause", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
            public static let restart = Connect.MethodSpec(name: "restart", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
            public static let pause = Connect.MethodSpec(name: "pause", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
            public static let unpause = Connect.MethodSpec(name: "unpause", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController", type: .unary)
        }
    }
}

///solr-cloud query controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudQueryControllerClientInterface {

    ///list all solr-clouds on planton cloud for the requested page. This is intended for use on portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudList>

    ///look up solr-cloud using solr-cloud id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///find solr-clouds by product id.
    ///response contains only the resources that the authenticated user account has viewer access to.
    @available(iOS 13, *)
    func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrClouds>

    ///find solr-clouds by environment
    @available(iOS 13, *)
    func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrClouds>

    ///find solr-clouds by kubernetes cloud
    @available(iOS 13, *)
    func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrClouds>

    ///look up solr-cloud sasl password
    ///password is retrieved from the kubernetes cloud.
    @available(iOS 13, *)
    func `getPassword`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudPassword>

    ///lookup pods of a solr-cloud deployed to a environment
    @available(iOS 13, *)
    func `findPods`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Pods>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudQueryControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByProductID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrClouds> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findByProductId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByEnvironmentID`(request: Cloud_Planton_Apis_V1_Code2cloud_Environment_Rpc_EnvironmentId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrClouds> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findByEnvironmentId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByKubeClusterID`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Kubecluster_Rpc_KubeClusterId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrClouds> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findByKubeClusterId", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getPassword`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudPassword> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/getPassword", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findPods`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Integration_Kubernetes_Resource_Pods> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findPods", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
            public static let findByProductID = Connect.MethodSpec(name: "findByProductId", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
            public static let findByEnvironmentID = Connect.MethodSpec(name: "findByEnvironmentId", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
            public static let findByKubeClusterID = Connect.MethodSpec(name: "findByKubeClusterId", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
            public static let getPassword = Connect.MethodSpec(name: "getPassword", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
            public static let findPods = Connect.MethodSpec(name: "findPods", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController", type: .unary)
        }
    }
}

///solr-cloud stack controller
public protocol Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudStackControllerClientInterface {

    ///preview solr-cloud stack
    @available(iOS 13, *)
    func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>

    ///apply solr-cloud stack
    @available(iOS 13, *)
    func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudStackControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudStackControllerClient: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudStackControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `preview`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController/preview", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `apply`(request: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloudId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Code2cloud_Deploy_Solr_Rpc_SolrCloud> {
        return await self.client.unary(path: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController/apply", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let preview = Connect.MethodSpec(name: "preview", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController", type: .unary)
            public static let apply = Connect.MethodSpec(name: "apply", service: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController", type: .unary)
        }
    }
}
