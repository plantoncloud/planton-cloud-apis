// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/commons/testing/resource/field/immutable/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// New message to test immutable fields.
public struct Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var immutableStringField: String = String()

  public var mutableStringField: String = String()

  public var immutableIntField: Int32 = 0

  public var mutableIntField: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// New message to test nested immutable fields.
public struct Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_NestedImmutableFieldsTest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nestedImmutableFields: Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest {
    get {return _nestedImmutableFields ?? Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest()}
    set {_nestedImmutableFields = newValue}
  }
  /// Returns true if `nestedImmutableFields` has been explicitly set.
  public var hasNestedImmutableFields: Bool {return self._nestedImmutableFields != nil}
  /// Clears the value of `nestedImmutableFields`. Subsequent reads from it will return its default value.
  public mutating func clearNestedImmutableFields() {self._nestedImmutableFields = nil}

  public var mutableStringField: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _nestedImmutableFields: Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_NestedImmutableFieldsTest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.commons.testing.resource.field.immutable"

extension Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImmutableFieldsTest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "immutable_string_field"),
    2: .standard(proto: "mutable_string_field"),
    3: .standard(proto: "immutable_int_field"),
    4: .standard(proto: "mutable_int_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.immutableStringField) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mutableStringField) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.immutableIntField) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.mutableIntField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.immutableStringField.isEmpty {
      try visitor.visitSingularStringField(value: self.immutableStringField, fieldNumber: 1)
    }
    if !self.mutableStringField.isEmpty {
      try visitor.visitSingularStringField(value: self.mutableStringField, fieldNumber: 2)
    }
    if self.immutableIntField != 0 {
      try visitor.visitSingularInt32Field(value: self.immutableIntField, fieldNumber: 3)
    }
    if self.mutableIntField != 0 {
      try visitor.visitSingularInt32Field(value: self.mutableIntField, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest, rhs: Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_ImmutableFieldsTest) -> Bool {
    if lhs.immutableStringField != rhs.immutableStringField {return false}
    if lhs.mutableStringField != rhs.mutableStringField {return false}
    if lhs.immutableIntField != rhs.immutableIntField {return false}
    if lhs.mutableIntField != rhs.mutableIntField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_NestedImmutableFieldsTest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NestedImmutableFieldsTest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_immutable_fields"),
    2: .standard(proto: "mutable_string_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._nestedImmutableFields) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mutableStringField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._nestedImmutableFields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.mutableStringField.isEmpty {
      try visitor.visitSingularStringField(value: self.mutableStringField, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_NestedImmutableFieldsTest, rhs: Cloud_Planton_Apis_V1_Commons_Testing_Resource_Field_Immutable_NestedImmutableFieldsTest) -> Bool {
    if lhs._nestedImmutableFields != rhs._nestedImmutableFields {return false}
    if lhs.mutableStringField != rhs.mutableStringField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
