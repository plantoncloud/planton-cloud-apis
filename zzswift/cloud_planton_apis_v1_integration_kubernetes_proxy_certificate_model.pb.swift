// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/integration/kubernetes/proxy/certificate/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_GetCertificateByNamespaceByNameQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///base64 encoded kube-config
  public var kubeConfigBase64: String = String()

  ///name of the kubernetes namespace to look for
  public var namespace: String = String()

  ///name of the certificate
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///input for query to get list of certificates in a namespace
public struct Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_FindCertificatesQueryInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///base64 encoded kube-config
  public var kubeConfigBase64: String = String()

  ///name of the kubernetes namespace to list certificates from
  public var namespace: String = String()

  ///kubernetes label selector to filter results
  public var labelSelector: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_GetCertificateByNamespaceByNameQueryInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_FindCertificatesQueryInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.integration.kubernetes.proxy.certificate"

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_GetCertificateByNamespaceByNameQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCertificateByNamespaceByNameQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "kube_config_base64"),
    2: .same(proto: "namespace"),
    3: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.kubeConfigBase64) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kubeConfigBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeConfigBase64, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_GetCertificateByNamespaceByNameQueryInput, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_GetCertificateByNamespaceByNameQueryInput) -> Bool {
    if lhs.kubeConfigBase64 != rhs.kubeConfigBase64 {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_FindCertificatesQueryInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FindCertificatesQueryInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "kube_config_base64"),
    2: .same(proto: "namespace"),
    3: .standard(proto: "label_selector"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.kubeConfigBase64) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.labelSelector) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kubeConfigBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.kubeConfigBase64, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    if !self.labelSelector.isEmpty {
      try visitor.visitSingularStringField(value: self.labelSelector, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_FindCertificatesQueryInput, rhs: Cloud_Planton_Apis_V1_Integration_Kubernetes_Proxy_Certificate_FindCertificatesQueryInput) -> Bool {
    if lhs.kubeConfigBase64 != rhs.kubeConfigBase64 {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.labelSelector != rhs.labelSelector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
