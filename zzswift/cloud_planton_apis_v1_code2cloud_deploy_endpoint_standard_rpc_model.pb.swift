// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/code2cloud/deploy/endpoint/standard/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///standard-endpoint
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource api-version
  public var apiVersion: String {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  ///resource kind
  public var kind: String {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  ///resource metadata
  public var metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata {
    get {return _storage._metadata ?? Cloud_Planton_Apis_V1_Commons_Resource_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///spec
  public var spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec {
    get {return _storage._spec ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  ///status
  public var status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus {
    get {return _storage._status ?? Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///standard-endpoint spec
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///resource parent
  public var owner: Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner {
    get {return _owner ?? Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///flag to toggle tls for standard-endpoint.
  ///defaults to "false".
  ///(important note) certificates are not created for endpoints that do not need tls.
  ///(important note) endpoint domains with out tls enabled are not eligible to be used for
  ///creating endpoints for microservice-instances, postgres-clusters, kafka-clusters, redis-clusters or solr-clouds
  public var isTlsEnabled: Bool = false

  ///flag to indicate if the standard-endpoint is to be considered as
  ///the primary endpoint domain for the environment.
  ///defaults to "false".
  ///(important note) there can only be one primary endpoint domain per environment.
  ///if there is already an endpoint domain marked as primary endpoint domain, then
  ///creation would fail if this value is set to true. Other endpoint domains should be updated to
  ///set this value to false before attempting to mark a new standard-endpoint as primary.
  ///this value is used in gitlab deployment pipelines to support environment url feature on gitlab.
  ///https://docs.gitlab.com/ee/ci/environments/#environment-url
  public var isPrimaryEnvironmentEndpointDomain: Bool = false

  ///flag to indicate if the endpoint_domain is inherited from kube-cluster endpoint domains.
  ///this flag is necessary to always keep the endpoint domains inherited from kube-cluster.
  ///this attribute is populated by the system for the endpoints automatically created upon environment creation.
  public var isInherited: Bool = false

  ///id of the project on google cloud containing the dns zone for the endpoint-domain.
  ///this value is looked up from the dns-domains in the company dns data.
  ///this value is required for configuring the cert-issuer to perform dns validations.
  public var dnsZoneGcpProjectID: String = String()

  ///external dns domain ex: dev.example.com.
  ///this value is computed by combining the environment-name with the endpoint-domain-name.
  public var externalEndpointDomainName: String = String()

  ///internal dns domain ex: dev-internal.example.com.
  ///this value is computed by combining the environment-name with the endpoint-domain-name.
  public var internalEndpointDomainName: String = String()

  ///external ingress ip.
  ///this is the ip address to reach workloads like microservices from clients outside the kubernetes cluster.
  ///this value is computed from kube-cluster.
  public var externalIngressIp: String = String()

  ///internal ingress ip.
  ///this is the ip address to reach workloads like microservices from internal network like private vpc.
  ///this value is computed from kube-cluster.
  public var internalIngressIp: String = String()

  ///email of the service account created for cert-manager component on the kube-cluster in which the
  ///environment that the standard-endpoint belongs to.
  ///this value is used for ensuring that the service account has required permissions to insert dns records in
  ///the dns zone to be able to complete dns01 challenges.
  ///this attribute is only populated if the environment is hosted in a gcp kube-cluster.
  ///this value is computed from kube-cluster.
  public var certManagerGsaEmail: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: Cloud_Planton_Apis_V1_Commons_Resource_Owner_EnvironmentResourceOwner? = nil
}

///standard-endpoint status
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// resource lifecycle
  public var lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle {
    get {return _lifecycle ?? Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle()}
    set {_lifecycle = newValue}
  }
  /// Returns true if `lifecycle` has been explicitly set.
  public var hasLifecycle: Bool {return self._lifecycle != nil}
  /// Clears the value of `lifecycle`. Subsequent reads from it will return its default value.
  public mutating func clearLifecycle() {self._lifecycle = nil}

  /// system audit info
  public var sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit {
    get {return _sysAudit ?? Cloud_Planton_Apis_V1_Commons_Audit_SysAudit()}
    set {_sysAudit = newValue}
  }
  /// Returns true if `sysAudit` has been explicitly set.
  public var hasSysAudit: Bool {return self._sysAudit != nil}
  /// Clears the value of `sysAudit`. Subsequent reads from it will return its default value.
  public mutating func clearSysAudit() {self._sysAudit = nil}

  /// id of the stack-job
  public var stackJobID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lifecycle: Cloud_Planton_Apis_V1_Commons_Resource_ResourceLifecycle? = nil
  fileprivate var _sysAudit: Cloud_Planton_Apis_V1_Commons_Audit_SysAudit? = nil
}

///wrapper for standard-endpoint Domain id
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///list of standard-endpoints
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response for paginated query to list standard-endpoints
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalPages: Int32 = 0

  public var entries: [Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///dns resolution status of endpoint
public struct Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///flag to indicate if the dns is resolving to the correct ingress address(ip or cname).
  public var isResolvingToIngressAddress: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.rpc"

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .same(proto: "kind"),
    3: .same(proto: "metadata"),
    4: .same(proto: "spec"),
    5: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _apiVersion: String = String()
    var _kind: String = String()
    var _metadata: Cloud_Planton_Apis_V1_Commons_Resource_Metadata? = nil
    var _spec: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec? = nil
    var _status: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiVersion = source._apiVersion
      _kind = source._kind
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._apiVersion) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._kind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._apiVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiVersion, fieldNumber: 1)
      }
      if !_storage._kind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kind, fieldNumber: 2)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoint) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpointSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "is_tls_enabled"),
    3: .standard(proto: "is_primary_environment_endpoint_domain"),
    4: .standard(proto: "is_inherited"),
    5: .standard(proto: "dns_zone_gcp_project_id"),
    6: .standard(proto: "external_endpoint_domain_name"),
    7: .standard(proto: "internal_endpoint_domain_name"),
    8: .standard(proto: "external_ingress_ip"),
    9: .standard(proto: "internal_ingress_ip"),
    10: .standard(proto: "cert_manager_gsa_email"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isTlsEnabled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isPrimaryEnvironmentEndpointDomain) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isInherited) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dnsZoneGcpProjectID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.externalEndpointDomainName) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.internalEndpointDomainName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.externalIngressIp) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.internalIngressIp) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.certManagerGsaEmail) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.isTlsEnabled != false {
      try visitor.visitSingularBoolField(value: self.isTlsEnabled, fieldNumber: 2)
    }
    if self.isPrimaryEnvironmentEndpointDomain != false {
      try visitor.visitSingularBoolField(value: self.isPrimaryEnvironmentEndpointDomain, fieldNumber: 3)
    }
    if self.isInherited != false {
      try visitor.visitSingularBoolField(value: self.isInherited, fieldNumber: 4)
    }
    if !self.dnsZoneGcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.dnsZoneGcpProjectID, fieldNumber: 5)
    }
    if !self.externalEndpointDomainName.isEmpty {
      try visitor.visitSingularStringField(value: self.externalEndpointDomainName, fieldNumber: 6)
    }
    if !self.internalEndpointDomainName.isEmpty {
      try visitor.visitSingularStringField(value: self.internalEndpointDomainName, fieldNumber: 7)
    }
    if !self.externalIngressIp.isEmpty {
      try visitor.visitSingularStringField(value: self.externalIngressIp, fieldNumber: 8)
    }
    if !self.internalIngressIp.isEmpty {
      try visitor.visitSingularStringField(value: self.internalIngressIp, fieldNumber: 9)
    }
    if !self.certManagerGsaEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.certManagerGsaEmail, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointSpec) -> Bool {
    if lhs._owner != rhs._owner {return false}
    if lhs.isTlsEnabled != rhs.isTlsEnabled {return false}
    if lhs.isPrimaryEnvironmentEndpointDomain != rhs.isPrimaryEnvironmentEndpointDomain {return false}
    if lhs.isInherited != rhs.isInherited {return false}
    if lhs.dnsZoneGcpProjectID != rhs.dnsZoneGcpProjectID {return false}
    if lhs.externalEndpointDomainName != rhs.externalEndpointDomainName {return false}
    if lhs.internalEndpointDomainName != rhs.internalEndpointDomainName {return false}
    if lhs.externalIngressIp != rhs.externalIngressIp {return false}
    if lhs.internalIngressIp != rhs.internalIngressIp {return false}
    if lhs.certManagerGsaEmail != rhs.certManagerGsaEmail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpointStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    99: .same(proto: "lifecycle"),
    98: .standard(proto: "sys_audit"),
    97: .standard(proto: "stack_job_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 97: try { try decoder.decodeSingularStringField(value: &self.stackJobID) }()
      case 98: try { try decoder.decodeSingularMessageField(value: &self._sysAudit) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._lifecycle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.stackJobID.isEmpty {
      try visitor.visitSingularStringField(value: self.stackJobID, fieldNumber: 97)
    }
    try { if let v = self._sysAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
    } }()
    try { if let v = self._lifecycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointStatus) -> Bool {
    if lhs._lifecycle != rhs._lifecycle {return false}
    if lhs._sysAudit != rhs._sysAudit {return false}
    if lhs.stackJobID != rhs.stackJobID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpointId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpoints"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpoints) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpointList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pages"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointList) -> Bool {
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StandardEndpointDnsResolutionStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_resolving_to_ingress_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isResolvingToIngressAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isResolvingToIngressAddress != false {
      try visitor.visitSingularBoolField(value: self.isResolvingToIngressAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus, rhs: Cloud_Planton_Apis_V1_Code2cloud_Deploy_Endpoint_Standard_Rpc_StandardEndpointDnsResolutionStatus) -> Bool {
    if lhs.isResolvingToIngressAddress != rhs.isResolvingToIngressAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
