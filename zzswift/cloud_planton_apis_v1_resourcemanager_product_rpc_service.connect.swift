// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: cloud/planton/apis/v1/resourcemanager/product/rpc/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

///product command controller
public protocol Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductCommandControllerClientInterface {

    ///add a new product to a company
    @available(iOS 13, *)
    func `create`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product>

    ///update an existing product
    @available(iOS 13, *)
    func `update`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product>

    ///delete an existing product
    @available(iOS 13, *)
    func `delete`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product>

    ///restore a previously deleted product
    @available(iOS 13, *)
    func `restore`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductCommandControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductCommandControllerClient: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductCommandControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `create`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController/create", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `update`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController/update", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `delete`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController/delete", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `restore`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController/restore", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let create = Connect.MethodSpec(name: "create", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController", type: .unary)
            public static let update = Connect.MethodSpec(name: "update", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController", type: .unary)
            public static let delete = Connect.MethodSpec(name: "delete", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController", type: .unary)
            public static let restore = Connect.MethodSpec(name: "restore", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductCommandController", type: .unary)
        }
    }
}

///product query controller
public protocol Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductQueryControllerClientInterface {

    ///list all products on planton cloud for the requested page. This is intended to be used on back-office portal.
    @available(iOS 13, *)
    func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductList>

    ///get details of a product by product id
    @available(iOS 13, *)
    func `getByID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product>

    ///find products by company id.
    ///the response should only include the products that the authenticated user has access to.
    @available(iOS 13, *)
    func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Products>
}

/// Concrete implementation of `Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductQueryControllerClientInterface`.
public final class Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductQueryControllerClient: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductQueryControllerClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `list`(request: Cloud_Planton_Apis_V1_Commons_Rpc_Pagination_PageInfo, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductList> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductQueryController/list", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `getByID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_ProductId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Product> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductQueryController/getById", request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `findByCompanyID`(request: Cloud_Planton_Apis_V1_Resourcemanager_Company_Rpc_CompanyId, headers: Connect.Headers = [:]) async -> ResponseMessage<Cloud_Planton_Apis_V1_Resourcemanager_Product_Rpc_Products> {
        return await self.client.unary(path: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductQueryController/findByCompanyId", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let list = Connect.MethodSpec(name: "list", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductQueryController", type: .unary)
            public static let getByID = Connect.MethodSpec(name: "getById", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductQueryController", type: .unary)
            public static let findByCompanyID = Connect.MethodSpec(name: "findByCompanyId", service: "cloud.planton.apis.v1.resourcemanager.product.rpc.ProductQueryController", type: .unary)
        }
    }
}
