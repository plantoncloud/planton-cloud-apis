// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/planton/apis/v1/iam/authz/policy/rpc/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// response of iam policy by principal
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByPrincipal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id of the principal of the policy that is associated.
  /// principal could be email id of the user.
  public var principal: String {
    get {return _storage._principal}
    set {_uniqueStorage()._principal = newValue}
  }

  /// type of the principal id
  /// example values could be user/ company etc.;
  public var principalType: String {
    get {return _storage._principalType}
    set {_uniqueStorage()._principalType = newValue}
  }

  /// iam role details assigned to principal
  public var role: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole {
    get {return _storage._role ?? Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole()}
    set {_uniqueStorage()._role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return _storage._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {_uniqueStorage()._role = nil}

  /// id of the owner resource if the relation is of owner.
  /// a part from the direct relations that we have on an resource we have to show the relations of the resources that are linked.
  /// for example cloud account and company has owner relation.
  /// we show the relations of the owner company as well.
  public var ownerID: String {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  /// type of the owner id
  /// example values could be company/ product etc.;
  public var ownerType: String {
    get {return _storage._ownerType}
    set {_uniqueStorage()._ownerType = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// input message to get IAM policies of a resource.
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type of the resource for which we want to get iam policies
  /// example values could be company/ cloud_account etc.;
  public var resourceType: String = String()

  /// id of the resource to get iam policy
  public var resourceID: String = String()

  /// flag to get inherited policies from owner
  public var showInheritedPolicies: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// response to return all iam policies by principal
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of iam policies
  public var entries: [Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByPrincipal] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// input to add IAM policy of a resource
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of principal ids that are meant to be linked with the resource
  public var principalIds: [String] = []

  /// type of the principal
  /// example could be user/ company etc.;
  public var principalType: String = String()

  /// list of roles to be assigned to the principal ids
  public var roles: [String] = []

  /// type of the resource for which we want to add iam policies
  /// example values could be company/ cloud_account etc.;
  public var resourceType: String = String()

  /// id of the resource to add iam policy
  public var resourceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// input to remove IAM policy of a resource
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPolicyInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// principal id for which the iam policy has to be removed
  public var principalID: String = String()

  /// type of the principal
  /// example could be user/ company etc.;
  public var principalType: String = String()

  /// role code to be removed for the principal with resource
  public var role: String = String()

  /// type of the resource for which we want to remove iam policy
  /// example values could be company/ cloud_account etc.;
  public var resourceType: String = String()

  /// id of the resource to remove iam policy
  public var resourceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// input to remove multiple iam polices
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of remove iam policy inputs
  public var entries: [Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPolicyInput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// response of iam policy by role
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// iam role details assigned to principal
  public var role: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole {
    get {return _storage._role ?? Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole()}
    set {_uniqueStorage()._role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return _storage._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {_uniqueStorage()._role = nil}

  /// list of iam principals assigned with the role
  public var iamPrincipals: [Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal] {
    get {return _storage._iamPrincipals}
    set {_uniqueStorage()._iamPrincipals = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id of the principal of the policy that is associated.
  /// principal could be email id of the user.
  public var principal: String = String()

  /// type of the principal id
  /// example values could be user/ company etc.;
  public var principalType: String = String()

  /// id of the owner resource if the relation is of owner.
  /// a part from the direct relations that we have on an resource we have to show the relations of the resources that are linked.
  /// for example cloud account and company has owner relation.
  /// we show the relations of the owner company as well.
  public var ownerID: String = String()

  /// type of the owner id
  /// example values could be company/ product etc.;
  public var ownerType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// response to return all iam policies by role
public struct Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of iam policies
  public var entries: [Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByRole] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByPrincipal: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPolicyInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByRole: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal: @unchecked Sendable {}
extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.planton.apis.v1.iam.authz.policy.rpc"

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByPrincipal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPolicyByPrincipal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "principal"),
    2: .standard(proto: "principal_type"),
    3: .same(proto: "role"),
    4: .standard(proto: "owner_id"),
    5: .standard(proto: "owner_type"),
  ]

  fileprivate class _StorageClass {
    var _principal: String = String()
    var _principalType: String = String()
    var _role: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole? = nil
    var _ownerID: String = String()
    var _ownerType: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _principal = source._principal
      _principalType = source._principalType
      _role = source._role
      _ownerID = source._ownerID
      _ownerType = source._ownerType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._principal) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._principalType) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._role) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._ownerID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._ownerType) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._principal.isEmpty {
        try visitor.visitSingularStringField(value: _storage._principal, fieldNumber: 1)
      }
      if !_storage._principalType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._principalType, fieldNumber: 2)
      }
      try { if let v = _storage._role {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._ownerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerID, fieldNumber: 4)
      }
      if !_storage._ownerType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerType, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByPrincipal, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByPrincipal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._principal != rhs_storage._principal {return false}
        if _storage._principalType != rhs_storage._principalType {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._ownerType != rhs_storage._ownerType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetIamPolicyByResourceTypeAndResourceIdInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_type"),
    2: .standard(proto: "resource_id"),
    3: .standard(proto: "show_inherited_policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.resourceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.showInheritedPolicies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceType.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceType, fieldNumber: 1)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 2)
    }
    if self.showInheritedPolicies != false {
      try visitor.visitSingularBoolField(value: self.showInheritedPolicies, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_GetIamPolicyByResourceTypeAndResourceIdInput) -> Bool {
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.showInheritedPolicies != rhs.showInheritedPolicies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPoliciesByPrincipal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByPrincipal) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddIamPolicyInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "principal_ids"),
    2: .standard(proto: "principal_type"),
    3: .same(proto: "roles"),
    4: .standard(proto: "resource_type"),
    5: .standard(proto: "resource_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.principalIds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.principalType) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.roles) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourceType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.principalIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.principalIds, fieldNumber: 1)
    }
    if !self.principalType.isEmpty {
      try visitor.visitSingularStringField(value: self.principalType, fieldNumber: 2)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.roles, fieldNumber: 3)
    }
    if !self.resourceType.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceType, fieldNumber: 4)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_AddIamPolicyInput) -> Bool {
    if lhs.principalIds != rhs.principalIds {return false}
    if lhs.principalType != rhs.principalType {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPolicyInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveIamPolicyInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "principal_id"),
    2: .standard(proto: "principal_type"),
    3: .same(proto: "role"),
    4: .standard(proto: "resource_type"),
    5: .standard(proto: "resource_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.principalID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.principalType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.role) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourceType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.principalID.isEmpty {
      try visitor.visitSingularStringField(value: self.principalID, fieldNumber: 1)
    }
    if !self.principalType.isEmpty {
      try visitor.visitSingularStringField(value: self.principalType, fieldNumber: 2)
    }
    if !self.role.isEmpty {
      try visitor.visitSingularStringField(value: self.role, fieldNumber: 3)
    }
    if !self.resourceType.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceType, fieldNumber: 4)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPolicyInput, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPolicyInput) -> Bool {
    if lhs.principalID != rhs.principalID {return false}
    if lhs.principalType != rhs.principalType {return false}
    if lhs.role != rhs.role {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveIamPoliciesInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_RemoveIamPoliciesInput) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPolicyByRole"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .standard(proto: "iam_principals"),
  ]

  fileprivate class _StorageClass {
    var _role: Cloud_Planton_Apis_V1_Iam_Authz_Role_Rpc_IamRole? = nil
    var _iamPrincipals: [Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _role = source._role
      _iamPrincipals = source._iamPrincipals
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._role) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._iamPrincipals) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._role {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._iamPrincipals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._iamPrincipals, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByRole, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPolicyByRole) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._role != rhs_storage._role {return false}
        if _storage._iamPrincipals != rhs_storage._iamPrincipals {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPrincipal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "principal"),
    2: .standard(proto: "principal_type"),
    3: .standard(proto: "owner_id"),
    4: .standard(proto: "owner_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.principal) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.principalType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ownerID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ownerType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.principal.isEmpty {
      try visitor.visitSingularStringField(value: self.principal, fieldNumber: 1)
    }
    if !self.principalType.isEmpty {
      try visitor.visitSingularStringField(value: self.principalType, fieldNumber: 2)
    }
    if !self.ownerID.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerID, fieldNumber: 3)
    }
    if !self.ownerType.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPrincipal) -> Bool {
    if lhs.principal != rhs.principal {return false}
    if lhs.principalType != rhs.principalType {return false}
    if lhs.ownerID != rhs.ownerID {return false}
    if lhs.ownerType != rhs.ownerType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IamPoliciesByRole"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole, rhs: Cloud_Planton_Apis_V1_Iam_Authz_Policy_Rpc_IamPoliciesByRole) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
