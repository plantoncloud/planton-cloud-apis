syntax = "proto3";

package planton.apis.proto.v1.deploy.cloudinfra.kubecluster.state;

import "planton/apis/proto/v1/commons/audit/model.proto";
import "planton/apis/proto/v1/commons/cloud/gcp/resource/folder/state/model.proto";
import "planton/apis/proto/v1/commons/cloud/gcp/resource/project/state/model.proto";
import "planton/apis/proto/v1/commons/resource/model.proto";
import "planton/apis/proto/v1/commons/resource/options/resource_options.proto";
import "planton/apis/proto/v1/stack/state/model.proto";
import "planton/apis/proto/v1/deploy/cloudinfra/kubecluster/state/enums/enums.proto";

// kube-cluster state
message KubeClusterState {
  option (planton.apis.proto.v1.commons.resource.options.resource_type) = kube_cluster;
  option (planton.apis.proto.v1.commons.resource.options.is_runnable) = true;
  option (planton.apis.proto.v1.commons.resource.options.owner).type = company;
  option (planton.apis.proto.v1.commons.resource.options.owner).id_field_path = "spec.company_id";

  // event_type is event type after the command is processed
  // do refer the enums values for the possible event types
  planton.apis.proto.v1.deploy.cloudinfra.kubecluster.state.enums.KubeClusterEventType event_type = 99;

  // api version for the resource
  string api_version = 1;

  // kind for the resource
  string kind = 2;

  // metadata for the resource
  planton.apis.proto.v1.commons.resource.Metadata metadata = 3;

  // kube-cluster spec
  KubeClusterSpecState spec = 4;

  // kube-cluster status
  KubeClusterStatusState status = 5;
}

// KubeClusterSpec is a message type that defines the specifications for a kube-cluster on Planton Cloud.
message KubeClusterSpecState {
  // company_id is a required, immutable field that uniquely identifies the company associated with the kube-cluster.
  string company_id = 1;

  // endpoint_domains is a list of valid DNS domain names for the endpoints hosted in the environment.
  // Each endpoint domain name must already exist and be associated with the company on Planton Cloud.
  repeated string endpoint_domains = 2;

  // kube-cluster kubernetes addons spec
  KubeClusterAddonsSpecState kubernetes_addons = 3;

  // provider is an enumeration field that represents the kubernetes provider for the kube-cluster.
  string kubernetes_provider = 4;

  // gcp is a field for GCP-specific kube-cluster specifications.
  // This field is only set if the kubernetes-provider is GCP GKE.
  KubeClusterGcpSpecState gcp = 5;

  // aws is a field for AWS-specific kube-cluster specifications.
  // This field is only set if the kubernetes-provider is AWS EKS.
  KubeClusterAwsSpecState aws = 6;
}

//kube-cluster kubernetes addons
message KubeClusterAddonsSpecState {
  //flag to control postgres-operator installation
  bool is_install_postgres_operator = 1;
  //flag to control kafka-operator installation
  bool is_install_kafka_operator = 2;
  //flag to control solr-operator installation
  bool is_install_solr_operator = 3;
  //flag to control kubecost
  bool is_install_kubecost = 4;
  //planton-cloud-kube-agent addon spec
  KubeClusterAddonsPlantonCloudKubeAgentSpecState planton_cloud_kube_agent = 5;
}

//planton-cloud-kube-agent addon spec
message KubeClusterAddonsPlantonCloudKubeAgentSpecState {
  // flag to control planton-cloud-kube-agent installation
  bool is_install = 1;
  // machine_account_email is the email of the machine-account to be used by planton-cloud-kube-agent.
  // this is only created if is_install is true.
  string machine_account_email = 2;
}

// kube-cluster status
message KubeClusterStatusState {
  // resource lifecycle
  planton.apis.proto.v1.commons.resource.RunnableResourceLifecycle lifecycle = 99;

  // system audit info
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job
  planton.apis.proto.v1.stack.state.StackJobState stack_job = 97;

  // status of the kube-cluster.
  // gcp status
  // this attribute is only populated for kube-clusters created in google cloud accounts.
  KubeClusterGcpStatusState gcp = 1;

  // status of the kube-cluster in aws
  KubeClusterAwsStatusState aws = 2;
}

// specification state for kube-cluster in gcp
message KubeClusterGcpSpecState {
  //id of the gcp cloud account to be used for creating kube-cluster resources.
  string gcp_cloud_account_id = 1;

  // gcp billing account id required to link kube-cluster projects.
  // planton cloud creates one/two gcp projects per kube-cluster.
  // these projects will be linked to this billing account.
  string billing_account_id = 2;

  // valid gcp region in which to create the kube-cluster.
  // warning: kube-cluster will recreated if this value is updated.
  // https://cloud.google.com/compute/docs/regions-zones
  string region = 3;

  // valid gcp zone in which to create the kube-cluster.
  // https://cloud.google.com/compute/docs/regions-zones
  string zone = 4;

  // flag to indicate that the cluster should be created in a shared vpc network.
  // warning: kube-cluster will be recreated if this is updated.
  // note: vpc network is created in a separate project when this is enabled.
  bool is_create_shared_vpc = 5;

  // flag to toggle workload logs for kube-cluster environment.
  // when workload logs is enabled, the logs from kubernetes pods would be sent to google cloud logging.
  // warning: enabling log forwarding increases cloud bills depending on the log volume.
  bool is_workload_logs_enabled = 6;

  // cluster autoscaling configuration
  KubeClusterGcpClusterAutoscalingConfigSpecState cluster_autoscaling_config = 7;

  // kube-cluster node pools
  repeated KubeClusterNodePoolGcpState node_pools = 8;
}

//cluster autoscaling configuration for gke clusters.
// https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
message KubeClusterGcpClusterAutoscalingConfigSpecState {
  // Flag to control autoscaling of kubernetes worker nodes.
  // When set to true, the cluster will automatically scale up or down based on the resource requirements.
  bool is_enabled = 1;

  // The minimum number of CPU cores that the cluster can down up to when autoscaling is enabled.
  // The number of CPU cores is a sum across all nodes in the cluster.
  int64 cpu_min_cores = 2;

  // The maximum number of CPU cores that the cluster can scale up to when autoscaling is enabled.
  // The number of CPU cores is a sum across all nodes in the cluster.
  int64 cpu_max_cores = 3;

  // The minimum amount of memory in gigabytes (GB) that the cluster can scale down to when autoscaling is enabled.
  // The memory size is a sum across all nodes in the cluster.
  int64 memory_min_gb = 4;

  // The maximum amount of memory in gigabytes (GB) that the cluster can scale up to when autoscaling is enabled.
  // The memory size is a sum across all nodes in the cluster.
  int64 memory_max_gb = 5;
}

// status of the kube-cluster in gcp
message KubeClusterGcpStatusState {
  // a folder is created with the cloud account folder as parent for the kube-cluster.
  // resources created for kube-cluster are linked to this folder as the parent.
  // children for a cloud account are the gcp projects in the kube-cluster.
  planton.apis.proto.v1.commons.cloud.gcp.resource.folder.state.GcpFolderState folder = 1;

  // projects created on google cloud for this kube-cluster
  // this value is updated upon successful kube-cluster creation stack-job.
  // gcp project info for the kube-cluster project
  planton.apis.proto.v1.commons.cloud.gcp.resource.project.state.GcpProjectState container_cluster_project = 2;

  // gcp project info for vpc-network project
  // note: a separate project is only created when the kube-cluster is configured to use shared-vpc.
  // if the kube-cluster is not configured to use a shared-vpc, this project info will be same as
  // kube-cluster project details as the vpc-network is created in the same project as the kube-cluster.
  planton.apis.proto.v1.commons.cloud.gcp.resource.project.state.GcpProjectState vpc_network_project = 3;

  // kube-cluster endpoint.
  string cluster_endpoint = 4;

  // kube-cluster certificate-authority-data.
  string cluster_ca_data = 5;

  // ip address of the NAT for egress traffic.
  // this is the ip addresses attached to all network requests originating from the kube-cluster.
  // if server receiving requires the exact ip of the microservice to add it the firewall rules, this is the one.
  string external_nat_ip = 6;

  // internal ingress ip.
  string internal_ingress_ip = 7;

  // internal ingress ip.
  string external_ingress_ip = 8;

  // google service account email created for cert-manager addon workload identity.
  // this is the service account that is used by cert-manager component to update dns records
  // to issue ssl certificates from letsencrypt provided for product endpoints.
  // this service account is configured with permissions required to manage dns entries for issuing certs.
  string cert_manager_gsa_email = 9;

  // google service account email created for external-secrets addon workload identity.
  // this is the service account that is used by external-secrets component to fetch secrets from the
  // secrets-manager on the cloud provider and make them available to the microservices.
  string external_secrets_gsa_email = 10;

  // google service account email created for external-secrets addon workload identity.
  // this key for this service account is used for deploying workloads like microservices,
  // postgres clusters, kafka clusters onto the kube-cluster kube-cluster/s.
  string workload_deployer_gsa_email = 11;

  // base64 encoded workload deployer google service account key.
  // this service account key is used as a credential for deploying workloads like microservices,
  // postgres clusters, kafka clusters onto the kube-cluster kube-cluster/s.
  string workload_deployer_gsa_key_base64 = 12;
}

// gcp kube-cluster node pool state
message KubeClusterNodePoolGcpState {
  // The audit information for system tracking
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 99;
  // Name of the node pool. The name is added as a label to the node pool that can be used to schedule workloads.
  string name = 1;

  // Unique ID of the node pool. Convention for the node-pool-id is 'np-<kube-cluster-id>-<node-pool-name>'.
  // Planton Cloud ignores the input value and assigns the ID as per the convention.
  string id = 2;

  // Type of machine for the node pool. For example, 'n2-custom-8-16234'.
  string machine_type = 3;

  // Minimum number of nodes in the node pool. Defaults to 1.
  int32 min_node_count = 4;

  // Maximum number of nodes in the node pool. Defaults to 1.
  int32 max_node_count = 5;

  // Flag to enable spot instances on the node pool. Defaults to false.
  bool is_spot_enabled = 6;
}

//specification for kube-cluster in aws
message KubeClusterAwsSpecState {
  //id of the aws cloud account to be used for creating kube-cluster resources.
  string aws_cloud_account_id = 1;

  // valid aws region in which to create the kube-cluster.
  // warning: kube-cluster will recreated if this value is updated.
  // https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
  string region = 2;

  // (optional) id of the vpc to be used for creating kube-cluster.
  // if an id is not provided, a new vpc will be created.
  // warning: kube-cluster will be recreated if this is updated.
  string vpc_id = 3;

  // aws eks worker node-groups management mode
  string workers_management_mode = 4;
}

// status of the kube-cluster in aws
message KubeClusterAwsStatusState {
  // id of the vpc in which the kube-cluster is created
  string cluster_vpc_id = 1;

  // kube-cluster endpoint.
  string cluster_endpoint = 2;

  // kube-cluster certificate-authority-data.
  // this value is updated upon successful kube-cluster creation stack-job.
  string cluster_ca_data = 3;
}
