syntax = "proto3";

package planton.apis.proto.v1.deploy.endpoint.standard.rpc;

import "planton/apis/proto/v1/commons/rpc/pagination/model.proto";
import "planton/apis/proto/v1/integration/kubernetes/resource/certificate.proto";
import "planton/apis/proto/v1/iam/authz/extensions/extensions.proto";
import "planton/apis/proto/v1/deploy/endpoint/standard/rpc/model.proto";
import "planton/apis/proto/v1/resourcemanager/environment/rpc/model.proto";
import "planton/apis/proto/v1/resourcemanager/product/rpc/model.proto";

//standard-endpoint command controller
service StandardEndpointCommandController {
  //create standard-endpoint
  rpc create(StandardEndpoint) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = environment;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_create;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "spec.owner.environment_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create standard-endpoint";
  }

  //update an existing standard-endpoint
  rpc update(StandardEndpoint) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update standard-endpoint";
  }

  //delete standard-endpoint
  rpc delete(StandardEndpointId) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_delete;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete standard-endpoint";
  }

  //restore a deleted standard-endpoint
  rpc restore(StandardEndpoint) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_restore;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore standard-endpoint";
  }
}

//standard-endpoint query controller
service StandardEndpointQueryController {
  //list all standard-endpoints on planton cloud for the requested page. This is intended for use on portal.
  rpc list(planton.apis.proto.v1.commons.rpc.pagination.PageInfo) returns (StandardEndpointList);

  //look up standard-endpoint using standard-endpoint id
  rpc getById(StandardEndpointId) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view standard-endpoint";
  }

  //find standard-endpoints by product id.
  //response contains only the endpoint domains that the authenticated user account id as viewer access to.
  rpc findByProductId(planton.apis.proto.v1.resourcemanager.product.rpc.ProductId) returns (StandardEndpoints);

  //find standard-endpoints by environment id.
  //response contains only the endpoint domains that the authenticated user account id as viewer access to.
  rpc findByEnvironmentId(planton.apis.proto.v1.resourcemanager.environment.rpc.EnvironmentId) returns (StandardEndpoints);

  //find certificates for standard-endpoint
  rpc findStandardEndpointCertificates(StandardEndpointId) returns (planton.apis.proto.v1.integration.kubernetes.resource.Certificates) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to look up standard-endpoint certificates";
  }

  //check status of dns resolution for standard-endpoint.
  //confirms if the dns of the standard-endpoint domain is resolving to the correct address.
  rpc getStandardEndpointDsnResolutionStatus(StandardEndpointId) returns (StandardEndpointDnsResolutionStatus) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to check standard-endpoint dnszone status";
  }
}

//standard-endpoint stack controller
service StandardEndpointStackController {
  //preview standard-endpoint stack
  rpc preview(StandardEndpoint) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview standard-endpoint stack";
  }

  //apply standard-endpoint stack
  rpc apply(StandardEndpointId) returns (StandardEndpoint) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = standard_endpoint;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = standard_endpoint_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to apply standard-endpoint stack";
  }
}
