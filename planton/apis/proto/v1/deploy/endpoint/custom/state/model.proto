syntax = "proto3";

package planton.apis.proto.v1.deploy.endpoint.custom.state;

import "planton/apis/proto/v1/commons/audit/model.proto";
import "planton/apis/proto/v1/commons/resource/model.proto";
import "planton/apis/proto/v1/commons/resource/options/resource_options.proto";
import "planton/apis/proto/v1/stack/state/model.proto";
import "planton/apis/proto/v1/deploy/endpoint/custom/state/enums/enums.proto";

//custom-endpoint state
message CustomEndpointState {
  option (planton.apis.proto.v1.commons.resource.options.resource_type) = custom_endpoint;
  option (planton.apis.proto.v1.commons.resource.options.is_runnable) = false;
  option (planton.apis.proto.v1.commons.resource.options.owner).type = product;
  option (planton.apis.proto.v1.commons.resource.options.owner).id_field_path = "spec.product_id";

  //event-type
  planton.apis.proto.v1.deploy.endpoint.custom.state.enums.CustomEndpointEventType event_type = 99;

  //resource api version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  planton.apis.proto.v1.commons.resource.Metadata metadata = 3;

  //spec
  CustomEndpointSpecState spec = 4;

  //status
  CustomEndpointStatusState status = 5;
}

//custom-endpoint spec state
message CustomEndpointSpecState {
  //the company to which the standard-endpoint belongs to.
  //value is computed from the product.
  string company_id = 1;

  //the product to which the custom-endpoint to be added.
  string product_id = 2;

  //the kube-cluster in which the custom-endpoint resources are created in.
  //value is computed from the backend-environment.
  string kube_cluster_id = 3;

  //environment to which the requests to the endpoint domain are to be routed to.
  string backend_environment_id = 4;

  //(optional for create) flag to toggle tls for standard-endpoint.
  //defaults to "false".
  //(important note) certificates are not created for endpoints that do not need tls.
  //(important note) endpoint domains with out tls enabled are not eligible to be used for
  //creating endpoints for postgres-clusters or kafka-clusters.
  bool is_tls_enabled = 5;

  //flag to control virtual service configuration compatible for grpc-web clients.
  //grpc-web clients would rely on extra headers added by envoy proxy.
  bool is_grpc_web_compatible = 6;

  //id of the project on google cloud containing the dns zone for the endpoint-domain.
  //this value is looked up from the dns-domains in the company dns data.
  //this value is required for configuring the cert-issuer to perform dns validations.
  string dns_zone_gcp_project_id = 7;

  //external ingress ip.
  //ingress ip address configured for the ingress-endpoint-domain.
  //this value is computed from the kube-cluster.
  string external_ingress_ip = 8;

  //email of the service account created for cert-manager component on the kube-cluster in which the
  //environment that the standard-endpoint belongs to.
  //this value is used for ensuring that the service account has required permissions to insert dns records in
  //the dns zone to be able to complete dns01 challenges.
  //this attribute is only populated if the environment is hosted in a gcp kube-cluster.
  //this value is computed from the kube-cluster.
  string cert_manager_gsa_email = 9;

  //routes to configure backends for url paths of the domain.
  //routes allow configuring requests to be routed to different microservices based on the url path.
  //ex: if the endpoint domain name is console.example.com, then console.example.com/public/api/* can be
  //to be sent to public-api microservice and console.example.com/private/api/* can be configured to route to
  //route to private-api microservice.
  repeated CustomEndpointRouteState routes = 10;
}

//custom-endpoint status
message CustomEndpointStatusState {
  // resource lifecycle
  planton.apis.proto.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // system audit info
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job
  planton.apis.proto.v1.stack.state.StackJobState stack_job = 97;

  //may be add the name of the certificate that can be used for checking the status?
}

//custom-endpoint route state
message CustomEndpointRouteState {
  //system audit info
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 99;

  //url path for the custom-endpoint route.
  //(important) url path prefix combined with custom_endpoint_id combined form the composite key.
  //(note) if endpoint domain name is console.example.com, and if the url_path_prefix is /api, then
  //all requests that match console.example.com/api/* are forwarded to the backend microservice configured in
  //this route.
  string url_path_prefix = 1;

  //id of the backend microservice-instance to configure the forwarding rule.
  //ex: msi-planton-pcs-prod-company-main
  string backend_microservice_instance_id = 2;

  //service port to which the requests matching the url
  //defaults to 80 if the input contains 0.
  int32 backend_microservice_service_port = 3;

  //backend kubernetes endpoint to configure the forwarding rule.
  //this value is computed from the status of the configured microservice-instance
  string backend_kubernetes_endpoint = 4;
}
