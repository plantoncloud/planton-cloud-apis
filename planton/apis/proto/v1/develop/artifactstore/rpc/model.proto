syntax = "proto3";

package planton.product.proto.v1.artifactstore.rpc;

import "google/protobuf/timestamp.proto";
import "planton/apis/proto/v1/commons/audit/model.proto";
import "planton/apis/proto/v1/commons/resource/field/options/resource_field_options.proto";
import "planton/apis/proto/v1/commons/resource/metadata/options/resource_metadata_options.proto";
import "planton/apis/proto/v1/commons/resource/model.proto";
import "planton/apis/proto/v1/commons/resource/options/resource_options.proto";
import "planton/apis/proto/v1/commons/rpc/pagination/google/model.proto";
import "planton/apis/proto/v1/stack/rpc/model.proto";
import "planton/apis/proto/v1/develop/artifactstore/rpc/enums/enums.proto";

//artifact-store
message ArtifactStore {
  option (planton.apis.proto.v1.commons.resource.options.resource_type) = artifact_store;
  option (planton.apis.proto.v1.commons.resource.options.is_runnable) = false;
  option (planton.apis.proto.v1.commons.resource.options.owner).type = product;
  option (planton.apis.proto.v1.commons.resource.options.owner).id_field_path = "spec.product_id";

  option (planton.apis.proto.v1.commons.resource.metadata.options.is_id_required) = false;
  option (planton.apis.proto.v1.commons.resource.metadata.options.id_prefix) = "afs";
  //id format "afs-<product-id>-<artifact-store-name>"
  option (planton.apis.proto.v1.commons.resource.metadata.options.is_id_computed) = true;
  //https://regex101.com/r/QbMSjf/1
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_regex) = "^[a-z][a-z0-9]*(-[a-z0-9]+)*$";
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_min_length) = 1;
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_max_length) = 8;
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_constraints_description) = "At least 1 character. Lowercase letters, numbers, and hyphens. Must start with lowercase letter. Must not start or end with hyphen. Length must be under 8 characters.";

  //resource api-version
  string api_version = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //resource kind
  string kind = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //resource metadata
  planton.apis.proto.v1.commons.resource.Metadata metadata = 3;

  //resource spec
  ArtifactStoreSpec spec = 4;

  //resource status
  ArtifactStoreStatus status = 5;
}

//artifact-store spec
message ArtifactStoreSpec {
  //company to which the artifact-store belongs to.
  string company_id = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_computed) = true
  ];

  //product to which the artifact-store belongs to.
  string product_id = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true,
    (planton.apis.proto.v1.commons.resource.field.options.is_immutable) = true
  ];

  //username used to pull and push changes to/from a repository on buf.build registry.
  //this value is used in ci/cd pipelines of code-projects
  string buf_username = 3;

  //token used to pull and push changes to/from a repository on buf.build registry.
  //this value is used in ci/cd pipelines of code-projects
  string buf_token = 4;

  //base64 encoded git ssh key to clone golang code projects as part of code pipeline executions.
  //used in code pipelines which would require git authentication to fetch dependencies that rely on git.
  //both golang and swift code projects use git for dependency management.
  string go_module_fetch_git_ssh_key_base64 = 5;

  //provider for the artifact-store repositories
  planton.product.proto.v1.artifactstore.rpc.enums.ArtifactStoreRepoProvider repo_provider = 6 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true,
    (planton.apis.proto.v1.commons.resource.field.options.is_immutable) = true
  ];

  //specification for google cloud artifact registry.
  //this attribute is only populated when the artifact-store repo provider is artifact-registry on google cloud.
  ArtifactStoreGcpArtifactRegistrySpec gcp_artifact_registry = 7;
}

//artifact-store status
message ArtifactStoreStatus {
  // resource lifecycle
  planton.apis.proto.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // system audit info
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job
  planton.apis.proto.v1.stack.rpc.StackJob stack_job = 97;

  //status for artifact-store repositories created on gcp artifact-registry.
  //this is only populated when the gcp artifact-registry is configured as the repo-provider.
  ArtifactStoreGcpArtifactRegistryStatus gcp_artifact_registry = 1;
}

//spec for gcp artifact-registry repo provider for artifact-store
message ArtifactStoreGcpArtifactRegistrySpec {
  //id of the gcp cloud account in which the artifact-store repositories are to be created.
  //the allowed values for this attribute are all the gcp cloud accounts that the parent company of the product
  //has required permissions to create artifact-store in.
  string gcp_cloud_account_id = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true,
    (planton.apis.proto.v1.commons.resource.field.options.is_immutable) = true
  ];

  //id of the gcp project in which the artifact-registry resources are to be created.
  //this is computed from the configured gcp cloud-account.
  //artifact-registry resources are created in core-infra project created in the connected gcp cloud-account.
  string project_id = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_computed) = true
  ];

  //gcp region in which the artifact-store is to be created ex: us-west2.
  //choosing the closest region for the kube-clusters in which the environments of the product are
  //hosted reduces the service startup time as the container images are downloaded faster.
  string region = 3 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //flag to control access to artifacts published to repositories without any authentication.
  //this is useful for publishing artifacts for opensource projects.
  bool is_external = 4;
}

//status for gcp artifact-registry repo provider for artifact-store
message ArtifactStoreGcpArtifactRegistryStatus {
  //email of the reader service account.
  string reader_service_account_email = 1;

  //base64 encoded key of the reader service account.
  string reader_service_account_key_base64 = 2;

  //email of the writer service account.
  string writer_service_account_email = 3;

  //base64 encoded key of the writer service account.
  string writer_service_account_key_base64 = 4;

  //name of the docker repo.
  string docker_repo_name = 5;

  //hostname of the docker repo.
  string docker_repo_hostname = 6;

  //url for the docker repository.
  string docker_repo_url = 7;

  //name of the maven repo.
  string maven_repo_name = 8;

  //url for the maven repository.
  string maven_repo_url = 9;

  //name of the npm repo.
  string npm_repo_name = 10;

  //name of the python repo.
  string python_repo_name = 11;
}

//wrapper for artifact-store id
message ArtifactStoreId {
  string value = 1;
}

//response for paginated query to list artifact-stores
message ArtifactStoreList {
  int32 total_pages = 1;
  repeated ArtifactStore entries = 2;
}

//list of artifact-stores
message ArtifactStores {
  repeated ArtifactStore entries = 1;
}

//input to get a paginated list of resources with (proxy google artifact-registry server)
message ListByArtifactStoreIdRepoNameInput {
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  planton.apis.proto.v1.commons.rpc.pagination.google.GooglePageInfo page_info = 1;
  //id of the artifact-store
  string artifact_store_id = 2;
  //name of the repository
  string repo_name = 3;
}

//https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/artifact.proto
//docker image definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
message DockerImage {
  //Required. registry_location, project_id, repository_name and image id forms a unique
  //image
  //name:`projects/<project_id>/locations/<location>/repository/<repository_name>/dockerImages/<docker_image>`.
  //For example,
  //"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/
  //nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
  //where "us-west4" is the registry_location, "test-project" is the
  //project_id, "test-repo" is the repository_name and
  //"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf"
  //is the image's digest.
  string name = 1;

  //Required. URL to access the image.
  //Example:
  //us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
  string uri = 2;

  //Tags attached to this image.
  repeated string tags = 3;

  //Calculated size of the image.
  //This field is returned as the 'metadata.imageSizeBytes' field in the
  //Version resource.
  int64 image_size_bytes = 4;

  //Time the image was uploaded.
  google.protobuf.Timestamp upload_time = 5;

  //Media type of this image, e.g.
  //"application/vnd.docker.distribution.manifest.v2+json".
  //This field is returned as the 'metadata.mediaType' field in the
  //Version resource.
  string media_type = 6;

  //The time this image was built.
  //This field is returned as the 'metadata.buildTime' field in the
  //Version resource.
  //The build time is returned to the client as an RFC 3339 string, which can
  //be easily used with the JavaScript Date constructor.
  google.protobuf.Timestamp build_time = 7;
}

//response for paginated query to list docker images from artifact-store docker repo (proxy google artifact-registry server)
message ArtifactStoreDockerImageList {
  //docker images list
  repeated DockerImage entries = 1;
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  string next_page_token = 2;
}

//https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/package.proto
//artifact package definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
//Packages are named collections of versions in google artifact-store
message ArtifactStorePackage {

  //The name of the package, for example:
  //"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1".
  //If the package ID part contains slashes, the slashes are escaped.
  string name = 1;

  //The display name of the package.
  string display_name = 2;

  //The time when the package was created.
  google.protobuf.Timestamp create_time = 5;

  //The time when the package was last updated. This includes publishing a new
  //version of the package.
  google.protobuf.Timestamp update_time = 6;
}

//response for paginated query to list packages from artifact-store repository (proxy google artifact-registry server)
message ArtifactStorePackageList {
  // list of artifact-store packages
  repeated ArtifactStorePackage entries = 1;
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  string next_page_token = 2;
}

//https://github.com/googleapis/googleapis/blob/1a54b1fa9b194bfef22de18592a6512e51c9afe2/google/devtools/artifactregistry/v1/version.proto
//The body of a version resource. A version resource represents a
//collection of components, such as files and other data. This may correspond
//to a version in many package management schemes.
//artifact package version definition from googleapis protobuf definitions. copied here to generate stubs using planton pipelines.
message ArtifactStorePackageVersion {
  //The name of the version, for example:
  //"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1".
  //If the package or version ID parts contain slashes, the slashes are
  //escaped.
  string name = 1;
  //Optional. Description of the version, as specified in its metadata.
  string description = 3;
  //The time when the version was created.
  google.protobuf.Timestamp create_time = 5;
  //The time when the version was last updated.
  google.protobuf.Timestamp update_time = 6;
}

//input to get a paginated list of package versions with (proxy google artifact-registry server)
message ListByArtifactStoreIdPackageNameInput {
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  planton.apis.proto.v1.commons.rpc.pagination.google.GooglePageInfo page_info = 1;
  //id of the artifact-store
  string artifact_store_id = 2;
  //name of the package required to retrieve versions
  string package_name = 3;
}

//response for paginated query to list packages from artifact-store repository (proxy google artifact-registry server)
message ArtifactStorePackageVersionList {
  // list of artifact-store packages
  repeated ArtifactStorePackageVersion entries = 1;
  //The token to retrieve the next page of packages, or empty if there are no
  //more packages to return.
  //note: this style of pagination is different from the rest of the system. the reason for different style is because
  //this input is simply used for rpcs which act as a proxy between planton clients and google cloud apis.
  string next_page_token = 2;
}

//input for command to delete a package version from artifact-store
message DelArtifactStorePackageVersionCommandInput {
  //id of the artifact-store
  string artifact_store_id = 1;
  //name of the package required to retrieve versions
  string package_version_name = 2;
}
