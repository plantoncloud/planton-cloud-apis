syntax = "proto3";

package planton.product.proto.v1.sourcecode.pipeline.common.rpc;

import "planton/apis/proto/v1/develop/sourcecode/project/rpc/model.proto";
import "planton/apis/proto/v1/develop/artifactstore/rpc/model.proto";

import "planton/apis/proto/v1/resourcemanager/environment/rpc/model.proto";
import "planton/apis/proto/v1/deploy/microservice/rpc/model.proto";

//input for query rpc to get dynamically generated code pipeline template
message GenerateCodePipelineTemplateQueryInput {
  //code project profile
  planton.product.proto.v1.sourcecode.project.rpc.CodeProjectProfile code_project_profile = 1;
  //git remote url used for looking up code project
  string git_remote_url = 2;
  //list of microservice-instances declared in _kustomize directory
  repeated planton.product.proto.v1.microservice.rpc.MicroserviceInstance microservice_instances = 3;
}

message GenerateCodePipelineTemplateQueryResp {
  //input used for generating the template
  CodePipelineBuildTemplateInput template_input = 1;
  //template generated based on the provided inputs
  string template_output = 2;
}

//container(docker) images to be used in code pipeline templates
message CodePipelineTemplateContainerImages {
  string docker_build = 1;
  string golang_build = 2;
  string java_build = 3;
  string javascript_build = 4;
  string planton_cli = 5;
  string protobuf_build = 6;
}

//gitlab pipeline template is used as input data model for processing gitlab build job templates
//templating frameworks like apache freemarker in java or the built in templating engine in golang can use this data model as input for rendering the template.
message CodePipelineBuildTemplateInput {
  //name of the cli environment to be used. this can be test or live.
  string planton_cloud_cli_environment = 1;
  //artifact-store to be used by the pipeline
  planton.product.proto.v1.artifactstore.rpc.ArtifactStore artifact_store = 2;
  //container images(docker) to be used inside code pipeline templates
  CodePipelineTemplateContainerImages template_container_images = 3;
  //container image to be used in container image build jobs.
  //container image tag is not included in the value of this attribute.
  //git commit short sha is used as the tag for the image.
  string project_container_image = 4;
}

//input used for rendering job template for microservice deployment to each environment
message CodePipelineDeployTemplateJobInput {
  //container images(docker) to be used inside code pipeline templates
  CodePipelineTemplateContainerImages template_container_images = 1;
  //environment
  planton.apis.proto.v1.resourcemanager.environment.rpc.Environment environment = 2;
  //microservice-instance
  planton.product.proto.v1.microservice.rpc.MicroserviceInstance microservice_instance = 3;
  //container image tag is not included in the value of this attribute.
  //git commit short sha is used as the tag for the image.
  string project_container_image = 4;
  //flag to indicate if manual gate is enabled for the deployment environment.
  //this flag is used for setting `when` attribute of the gitlab pipeline https://docs.gitlab.com/ee/ci/yaml/#when
  bool is_manual_gate_required = 5;
  //name of the cli environment to be used. this can be test or live.
  string planton_cloud_cli_environment = 6;
}
