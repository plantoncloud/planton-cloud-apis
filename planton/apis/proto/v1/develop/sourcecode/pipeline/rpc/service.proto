syntax = "proto3";

package planton.product.proto.v1.sourcecode.pipeline.common.rpc;

import "planton/apis/proto/v1/develop/sourcecode/project/rpc/model.proto";
import "planton/apis/proto/v1/develop/sourcecode/pipeline/rpc/model.proto";

import "planton/apis/proto/v1/iam/authz/extensions/extensions.proto";

//code pipeline command controller
service CodePipelineCommandController {
  //add or update magic pipeline for a code project
  rpc addOrUpdatePipeline(planton.product.proto.v1.sourcecode.project.rpc.CodeProjectId) returns (planton.product.proto.v1.sourcecode.project.rpc.CodeProject)  {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = code_project_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to integration code pipeline for code project";
  }
}

//code pipeline query controller
service CodePipelineQueryController {
  //generate code pipeline template for a code project
  rpc generateCodePipelineTemplate(GenerateCodePipelineTemplateQueryInput) returns (GenerateCodePipelineTemplateQueryResp) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    //note: field-path can not be added as id of target resource is not directly present in the input
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code-pipeline template";
  }
  //get code-pipeline template files for a code project
  rpc getPipelineFilesByCodeProjectId(planton.product.proto.v1.sourcecode.project.rpc.CodeProjectId) returns (planton.product.proto.v1.sourcecode.project.rpc.CodeProjectFiles) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = code_project;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = code_project_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get code project profile";
  }
}
