syntax = "proto3";

package planton.apis.proto.v1.integration.github.proxy.rpc;

import "planton/apis/proto/v1/integration/github/proxy/rpc/enums/enums.proto";
import "planton/apis/proto/v1/code2cloud/develop/sourcecode/project/rpc/model.proto";
import "planton/apis/proto/v1/code2cloud/develop/sourcecode/server/rpc/enums/enums.proto";

//github client info
message GithubClientInfo {
  //github host to send the request to ex: https://github.com
  string github_host = 1;
  //github authorization type
  planton.apis.proto.v1.integration.github.proxy.rpc.enums.GithubApiAuthorizationType authorization_type = 2;
  //api token to be used to query github server when authorization type is api token
  string api_token = 3;
  //github app installation details to be used to query github server when authorization type is github app
  GithubAppInstallation github_app_installation = 4;
}

//github app installation information
message GithubAppInstallation {
  //id of the github app
  int64 github_app_id = 1;
  //base64 encoded private key generated for the github app
  string github_app_private_key_base64 = 2;
  //id of the github app installation
  int64 github_app_install_id = 3;
  //type of the account of the github app installation
  planton.apis.proto.v1.code2cloud.develop.sourcecode.server.rpc.enums.GithubAppInstallOwnerType install_owner_type = 4;
  //id of the github app installation.
  //this is the name of the organization when the app is installed on an organization and id of the user when
  //the app is installed on a personal user account.
  //this value is stored in the system as group_id_on_code_server_host attribute.
  string github_app_installation_owner_id = 5;
}

//input to list organization or user repositories on github
//https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories
message ListRepositoriesQueryInput {
  //github client info
  GithubClientInfo github_client_info = 1;
}

//input to list organization or user repositories on github
//https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories
message GetRepositoryQueryInput {
  //github client info
  GithubClientInfo github_client_info = 1;
  //id of the repository on github
  string repository_id = 2;
}

//input for command to create a new git repository on github
message CreRepositoryCommandInput {
  //github client info
  GithubClientInfo github_client_info = 1;
  //name of the new repository to be created on github
  string repository_name = 2;
}

//input for command to apply a cookiecutter on a code project on github
message GithubApplyTemplateCommandInput {
  //github client info required to lookup template repo on github
  GithubClientInfo template_project_github_client_info = 1;
  //github client info required to clone and push changes for target project
  GithubClientInfo target_project_github_client_info = 2;
  //template code project
  planton.apis.proto.v1.code2cloud.develop.sourcecode.project.rpc.CodeProject template_project = 3;
  //code project for which the template should be applied
  planton.apis.proto.v1.code2cloud.develop.sourcecode.project.rpc.CodeProject target_code_project = 4;
}

//input for command to add list of secrets to a github repository
message AddSecretsToRepoCommandInput {
  //github client info required to lookup template repo on github
  GithubClientInfo github_client_info = 1;
  //id of the github repository to which the secrets are to be added
  string github_repository_id = 2;
  //secrets to be added to the repository
  //the key is the name of the secret and value is the value of the secret
  map<string, string> secrets = 3;
}

//input for command to add list of secrets to a github organization
message AddSecretsToOrgCommandInput {
  //github client info required to lookup template repo on github
  GithubClientInfo github_client_info = 1;
  //id of the github organization to which the secrets are to be added
  string github_org_id = 2;
  //secrets to be added to the organization
  //the key is the name of the secret and value is the value of the secret
  map<string, string> secrets = 3;
}

//input for query to get code project profile of a github repository
message GetGithubCodeProjectProfileQueryInput {
  //github client info required to clone github repository
  GithubClientInfo github_client_info = 1;
  //id of the github repository
  string github_repository_id = 2;
}

//input for command to synchronize magic pipeline files on github
message SynchronizeGithubMagicPipelineFilesCommandInput {
  //github client info required to lookup template repo on github
  GithubClientInfo github_client_info = 1;
  //id of the github repository to which the files are to be added
  string github_repository_id = 2;
  //prefix to be used for identifying the existing magic pipelines to be deleted before adding new files
  string magic_pipeline_files_prefix = 3;
  //files to be added to the repository
  repeated planton.apis.proto.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectFile magic_pipeline_files = 4;
}
