syntax = "proto3";

package planton.apis.proto.v1.code2cloud.develop.sourcecode.server.rpc;

import "planton/apis/proto/v1/commons/audit/model.proto";
import "planton/apis/proto/v1/commons/resource/field/options/resource_field_options.proto";
import "planton/apis/proto/v1/commons/resource/options/resource_options.proto";
import "planton/apis/proto/v1/commons/resource/metadata/options/resource_metadata_options.proto";
import "planton/apis/proto/v1/commons/resource/model.proto";
import "planton/apis/proto/v1/stack/rpc/model.proto";
import "planton/apis/proto/v1/code2cloud/develop/sourcecode/server/rpc/enums/enums.proto";

//code-server
message CodeServer {
  option (planton.apis.proto.v1.commons.resource.options.resource_type) = code_server;
  option (planton.apis.proto.v1.commons.resource.options.is_runnable) = false;
  option (planton.apis.proto.v1.commons.resource.options.owner).type = product;
  option (planton.apis.proto.v1.commons.resource.options.owner).id_field_path = "spec.product_id";

  option (planton.apis.proto.v1.commons.resource.metadata.options.is_id_required) = false;
  option (planton.apis.proto.v1.commons.resource.metadata.options.id_prefix) = "cs";
  //id format "cs-<product-id>-<code-server-name>"
  option (planton.apis.proto.v1.commons.resource.metadata.options.is_id_computed) = true;
  //https://regex101.com/r/QbMSjf/1
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_regex) = "^[a-z][a-z0-9]*(-[a-z0-9]+)*$";
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_min_length) = 1;
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_max_length) = 10;
  option (planton.apis.proto.v1.commons.resource.metadata.options.name_constraints_description) = "At least 1 character. Lowercase letters, numbers, and hyphens. Must start with lowercase letter. Must not start or end with hyphen. Length must be under 10 characters.";

  //resource api-version
  string api_version = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //resource kind
  string kind = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //resource metadata
  planton.apis.proto.v1.commons.resource.Metadata metadata = 3;

  //spec
  CodeServerSpec spec = 4;

  //status
  CodeServerStatus status = 5;
}

//code-server spec
message CodeServerSpec {
  //Specifies the company to which the code server belongs.
  //This value is computed from the product.
  string company_id = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_computed) = true
  ];

  //Specifies the product to which the code server belongs.
  string product_id = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true,
    (planton.apis.proto.v1.commons.resource.field.options.is_immutable) = true
  ];

  //Specifies the host of the code server, such as "https://github.com".
  string code_server_host = 3 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true,
    (planton.apis.proto.v1.commons.resource.field.options.is_immutable) = true
  ];

  //Specifies the provider for the code server.
  planton.apis.proto.v1.code2cloud.develop.sourcecode.server.rpc.enums.CodeServerProvider code_server_provider = 4 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true,
    (planton.apis.proto.v1.commons.resource.field.options.is_immutable) = true
  ];

  //github spec
  CodeServerGithubSpec github = 5;

  //gitlab spec
  CodeServerGitlabSpec gitlab = 6;
}

//github code-server spec
message CodeServerGithubSpec {
  //id of the github organization
  string org_id = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_computed) = true
  ];

  //ID of the Github App installation provided by Github after successful app installation via OAuth flow.
  int64 app_install_id = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //Specifies the owner type for Github App installation: User or Org.
  planton.apis.proto.v1.code2cloud.develop.sourcecode.server.rpc.enums.GithubAppInstallOwnerType app_install_owner_type = 3 [
    (planton.apis.proto.v1.commons.resource.field.options.is_computed) = true
  ];
}

//gitlab code-server spec
message CodeServerGitlabSpec {
  //name or numerical identifier for gitlab group
  //This value is primarily used in the code project synchronization process.
  string group_id = 1 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //Access token to integrate with Gitlab Server.
  //This value is acquired by browser authorization flow when code server is added via Planton Cloud Console App.
  string access_token = 2 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];

  //Refresh token used to fetch a new access token when the current one expires.
  string refresh_token = 3 [
    (planton.apis.proto.v1.commons.resource.field.options.is_required) = true
  ];
}

//code-server status
message CodeServerStatus {
  // resource lifecycle
  planton.apis.proto.v1.commons.resource.ResourceLifecycle lifecycle = 99;

  // system audit info
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job
  planton.apis.proto.v1.stack.rpc.StackJob stack_job = 97;
}

//wrapper for id field of postgres-cluster
message CodeServerId {
  string value = 1;
}

//list of postgres-clusters
message CodeServers {
  repeated CodeServer entries = 1;
}

//response for paginated query to list postgres-clusters
message CodeServerList {
  int32 total_pages = 1;
  repeated CodeServer entries = 2;
}

//input for command to attach a machine account on upstream code-server(github/gitlab)
message AttachMachineAccountByCodeServerIdCommandInput {
  //email of the machine account to be attached to the code-project
  string machine_account_email = 1;
  //id of the code server to which the machine account is to be attached
  string code_server_id = 2;
}
