syntax = "proto3";

package planton.apis.proto.v1.code2cloud.cloudaccount.rpc;

import "planton/apis/proto/v1/commons/rpc/pagination/model.proto";
import "planton/apis/proto/v1/code2cloud/cloudaccount/rpc/model.proto";
import "planton/apis/proto/v1/resourcemanager/company/rpc/model.proto";

import "planton/apis/proto/v1/iam/authz/extensions/extensions.proto";

// cloud account command controller
service CloudAccountCommandController {
  //create a cloud account resource
  rpc create(CloudAccount) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_create;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to add cloud account";
  }
  //update an existing cloud account
  rpc update(CloudAccount) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = cloud_account;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update cloud account";
  }
  //delete a cloud account that was previously created
  //warning: deleting a cloud account from planton cloud destroys the resources created by planton cloud in the account
  rpc delete(CloudAccountId) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = cloud_account;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_delete;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete cloud account";
  }
  //restore a deleted cloud account.
  rpc restore(CloudAccount) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = cloud_account;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_restore;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore cloud account";
  }
}

// cloud account query controller
service CloudAccountQueryController {
  //look up a cloud account by id
  rpc getById(CloudAccountId) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = cloud_account;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view cloud account";
  }

  //todo: add authorization
  //find cloud accounts by company id.
  //the response should only include cloud accounts in a company that the authenticated user account has viewer access to.
  rpc findByCompanyId(planton.apis.proto.v1.resourcemanager.company.rpc.CompanyId) returns (CloudAccounts);

  //todo: add authorization
  //list all specifications for cloud-accounts  for the requested page. This is intended to be used on back-office portal.
  rpc list(planton.apis.proto.v1.commons.rpc.pagination.PageInfo) returns (CloudAccountList);

  //todo: add authorization
  // find cloud accounts by company id to create artifact store.
  // this will be used to populate drop down of cloud accounts in create artifact store form.
  // the response should only include cloud accounts that a company is authorised to create artifact stores.
  // the authorization is verified by looking up cloud accounts with `company-artifact-creator` relation for the company id provided in input.
  // the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
  rpc findArtifactStoreCreateCloudAccounts(planton.apis.proto.v1.resourcemanager.company.rpc.CompanyId) returns (CloudAccounts);

  //todo: add authorization
  // find cloud accounts by company id to create kube-cluster.
  // this will be used to populate drop down of cloud accounts in create kube-cluster form.
  // the response should only include cloud accounts that a company is authorised to create kube-cluster.
  // the authorization is verified by looking up cloud accounts with `company-kube-cluster-creator` relation for the company id provided in input.
  // the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
  rpc findKubeClusterCreateCloudAccounts(planton.apis.proto.v1.resourcemanager.company.rpc.CompanyId) returns (CloudAccounts);

  //todo: add authorization
  // find cloud accounts by company id to create dns managed zone.
  // this will be used to populate drop down of cloud accounts in create dns managed zone form.
  // the response should only include cloud accounts that a company is authorised to create dns managed zone.
  // the authorization is verified by looking up cloud accounts with `company-dns-managed-zone-creator` relation for the company id provided in input.
  // the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
  rpc findDnsZoneCreateCloudAccounts(planton.apis.proto.v1.resourcemanager.company.rpc.CompanyId) returns (CloudAccounts);
}

//cloud-account stack controller
service CloudAccountStackController {
  //preview stack-job for cloud-account spec
  rpc preview(CloudAccount) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = cloud_account;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview cloud-account stack";
  }

  //apply stack for a cloud-account
  rpc apply(CloudAccountId) returns (CloudAccount) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = cloud_account;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = cloud_account_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to apply cloud-account stack";
  }
}
