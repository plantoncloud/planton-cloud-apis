syntax = "proto3";

package planton.apis.proto.v1.code2cloud.deploy.opensource.solr.stack.kubernetes;

import "planton/apis/proto/v1/commons/pulumi/operation/rpc/model.proto";
import "planton/apis/proto/v1/stack/rpc/model.proto";
import "planton/apis/proto/v1/code2cloud/deploy/opensource/solr/state/model.proto";

//input for solr-cloud stack
message SolrCloudKubernetesStackInput {
  //pulumi stack input
  planton.apis.proto.v1.commons.pulumi.operation.rpc.StackOperationInput operation_input = 1;
  //pulumi stack credentials
  SolrCloudKubernetesStackCredentialsInput credentials_input = 2;
  //inputs used for creating stack resources
  SolrCloudKubernetesStackResourceInput resource_input = 3;
}

//stack credentials input
message SolrCloudKubernetesStackCredentialsInput {
  //kubernetes provider credential for creating solr-cloud resources on container cloud
  planton.apis.proto.v1.commons.pulumi.operation.rpc.KubernetesProviderCredential kubernetes = 1;
}

//stack resource input
message SolrCloudKubernetesStackResourceInput {
  //solr-cloud
  planton.apis.proto.v1.code2cloud.deploy.opensource.solr.state.SolrCloudState solr_cloud = 1;
}

//solr-cloud stack outputs
message SolrCloudKubernetesStackOutputs {
  //status of the solr-cloud upon stack-job
  planton.apis.proto.v1.code2cloud.deploy.opensource.solr.state.SolrCloudStatusState solr_cloud_status = 1;
}

//stack response
message SolrCloudKubernetesStackResponse {
  //stack progress
  planton.apis.proto.v1.stack.rpc.StackProgress progress = 1;
  //stack outputs
  SolrCloudKubernetesStackOutputs outputs = 3;
}
