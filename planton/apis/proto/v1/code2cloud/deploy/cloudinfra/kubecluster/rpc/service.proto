syntax = "proto3";

package planton.apis.proto.v1.code2cloud.deploy.cloudinfra.kubecluster.rpc;

import "planton/apis/proto/v1/commons/grpc/stream/model.proto";
import "planton/apis/proto/v1/commons/protobuf/custom/model.proto";
import "planton/apis/proto/v1/commons/rpc/pagination/model.proto";
import "planton/apis/proto/v1/code2cloud/cloudaccount/rpc/model.proto";
import "planton/apis/proto/v1/resourcemanager/company/rpc/model.proto";
import "planton/apis/proto/v1/code2cloud/deploy/cloudinfra/kubecluster/rpc/model.proto";
import "planton/apis/proto/v1/integration/kubernetes/resource/certificate.proto";
import "planton/apis/proto/v1/integration/kubernetes/resource/namespace.proto";
import "planton/apis/proto/v1/integration/kubernetes/resource/pod.proto";
import "planton/apis/proto/v1/iam/authz/extensions/extensions.proto";

// kube-cluster command controller
service KubeClusterCommandController {
  // create a new kube-cluster.
  rpc create(KubeCluster) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = company;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_create;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "spec.company_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to create kube-cluster";
  }
  // update an existing kube-cluster.
  rpc update(KubeCluster) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update kube-cluster";
  }
  // delete a kube-cluster.
  rpc delete(KubeClusterId) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_delete;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete kube-cluster";
  }
  // restore a deleted kube-cluster.
  rpc restore(KubeCluster) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_restore;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to restore kube-cluster";
  }
  //pause a kube-cluster.
  //a kube-cluster is paused by setting the number of nodes in each node pool of the kube-cluster to zero.
  //microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
  //when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
  //when a kube-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
  // may continue to charge a modest operational fee for the cluster.
  rpc pause(KubeClusterId) returns(KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to pause kube-cluster";
  }
  //unpause a kube-cluster.
  //a kube-cluster is resumed by setting the number of nodes in each node pool of the kube-cluster to the
  // values configured for the kube-cluster.
  //when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
  rpc unpause(KubeClusterId) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to unpause kube-cluster";
  }

  // delete a namespace in kube-cluster kube-cluster
  rpc deleteNamespace(ByKubeClusterByNamespaceInput) returns (planton.apis.proto.v1.integration.kubernetes.resource.WorkloadNamespace) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete namespace in kube-cluster";
  }
  // delete a pod in kube-cluster kube-cluster
  rpc deletePod(ByKubeClusterByNamespaceByPodInput) returns (planton.apis.proto.v1.integration.kubernetes.resource.Pod) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete pod in kube-cluster";
  }
}

// kube-cluster query controller
service KubeClusterQueryController {
  // list all kube-clusters on planton cloud for the requested page. This is intended for use on portal.
  rpc list(planton.apis.proto.v1.commons.rpc.pagination.PageInfo) returns (planton.apis.proto.v1.code2cloud.deploy.cloudinfra.kubecluster.rpc.KubeClusterList);

  // lookup kube-cluster using kube-cluster id
  rpc getById(KubeClusterId) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kube-cluster";
  }

  // find kube-clusters by company id
  rpc findByCompanyId(planton.apis.proto.v1.resourcemanager.company.rpc.CompanyId) returns (KubeClusters);

  // find kube-clusters in a cloud account.
  rpc findByCloudAccountId(planton.apis.proto.v1.code2cloud.cloudaccount.rpc.CloudAccountId) returns (KubeClusters);

  // find kube-clusters by company id to create environment.
  // this will be used to populate drop down of kube-clusters in create environment form.
  // the response should only include kube-clusters that a company is authorised to create environment.
  // the authorization is verified by looking up kube-clusters with `company-environment-creator` relation with the company id provided in input.
  rpc findEnvironmentCreateKubeClusters(planton.apis.proto.v1.resourcemanager.company.rpc.CompanyId) returns (KubeClusters);

  // lookup components in a kube-cluster of a kube-cluster
  rpc getKubeClusterComponentsByKubeClusterId(planton.apis.proto.v1.code2cloud.deploy.cloudinfra.kubecluster.rpc.KubeClusterId) returns (KubeClusterComponents) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to view kube-cluster kube-cluster components";
  }

  // find workload namespaces in a kube-cluster.
  rpc findWorkloadNamespacesByKubeClusterId(planton.apis.proto.v1.code2cloud.deploy.cloudinfra.kubecluster.rpc.KubeClusterId) returns (planton.apis.proto.v1.integration.kubernetes.resource.WorkloadNamespaces) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload namespaces in kube-cluster";
  }

  // find workload pods part of all environments hosted in a kube-cluster.
  rpc findWorkloadPodsByKubeClusterId(planton.apis.proto.v1.code2cloud.deploy.cloudinfra.kubecluster.rpc.KubeClusterId) returns (planton.apis.proto.v1.integration.kubernetes.resource.WorkloadPods) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload pods in kube-cluster";
  }

  // find workload pods part of all environments hosted in a kube-cluster.
  rpc findSslCertificatesByKubeClusterId(planton.apis.proto.v1.code2cloud.deploy.cloudinfra.kubecluster.rpc.KubeClusterId) returns (planton.apis.proto.v1.integration.kubernetes.resource.Certificates) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get workload pods in kube-cluster";
  }

  // get a pod details
  rpc getPod(ByKubeClusterByNamespaceByPodInput) returns (planton.apis.proto.v1.integration.kubernetes.resource.Pod) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get pod in kube-cluster";
  }

  // get a log stream for a pod running in a kube-cluster kube-cluster
  rpc getPodLogStream(ByKubeClusterByNamespaceByPodInput) returns (stream planton.apis.proto.v1.commons.grpc.stream.OutputLine) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to stream pod logs";
  }
}


// gcp kube-cluster container node pool command controller
service KubeClusterNodePoolGcpCommandController {
  // add a node pool to a kube-cluster in a kube-cluster
  rpc add(AddOrUpdateKubeClusterNodePoolGcpCommandInput) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to add node pool";
  }
  // update a node pool of a kube-cluster in a kube-cluster
  rpc update(AddOrUpdateKubeClusterNodePoolGcpCommandInput) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to update node pool";
  }
  // delete a node pool from a kube-cluster in a kube-cluster
  rpc delete(DeleteKubeClusterNodePoolGcpCommandInput) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to delete node pool";
  }
}

// gcp kube-cluster container node pool query controller
service KubeClusterNodePoolGcpQueryController {
  // lookup gcp container node pool env using container-nodepool-id
  rpc getByGcpContainerNodePoolId(GetByKubeClusterNodePoolGcpIdInput) returns (KubeClusterNodePoolGcp) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_get;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "kube_cluster_id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to get container node pool";
  }
}

// gcp query controller
service GcpQueryController {
  // list all gcp regions
  rpc findRegions(planton.apis.proto.v1.commons.protobuf.custom.CustomEmpty) returns (GcpRegions) {
    option (planton.apis.proto.v1.iam.authz.extensions.is_public) = true;
  }

  // list all zones in a gcp region
  rpc findZonesByRegionIdentifier(GcpRegionIdentifier) returns (GcpZones) {
    option (planton.apis.proto.v1.iam.authz.extensions.is_public) = true;
  }
}

// kube-cluster stack controller
service KubeClusterStackController {
  //preview kube-cluster stack with provided spec
  rpc preview(KubeCluster) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "metadata.id";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to preview kube-cluster stack";
  }

  //apply kube-cluster stack
  rpc apply(KubeClusterId) returns (KubeCluster) {
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).resource_type = kube_cluster;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).permission = kube_cluster_update;
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).field_path = "value";
    option (planton.apis.proto.v1.iam.authz.extensions.authorization_config).error_msg = "unauthorized to apply kube-cluster stack";
  }
}
