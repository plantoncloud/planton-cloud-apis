syntax = "proto3";

package planton.apis.proto.v1.code2cloud.deploy.microservice.state;

import "planton/apis/proto/v1/commons/audit/model.proto";
import "planton/apis/proto/v1/commons/kubernetes/model.proto";
import "planton/apis/proto/v1/commons/resource/model.proto";
import "planton/apis/proto/v1/commons/resource/options/resource_options.proto";
import "planton/apis/proto/v1/stack/state/model.proto";
import "planton/apis/proto/v1/code2cloud/deploy/microservice/state/enums/enums.proto";
import "planton/apis/proto/v1/commons/resource/owner/model.proto";

//microservice-instance state
message MicroserviceInstanceState {
  option (planton.apis.proto.v1.commons.resource.options.resource_type) = microservice_instance;
  option (planton.apis.proto.v1.commons.resource.options.is_runnable) = true;
  option (planton.apis.proto.v1.commons.resource.options.owner).type = environment;
  option (planton.apis.proto.v1.commons.resource.options.owner).id_field_path = "spec.owner.environment_id";

  //event-type
  planton.apis.proto.v1.code2cloud.deploy.microservice.state.enums.MicroserviceInstanceEventType event_type = 99;

  //resource api version
  string api_version = 1;

  //resource kind
  string kind = 2;

  //resource metadata
  planton.apis.proto.v1.commons.resource.Metadata metadata = 3;

  //spec
  MicroserviceInstanceSpecState spec = 4;

  //status
  MicroserviceInstanceStatusState status = 5;
}

//microservice-instance spec state
message MicroserviceInstanceSpecState {
  //resource parent
  planton.apis.proto.v1.commons.resource.owner.EnvironmentResourceOwner owner = 1;

  //version of the microservice being deployed. this is usually either "main" which is the default git branch name or
  //review-<id> where id is the merge request number
  string version = 2;

  //microservice runtime configuration for kubernetes provider
  MicroserviceInstanceSpecKubernetesState kubernetes = 3;

  //pipeline configuration required to update the microservice instance from ci/cd pipelines
  MicroserviceInstanceSpecPipelineState pipeline = 4;
}

//microservice-instance kubernetes spec
message MicroserviceInstanceSpecKubernetesState {
  //(required) type of the pod controller to use for the microservice deployment.
  //default is set to "deployment".
  string pod_controller_type = 1;

  //number of replicas
  int32 min_replicas = 2;

  //container spec
  MicroserviceInstanceSpecKubernetesContainerState container = 3;

  //microservice instance network configuration on kubernetes
  MicroserviceInstanceSpecKubernetesNetworkState network = 4;

  //flag to toggle workload identity for the microservice
  //default is set to "false".
  bool is_workload_identity_enabled = 5;
}

//microservice-instance-spec kubernetes container spec
message MicroserviceInstanceSpecKubernetesContainerState {
  //microservice app container
  MicroserviceInstanceSpecKubernetesAppContainerState app = 1;

  //sidecar containers
  repeated planton.apis.proto.v1.commons.kubernetes.Container sidecars = 2;
}

//microservice-instance-spec kubernetes app container spec
message MicroserviceInstanceSpecKubernetesAppContainerState {
  //container image. this value is computed during creation but is allowed for updates.
  //value is computed by combining the docker-repo of the artifact-store configured for environment and code project path.
  //
  //pull-secret-name: name of the image pull secret to be configured in kubernetes Deployment resource.
  //computed by looking up the container_image_artifact_store_id from the environment to which the
  //microservice deployment is created.
  planton.apis.proto.v1.commons.kubernetes.ContainerImage image = 1;

  //container resources
  planton.apis.proto.v1.commons.kubernetes.ContainerResources resources = 2;

  //microservice-instance environment variables and secrets.
  MicroserviceInstanceSpecKubernetesAppContainerEnvState env = 3;

  //container volumes
  //key is the mount path and value is size of the volume
  map<string, string> volumes = 4;
}

//microservice-instance-spec kubernetes app container environment variables spec
message MicroserviceInstanceSpecKubernetesAppContainerEnvState {
  //map of variable
  map<string, string> variables = 1;
  //map of secrets
  map<string, string> secrets = 2;
}

//microservice-instance-spec kubernetes network spec
message MicroserviceInstanceSpecKubernetesNetworkState {
  //(required) application protocol for the microservice.
  //the default is set to "http"
  //https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol.
  //this field is used for setting up the name of the service port in kubernetes.
  //this attribute is used during microservice deployment.
  //this attribute is only relevant for deployment and stateful-set pod_controllers.
  string app_protocol = 1;

  //container port
  int32 container_port = 2;

  //kubernetes service port
  int32 service_port = 3;

  //ingress-domain names.
  //each ingress-domain name should already exist as a standard-endpoint domain for the product.
  //endpoints will only created if the pod_controller_type is either deployment or stateful-set.
  repeated string ingress_domains = 4;
}

//microservice-instance-spec pipeline configuration
message MicroserviceInstanceSpecPipelineState {
  //flag to toggle pipelines for microservice-instance.
  //default is "false".
  bool is_enabled = 1;

  //id of the code project.
  //allowed values are the list of code projects in the same product.
  string code_project_id = 2;

  //git branch configured to deploy new versions of microservice-instances
  string git_branch = 3;

  //toggle to enable or disable review environments to control the creation of ephemeral
  //review environments for merge requests.
  //default is "false".
  bool is_review_deployments_enabled = 4;

  //toggle for manual gate on ci/cd deployment jobs
  bool is_manual_gate_required = 5;

  //environment url to access the microservice deployed from the deployment job
  string deployment_environment_url = 6;
}

//microservice-instance-status
message MicroserviceInstanceStatusState {
  // resource lifecycle
  planton.apis.proto.v1.commons.resource.RunnableResourceLifecycle lifecycle = 99;

  // system audit info
  planton.apis.proto.v1.commons.audit.SysAudit sys_audit = 98;

  // stack-job
  planton.apis.proto.v1.stack.state.StackJobState stack_job = 97;

  //microservice-instance kubernetes status
  MicroserviceInstanceStatusKubernetesStatusState kubernetes = 1;

  //id of the service account created for the workload identity
  string workload_identity_account_id = 2;
}

//microservice-instance-status  kubernetes status
message MicroserviceInstanceStatusKubernetesStatusState {
  //kubernetes namespace in which microservice-instance is created.
  string namespace = 1;

  //kubernetes service name for microservice-instance.
  //ex: main-microservice-instance
  //in the above example, "main" is the name of the microservice-instance
  string service = 2;

  //command to setup port-forwarding to open microservice-instance from developers laptop.
  //this might come handy when microservice-instance ingress is disabled for security reasons.
  //this is rendered by combining microservice_instance_kubernetes_service and kubernetes_namespace
  //ex: kubectl port-forward svc/microservice_instance_kubernetes_service -n kubernetes_namespace 8080:8080
  //running the command from this attribute makes it possible to access microservice-instance using http://localhost:8080
  string port_forward_command = 3;

  //kubernetes endpoint to connect to microservice-instance from the web browser.
  //ex: main-microservice-instance.namespace.svc.instance.local:8080
  string kube_endpoint = 4;

  //public endpoint to open microservice-instance from clients outside kubernetes.
  //ex: https://ms-planton-pcs-dev-account.dev.planton.live:8080
  repeated string ingress_endpoints = 5;
}
