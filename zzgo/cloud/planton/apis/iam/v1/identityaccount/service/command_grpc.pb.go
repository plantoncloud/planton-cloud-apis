// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/iam/v1/identityaccount/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iam/v1/identityaccount/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MachineAccountCommandController_Create_FullMethodName            = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountCommandController/create"
	MachineAccountCommandController_Update_FullMethodName            = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountCommandController/update"
	MachineAccountCommandController_Delete_FullMethodName            = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountCommandController/delete"
	MachineAccountCommandController_Restore_FullMethodName           = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountCommandController/restore"
	MachineAccountCommandController_CreateAccessToken_FullMethodName = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountCommandController/createAccessToken"
)

// MachineAccountCommandControllerClient is the client API for MachineAccountCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineAccountCommandControllerClient interface {
	// create new machine account
	Create(ctx context.Context, in *model.IdentityAccount, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// update an existing machine account
	Update(ctx context.Context, in *model.IdentityAccount, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// delete an existing machine account
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// restore an existing machine account
	Restore(ctx context.Context, in *model.IdentityAccount, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// create a new access token in exchange for a valid machine identity account client credentials
	CreateAccessToken(ctx context.Context, in *model.CreateMachineAccessTokenInput, opts ...grpc.CallOption) (*model.AccessToken, error)
}

type machineAccountCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineAccountCommandControllerClient(cc grpc.ClientConnInterface) MachineAccountCommandControllerClient {
	return &machineAccountCommandControllerClient{cc}
}

func (c *machineAccountCommandControllerClient) Create(ctx context.Context, in *model.IdentityAccount, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountCommandControllerClient) Update(ctx context.Context, in *model.IdentityAccount, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountCommandControllerClient) Restore(ctx context.Context, in *model.IdentityAccount, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountCommandControllerClient) CreateAccessToken(ctx context.Context, in *model.CreateMachineAccessTokenInput, opts ...grpc.CallOption) (*model.AccessToken, error) {
	out := new(model.AccessToken)
	err := c.cc.Invoke(ctx, MachineAccountCommandController_CreateAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineAccountCommandControllerServer is the server API for MachineAccountCommandController service.
// All implementations should embed UnimplementedMachineAccountCommandControllerServer
// for forward compatibility
type MachineAccountCommandControllerServer interface {
	// create new machine account
	Create(context.Context, *model.IdentityAccount) (*model.IdentityAccount, error)
	// update an existing machine account
	Update(context.Context, *model.IdentityAccount) (*model.IdentityAccount, error)
	// delete an existing machine account
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.IdentityAccount, error)
	// restore an existing machine account
	Restore(context.Context, *model.IdentityAccount) (*model.IdentityAccount, error)
	// create a new access token in exchange for a valid machine identity account client credentials
	CreateAccessToken(context.Context, *model.CreateMachineAccessTokenInput) (*model.AccessToken, error)
}

// UnimplementedMachineAccountCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedMachineAccountCommandControllerServer struct {
}

func (UnimplementedMachineAccountCommandControllerServer) Create(context.Context, *model.IdentityAccount) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMachineAccountCommandControllerServer) Update(context.Context, *model.IdentityAccount) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMachineAccountCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMachineAccountCommandControllerServer) Restore(context.Context, *model.IdentityAccount) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedMachineAccountCommandControllerServer) CreateAccessToken(context.Context, *model.CreateMachineAccessTokenInput) (*model.AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessToken not implemented")
}

// UnsafeMachineAccountCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineAccountCommandControllerServer will
// result in compilation errors.
type UnsafeMachineAccountCommandControllerServer interface {
	mustEmbedUnimplementedMachineAccountCommandControllerServer()
}

func RegisterMachineAccountCommandControllerServer(s grpc.ServiceRegistrar, srv MachineAccountCommandControllerServer) {
	s.RegisterService(&MachineAccountCommandController_ServiceDesc, srv)
}

func _MachineAccountCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountCommandControllerServer).Create(ctx, req.(*model.IdentityAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountCommandControllerServer).Update(ctx, req.(*model.IdentityAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountCommandControllerServer).Restore(ctx, req.(*model.IdentityAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountCommandController_CreateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateMachineAccessTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountCommandControllerServer).CreateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountCommandController_CreateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountCommandControllerServer).CreateAccessToken(ctx, req.(*model.CreateMachineAccessTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineAccountCommandController_ServiceDesc is the grpc.ServiceDesc for MachineAccountCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineAccountCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountCommandController",
	HandlerType: (*MachineAccountCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _MachineAccountCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _MachineAccountCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _MachineAccountCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _MachineAccountCommandController_Restore_Handler,
		},
		{
			MethodName: "createAccessToken",
			Handler:    _MachineAccountCommandController_CreateAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/iam/v1/identityaccount/service/command.proto",
}
