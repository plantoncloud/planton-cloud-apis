// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/iam/v1/identityaccount/service/query.proto

package service

import (
	context "context"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iam/v1/identityaccount/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MachineAccountQueryController_GetById_FullMethodName                              = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountQueryController/getById"
	MachineAccountQueryController_FindByOrgId_FullMethodName                          = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountQueryController/findByOrgId"
	MachineAccountQueryController_GetByEmail_FullMethodName                           = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountQueryController/getByEmail"
	MachineAccountQueryController_GetByOrganizationByName_FullMethodName              = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountQueryController/getByOrganizationByName"
	MachineAccountQueryController_GetClientSecretByMachineAccountEmail_FullMethodName = "/cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountQueryController/getClientSecretByMachineAccountEmail"
)

// MachineAccountQueryControllerClient is the client API for MachineAccountQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineAccountQueryControllerClient interface {
	// lookup machine account by identity account id.
	GetById(ctx context.Context, in *model.IdentityAccountId, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// retrieve paginated list of all machine accounts on planton-cloud.
	FindByOrgId(ctx context.Context, in *model.MachineAccountOrgId, opts ...grpc.CallOption) (*model.IdentityAccounts, error)
	// lookup machine account by identity account email.
	GetByEmail(ctx context.Context, in *model.IdentityAccountEmail, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// lookup machine-account by organization and name.
	GetByOrganizationByName(ctx context.Context, in *model.GetByOrganizationByNameQueryInput, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// lookup the client secret for the machine account.
	// since client_secret for machine account is not stored in planton database, the client secret is
	// retrieved from the idp account and is passed on to the client as response.
	GetClientSecretByMachineAccountEmail(ctx context.Context, in *model.IdentityAccountEmail, opts ...grpc.CallOption) (*model.MachineAccountClientSecret, error)
}

type machineAccountQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineAccountQueryControllerClient(cc grpc.ClientConnInterface) MachineAccountQueryControllerClient {
	return &machineAccountQueryControllerClient{cc}
}

func (c *machineAccountQueryControllerClient) GetById(ctx context.Context, in *model.IdentityAccountId, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountQueryControllerClient) FindByOrgId(ctx context.Context, in *model.MachineAccountOrgId, opts ...grpc.CallOption) (*model.IdentityAccounts, error) {
	out := new(model.IdentityAccounts)
	err := c.cc.Invoke(ctx, MachineAccountQueryController_FindByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountQueryControllerClient) GetByEmail(ctx context.Context, in *model.IdentityAccountEmail, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountQueryController_GetByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountQueryControllerClient) GetByOrganizationByName(ctx context.Context, in *model.GetByOrganizationByNameQueryInput, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, MachineAccountQueryController_GetByOrganizationByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineAccountQueryControllerClient) GetClientSecretByMachineAccountEmail(ctx context.Context, in *model.IdentityAccountEmail, opts ...grpc.CallOption) (*model.MachineAccountClientSecret, error) {
	out := new(model.MachineAccountClientSecret)
	err := c.cc.Invoke(ctx, MachineAccountQueryController_GetClientSecretByMachineAccountEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineAccountQueryControllerServer is the server API for MachineAccountQueryController service.
// All implementations should embed UnimplementedMachineAccountQueryControllerServer
// for forward compatibility
type MachineAccountQueryControllerServer interface {
	// lookup machine account by identity account id.
	GetById(context.Context, *model.IdentityAccountId) (*model.IdentityAccount, error)
	// retrieve paginated list of all machine accounts on planton-cloud.
	FindByOrgId(context.Context, *model.MachineAccountOrgId) (*model.IdentityAccounts, error)
	// lookup machine account by identity account email.
	GetByEmail(context.Context, *model.IdentityAccountEmail) (*model.IdentityAccount, error)
	// lookup machine-account by organization and name.
	GetByOrganizationByName(context.Context, *model.GetByOrganizationByNameQueryInput) (*model.IdentityAccount, error)
	// lookup the client secret for the machine account.
	// since client_secret for machine account is not stored in planton database, the client secret is
	// retrieved from the idp account and is passed on to the client as response.
	GetClientSecretByMachineAccountEmail(context.Context, *model.IdentityAccountEmail) (*model.MachineAccountClientSecret, error)
}

// UnimplementedMachineAccountQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedMachineAccountQueryControllerServer struct {
}

func (UnimplementedMachineAccountQueryControllerServer) GetById(context.Context, *model.IdentityAccountId) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedMachineAccountQueryControllerServer) FindByOrgId(context.Context, *model.MachineAccountOrgId) (*model.IdentityAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByOrgId not implemented")
}
func (UnimplementedMachineAccountQueryControllerServer) GetByEmail(context.Context, *model.IdentityAccountEmail) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (UnimplementedMachineAccountQueryControllerServer) GetByOrganizationByName(context.Context, *model.GetByOrganizationByNameQueryInput) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOrganizationByName not implemented")
}
func (UnimplementedMachineAccountQueryControllerServer) GetClientSecretByMachineAccountEmail(context.Context, *model.IdentityAccountEmail) (*model.MachineAccountClientSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientSecretByMachineAccountEmail not implemented")
}

// UnsafeMachineAccountQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineAccountQueryControllerServer will
// result in compilation errors.
type UnsafeMachineAccountQueryControllerServer interface {
	mustEmbedUnimplementedMachineAccountQueryControllerServer()
}

func RegisterMachineAccountQueryControllerServer(s grpc.ServiceRegistrar, srv MachineAccountQueryControllerServer) {
	s.RegisterService(&MachineAccountQueryController_ServiceDesc, srv)
}

func _MachineAccountQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountQueryControllerServer).GetById(ctx, req.(*model.IdentityAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountQueryController_FindByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MachineAccountOrgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountQueryControllerServer).FindByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountQueryController_FindByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountQueryControllerServer).FindByOrgId(ctx, req.(*model.MachineAccountOrgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountQueryController_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountQueryControllerServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountQueryController_GetByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountQueryControllerServer).GetByEmail(ctx, req.(*model.IdentityAccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountQueryController_GetByOrganizationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetByOrganizationByNameQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountQueryControllerServer).GetByOrganizationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountQueryController_GetByOrganizationByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountQueryControllerServer).GetByOrganizationByName(ctx, req.(*model.GetByOrganizationByNameQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineAccountQueryController_GetClientSecretByMachineAccountEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAccountQueryControllerServer).GetClientSecretByMachineAccountEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAccountQueryController_GetClientSecretByMachineAccountEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAccountQueryControllerServer).GetClientSecretByMachineAccountEmail(ctx, req.(*model.IdentityAccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineAccountQueryController_ServiceDesc is the grpc.ServiceDesc for MachineAccountQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineAccountQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.iam.v1.identityaccount.service.MachineAccountQueryController",
	HandlerType: (*MachineAccountQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _MachineAccountQueryController_GetById_Handler,
		},
		{
			MethodName: "findByOrgId",
			Handler:    _MachineAccountQueryController_FindByOrgId_Handler,
		},
		{
			MethodName: "getByEmail",
			Handler:    _MachineAccountQueryController_GetByEmail_Handler,
		},
		{
			MethodName: "getByOrganizationByName",
			Handler:    _MachineAccountQueryController_GetByOrganizationByName_Handler,
		},
		{
			MethodName: "getClientSecretByMachineAccountEmail",
			Handler:    _MachineAccountQueryController_GetClientSecretByMachineAccountEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/iam/v1/identityaccount/service/query.proto",
}

const (
	UserAccountQueryController_List_FullMethodName                   = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/list"
	UserAccountQueryController_GetById_FullMethodName                = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/getById"
	UserAccountQueryController_GetByEmail_FullMethodName             = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/getByEmail"
	UserAccountQueryController_IsBackofficeUser_FullMethodName       = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/isBackofficeUser"
	UserAccountQueryController_ListAssociatesByOrgId_FullMethodName  = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/listAssociatesByOrgId"
	UserAccountQueryController_GetMembersCountByOrgId_FullMethodName = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/getMembersCountByOrgId"
	UserAccountQueryController_GetMembersCountByEnvId_FullMethodName = "/cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController/getMembersCountByEnvId"
)

// UserAccountQueryControllerClient is the client API for UserAccountQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountQueryControllerClient interface {
	// retrieve paginated list of all user accounts on planton-cloud.
	List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.IdentityAccountsList, error)
	// lookup user-account by identity account id.
	GetById(ctx context.Context, in *model.IdentityAccountId, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// lookup user-account by identity account email.
	GetByEmail(ctx context.Context, in *model.IdentityAccountEmail, opts ...grpc.CallOption) (*model.IdentityAccount, error)
	// this is to check if a user is authorized to login to back office or not
	// like other queries this rpc does not return any data
	// instead it tries to check the authorization based on config given below
	// if rpc returns authorization error then the user is not supposed to login to backoffice
	// otherwise if rpc returns boolean response then the user is allowed to login to backoffice.
	IsBackofficeUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// retrieve paginated list of all associate accounts of a organization.
	ListAssociatesByOrgId(ctx context.Context, in *model.ListWithIdentityOrgId, opts ...grpc.CallOption) (*model.IdentityAccountsList, error)
	GetMembersCountByOrgId(ctx context.Context, in *model.MembersCountByOrgIdInput, opts ...grpc.CallOption) (*model.MembersCount, error)
	GetMembersCountByEnvId(ctx context.Context, in *model.MembersCountByEnvIdInput, opts ...grpc.CallOption) (*model.MembersCount, error)
}

type userAccountQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountQueryControllerClient(cc grpc.ClientConnInterface) UserAccountQueryControllerClient {
	return &userAccountQueryControllerClient{cc}
}

func (c *userAccountQueryControllerClient) List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.IdentityAccountsList, error) {
	out := new(model.IdentityAccountsList)
	err := c.cc.Invoke(ctx, UserAccountQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountQueryControllerClient) GetById(ctx context.Context, in *model.IdentityAccountId, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, UserAccountQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountQueryControllerClient) GetByEmail(ctx context.Context, in *model.IdentityAccountEmail, opts ...grpc.CallOption) (*model.IdentityAccount, error) {
	out := new(model.IdentityAccount)
	err := c.cc.Invoke(ctx, UserAccountQueryController_GetByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountQueryControllerClient) IsBackofficeUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, UserAccountQueryController_IsBackofficeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountQueryControllerClient) ListAssociatesByOrgId(ctx context.Context, in *model.ListWithIdentityOrgId, opts ...grpc.CallOption) (*model.IdentityAccountsList, error) {
	out := new(model.IdentityAccountsList)
	err := c.cc.Invoke(ctx, UserAccountQueryController_ListAssociatesByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountQueryControllerClient) GetMembersCountByOrgId(ctx context.Context, in *model.MembersCountByOrgIdInput, opts ...grpc.CallOption) (*model.MembersCount, error) {
	out := new(model.MembersCount)
	err := c.cc.Invoke(ctx, UserAccountQueryController_GetMembersCountByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountQueryControllerClient) GetMembersCountByEnvId(ctx context.Context, in *model.MembersCountByEnvIdInput, opts ...grpc.CallOption) (*model.MembersCount, error) {
	out := new(model.MembersCount)
	err := c.cc.Invoke(ctx, UserAccountQueryController_GetMembersCountByEnvId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountQueryControllerServer is the server API for UserAccountQueryController service.
// All implementations should embed UnimplementedUserAccountQueryControllerServer
// for forward compatibility
type UserAccountQueryControllerServer interface {
	// retrieve paginated list of all user accounts on planton-cloud.
	List(context.Context, *rpc.PageInfo) (*model.IdentityAccountsList, error)
	// lookup user-account by identity account id.
	GetById(context.Context, *model.IdentityAccountId) (*model.IdentityAccount, error)
	// lookup user-account by identity account email.
	GetByEmail(context.Context, *model.IdentityAccountEmail) (*model.IdentityAccount, error)
	// this is to check if a user is authorized to login to back office or not
	// like other queries this rpc does not return any data
	// instead it tries to check the authorization based on config given below
	// if rpc returns authorization error then the user is not supposed to login to backoffice
	// otherwise if rpc returns boolean response then the user is allowed to login to backoffice.
	IsBackofficeUser(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	// retrieve paginated list of all associate accounts of a organization.
	ListAssociatesByOrgId(context.Context, *model.ListWithIdentityOrgId) (*model.IdentityAccountsList, error)
	GetMembersCountByOrgId(context.Context, *model.MembersCountByOrgIdInput) (*model.MembersCount, error)
	GetMembersCountByEnvId(context.Context, *model.MembersCountByEnvIdInput) (*model.MembersCount, error)
}

// UnimplementedUserAccountQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedUserAccountQueryControllerServer struct {
}

func (UnimplementedUserAccountQueryControllerServer) List(context.Context, *rpc.PageInfo) (*model.IdentityAccountsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserAccountQueryControllerServer) GetById(context.Context, *model.IdentityAccountId) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserAccountQueryControllerServer) GetByEmail(context.Context, *model.IdentityAccountEmail) (*model.IdentityAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (UnimplementedUserAccountQueryControllerServer) IsBackofficeUser(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBackofficeUser not implemented")
}
func (UnimplementedUserAccountQueryControllerServer) ListAssociatesByOrgId(context.Context, *model.ListWithIdentityOrgId) (*model.IdentityAccountsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssociatesByOrgId not implemented")
}
func (UnimplementedUserAccountQueryControllerServer) GetMembersCountByOrgId(context.Context, *model.MembersCountByOrgIdInput) (*model.MembersCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersCountByOrgId not implemented")
}
func (UnimplementedUserAccountQueryControllerServer) GetMembersCountByEnvId(context.Context, *model.MembersCountByEnvIdInput) (*model.MembersCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersCountByEnvId not implemented")
}

// UnsafeUserAccountQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountQueryControllerServer will
// result in compilation errors.
type UnsafeUserAccountQueryControllerServer interface {
	mustEmbedUnimplementedUserAccountQueryControllerServer()
}

func RegisterUserAccountQueryControllerServer(s grpc.ServiceRegistrar, srv UserAccountQueryControllerServer) {
	s.RegisterService(&UserAccountQueryController_ServiceDesc, srv)
}

func _UserAccountQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).List(ctx, req.(*rpc.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).GetById(ctx, req.(*model.IdentityAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountQueryController_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IdentityAccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_GetByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).GetByEmail(ctx, req.(*model.IdentityAccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountQueryController_IsBackofficeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).IsBackofficeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_IsBackofficeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).IsBackofficeUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountQueryController_ListAssociatesByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ListWithIdentityOrgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).ListAssociatesByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_ListAssociatesByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).ListAssociatesByOrgId(ctx, req.(*model.ListWithIdentityOrgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountQueryController_GetMembersCountByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MembersCountByOrgIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).GetMembersCountByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_GetMembersCountByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).GetMembersCountByOrgId(ctx, req.(*model.MembersCountByOrgIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountQueryController_GetMembersCountByEnvId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MembersCountByEnvIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountQueryControllerServer).GetMembersCountByEnvId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountQueryController_GetMembersCountByEnvId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountQueryControllerServer).GetMembersCountByEnvId(ctx, req.(*model.MembersCountByEnvIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccountQueryController_ServiceDesc is the grpc.ServiceDesc for UserAccountQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccountQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.iam.v1.identityaccount.service.UserAccountQueryController",
	HandlerType: (*UserAccountQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _UserAccountQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _UserAccountQueryController_GetById_Handler,
		},
		{
			MethodName: "getByEmail",
			Handler:    _UserAccountQueryController_GetByEmail_Handler,
		},
		{
			MethodName: "isBackofficeUser",
			Handler:    _UserAccountQueryController_IsBackofficeUser_Handler,
		},
		{
			MethodName: "listAssociatesByOrgId",
			Handler:    _UserAccountQueryController_ListAssociatesByOrgId_Handler,
		},
		{
			MethodName: "getMembersCountByOrgId",
			Handler:    _UserAccountQueryController_GetMembersCountByOrgId_Handler,
		},
		{
			MethodName: "getMembersCountByEnvId",
			Handler:    _UserAccountQueryController_GetMembersCountByEnvId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/iam/v1/identityaccount/service/query.proto",
}
