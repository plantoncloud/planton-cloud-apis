// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/iam/v1/iampolicy/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iam/v1/iampolicy/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IamPolicyQueryController_GetByApiResourceKindAndResourceId_FullMethodName                   = "/cloud.planton.apis.iam.v1.iampolicy.service.IamPolicyQueryController/getByApiResourceKindAndResourceId"
	IamPolicyQueryController_GetByApiResourceKindAndResourceIdGroupByRole_FullMethodName        = "/cloud.planton.apis.iam.v1.iampolicy.service.IamPolicyQueryController/getByApiResourceKindAndResourceIdGroupByRole"
	IamPolicyQueryController_GetCompanyByApiResourceKindAndResourceIdGroupByRole_FullMethodName = "/cloud.planton.apis.iam.v1.iampolicy.service.IamPolicyQueryController/getCompanyByApiResourceKindAndResourceIdGroupByRole"
	IamPolicyQueryController_CheckAuthorization_FullMethodName                                  = "/cloud.planton.apis.iam.v1.iampolicy.service.IamPolicyQueryController/checkAuthorization"
	IamPolicyQueryController_ListAuthorizedResourceIds_FullMethodName                           = "/cloud.planton.apis.iam.v1.iampolicy.service.IamPolicyQueryController/listAuthorizedResourceIds"
)

// IamPolicyQueryControllerClient is the client API for IamPolicyQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamPolicyQueryControllerClient interface {
	// retrieve iam policies by type and id
	GetByApiResourceKindAndResourceId(ctx context.Context, in *model.GetIamPolicyByApiResourceKindAndResourceIdInput, opts ...grpc.CallOption) (*model.IamPoliciesByPrincipal, error)
	// retrieve iam policies by type and id grouped by role
	GetByApiResourceKindAndResourceIdGroupByRole(ctx context.Context, in *model.GetIamPolicyByApiResourceKindAndResourceIdInput, opts ...grpc.CallOption) (*model.IamPoliciesByRole, error)
	// retrieve iam policies by type and id grouped by role
	GetCompanyByApiResourceKindAndResourceIdGroupByRole(ctx context.Context, in *model.GetIamPolicyByApiResourceKindAndResourceIdInput, opts ...grpc.CallOption) (*model.IamPoliciesByRole, error)
	// checkAuthorization evaluates whether a specific action or access described by the AuthorizationInput
	// is authorized based on the configured IAM policies. This RPC is crucial for enforcing access controls
	// and ensuring that operations are performed by appropriately authorized users or services.
	//
	// The authorization decision is returned as an IsAuthorized message, indicating a binary outcome
	// (true if the action is authorized, false otherwise). Custom options are used to define the required
	// permission (iam_policy_get) and the error message to be returned if the authorization check fails
	// due to insufficient permissions.
	CheckAuthorization(ctx context.Context, in *model.AuthorizationInput, opts ...grpc.CallOption) (*model.IsAuthorized, error)
	// listResources evaluates the provided AuthorizationInput to identify resources that the requesting
	// entity is authorized to access, based on IAM policies. This operation is essential for scenarios
	// where an entity needs to enumerate resources they have permissions to interact with.
	//
	// It returns an AuthorizedResourceIds message, which contains the IDs of all resources the entity is
	// authorized to access. Similar to checkAuthorization, this RPC utilizes custom options to specify the
	// required permission (iam_policy_get) and the error message for insufficient permissions scenarios.
	ListAuthorizedResourceIds(ctx context.Context, in *model.AuthorizationInput, opts ...grpc.CallOption) (*model.AuthorizedResourceIds, error)
}

type iamPolicyQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIamPolicyQueryControllerClient(cc grpc.ClientConnInterface) IamPolicyQueryControllerClient {
	return &iamPolicyQueryControllerClient{cc}
}

func (c *iamPolicyQueryControllerClient) GetByApiResourceKindAndResourceId(ctx context.Context, in *model.GetIamPolicyByApiResourceKindAndResourceIdInput, opts ...grpc.CallOption) (*model.IamPoliciesByPrincipal, error) {
	out := new(model.IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_GetByApiResourceKindAndResourceId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyQueryControllerClient) GetByApiResourceKindAndResourceIdGroupByRole(ctx context.Context, in *model.GetIamPolicyByApiResourceKindAndResourceIdInput, opts ...grpc.CallOption) (*model.IamPoliciesByRole, error) {
	out := new(model.IamPoliciesByRole)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_GetByApiResourceKindAndResourceIdGroupByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyQueryControllerClient) GetCompanyByApiResourceKindAndResourceIdGroupByRole(ctx context.Context, in *model.GetIamPolicyByApiResourceKindAndResourceIdInput, opts ...grpc.CallOption) (*model.IamPoliciesByRole, error) {
	out := new(model.IamPoliciesByRole)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_GetCompanyByApiResourceKindAndResourceIdGroupByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyQueryControllerClient) CheckAuthorization(ctx context.Context, in *model.AuthorizationInput, opts ...grpc.CallOption) (*model.IsAuthorized, error) {
	out := new(model.IsAuthorized)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_CheckAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyQueryControllerClient) ListAuthorizedResourceIds(ctx context.Context, in *model.AuthorizationInput, opts ...grpc.CallOption) (*model.AuthorizedResourceIds, error) {
	out := new(model.AuthorizedResourceIds)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_ListAuthorizedResourceIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamPolicyQueryControllerServer is the server API for IamPolicyQueryController service.
// All implementations should embed UnimplementedIamPolicyQueryControllerServer
// for forward compatibility
type IamPolicyQueryControllerServer interface {
	// retrieve iam policies by type and id
	GetByApiResourceKindAndResourceId(context.Context, *model.GetIamPolicyByApiResourceKindAndResourceIdInput) (*model.IamPoliciesByPrincipal, error)
	// retrieve iam policies by type and id grouped by role
	GetByApiResourceKindAndResourceIdGroupByRole(context.Context, *model.GetIamPolicyByApiResourceKindAndResourceIdInput) (*model.IamPoliciesByRole, error)
	// retrieve iam policies by type and id grouped by role
	GetCompanyByApiResourceKindAndResourceIdGroupByRole(context.Context, *model.GetIamPolicyByApiResourceKindAndResourceIdInput) (*model.IamPoliciesByRole, error)
	// checkAuthorization evaluates whether a specific action or access described by the AuthorizationInput
	// is authorized based on the configured IAM policies. This RPC is crucial for enforcing access controls
	// and ensuring that operations are performed by appropriately authorized users or services.
	//
	// The authorization decision is returned as an IsAuthorized message, indicating a binary outcome
	// (true if the action is authorized, false otherwise). Custom options are used to define the required
	// permission (iam_policy_get) and the error message to be returned if the authorization check fails
	// due to insufficient permissions.
	CheckAuthorization(context.Context, *model.AuthorizationInput) (*model.IsAuthorized, error)
	// listResources evaluates the provided AuthorizationInput to identify resources that the requesting
	// entity is authorized to access, based on IAM policies. This operation is essential for scenarios
	// where an entity needs to enumerate resources they have permissions to interact with.
	//
	// It returns an AuthorizedResourceIds message, which contains the IDs of all resources the entity is
	// authorized to access. Similar to checkAuthorization, this RPC utilizes custom options to specify the
	// required permission (iam_policy_get) and the error message for insufficient permissions scenarios.
	ListAuthorizedResourceIds(context.Context, *model.AuthorizationInput) (*model.AuthorizedResourceIds, error)
}

// UnimplementedIamPolicyQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIamPolicyQueryControllerServer struct {
}

func (UnimplementedIamPolicyQueryControllerServer) GetByApiResourceKindAndResourceId(context.Context, *model.GetIamPolicyByApiResourceKindAndResourceIdInput) (*model.IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByApiResourceKindAndResourceId not implemented")
}
func (UnimplementedIamPolicyQueryControllerServer) GetByApiResourceKindAndResourceIdGroupByRole(context.Context, *model.GetIamPolicyByApiResourceKindAndResourceIdInput) (*model.IamPoliciesByRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByApiResourceKindAndResourceIdGroupByRole not implemented")
}
func (UnimplementedIamPolicyQueryControllerServer) GetCompanyByApiResourceKindAndResourceIdGroupByRole(context.Context, *model.GetIamPolicyByApiResourceKindAndResourceIdInput) (*model.IamPoliciesByRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyByApiResourceKindAndResourceIdGroupByRole not implemented")
}
func (UnimplementedIamPolicyQueryControllerServer) CheckAuthorization(context.Context, *model.AuthorizationInput) (*model.IsAuthorized, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedIamPolicyQueryControllerServer) ListAuthorizedResourceIds(context.Context, *model.AuthorizationInput) (*model.AuthorizedResourceIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizedResourceIds not implemented")
}

// UnsafeIamPolicyQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamPolicyQueryControllerServer will
// result in compilation errors.
type UnsafeIamPolicyQueryControllerServer interface {
	mustEmbedUnimplementedIamPolicyQueryControllerServer()
}

func RegisterIamPolicyQueryControllerServer(s grpc.ServiceRegistrar, srv IamPolicyQueryControllerServer) {
	s.RegisterService(&IamPolicyQueryController_ServiceDesc, srv)
}

func _IamPolicyQueryController_GetByApiResourceKindAndResourceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetIamPolicyByApiResourceKindAndResourceIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).GetByApiResourceKindAndResourceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_GetByApiResourceKindAndResourceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).GetByApiResourceKindAndResourceId(ctx, req.(*model.GetIamPolicyByApiResourceKindAndResourceIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyQueryController_GetByApiResourceKindAndResourceIdGroupByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetIamPolicyByApiResourceKindAndResourceIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).GetByApiResourceKindAndResourceIdGroupByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_GetByApiResourceKindAndResourceIdGroupByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).GetByApiResourceKindAndResourceIdGroupByRole(ctx, req.(*model.GetIamPolicyByApiResourceKindAndResourceIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyQueryController_GetCompanyByApiResourceKindAndResourceIdGroupByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetIamPolicyByApiResourceKindAndResourceIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).GetCompanyByApiResourceKindAndResourceIdGroupByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_GetCompanyByApiResourceKindAndResourceIdGroupByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).GetCompanyByApiResourceKindAndResourceIdGroupByRole(ctx, req.(*model.GetIamPolicyByApiResourceKindAndResourceIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyQueryController_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AuthorizationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_CheckAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).CheckAuthorization(ctx, req.(*model.AuthorizationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyQueryController_ListAuthorizedResourceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AuthorizationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).ListAuthorizedResourceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_ListAuthorizedResourceIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).ListAuthorizedResourceIds(ctx, req.(*model.AuthorizationInput))
	}
	return interceptor(ctx, in, info, handler)
}

// IamPolicyQueryController_ServiceDesc is the grpc.ServiceDesc for IamPolicyQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IamPolicyQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.iam.v1.iampolicy.service.IamPolicyQueryController",
	HandlerType: (*IamPolicyQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getByApiResourceKindAndResourceId",
			Handler:    _IamPolicyQueryController_GetByApiResourceKindAndResourceId_Handler,
		},
		{
			MethodName: "getByApiResourceKindAndResourceIdGroupByRole",
			Handler:    _IamPolicyQueryController_GetByApiResourceKindAndResourceIdGroupByRole_Handler,
		},
		{
			MethodName: "getCompanyByApiResourceKindAndResourceIdGroupByRole",
			Handler:    _IamPolicyQueryController_GetCompanyByApiResourceKindAndResourceIdGroupByRole_Handler,
		},
		{
			MethodName: "checkAuthorization",
			Handler:    _IamPolicyQueryController_CheckAuthorization_Handler,
		},
		{
			MethodName: "listAuthorizedResourceIds",
			Handler:    _IamPolicyQueryController_ListAuthorizedResourceIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/iam/v1/iampolicy/service/query.proto",
}
