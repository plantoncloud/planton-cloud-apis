// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/iam/v1/iampolicy/model/io.proto

package model

import (
	apiresourcekind "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	apiresourceiampermission "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iam/v1/iampolicy/enums/apiresourceiampermission"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iam/v1/iamrole/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IamPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the principal of the policy that is associated.
	// principal could be email id of the user.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the principal. This is the full name of the
	// individual or entity that the principal represents.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The email address of the principal. It is used as a contact
	// reference and possibly as an identifier for login or
	// communication purposes.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Indicates the category of the principal. The type field can
	// help in distinguishing between different entities that could be
	// associated with policies, such as 'user', 'company', 'group', etc.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The URL to a picture associated with the principal. This URL points
	// to an image resource that can be used to visually represent the
	// principal in the user interface.
	PictureUrl string `protobuf:"bytes,5,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty"`
}

func (x *IamPrincipal) Reset() {
	*x = IamPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPrincipal) ProtoMessage() {}

func (x *IamPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPrincipal.ProtoReflect.Descriptor instead.
func (*IamPrincipal) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *IamPrincipal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IamPrincipal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IamPrincipal) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *IamPrincipal) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IamPrincipal) GetPictureUrl() string {
	if x != nil {
		return x.PictureUrl
	}
	return ""
}

// Represents the association of an IAM role and an owner principal.
type RoleAndOwnerMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IAM role assigned to a principal for authorization.
	Role *model.IamRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// The owner principal responsible for the role and associated permissions.
	OwnerPrincipal *IamPrincipal `protobuf:"bytes,2,opt,name=owner_principal,json=ownerPrincipal,proto3" json:"owner_principal,omitempty"`
}

func (x *RoleAndOwnerMapping) Reset() {
	*x = RoleAndOwnerMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAndOwnerMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAndOwnerMapping) ProtoMessage() {}

func (x *RoleAndOwnerMapping) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAndOwnerMapping.ProtoReflect.Descriptor instead.
func (*RoleAndOwnerMapping) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *RoleAndOwnerMapping) GetRole() *model.IamRole {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RoleAndOwnerMapping) GetOwnerPrincipal() *IamPrincipal {
	if x != nil {
		return x.OwnerPrincipal
	}
	return nil
}

// Represents the response of an IAM policy associated with a principal.
type IamPolicyByPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The principal for whom the IAM policy is being retrieved.
	Principal *IamPrincipal `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// The mapping of IAM roles to their respective owner principals.
	RoleOwnerMapping []*RoleAndOwnerMapping `protobuf:"bytes,2,rep,name=role_owner_mapping,json=roleOwnerMapping,proto3" json:"role_owner_mapping,omitempty"`
}

func (x *IamPolicyByPrincipal) Reset() {
	*x = IamPolicyByPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPolicyByPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPolicyByPrincipal) ProtoMessage() {}

func (x *IamPolicyByPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPolicyByPrincipal.ProtoReflect.Descriptor instead.
func (*IamPolicyByPrincipal) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *IamPolicyByPrincipal) GetPrincipal() *IamPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *IamPolicyByPrincipal) GetRoleOwnerMapping() []*RoleAndOwnerMapping {
	if x != nil {
		return x.RoleOwnerMapping
	}
	return nil
}

type IamPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The principal for whom the IAM policy is being retrieved.
	Principal *IamPrincipal `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// The mapping of IAM roles to their respective owner principals.
	RoleOwnerMapping *RoleAndOwnerMapping `protobuf:"bytes,2,opt,name=role_owner_mapping,json=roleOwnerMapping,proto3" json:"role_owner_mapping,omitempty"`
}

func (x *IamPolicy) Reset() {
	*x = IamPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPolicy) ProtoMessage() {}

func (x *IamPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPolicy.ProtoReflect.Descriptor instead.
func (*IamPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *IamPolicy) GetPrincipal() *IamPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *IamPolicy) GetRoleOwnerMapping() *RoleAndOwnerMapping {
	if x != nil {
		return x.RoleOwnerMapping
	}
	return nil
}

// input message to get IAM policies of a resource.
type GetIamPolicyByApiResourceKindAndResourceIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the resource for which we want to get iam policies
	// example values could be company/ cloud_account etc.;
	ResourceKind string `protobuf:"bytes,1,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	// id of the resource to get iam policy
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// flag to get inherited policies from owner
	ShowInheritedPolicies bool `protobuf:"varint,3,opt,name=show_inherited_policies,json=showInheritedPolicies,proto3" json:"show_inherited_policies,omitempty"`
	// flag to get public access iam policies
	ShowPublicAccess bool `protobuf:"varint,4,opt,name=show_public_access,json=showPublicAccess,proto3" json:"show_public_access,omitempty"`
}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) Reset() {
	*x = GetIamPolicyByApiResourceKindAndResourceIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIamPolicyByApiResourceKindAndResourceIdInput) ProtoMessage() {}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIamPolicyByApiResourceKindAndResourceIdInput.ProtoReflect.Descriptor instead.
func (*GetIamPolicyByApiResourceKindAndResourceIdInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) GetShowInheritedPolicies() bool {
	if x != nil {
		return x.ShowInheritedPolicies
	}
	return false
}

func (x *GetIamPolicyByApiResourceKindAndResourceIdInput) GetShowPublicAccess() bool {
	if x != nil {
		return x.ShowPublicAccess
	}
	return false
}

// response to return all iam policies by principal
type IamPoliciesByPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of iam policies
	Entries []*IamPolicyByPrincipal `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *IamPoliciesByPrincipal) Reset() {
	*x = IamPoliciesByPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPoliciesByPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPoliciesByPrincipal) ProtoMessage() {}

func (x *IamPoliciesByPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPoliciesByPrincipal.ProtoReflect.Descriptor instead.
func (*IamPoliciesByPrincipal) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *IamPoliciesByPrincipal) GetEntries() []*IamPolicyByPrincipal {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Input message for adding IAM policies to a resource.
type AddIamPolicyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Principals associated with the IAM policy to be added to the resource.
	// This is a list, as multiple principals can be associated with the same resource.
	Principals []*IamPrincipal `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	// Roles to be assigned to the principals for the given resource.
	// Multiple roles can be assigned to the principals, defining their access level and permissions.
	Roles []*model.IamRole `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// The type of resource that the IAM policy is to be associated with.
	// Valid values include 'company', 'cloud_account', and other resource types.
	ResourceKind string `protobuf:"bytes,3,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	// The unique identifier for the resource which the IAM policy will be added to.
	// This ID should correspond to the actual resource entity in the system.
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *AddIamPolicyInput) Reset() {
	*x = AddIamPolicyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIamPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIamPolicyInput) ProtoMessage() {}

func (x *AddIamPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIamPolicyInput.ProtoReflect.Descriptor instead.
func (*AddIamPolicyInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *AddIamPolicyInput) GetPrincipals() []*IamPrincipal {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *AddIamPolicyInput) GetRoles() []*model.IamRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AddIamPolicyInput) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

func (x *AddIamPolicyInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// Input message for removing IAM policies from a resource.
type RemoveIamPolicyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The principal for whom the IAM policy belongs to, indicating the entity from which policies will be removed.
	Principal *IamPrincipal `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// Roles to be removed from the principal's IAM policies for the given resource.
	// Multiple roles can be specified for removal, adjusting the principal's access and permissions.
	Roles []*model.IamRole `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// The type of resource from which IAM policies are to be removed.
	// Valid values include 'company', 'cloud_account', and other resource types.
	ResourceKind string `protobuf:"bytes,4,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	// The unique identifier for the resource from which IAM policies will be removed.
	// This ID should correspond to the actual resource entity in the system.
	ResourceId string `protobuf:"bytes,5,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *RemoveIamPolicyInput) Reset() {
	*x = RemoveIamPolicyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIamPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIamPolicyInput) ProtoMessage() {}

func (x *RemoveIamPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIamPolicyInput.ProtoReflect.Descriptor instead.
func (*RemoveIamPolicyInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveIamPolicyInput) GetPrincipal() *IamPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *RemoveIamPolicyInput) GetRoles() []*model.IamRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *RemoveIamPolicyInput) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

func (x *RemoveIamPolicyInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// input to remove multiple iam polices
type RemoveIamPoliciesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of remove iam policy inputs
	Entries []*RemoveIamPolicyInput `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *RemoveIamPoliciesInput) Reset() {
	*x = RemoveIamPoliciesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIamPoliciesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIamPoliciesInput) ProtoMessage() {}

func (x *RemoveIamPoliciesInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIamPoliciesInput.ProtoReflect.Descriptor instead.
func (*RemoveIamPoliciesInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveIamPoliciesInput) GetEntries() []*RemoveIamPolicyInput {
	if x != nil {
		return x.Entries
	}
	return nil
}

// response of iam policy by role
type IamPolicyByRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The mapping of IAM roles to their respective owner principals.
	RoleOwnerMapping *RoleAndOwnerMapping `protobuf:"bytes,1,opt,name=role_owner_mapping,json=roleOwnerMapping,proto3" json:"role_owner_mapping,omitempty"`
	// list of iam principals assigned with the role
	Principals []*IamPrincipal `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
}

func (x *IamPolicyByRole) Reset() {
	*x = IamPolicyByRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPolicyByRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPolicyByRole) ProtoMessage() {}

func (x *IamPolicyByRole) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPolicyByRole.ProtoReflect.Descriptor instead.
func (*IamPolicyByRole) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{9}
}

func (x *IamPolicyByRole) GetRoleOwnerMapping() *RoleAndOwnerMapping {
	if x != nil {
		return x.RoleOwnerMapping
	}
	return nil
}

func (x *IamPolicyByRole) GetPrincipals() []*IamPrincipal {
	if x != nil {
		return x.Principals
	}
	return nil
}

// response to return all iam policies by role
type IamPoliciesByRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of iam policies
	Entries []*IamPolicyByRole `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *IamPoliciesByRole) Reset() {
	*x = IamPoliciesByRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPoliciesByRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPoliciesByRole) ProtoMessage() {}

func (x *IamPoliciesByRole) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPoliciesByRole.ProtoReflect.Descriptor instead.
func (*IamPoliciesByRole) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{10}
}

func (x *IamPoliciesByRole) GetEntries() []*IamPolicyByRole {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Input message for updating IAM policies to a resource.
type UpdateIamPolicyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Principals associated with the IAM policy to be added to the resource.
	// This is a list, as multiple principals can be associated with the same resource.
	Principal *IamPrincipal `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// Roles to be assigned to the principals for the given resource.
	// Multiple roles can be assigned to the principals, defining their access level and permissions.
	Roles []*model.IamRole `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// The type of resource that the IAM policy is to be associated with.
	// Valid values include 'company', 'cloud_account', and other resource types.
	ResourceKind string `protobuf:"bytes,3,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	// The unique identifier for the resource which the IAM policy will be added to.
	// This ID should correspond to the actual resource entity in the system.
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *UpdateIamPolicyInput) Reset() {
	*x = UpdateIamPolicyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIamPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIamPolicyInput) ProtoMessage() {}

func (x *UpdateIamPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIamPolicyInput.ProtoReflect.Descriptor instead.
func (*UpdateIamPolicyInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateIamPolicyInput) GetPrincipal() *IamPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *UpdateIamPolicyInput) GetRoles() []*model.IamRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UpdateIamPolicyInput) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

func (x *UpdateIamPolicyInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// AuthorizationInput is designed for use in authorization queries, encapsulating the necessary
// information to evaluate whether a particular action or access is permitted. It comprises a
// primary tuple to check (check_tuple) and a collection of additional tuples (contextual_tuples)
// that provide relevant context for the authorization decision. This structure enables a nuanced
// evaluation of access control, taking into account not only the direct relationship between a user
// and a resource but also other relevant relationships and permissions that may impact the authorization
// outcome.
type AuthorizationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// check_tuple represents the primary FgaTuple to be evaluated in the authorization check. This tuple
	// directly relates to the user, resource, and action or relation being queried and is the focal point
	// of the authorization decision.
	Tuple *FgaTuple `protobuf:"bytes,1,opt,name=tuple,proto3" json:"tuple,omitempty"`
	// contextual_tuples is a list of additional FgaTuples that provide context for the authorization decision.
	// These tuples can represent other permissions, relationships, or constraints that are relevant to the
	// comprehensive evaluation of the user's authorization to perform an action on a resource. The inclusion
	// of these contextual tuples allows for a richer and more accurate authorization logic that can accommodate
	// complex access control scenarios.
	ContextualTuples []*FgaTuple `protobuf:"bytes,2,rep,name=contextual_tuples,json=contextualTuples,proto3" json:"contextual_tuples,omitempty"`
}

func (x *AuthorizationInput) Reset() {
	*x = AuthorizationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationInput) ProtoMessage() {}

func (x *AuthorizationInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationInput.ProtoReflect.Descriptor instead.
func (*AuthorizationInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{12}
}

func (x *AuthorizationInput) GetTuple() *FgaTuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *AuthorizationInput) GetContextualTuples() []*FgaTuple {
	if x != nil {
		return x.ContextualTuples
	}
	return nil
}

// IsAuthorized encapsulates the result of an authorization check, indicating whether a specific
// action or access attempt is authorized. This binary representation (true or false) serves as a
// straightforward mechanism to communicate permission statuses in security and access control systems,
// streamlining decision-making processes related to user actions on resources.
type IsAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is a boolean that represents the outcome of an authorization check. A value of true indicates
	// that the action or access is permitted, while a value of false denotes that it is denied. This field
	// simplifies the interpretation of authorization responses, enabling clear and direct enforcement of
	// access controls.
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsAuthorized) Reset() {
	*x = IsAuthorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorized) ProtoMessage() {}

func (x *IsAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorized.ProtoReflect.Descriptor instead.
func (*IsAuthorized) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{13}
}

func (x *IsAuthorized) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type AuthorizedResourceIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AuthorizedResourceIds) Reset() {
	*x = AuthorizedResourceIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedResourceIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedResourceIds) ProtoMessage() {}

func (x *AuthorizedResourceIds) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedResourceIds.ProtoReflect.Descriptor instead.
func (*AuthorizedResourceIds) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{14}
}

func (x *AuthorizedResourceIds) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// authorization config message to check before executing rpc
type RpcAuthorizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission required to run the service
	Permission apiresourceiampermission.ApiResourceIamPermission `protobuf:"varint,1,opt,name=permission,proto3,enum=cloud.planton.apis.iam.v1.iampolicy.enums.apiresourceiampermission.ApiResourceIamPermission" json:"permission,omitempty"`
	// type of the resource that the permission should be granted
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,2,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// path of the field inside the input object to be used for performing authorization.
	FieldPath string `protobuf:"bytes,3,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// error message to be returned when the permission is not granted to user
	ErrorMsg string `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// flag to identity if the authorization is to check with platform microservice identity
	IsSystemInternal bool `protobuf:"varint,5,opt,name=is_system_internal,json=isSystemInternal,proto3" json:"is_system_internal,omitempty"`
}

func (x *RpcAuthorizationConfig) Reset() {
	*x = RpcAuthorizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcAuthorizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcAuthorizationConfig) ProtoMessage() {}

func (x *RpcAuthorizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcAuthorizationConfig.ProtoReflect.Descriptor instead.
func (*RpcAuthorizationConfig) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP(), []int{15}
}

func (x *RpcAuthorizationConfig) GetPermission() apiresourceiampermission.ApiResourceIamPermission {
	if x != nil {
		return x.Permission
	}
	return apiresourceiampermission.ApiResourceIamPermission(0)
}

func (x *RpcAuthorizationConfig) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *RpcAuthorizationConfig) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *RpcAuthorizationConfig) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RpcAuthorizationConfig) GetIsSystemInternal() bool {
	if x != nil {
		return x.IsSystemInternal
	}
	return false
}

var File_cloud_planton_apis_iam_v1_iampolicy_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDesc = []byte{
	0x0a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a,
	0x54, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x72, 0x6f, 0x6c, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7d, 0x0a, 0x0c, 0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0xbd, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x60,
	0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x22, 0xdb, 0x01, 0x0a, 0x14, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x12, 0x6c, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72, 0x6f,
	0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xd0,
	0x01, 0x0a, 0x09, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x12, 0x6c, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x72, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0xdd, 0x01, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x79, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x73, 0x0a, 0x16, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x61,
	0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x61, 0x6d, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49,
	0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x61,
	0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x61, 0x6d, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x73, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x59, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x49, 0x61, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x22, 0x69, 0x0a, 0x11, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xfb, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x49, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x67, 0x61,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x67, 0x61, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x24,
	0x0a, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x16, 0x52, 0x70, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7c, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x72,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0xeb, 0x02, 0x0a,
	0x37, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02,
	0x07, 0x43, 0x50, 0x41, 0x49, 0x56, 0x49, 0x4d, 0xaa, 0x02, 0x29, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x49, 0x61,
	0x6d, 0x2e, 0x56, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x29, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x56, 0x31,
	0x5c, 0x49, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0xe2, 0x02, 0x35, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a,
	0x3a, 0x49, 0x61, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x49, 0x61, 0x6d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescData = file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDesc
)

func file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDescData
}

var file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_goTypes = []interface{}{
	(*IamPrincipal)(nil),                                    // 0: cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	(*RoleAndOwnerMapping)(nil),                             // 1: cloud.planton.apis.iam.v1.iampolicy.model.RoleAndOwnerMapping
	(*IamPolicyByPrincipal)(nil),                            // 2: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByPrincipal
	(*IamPolicy)(nil),                                       // 3: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicy
	(*GetIamPolicyByApiResourceKindAndResourceIdInput)(nil), // 4: cloud.planton.apis.iam.v1.iampolicy.model.GetIamPolicyByApiResourceKindAndResourceIdInput
	(*IamPoliciesByPrincipal)(nil),                          // 5: cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal
	(*AddIamPolicyInput)(nil),                               // 6: cloud.planton.apis.iam.v1.iampolicy.model.AddIamPolicyInput
	(*RemoveIamPolicyInput)(nil),                            // 7: cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPolicyInput
	(*RemoveIamPoliciesInput)(nil),                          // 8: cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPoliciesInput
	(*IamPolicyByRole)(nil),                                 // 9: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByRole
	(*IamPoliciesByRole)(nil),                               // 10: cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByRole
	(*UpdateIamPolicyInput)(nil),                            // 11: cloud.planton.apis.iam.v1.iampolicy.model.UpdateIamPolicyInput
	(*AuthorizationInput)(nil),                              // 12: cloud.planton.apis.iam.v1.iampolicy.model.AuthorizationInput
	(*IsAuthorized)(nil),                                    // 13: cloud.planton.apis.iam.v1.iampolicy.model.IsAuthorized
	(*AuthorizedResourceIds)(nil),                           // 14: cloud.planton.apis.iam.v1.iampolicy.model.AuthorizedResourceIds
	(*RpcAuthorizationConfig)(nil),                          // 15: cloud.planton.apis.iam.v1.iampolicy.model.RpcAuthorizationConfig
	(*model.IamRole)(nil),                                   // 16: cloud.planton.apis.iam.v1.iamrole.model.IamRole
	(*FgaTuple)(nil),                                        // 17: cloud.planton.apis.iam.v1.iampolicy.model.FgaTuple
	(apiresourceiampermission.ApiResourceIamPermission)(0),  // 18: cloud.planton.apis.iam.v1.iampolicy.enums.apiresourceiampermission.ApiResourceIamPermission
	(apiresourcekind.ApiResourceKind)(0),                    // 19: cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
}
var file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_depIdxs = []int32{
	16, // 0: cloud.planton.apis.iam.v1.iampolicy.model.RoleAndOwnerMapping.role:type_name -> cloud.planton.apis.iam.v1.iamrole.model.IamRole
	0,  // 1: cloud.planton.apis.iam.v1.iampolicy.model.RoleAndOwnerMapping.owner_principal:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	0,  // 2: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByPrincipal.principal:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	1,  // 3: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByPrincipal.role_owner_mapping:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.RoleAndOwnerMapping
	0,  // 4: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicy.principal:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	1,  // 5: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicy.role_owner_mapping:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.RoleAndOwnerMapping
	2,  // 6: cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByPrincipal.entries:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByPrincipal
	0,  // 7: cloud.planton.apis.iam.v1.iampolicy.model.AddIamPolicyInput.principals:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	16, // 8: cloud.planton.apis.iam.v1.iampolicy.model.AddIamPolicyInput.roles:type_name -> cloud.planton.apis.iam.v1.iamrole.model.IamRole
	0,  // 9: cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPolicyInput.principal:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	16, // 10: cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPolicyInput.roles:type_name -> cloud.planton.apis.iam.v1.iamrole.model.IamRole
	7,  // 11: cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPoliciesInput.entries:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.RemoveIamPolicyInput
	1,  // 12: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByRole.role_owner_mapping:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.RoleAndOwnerMapping
	0,  // 13: cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByRole.principals:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	9,  // 14: cloud.planton.apis.iam.v1.iampolicy.model.IamPoliciesByRole.entries:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPolicyByRole
	0,  // 15: cloud.planton.apis.iam.v1.iampolicy.model.UpdateIamPolicyInput.principal:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.IamPrincipal
	16, // 16: cloud.planton.apis.iam.v1.iampolicy.model.UpdateIamPolicyInput.roles:type_name -> cloud.planton.apis.iam.v1.iamrole.model.IamRole
	17, // 17: cloud.planton.apis.iam.v1.iampolicy.model.AuthorizationInput.tuple:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.FgaTuple
	17, // 18: cloud.planton.apis.iam.v1.iampolicy.model.AuthorizationInput.contextual_tuples:type_name -> cloud.planton.apis.iam.v1.iampolicy.model.FgaTuple
	18, // 19: cloud.planton.apis.iam.v1.iampolicy.model.RpcAuthorizationConfig.permission:type_name -> cloud.planton.apis.iam.v1.iampolicy.enums.apiresourceiampermission.ApiResourceIamPermission
	19, // 20: cloud.planton.apis.iam.v1.iampolicy.model.RpcAuthorizationConfig.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_init() }
func file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_init() {
	if File_cloud_planton_apis_iam_v1_iampolicy_model_io_proto != nil {
		return
	}
	file_cloud_planton_apis_iam_v1_iampolicy_model_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAndOwnerMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPolicyByPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIamPolicyByApiResourceKindAndResourceIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPoliciesByPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIamPolicyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIamPolicyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIamPoliciesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPolicyByRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPoliciesByRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIamPolicyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedResourceIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcAuthorizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_iam_v1_iampolicy_model_io_proto = out.File
	file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_goTypes = nil
	file_cloud_planton_apis_iam_v1_iampolicy_model_io_proto_depIdxs = nil
}
