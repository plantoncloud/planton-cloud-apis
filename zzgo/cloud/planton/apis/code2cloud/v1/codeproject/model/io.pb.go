// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/code2cloud/v1/codeproject/model/io.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/artifactstore/model"
	codeprojectprofile "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/codeproject/enums/codeprojectprofile"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/environment/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/microserviceinstance/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wrapper for code project id
type CodeProjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CodeProjectId) Reset() {
	*x = CodeProjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectId) ProtoMessage() {}

func (x *CodeProjectId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectId.ProtoReflect.Descriptor instead.
func (*CodeProjectId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *CodeProjectId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list of code project ids
type CodeProjectIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []string `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectIds) Reset() {
	*x = CodeProjectIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectIds) ProtoMessage() {}

func (x *CodeProjectIds) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectIds.ProtoReflect.Descriptor instead.
func (*CodeProjectIds) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *CodeProjectIds) GetEntries() []string {
	if x != nil {
		return x.Entries
	}
	return nil
}

// wrapper for code project url
type CodeProjectUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CodeProjectUrl) Reset() {
	*x = CodeProjectUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectUrl) ProtoMessage() {}

func (x *CodeProjectUrl) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectUrl.ProtoReflect.Descriptor instead.
func (*CodeProjectUrl) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *CodeProjectUrl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list of code projects
type CodeProjectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CodeProject `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectList) Reset() {
	*x = CodeProjectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectList) ProtoMessage() {}

func (x *CodeProjectList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectList.ProtoReflect.Descriptor instead.
func (*CodeProjectList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *CodeProjectList) GetEntries() []*CodeProject {
	if x != nil {
		return x.Entries
	}
	return nil
}

// response for paginated query to list code projects
type CodeProjectPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPages int32          `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Entries    []*CodeProject `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectPage) Reset() {
	*x = CodeProjectPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectPage) ProtoMessage() {}

func (x *CodeProjectPage) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectPage.ProtoReflect.Descriptor instead.
func (*CodeProjectPage) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *CodeProjectPage) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *CodeProjectPage) GetEntries() []*CodeProject {
	if x != nil {
		return x.Entries
	}
	return nil
}

// input for command to attach a machine account to code-project on upstream code-server(github/gitlab)
type AttachMachineAccountByCodeProjectIdCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email of the machine account to be attached to the code-project
	MachineAccountEmail string `protobuf:"bytes,1,opt,name=machine_account_email,json=machineAccountEmail,proto3" json:"machine_account_email,omitempty"`
	// id of the code project to which the machine account is to be attached
	CodeProjectId string `protobuf:"bytes,2,opt,name=code_project_id,json=codeProjectId,proto3" json:"code_project_id,omitempty"`
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) Reset() {
	*x = AttachMachineAccountByCodeProjectIdCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachMachineAccountByCodeProjectIdCommandInput) ProtoMessage() {}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachMachineAccountByCodeProjectIdCommandInput.ProtoReflect.Descriptor instead.
func (*AttachMachineAccountByCodeProjectIdCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) GetMachineAccountEmail() string {
	if x != nil {
		return x.MachineAccountEmail
	}
	return ""
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) GetCodeProjectId() string {
	if x != nil {
		return x.CodeProjectId
	}
	return ""
}

// code project file
type CodeProjectFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path of the file, including the name of the file ex: .github/workflows/main.yaml
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// base64 encoded content of the template file
	FileContentBase64 string `protobuf:"bytes,2,opt,name=file_content_base64,json=fileContentBase64,proto3" json:"file_content_base64,omitempty"`
	// file content plain text
	FileContent string `protobuf:"bytes,3,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *CodeProjectFile) Reset() {
	*x = CodeProjectFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectFile) ProtoMessage() {}

func (x *CodeProjectFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectFile.ProtoReflect.Descriptor instead.
func (*CodeProjectFile) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *CodeProjectFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CodeProjectFile) GetFileContentBase64() string {
	if x != nil {
		return x.FileContentBase64
	}
	return ""
}

func (x *CodeProjectFile) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

// list of code project files
type CodeProjectFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CodeProjectFile `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectFiles) Reset() {
	*x = CodeProjectFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectFiles) ProtoMessage() {}

func (x *CodeProjectFiles) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectFiles.ProtoReflect.Descriptor instead.
func (*CodeProjectFiles) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *CodeProjectFiles) GetEntries() []*CodeProjectFile {
	if x != nil {
		return x.Entries
	}
	return nil
}

// code project profile
type CodeProjectProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this field is only used in the local context and is ignored for operations performed on the server.
	CodeProjectDir string `protobuf:"bytes,1,opt,name=code_project_dir,json=codeProjectDir,proto3" json:"code_project_dir,omitempty"`
	// is code project deployable to a environment.
	// this field is only used in the local context and is ignored for operations performed on the server.
	IsDeployable bool `protobuf:"varint,2,opt,name=is_deployable,json=isDeployable,proto3" json:"is_deployable,omitempty"`
	// code project language
	Lang codeprojectprofile.CodeProjectLang `protobuf:"varint,3,opt,name=lang,proto3,enum=cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectLang" json:"lang,omitempty"`
	// code project category library vs cli vs microservice
	Cat codeprojectprofile.CodeProjectCat `protobuf:"varint,4,opt,name=cat,proto3,enum=cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCat" json:"cat,omitempty"`
	// code project sub category
	//
	// Types that are assignable to SubCat:
	//
	//	*CodeProjectProfile_LibSubCat
	//	*CodeProjectProfile_MicroserviceSubCat
	SubCat isCodeProjectProfile_SubCat `protobuf_oneof:"sub_cat"`
	// code project sub-sub category
	//
	// Types that are assignable to SubSubCat:
	//
	//	*CodeProjectProfile_MicroserviceApiSubSubCat
	//	*CodeProjectProfile_MicroserviceWebAppSubSubCat
	SubSubCat isCodeProjectProfile_SubSubCat `protobuf_oneof:"sub_sub_cat"`
}

func (x *CodeProjectProfile) Reset() {
	*x = CodeProjectProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectProfile) ProtoMessage() {}

func (x *CodeProjectProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectProfile.ProtoReflect.Descriptor instead.
func (*CodeProjectProfile) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{8}
}

func (x *CodeProjectProfile) GetCodeProjectDir() string {
	if x != nil {
		return x.CodeProjectDir
	}
	return ""
}

func (x *CodeProjectProfile) GetIsDeployable() bool {
	if x != nil {
		return x.IsDeployable
	}
	return false
}

func (x *CodeProjectProfile) GetLang() codeprojectprofile.CodeProjectLang {
	if x != nil {
		return x.Lang
	}
	return codeprojectprofile.CodeProjectLang(0)
}

func (x *CodeProjectProfile) GetCat() codeprojectprofile.CodeProjectCat {
	if x != nil {
		return x.Cat
	}
	return codeprojectprofile.CodeProjectCat(0)
}

func (m *CodeProjectProfile) GetSubCat() isCodeProjectProfile_SubCat {
	if m != nil {
		return m.SubCat
	}
	return nil
}

func (x *CodeProjectProfile) GetLibSubCat() codeprojectprofile.CodeProjectCatLibSubCat {
	if x, ok := x.GetSubCat().(*CodeProjectProfile_LibSubCat); ok {
		return x.LibSubCat
	}
	return codeprojectprofile.CodeProjectCatLibSubCat(0)
}

func (x *CodeProjectProfile) GetMicroserviceSubCat() codeprojectprofile.CodeProjectCatMicroserviceSubCat {
	if x, ok := x.GetSubCat().(*CodeProjectProfile_MicroserviceSubCat); ok {
		return x.MicroserviceSubCat
	}
	return codeprojectprofile.CodeProjectCatMicroserviceSubCat(0)
}

func (m *CodeProjectProfile) GetSubSubCat() isCodeProjectProfile_SubSubCat {
	if m != nil {
		return m.SubSubCat
	}
	return nil
}

func (x *CodeProjectProfile) GetMicroserviceApiSubSubCat() codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat {
	if x, ok := x.GetSubSubCat().(*CodeProjectProfile_MicroserviceApiSubSubCat); ok {
		return x.MicroserviceApiSubSubCat
	}
	return codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat(0)
}

func (x *CodeProjectProfile) GetMicroserviceWebAppSubSubCat() codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat {
	if x, ok := x.GetSubSubCat().(*CodeProjectProfile_MicroserviceWebAppSubSubCat); ok {
		return x.MicroserviceWebAppSubSubCat
	}
	return codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat(0)
}

type isCodeProjectProfile_SubCat interface {
	isCodeProjectProfile_SubCat()
}

type CodeProjectProfile_LibSubCat struct {
	LibSubCat codeprojectprofile.CodeProjectCatLibSubCat `protobuf:"varint,5,opt,name=lib_sub_cat,json=libSubCat,proto3,enum=cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatLibSubCat,oneof"`
}

type CodeProjectProfile_MicroserviceSubCat struct {
	MicroserviceSubCat codeprojectprofile.CodeProjectCatMicroserviceSubCat `protobuf:"varint,6,opt,name=microservice_sub_cat,json=microserviceSubCat,proto3,enum=cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCat,oneof"`
}

func (*CodeProjectProfile_LibSubCat) isCodeProjectProfile_SubCat() {}

func (*CodeProjectProfile_MicroserviceSubCat) isCodeProjectProfile_SubCat() {}

type isCodeProjectProfile_SubSubCat interface {
	isCodeProjectProfile_SubSubCat()
}

type CodeProjectProfile_MicroserviceApiSubSubCat struct {
	MicroserviceApiSubSubCat codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat `protobuf:"varint,7,opt,name=microservice_api_sub_sub_cat,json=microserviceApiSubSubCat,proto3,enum=cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat,oneof"`
}

type CodeProjectProfile_MicroserviceWebAppSubSubCat struct {
	MicroserviceWebAppSubSubCat codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat `protobuf:"varint,8,opt,name=microservice_web_app_sub_sub_cat,json=microserviceWebAppSubSubCat,proto3,enum=cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat,oneof"`
}

func (*CodeProjectProfile_MicroserviceApiSubSubCat) isCodeProjectProfile_SubSubCat() {}

func (*CodeProjectProfile_MicroserviceWebAppSubSubCat) isCodeProjectProfile_SubSubCat() {}

// build engine code project
type BuildEngineProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project tilt config snippet
	TiltConfigSnippet string `protobuf:"bytes,99,opt,name=tilt_config_snippet,json=tiltConfigSnippet,proto3" json:"tilt_config_snippet,omitempty"`
	// code project directory
	CodeProjectDir string `protobuf:"bytes,1,opt,name=code_project_dir,json=codeProjectDir,proto3" json:"code_project_dir,omitempty"`
	// code project name
	CodeProjectName string `protobuf:"bytes,2,opt,name=code_project_name,json=codeProjectName,proto3" json:"code_project_name,omitempty"`
	// normalized code project path used for ensuring uniqueness in tilt resources in build engine.
	CodeProjectNormalizedPath string `protobuf:"bytes,3,opt,name=code_project_normalized_path,json=codeProjectNormalizedPath,proto3" json:"code_project_normalized_path,omitempty"`
	// either https or ssh url depending on the method supported for cloning the git project.
	// this is the same url that should added to the code project that is linked to microservice resources.
	GitRemoteUrl string `protobuf:"bytes,4,opt,name=git_remote_url,json=gitRemoteUrl,proto3" json:"git_remote_url,omitempty"`
	// flag to indicate if project is required to be built before deployed to build engine environment.
	// this flag is used to ensure link between build step and deployment step in tilt config file.
	IsBuildRequired bool `protobuf:"varint,5,opt,name=is_build_required,json=isBuildRequired,proto3" json:"is_build_required,omitempty"`
	// is code project deployable to a environment.
	IsDeployable bool `protobuf:"varint,6,opt,name=is_deployable,json=isDeployable,proto3" json:"is_deployable,omitempty"`
	// microservice-instance
	MicroserviceInstance *model.MicroserviceInstance `protobuf:"bytes,7,opt,name=microservice_instance,json=microserviceInstance,proto3" json:"microservice_instance,omitempty"`
}

func (x *BuildEngineProject) Reset() {
	*x = BuildEngineProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEngineProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEngineProject) ProtoMessage() {}

func (x *BuildEngineProject) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEngineProject.ProtoReflect.Descriptor instead.
func (*BuildEngineProject) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{9}
}

func (x *BuildEngineProject) GetTiltConfigSnippet() string {
	if x != nil {
		return x.TiltConfigSnippet
	}
	return ""
}

func (x *BuildEngineProject) GetCodeProjectDir() string {
	if x != nil {
		return x.CodeProjectDir
	}
	return ""
}

func (x *BuildEngineProject) GetCodeProjectName() string {
	if x != nil {
		return x.CodeProjectName
	}
	return ""
}

func (x *BuildEngineProject) GetCodeProjectNormalizedPath() string {
	if x != nil {
		return x.CodeProjectNormalizedPath
	}
	return ""
}

func (x *BuildEngineProject) GetGitRemoteUrl() string {
	if x != nil {
		return x.GitRemoteUrl
	}
	return ""
}

func (x *BuildEngineProject) GetIsBuildRequired() bool {
	if x != nil {
		return x.IsBuildRequired
	}
	return false
}

func (x *BuildEngineProject) GetIsDeployable() bool {
	if x != nil {
		return x.IsDeployable
	}
	return false
}

func (x *BuildEngineProject) GetMicroserviceInstance() *model.MicroserviceInstance {
	if x != nil {
		return x.MicroserviceInstance
	}
	return nil
}

// input for query rpc to get dynamically generated code pipeline template
type GenerateCodePipelineTemplateQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code project profile
	CodeProjectProfile *CodeProjectProfile `protobuf:"bytes,1,opt,name=code_project_profile,json=codeProjectProfile,proto3" json:"code_project_profile,omitempty"`
	// git remote url used for looking up code project
	GitRemoteUrl string `protobuf:"bytes,2,opt,name=git_remote_url,json=gitRemoteUrl,proto3" json:"git_remote_url,omitempty"`
	// list of microservice-instances declared in _kustomize directory
	MicroserviceInstances []*model.MicroserviceInstance `protobuf:"bytes,3,rep,name=microservice_instances,json=microserviceInstances,proto3" json:"microservice_instances,omitempty"`
}

func (x *GenerateCodePipelineTemplateQueryInput) Reset() {
	*x = GenerateCodePipelineTemplateQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCodePipelineTemplateQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCodePipelineTemplateQueryInput) ProtoMessage() {}

func (x *GenerateCodePipelineTemplateQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCodePipelineTemplateQueryInput.ProtoReflect.Descriptor instead.
func (*GenerateCodePipelineTemplateQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateCodePipelineTemplateQueryInput) GetCodeProjectProfile() *CodeProjectProfile {
	if x != nil {
		return x.CodeProjectProfile
	}
	return nil
}

func (x *GenerateCodePipelineTemplateQueryInput) GetGitRemoteUrl() string {
	if x != nil {
		return x.GitRemoteUrl
	}
	return ""
}

func (x *GenerateCodePipelineTemplateQueryInput) GetMicroserviceInstances() []*model.MicroserviceInstance {
	if x != nil {
		return x.MicroserviceInstances
	}
	return nil
}

type GenerateCodePipelineTemplateQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// input used for generating the template
	TemplateInput *CodePipelineBuildTemplateInput `protobuf:"bytes,1,opt,name=template_input,json=templateInput,proto3" json:"template_input,omitempty"`
	// template generated based on the provided inputs
	TemplateOutput string `protobuf:"bytes,2,opt,name=template_output,json=templateOutput,proto3" json:"template_output,omitempty"`
}

func (x *GenerateCodePipelineTemplateQueryResp) Reset() {
	*x = GenerateCodePipelineTemplateQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCodePipelineTemplateQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCodePipelineTemplateQueryResp) ProtoMessage() {}

func (x *GenerateCodePipelineTemplateQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCodePipelineTemplateQueryResp.ProtoReflect.Descriptor instead.
func (*GenerateCodePipelineTemplateQueryResp) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateCodePipelineTemplateQueryResp) GetTemplateInput() *CodePipelineBuildTemplateInput {
	if x != nil {
		return x.TemplateInput
	}
	return nil
}

func (x *GenerateCodePipelineTemplateQueryResp) GetTemplateOutput() string {
	if x != nil {
		return x.TemplateOutput
	}
	return ""
}

// container(docker) images to be used in code pipeline templates
type CodePipelineTemplateContainerImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerBuild     string `protobuf:"bytes,1,opt,name=docker_build,json=dockerBuild,proto3" json:"docker_build,omitempty"`
	GolangBuild     string `protobuf:"bytes,2,opt,name=golang_build,json=golangBuild,proto3" json:"golang_build,omitempty"`
	JavaBuild       string `protobuf:"bytes,3,opt,name=java_build,json=javaBuild,proto3" json:"java_build,omitempty"`
	JavascriptBuild string `protobuf:"bytes,4,opt,name=javascript_build,json=javascriptBuild,proto3" json:"javascript_build,omitempty"`
	PlantonCli      string `protobuf:"bytes,5,opt,name=planton_cli,json=plantonCli,proto3" json:"planton_cli,omitempty"`
	ProtobufBuild   string `protobuf:"bytes,6,opt,name=protobuf_build,json=protobufBuild,proto3" json:"protobuf_build,omitempty"`
}

func (x *CodePipelineTemplateContainerImages) Reset() {
	*x = CodePipelineTemplateContainerImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodePipelineTemplateContainerImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodePipelineTemplateContainerImages) ProtoMessage() {}

func (x *CodePipelineTemplateContainerImages) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodePipelineTemplateContainerImages.ProtoReflect.Descriptor instead.
func (*CodePipelineTemplateContainerImages) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{12}
}

func (x *CodePipelineTemplateContainerImages) GetDockerBuild() string {
	if x != nil {
		return x.DockerBuild
	}
	return ""
}

func (x *CodePipelineTemplateContainerImages) GetGolangBuild() string {
	if x != nil {
		return x.GolangBuild
	}
	return ""
}

func (x *CodePipelineTemplateContainerImages) GetJavaBuild() string {
	if x != nil {
		return x.JavaBuild
	}
	return ""
}

func (x *CodePipelineTemplateContainerImages) GetJavascriptBuild() string {
	if x != nil {
		return x.JavascriptBuild
	}
	return ""
}

func (x *CodePipelineTemplateContainerImages) GetPlantonCli() string {
	if x != nil {
		return x.PlantonCli
	}
	return ""
}

func (x *CodePipelineTemplateContainerImages) GetProtobufBuild() string {
	if x != nil {
		return x.ProtobufBuild
	}
	return ""
}

// gitlab pipeline template is used as input data model for processing gitlab build job templates
// templating frameworks like apache freemarker in java or the built in templating engine in golang can use this data model as input for rendering the template.
type CodePipelineBuildTemplateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the cli environment to be used. this can be test or live.
	PlantonCloudCliEnvironment string `protobuf:"bytes,1,opt,name=planton_cloud_cli_environment,json=plantonCloudCliEnvironment,proto3" json:"planton_cloud_cli_environment,omitempty"`
	// artifact-store to be used by the pipeline
	ArtifactStore *model1.ArtifactStore `protobuf:"bytes,2,opt,name=artifact_store,json=artifactStore,proto3" json:"artifact_store,omitempty"`
	// container images(docker) to be used inside code pipeline templates
	TemplateContainerImages *CodePipelineTemplateContainerImages `protobuf:"bytes,3,opt,name=template_container_images,json=templateContainerImages,proto3" json:"template_container_images,omitempty"`
	// container image to be used in container image build jobs.
	// container image tag is not included in the value of this attribute.
	// git commit short sha is used as the tag for the image.
	ProjectContainerImage string `protobuf:"bytes,4,opt,name=project_container_image,json=projectContainerImage,proto3" json:"project_container_image,omitempty"`
}

func (x *CodePipelineBuildTemplateInput) Reset() {
	*x = CodePipelineBuildTemplateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodePipelineBuildTemplateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodePipelineBuildTemplateInput) ProtoMessage() {}

func (x *CodePipelineBuildTemplateInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodePipelineBuildTemplateInput.ProtoReflect.Descriptor instead.
func (*CodePipelineBuildTemplateInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{13}
}

func (x *CodePipelineBuildTemplateInput) GetPlantonCloudCliEnvironment() string {
	if x != nil {
		return x.PlantonCloudCliEnvironment
	}
	return ""
}

func (x *CodePipelineBuildTemplateInput) GetArtifactStore() *model1.ArtifactStore {
	if x != nil {
		return x.ArtifactStore
	}
	return nil
}

func (x *CodePipelineBuildTemplateInput) GetTemplateContainerImages() *CodePipelineTemplateContainerImages {
	if x != nil {
		return x.TemplateContainerImages
	}
	return nil
}

func (x *CodePipelineBuildTemplateInput) GetProjectContainerImage() string {
	if x != nil {
		return x.ProjectContainerImage
	}
	return ""
}

// input used for rendering job template for microservice deployment to each environment
type CodePipelineDeployTemplateJobInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// container images(docker) to be used inside code pipeline templates
	TemplateContainerImages *CodePipelineTemplateContainerImages `protobuf:"bytes,1,opt,name=template_container_images,json=templateContainerImages,proto3" json:"template_container_images,omitempty"`
	// environment
	Environment *model2.Environment `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// microservice-instance
	MicroserviceInstance *model.MicroserviceInstance `protobuf:"bytes,3,opt,name=microservice_instance,json=microserviceInstance,proto3" json:"microservice_instance,omitempty"`
	// container image tag is not included in the value of this attribute.
	// git commit short sha is used as the tag for the image.
	ProjectContainerImage string `protobuf:"bytes,4,opt,name=project_container_image,json=projectContainerImage,proto3" json:"project_container_image,omitempty"`
	// flag to indicate if manual gate is enabled for the deployment environment.
	// this flag is used for setting `when` attribute of the gitlab pipeline https://docs.gitlab.com/ee/ci/yaml/#when
	IsManualGateRequired bool `protobuf:"varint,5,opt,name=is_manual_gate_required,json=isManualGateRequired,proto3" json:"is_manual_gate_required,omitempty"`
	// name of the cli environment to be used. this can be test or live.
	PlantonCloudCliEnvironment string `protobuf:"bytes,6,opt,name=planton_cloud_cli_environment,json=plantonCloudCliEnvironment,proto3" json:"planton_cloud_cli_environment,omitempty"`
}

func (x *CodePipelineDeployTemplateJobInput) Reset() {
	*x = CodePipelineDeployTemplateJobInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodePipelineDeployTemplateJobInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodePipelineDeployTemplateJobInput) ProtoMessage() {}

func (x *CodePipelineDeployTemplateJobInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodePipelineDeployTemplateJobInput.ProtoReflect.Descriptor instead.
func (*CodePipelineDeployTemplateJobInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP(), []int{14}
}

func (x *CodePipelineDeployTemplateJobInput) GetTemplateContainerImages() *CodePipelineTemplateContainerImages {
	if x != nil {
		return x.TemplateContainerImages
	}
	return nil
}

func (x *CodePipelineDeployTemplateJobInput) GetEnvironment() *model2.Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *CodePipelineDeployTemplateJobInput) GetMicroserviceInstance() *model.MicroserviceInstance {
	if x != nil {
		return x.MicroserviceInstance
	}
	return nil
}

func (x *CodePipelineDeployTemplateJobInput) GetProjectContainerImage() string {
	if x != nil {
		return x.ProjectContainerImage
	}
	return ""
}

func (x *CodePipelineDeployTemplateJobInput) GetIsManualGateRequired() bool {
	if x != nil {
		return x.IsManualGateRequired
	}
	return false
}

func (x *CodePipelineDeployTemplateJobInput) GetPlantonCloudCliEnvironment() string {
	if x != nil {
		return x.PlantonCloudCliEnvironment
	}
	return ""
}

var File_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x1a, 0x40, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x60, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x0d, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x2f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x15, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xed, 0x07, 0x0a, 0x12,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x6a, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x67, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x4c, 0x69, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x69, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x1c, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x48, 0x01, 0x52, 0x18, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x12,
	0xbf, 0x01, 0x0a, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x76, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43,
	0x61, 0x74, 0x48, 0x01, 0x52, 0x1b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x12,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x69, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x26, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x16, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x79, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x61, 0x76, 0x61, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a,
	0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c,
	0x69, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x0e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x17, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xd8, 0x04, 0x0a, 0x22, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x93, 0x01,
	0x0a, 0x19, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x17, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x63, 0x6c, 0x69, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6c, 0x69, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0xa1, 0x03, 0x0a, 0x40, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x62, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a,
	0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x43, 0x56, 0x43, 0x4d, 0xaa,
	0x02, 0x32, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x32, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x3e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64,
	0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x38, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69,
	0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x56,
	0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescData = file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDesc
)

func file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDescData
}

var file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_goTypes = []interface{}{
	(*CodeProjectId)(nil),                                                   // 0: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectId
	(*CodeProjectIds)(nil),                                                  // 1: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectIds
	(*CodeProjectUrl)(nil),                                                  // 2: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectUrl
	(*CodeProjectList)(nil),                                                 // 3: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectList
	(*CodeProjectPage)(nil),                                                 // 4: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectPage
	(*AttachMachineAccountByCodeProjectIdCommandInput)(nil),                 // 5: cloud.planton.apis.code2cloud.v1.codeproject.model.AttachMachineAccountByCodeProjectIdCommandInput
	(*CodeProjectFile)(nil),                                                 // 6: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectFile
	(*CodeProjectFiles)(nil),                                                // 7: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectFiles
	(*CodeProjectProfile)(nil),                                              // 8: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile
	(*BuildEngineProject)(nil),                                              // 9: cloud.planton.apis.code2cloud.v1.codeproject.model.BuildEngineProject
	(*GenerateCodePipelineTemplateQueryInput)(nil),                          // 10: cloud.planton.apis.code2cloud.v1.codeproject.model.GenerateCodePipelineTemplateQueryInput
	(*GenerateCodePipelineTemplateQueryResp)(nil),                           // 11: cloud.planton.apis.code2cloud.v1.codeproject.model.GenerateCodePipelineTemplateQueryResp
	(*CodePipelineTemplateContainerImages)(nil),                             // 12: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineTemplateContainerImages
	(*CodePipelineBuildTemplateInput)(nil),                                  // 13: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineBuildTemplateInput
	(*CodePipelineDeployTemplateJobInput)(nil),                              // 14: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineDeployTemplateJobInput
	(*CodeProject)(nil),                                                     // 15: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProject
	(codeprojectprofile.CodeProjectLang)(0),                                 // 16: cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectLang
	(codeprojectprofile.CodeProjectCat)(0),                                  // 17: cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCat
	(codeprojectprofile.CodeProjectCatLibSubCat)(0),                         // 18: cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatLibSubCat
	(codeprojectprofile.CodeProjectCatMicroserviceSubCat)(0),                // 19: cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCat
	(codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat)(0),    // 20: cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat
	(codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat)(0), // 21: cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat
	(*model.MicroserviceInstance)(nil),                                      // 22: cloud.planton.apis.code2cloud.v1.microserviceinstance.model.MicroserviceInstance
	(*model1.ArtifactStore)(nil),                                            // 23: cloud.planton.apis.code2cloud.v1.artifactstore.model.ArtifactStore
	(*model2.Environment)(nil),                                              // 24: cloud.planton.apis.code2cloud.v1.environment.model.Environment
}
var file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_depIdxs = []int32{
	15, // 0: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectList.entries:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProject
	15, // 1: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectPage.entries:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProject
	6,  // 2: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectFiles.entries:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectFile
	16, // 3: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile.lang:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectLang
	17, // 4: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile.cat:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCat
	18, // 5: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile.lib_sub_cat:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatLibSubCat
	19, // 6: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile.microservice_sub_cat:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCat
	20, // 7: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile.microservice_api_sub_sub_cat:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCatApiSubSubCat
	21, // 8: cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile.microservice_web_app_sub_sub_cat:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.enums.codeprojectprofile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat
	22, // 9: cloud.planton.apis.code2cloud.v1.codeproject.model.BuildEngineProject.microservice_instance:type_name -> cloud.planton.apis.code2cloud.v1.microserviceinstance.model.MicroserviceInstance
	8,  // 10: cloud.planton.apis.code2cloud.v1.codeproject.model.GenerateCodePipelineTemplateQueryInput.code_project_profile:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodeProjectProfile
	22, // 11: cloud.planton.apis.code2cloud.v1.codeproject.model.GenerateCodePipelineTemplateQueryInput.microservice_instances:type_name -> cloud.planton.apis.code2cloud.v1.microserviceinstance.model.MicroserviceInstance
	13, // 12: cloud.planton.apis.code2cloud.v1.codeproject.model.GenerateCodePipelineTemplateQueryResp.template_input:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineBuildTemplateInput
	23, // 13: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineBuildTemplateInput.artifact_store:type_name -> cloud.planton.apis.code2cloud.v1.artifactstore.model.ArtifactStore
	12, // 14: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineBuildTemplateInput.template_container_images:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineTemplateContainerImages
	12, // 15: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineDeployTemplateJobInput.template_container_images:type_name -> cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineTemplateContainerImages
	24, // 16: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineDeployTemplateJobInput.environment:type_name -> cloud.planton.apis.code2cloud.v1.environment.model.Environment
	22, // 17: cloud.planton.apis.code2cloud.v1.codeproject.model.CodePipelineDeployTemplateJobInput.microservice_instance:type_name -> cloud.planton.apis.code2cloud.v1.microserviceinstance.model.MicroserviceInstance
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_init() }
func file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_init() {
	if File_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto != nil {
		return
	}
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachMachineAccountByCodeProjectIdCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEngineProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCodePipelineTemplateQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCodePipelineTemplateQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodePipelineTemplateContainerImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodePipelineBuildTemplateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodePipelineDeployTemplateJobInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CodeProjectProfile_LibSubCat)(nil),
		(*CodeProjectProfile_MicroserviceSubCat)(nil),
		(*CodeProjectProfile_MicroserviceApiSubSubCat)(nil),
		(*CodeProjectProfile_MicroserviceWebAppSubSubCat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto = out.File
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_goTypes = nil
	file_cloud_planton_apis_code2cloud_v1_codeproject_model_io_proto_depIdxs = nil
}
