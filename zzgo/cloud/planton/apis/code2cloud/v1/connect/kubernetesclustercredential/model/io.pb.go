// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/code2cloud/v1/connect/kubernetesclustercredential/model/io.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wrapper for organization cloud account id
type KubernetesClusterCredentialId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KubernetesClusterCredentialId) Reset() {
	*x = KubernetesClusterCredentialId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterCredentialId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterCredentialId) ProtoMessage() {}

func (x *KubernetesClusterCredentialId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterCredentialId.ProtoReflect.Descriptor instead.
func (*KubernetesClusterCredentialId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesClusterCredentialId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// kubernetes-cluster kubernetes object
type KubernetesClusterKubernetesObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// kubernetes object
	KubernetesObject *model1.KubernetesObject `protobuf:"bytes,2,opt,name=kubernetes_object,json=kubernetesObject,proto3" json:"kubernetes_object,omitempty"`
}

func (x *KubernetesClusterKubernetesObject) Reset() {
	*x = KubernetesClusterKubernetesObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterKubernetesObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterKubernetesObject) ProtoMessage() {}

func (x *KubernetesClusterKubernetesObject) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterKubernetesObject.ProtoReflect.Descriptor instead.
func (*KubernetesClusterKubernetesObject) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesClusterKubernetesObject) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *KubernetesClusterKubernetesObject) GetKubernetesObject() *model1.KubernetesObject {
	if x != nil {
		return x.KubernetesObject
	}
	return nil
}

// input for rpc to find all api-resources created for an API Resource on Planton Cloud.
type StreamKubernetesClusterNamespaceKubernetesObjectsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// kubernetes namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *StreamKubernetesClusterNamespaceKubernetesObjectsInput) Reset() {
	*x = StreamKubernetesClusterNamespaceKubernetesObjectsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamKubernetesClusterNamespaceKubernetesObjectsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamKubernetesClusterNamespaceKubernetesObjectsInput) ProtoMessage() {}

func (x *StreamKubernetesClusterNamespaceKubernetesObjectsInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamKubernetesClusterNamespaceKubernetesObjectsInput.ProtoReflect.Descriptor instead.
func (*StreamKubernetesClusterNamespaceKubernetesObjectsInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *StreamKubernetesClusterNamespaceKubernetesObjectsInput) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *StreamKubernetesClusterNamespaceKubernetesObjectsInput) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// input for rpc to update a kubernetes object in a kube-cluster
type UpdateKubernetesClusterKubernetesObjectInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// kubernetes object
	KubernetesObject *model1.KubernetesObject `protobuf:"bytes,2,opt,name=kubernetes_object,json=kubernetesObject,proto3" json:"kubernetes_object,omitempty"`
	// base64 encoded of the updated kubernetes object yaml
	UpdatedObjectYamlBase64 string `protobuf:"bytes,3,opt,name=updated_object_yaml_base64,json=updatedObjectYamlBase64,proto3" json:"updated_object_yaml_base64,omitempty"`
}

func (x *UpdateKubernetesClusterKubernetesObjectInput) Reset() {
	*x = UpdateKubernetesClusterKubernetesObjectInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKubernetesClusterKubernetesObjectInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKubernetesClusterKubernetesObjectInput) ProtoMessage() {}

func (x *UpdateKubernetesClusterKubernetesObjectInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKubernetesClusterKubernetesObjectInput.ProtoReflect.Descriptor instead.
func (*UpdateKubernetesClusterKubernetesObjectInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateKubernetesClusterKubernetesObjectInput) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *UpdateKubernetesClusterKubernetesObjectInput) GetKubernetesObject() *model1.KubernetesObject {
	if x != nil {
		return x.KubernetesObject
	}
	return nil
}

func (x *UpdateKubernetesClusterKubernetesObjectInput) GetUpdatedObjectYamlBase64() string {
	if x != nil {
		return x.UpdatedObjectYamlBase64
	}
	return ""
}

// input for rpc to find list of pods on kube-cluster
type FindKubernetesClusterPodsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// kubernetes namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// details of the parent kubernetes object(pod-manager) to be used to filter pods list
	// if a parent is not specified, pods of all pod-managers will be included in the response.
	PodManager *model1.KubernetesObject `protobuf:"bytes,3,opt,name=pod_manager,json=podManager,proto3" json:"pod_manager,omitempty"`
}

func (x *FindKubernetesClusterPodsInput) Reset() {
	*x = FindKubernetesClusterPodsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindKubernetesClusterPodsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindKubernetesClusterPodsInput) ProtoMessage() {}

func (x *FindKubernetesClusterPodsInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindKubernetesClusterPodsInput.ProtoReflect.Descriptor instead.
func (*FindKubernetesClusterPodsInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *FindKubernetesClusterPodsInput) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *FindKubernetesClusterPodsInput) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FindKubernetesClusterPodsInput) GetPodManager() *model1.KubernetesObject {
	if x != nil {
		return x.PodManager
	}
	return nil
}

// input for rpc to stream logs of a pod on kube-cluster based on specified filters
type StreamKubernetesClusterPodLogsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// options to configure pod log stream
	Options *model1.PodLogStreamOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *StreamKubernetesClusterPodLogsInput) Reset() {
	*x = StreamKubernetesClusterPodLogsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamKubernetesClusterPodLogsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamKubernetesClusterPodLogsInput) ProtoMessage() {}

func (x *StreamKubernetesClusterPodLogsInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamKubernetesClusterPodLogsInput.ProtoReflect.Descriptor instead.
func (*StreamKubernetesClusterPodLogsInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *StreamKubernetesClusterPodLogsInput) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *StreamKubernetesClusterPodLogsInput) GetOptions() *model1.PodLogStreamOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// input for rpc to exec into a kube-cluster pod container
// input for rpc to exec into a pod container that belongs to a planton-cloud api-resource
type ExecIntoKubernetesClusterPodContainerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// options required for performing exec into a pod container
	Options *model1.PodContainerExecOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ExecIntoKubernetesClusterPodContainerInput) Reset() {
	*x = ExecIntoKubernetesClusterPodContainerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecIntoKubernetesClusterPodContainerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecIntoKubernetesClusterPodContainerInput) ProtoMessage() {}

func (x *ExecIntoKubernetesClusterPodContainerInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecIntoKubernetesClusterPodContainerInput.ProtoReflect.Descriptor instead.
func (*ExecIntoKubernetesClusterPodContainerInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *ExecIntoKubernetesClusterPodContainerInput) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *ExecIntoKubernetesClusterPodContainerInput) GetOptions() *model1.PodContainerExecOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// id of the stream created for the shell session
type BrowserExecIntoPodContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pod container exec shell session id
	ShellSessionId string `protobuf:"bytes,1,opt,name=shell_session_id,json=shellSessionId,proto3" json:"shell_session_id,omitempty"`
	// shell command execution response
	CommandResponse *model1.ExecIntoPodContainerResponse `protobuf:"bytes,2,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"`
}

func (x *BrowserExecIntoPodContainerResponse) Reset() {
	*x = BrowserExecIntoPodContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserExecIntoPodContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserExecIntoPodContainerResponse) ProtoMessage() {}

func (x *BrowserExecIntoPodContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserExecIntoPodContainerResponse.ProtoReflect.Descriptor instead.
func (*BrowserExecIntoPodContainerResponse) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *BrowserExecIntoPodContainerResponse) GetShellSessionId() string {
	if x != nil {
		return x.ShellSessionId
	}
	return ""
}

func (x *BrowserExecIntoPodContainerResponse) GetCommandResponse() *model1.ExecIntoPodContainerResponse {
	if x != nil {
		return x.CommandResponse
	}
	return nil
}

// input for rpc to execute next command for a shell session in a pod container from a browser
type BrowserExecuteNextCommandInPodContainerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planton-cloud api-resource
	ApiResource *model.ApiResourceKindApiResourceId `protobuf:"bytes,1,opt,name=api_resource,json=apiResource,proto3" json:"api_resource,omitempty"`
	// pod container exec shell session id
	ShellSessionId string `protobuf:"bytes,2,opt,name=shell_session_id,json=shellSessionId,proto3" json:"shell_session_id,omitempty"`
	// command to execute inside an existing shell session of a pod container
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *BrowserExecuteNextCommandInPodContainerInput) Reset() {
	*x = BrowserExecuteNextCommandInPodContainerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserExecuteNextCommandInPodContainerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserExecuteNextCommandInPodContainerInput) ProtoMessage() {}

func (x *BrowserExecuteNextCommandInPodContainerInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserExecuteNextCommandInPodContainerInput.ProtoReflect.Descriptor instead.
func (*BrowserExecuteNextCommandInPodContainerInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP(), []int{8}
}

func (x *BrowserExecuteNextCommandInPodContainerInput) GetApiResource() *model.ApiResourceKindApiResourceId {
	if x != nil {
		return x.ApiResource
	}
	return nil
}

func (x *BrowserExecuteNextCommandInPodContainerInput) GetShellSessionId() string {
	if x != nil {
		return x.ShellSessionId
	}
	return ""
}

func (x *BrowserExecuteNextCommandInPodContainerInput) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

var File_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDesc = []byte{
	0x0a, 0x53, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3d, 0x0a, 0x1d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92,
	0x02, 0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x36, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6d,
	0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x2c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6d, 0x0a, 0x0c,
	0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b,
	0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x79, 0x61,
	0x6d, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x59, 0x61,
	0x6d, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0xa1, 0x02, 0x0a, 0x1e, 0x46, 0x69, 0x6e,
	0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x61,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0a, 0x70, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x84, 0x02, 0x0a,
	0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x64, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x2a, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x6f,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x72, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x23, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x2c, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0xb3, 0x04, 0x0a, 0x58, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x08, 0x43, 0x50, 0x41,
	0x43, 0x56, 0x43, 0x4b, 0x4d, 0xaa, 0x02, 0x4a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0xca, 0x02, 0x4a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2,
	0x02, 0x56, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c,
	0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x51, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a,
	0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescData = file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDesc
)

func file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDescData
}

var file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_goTypes = []interface{}{
	(*KubernetesClusterCredentialId)(nil),                          // 0: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterCredentialId
	(*KubernetesClusterKubernetesObject)(nil),                      // 1: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterKubernetesObject
	(*StreamKubernetesClusterNamespaceKubernetesObjectsInput)(nil), // 2: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterNamespaceKubernetesObjectsInput
	(*UpdateKubernetesClusterKubernetesObjectInput)(nil),           // 3: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.UpdateKubernetesClusterKubernetesObjectInput
	(*FindKubernetesClusterPodsInput)(nil),                         // 4: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.FindKubernetesClusterPodsInput
	(*StreamKubernetesClusterPodLogsInput)(nil),                    // 5: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterPodLogsInput
	(*ExecIntoKubernetesClusterPodContainerInput)(nil),             // 6: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.ExecIntoKubernetesClusterPodContainerInput
	(*BrowserExecIntoPodContainerResponse)(nil),                    // 7: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.BrowserExecIntoPodContainerResponse
	(*BrowserExecuteNextCommandInPodContainerInput)(nil),           // 8: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.BrowserExecuteNextCommandInPodContainerInput
	(*model.ApiResourceKindApiResourceId)(nil),                     // 9: cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	(*model1.KubernetesObject)(nil),                                // 10: cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject
	(*model1.PodLogStreamOptions)(nil),                             // 11: cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions
	(*model1.PodContainerExecOptions)(nil),                         // 12: cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodContainerExecOptions
	(*model1.ExecIntoPodContainerResponse)(nil),                    // 13: cloud.planton.apis.integration.v1.kubernetes.apiresources.model.ExecIntoPodContainerResponse
}
var file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_depIdxs = []int32{
	9,  // 0: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterKubernetesObject.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	10, // 1: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.KubernetesClusterKubernetesObject.kubernetes_object:type_name -> cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject
	9,  // 2: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterNamespaceKubernetesObjectsInput.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	9,  // 3: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.UpdateKubernetesClusterKubernetesObjectInput.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	10, // 4: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.UpdateKubernetesClusterKubernetesObjectInput.kubernetes_object:type_name -> cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject
	9,  // 5: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.FindKubernetesClusterPodsInput.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	10, // 6: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.FindKubernetesClusterPodsInput.pod_manager:type_name -> cloud.planton.apis.integration.v1.kubernetes.apiresources.model.KubernetesObject
	9,  // 7: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterPodLogsInput.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	11, // 8: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.StreamKubernetesClusterPodLogsInput.options:type_name -> cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodLogStreamOptions
	9,  // 9: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.ExecIntoKubernetesClusterPodContainerInput.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	12, // 10: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.ExecIntoKubernetesClusterPodContainerInput.options:type_name -> cloud.planton.apis.integration.v1.kubernetes.apiresources.model.PodContainerExecOptions
	13, // 11: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.BrowserExecIntoPodContainerResponse.command_response:type_name -> cloud.planton.apis.integration.v1.kubernetes.apiresources.model.ExecIntoPodContainerResponse
	9,  // 12: cloud.planton.apis.code2cloud.v1.connect.kubernetesclustercredential.model.BrowserExecuteNextCommandInPodContainerInput.api_resource:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() {
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_init()
}
func file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_init() {
	if File_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesClusterCredentialId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesClusterKubernetesObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamKubernetesClusterNamespaceKubernetesObjectsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKubernetesClusterKubernetesObjectInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindKubernetesClusterPodsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamKubernetesClusterPodLogsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecIntoKubernetesClusterPodContainerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserExecIntoPodContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserExecuteNextCommandInPodContainerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto = out.File
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_goTypes = nil
	file_cloud_planton_apis_code2cloud_v1_connect_kubernetesclustercredential_model_io_proto_depIdxs = nil
}
