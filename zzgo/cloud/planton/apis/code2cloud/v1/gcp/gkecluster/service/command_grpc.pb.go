// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/gcp/gkecluster/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/gcp/gkecluster/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GkeClusterCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/previewCreate"
	GkeClusterCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/create"
	GkeClusterCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/previewUpdate"
	GkeClusterCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/update"
	GkeClusterCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/previewDelete"
	GkeClusterCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/delete"
	GkeClusterCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/previewRestore"
	GkeClusterCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/restore"
	GkeClusterCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/pause"
	GkeClusterCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/unpause"
	GkeClusterCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/previewRefresh"
	GkeClusterCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController/refresh"
)

// GkeClusterCommandControllerClient is the client API for GkeClusterCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GkeClusterCommandControllerClient interface {
	// preview create a gke-cluster.
	PreviewCreate(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// create a gke-cluster.
	Create(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// preview updating an existing gke-cluster.
	PreviewUpdate(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// update an existing gke-cluster.
	Update(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// preview deleting a gke-cluster.
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// delete a gke-cluster.
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// preview restoring a deleted gke-cluster.
	PreviewRestore(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// restore a deleted gke-cluster.
	Restore(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// pause a gke-cluster.
	// a gke-cluster is paused by setting the number of nodes in each node pool of the gke-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the gke-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a gke-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// unpause a gke-cluster.
	// a gke-cluster is resumed by setting the number of nodes in each node pool of the gke-cluster to the
	// values configured for the gke-cluster.
	// when the gke-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// preview refresh a gke-cluster that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// refresh a gke-cluster that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
}

type gkeClusterCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGkeClusterCommandControllerClient(cc grpc.ClientConnInterface) GkeClusterCommandControllerClient {
	return &gkeClusterCommandControllerClient{cc}
}

func (c *gkeClusterCommandControllerClient) PreviewCreate(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Create(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Update(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) PreviewRestore(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Restore(ctx context.Context, in *model.GkeCluster, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GkeClusterCommandControllerServer is the server API for GkeClusterCommandController service.
// All implementations should embed UnimplementedGkeClusterCommandControllerServer
// for forward compatibility
type GkeClusterCommandControllerServer interface {
	// preview create a gke-cluster.
	PreviewCreate(context.Context, *model.GkeCluster) (*model.GkeCluster, error)
	// create a gke-cluster.
	Create(context.Context, *model.GkeCluster) (*model.GkeCluster, error)
	// preview updating an existing gke-cluster.
	PreviewUpdate(context.Context, *model.GkeCluster) (*model.GkeCluster, error)
	// update an existing gke-cluster.
	Update(context.Context, *model.GkeCluster) (*model.GkeCluster, error)
	// preview deleting a gke-cluster.
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.GkeCluster, error)
	// delete a gke-cluster.
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GkeCluster, error)
	// preview restoring a deleted gke-cluster.
	PreviewRestore(context.Context, *model.GkeCluster) (*model.GkeCluster, error)
	// restore a deleted gke-cluster.
	Restore(context.Context, *model.GkeCluster) (*model.GkeCluster, error)
	// pause a gke-cluster.
	// a gke-cluster is paused by setting the number of nodes in each node pool of the gke-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the gke-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a gke-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.GkeCluster, error)
	// unpause a gke-cluster.
	// a gke-cluster is resumed by setting the number of nodes in each node pool of the gke-cluster to the
	// values configured for the gke-cluster.
	// when the gke-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.GkeCluster, error)
	// preview refresh a gke-cluster that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GkeCluster, error)
	// refresh a gke-cluster that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GkeCluster, error)
}

// UnimplementedGkeClusterCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGkeClusterCommandControllerServer struct {
}

func (UnimplementedGkeClusterCommandControllerServer) PreviewCreate(context.Context, *model.GkeCluster) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Create(context.Context, *model.GkeCluster) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) PreviewUpdate(context.Context, *model.GkeCluster) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Update(context.Context, *model.GkeCluster) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) PreviewRestore(context.Context, *model.GkeCluster) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Restore(context.Context, *model.GkeCluster) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedGkeClusterCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeGkeClusterCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GkeClusterCommandControllerServer will
// result in compilation errors.
type UnsafeGkeClusterCommandControllerServer interface {
	mustEmbedUnimplementedGkeClusterCommandControllerServer()
}

func RegisterGkeClusterCommandControllerServer(s grpc.ServiceRegistrar, srv GkeClusterCommandControllerServer) {
	s.RegisterService(&GkeClusterCommandController_ServiceDesc, srv)
}

func _GkeClusterCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).PreviewCreate(ctx, req.(*model.GkeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Create(ctx, req.(*model.GkeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).PreviewUpdate(ctx, req.(*model.GkeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Update(ctx, req.(*model.GkeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).PreviewRestore(ctx, req.(*model.GkeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Restore(ctx, req.(*model.GkeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GkeClusterCommandController_ServiceDesc is the grpc.ServiceDesc for GkeClusterCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GkeClusterCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterCommandController",
	HandlerType: (*GkeClusterCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _GkeClusterCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _GkeClusterCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _GkeClusterCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GkeClusterCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _GkeClusterCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GkeClusterCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _GkeClusterCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _GkeClusterCommandController_Restore_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _GkeClusterCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _GkeClusterCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _GkeClusterCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _GkeClusterCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gcp/gkecluster/service/command.proto",
}

const (
	GkeClusterNodePoolCommandController_Add_FullMethodName    = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterNodePoolCommandController/add"
	GkeClusterNodePoolCommandController_Update_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterNodePoolCommandController/update"
	GkeClusterNodePoolCommandController_Delete_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterNodePoolCommandController/delete"
)

// GkeClusterNodePoolCommandControllerClient is the client API for GkeClusterNodePoolCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GkeClusterNodePoolCommandControllerClient interface {
	// add a node pool to a gke-cluster in a gke-cluster
	Add(ctx context.Context, in *model.AddOrUpdateGkeClusterNodePoolInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// update a node pool of a gke-cluster in a gke-cluster
	Update(ctx context.Context, in *model.AddOrUpdateGkeClusterNodePoolInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// delete a node pool from a gke-cluster in a gke-cluster
	Delete(ctx context.Context, in *model.DeleteGkeClusterNodePoolInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
}

type gkeClusterNodePoolCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGkeClusterNodePoolCommandControllerClient(cc grpc.ClientConnInterface) GkeClusterNodePoolCommandControllerClient {
	return &gkeClusterNodePoolCommandControllerClient{cc}
}

func (c *gkeClusterNodePoolCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateGkeClusterNodePoolInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterNodePoolCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterNodePoolCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateGkeClusterNodePoolInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterNodePoolCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterNodePoolCommandControllerClient) Delete(ctx context.Context, in *model.DeleteGkeClusterNodePoolInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterNodePoolCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GkeClusterNodePoolCommandControllerServer is the server API for GkeClusterNodePoolCommandController service.
// All implementations should embed UnimplementedGkeClusterNodePoolCommandControllerServer
// for forward compatibility
type GkeClusterNodePoolCommandControllerServer interface {
	// add a node pool to a gke-cluster in a gke-cluster
	Add(context.Context, *model.AddOrUpdateGkeClusterNodePoolInput) (*model.GkeCluster, error)
	// update a node pool of a gke-cluster in a gke-cluster
	Update(context.Context, *model.AddOrUpdateGkeClusterNodePoolInput) (*model.GkeCluster, error)
	// delete a node pool from a gke-cluster in a gke-cluster
	Delete(context.Context, *model.DeleteGkeClusterNodePoolInput) (*model.GkeCluster, error)
}

// UnimplementedGkeClusterNodePoolCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGkeClusterNodePoolCommandControllerServer struct {
}

func (UnimplementedGkeClusterNodePoolCommandControllerServer) Add(context.Context, *model.AddOrUpdateGkeClusterNodePoolInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGkeClusterNodePoolCommandControllerServer) Update(context.Context, *model.AddOrUpdateGkeClusterNodePoolInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGkeClusterNodePoolCommandControllerServer) Delete(context.Context, *model.DeleteGkeClusterNodePoolInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeGkeClusterNodePoolCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GkeClusterNodePoolCommandControllerServer will
// result in compilation errors.
type UnsafeGkeClusterNodePoolCommandControllerServer interface {
	mustEmbedUnimplementedGkeClusterNodePoolCommandControllerServer()
}

func RegisterGkeClusterNodePoolCommandControllerServer(s grpc.ServiceRegistrar, srv GkeClusterNodePoolCommandControllerServer) {
	s.RegisterService(&GkeClusterNodePoolCommandController_ServiceDesc, srv)
}

func _GkeClusterNodePoolCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateGkeClusterNodePoolInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterNodePoolCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterNodePoolCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterNodePoolCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateGkeClusterNodePoolInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterNodePoolCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateGkeClusterNodePoolInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterNodePoolCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterNodePoolCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterNodePoolCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateGkeClusterNodePoolInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterNodePoolCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteGkeClusterNodePoolInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterNodePoolCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterNodePoolCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterNodePoolCommandControllerServer).Delete(ctx, req.(*model.DeleteGkeClusterNodePoolInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GkeClusterNodePoolCommandController_ServiceDesc is the grpc.ServiceDesc for GkeClusterNodePoolCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GkeClusterNodePoolCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterNodePoolCommandController",
	HandlerType: (*GkeClusterNodePoolCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _GkeClusterNodePoolCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GkeClusterNodePoolCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GkeClusterNodePoolCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gcp/gkecluster/service/command.proto",
}

const (
	GkeClusterIngressDnsDomainCommandController_Add_FullMethodName    = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterIngressDnsDomainCommandController/add"
	GkeClusterIngressDnsDomainCommandController_Update_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterIngressDnsDomainCommandController/update"
	GkeClusterIngressDnsDomainCommandController_Delete_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterIngressDnsDomainCommandController/delete"
)

// GkeClusterIngressDnsDomainCommandControllerClient is the client API for GkeClusterIngressDnsDomainCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GkeClusterIngressDnsDomainCommandControllerClient interface {
	// add a new ingress-dns-domain to a gke-cluster
	Add(ctx context.Context, in *model.AddOrUpdateGkeClusterIngressDnsDomainInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// update an existing ingress-dns-domain to a gke-cluster
	Update(ctx context.Context, in *model.AddOrUpdateGkeClusterIngressDnsDomainInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
	// delete an ingress-dns-domain of a gke-cluster
	Delete(ctx context.Context, in *model.DeleteGkeClusterIngressDnsDomainInput, opts ...grpc.CallOption) (*model.GkeCluster, error)
}

type gkeClusterIngressDnsDomainCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGkeClusterIngressDnsDomainCommandControllerClient(cc grpc.ClientConnInterface) GkeClusterIngressDnsDomainCommandControllerClient {
	return &gkeClusterIngressDnsDomainCommandControllerClient{cc}
}

func (c *gkeClusterIngressDnsDomainCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateGkeClusterIngressDnsDomainInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterIngressDnsDomainCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterIngressDnsDomainCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateGkeClusterIngressDnsDomainInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterIngressDnsDomainCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gkeClusterIngressDnsDomainCommandControllerClient) Delete(ctx context.Context, in *model.DeleteGkeClusterIngressDnsDomainInput, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterIngressDnsDomainCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GkeClusterIngressDnsDomainCommandControllerServer is the server API for GkeClusterIngressDnsDomainCommandController service.
// All implementations should embed UnimplementedGkeClusterIngressDnsDomainCommandControllerServer
// for forward compatibility
type GkeClusterIngressDnsDomainCommandControllerServer interface {
	// add a new ingress-dns-domain to a gke-cluster
	Add(context.Context, *model.AddOrUpdateGkeClusterIngressDnsDomainInput) (*model.GkeCluster, error)
	// update an existing ingress-dns-domain to a gke-cluster
	Update(context.Context, *model.AddOrUpdateGkeClusterIngressDnsDomainInput) (*model.GkeCluster, error)
	// delete an ingress-dns-domain of a gke-cluster
	Delete(context.Context, *model.DeleteGkeClusterIngressDnsDomainInput) (*model.GkeCluster, error)
}

// UnimplementedGkeClusterIngressDnsDomainCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGkeClusterIngressDnsDomainCommandControllerServer struct {
}

func (UnimplementedGkeClusterIngressDnsDomainCommandControllerServer) Add(context.Context, *model.AddOrUpdateGkeClusterIngressDnsDomainInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGkeClusterIngressDnsDomainCommandControllerServer) Update(context.Context, *model.AddOrUpdateGkeClusterIngressDnsDomainInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGkeClusterIngressDnsDomainCommandControllerServer) Delete(context.Context, *model.DeleteGkeClusterIngressDnsDomainInput) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeGkeClusterIngressDnsDomainCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GkeClusterIngressDnsDomainCommandControllerServer will
// result in compilation errors.
type UnsafeGkeClusterIngressDnsDomainCommandControllerServer interface {
	mustEmbedUnimplementedGkeClusterIngressDnsDomainCommandControllerServer()
}

func RegisterGkeClusterIngressDnsDomainCommandControllerServer(s grpc.ServiceRegistrar, srv GkeClusterIngressDnsDomainCommandControllerServer) {
	s.RegisterService(&GkeClusterIngressDnsDomainCommandController_ServiceDesc, srv)
}

func _GkeClusterIngressDnsDomainCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateGkeClusterIngressDnsDomainInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterIngressDnsDomainCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterIngressDnsDomainCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterIngressDnsDomainCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateGkeClusterIngressDnsDomainInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterIngressDnsDomainCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateGkeClusterIngressDnsDomainInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterIngressDnsDomainCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterIngressDnsDomainCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterIngressDnsDomainCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateGkeClusterIngressDnsDomainInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GkeClusterIngressDnsDomainCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteGkeClusterIngressDnsDomainInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterIngressDnsDomainCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterIngressDnsDomainCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterIngressDnsDomainCommandControllerServer).Delete(ctx, req.(*model.DeleteGkeClusterIngressDnsDomainInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GkeClusterIngressDnsDomainCommandController_ServiceDesc is the grpc.ServiceDesc for GkeClusterIngressDnsDomainCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GkeClusterIngressDnsDomainCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gcp.gkecluster.service.GkeClusterIngressDnsDomainCommandController",
	HandlerType: (*GkeClusterIngressDnsDomainCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _GkeClusterIngressDnsDomainCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GkeClusterIngressDnsDomainCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GkeClusterIngressDnsDomainCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gcp/gkecluster/service/command.proto",
}
