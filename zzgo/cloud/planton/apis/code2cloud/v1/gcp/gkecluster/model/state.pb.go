// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/code2cloud/v1/gcp/gkecluster/model/state.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/environment/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gke-cluster
type GkeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api-version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource-kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// metadata
	// id format "<id-prefix>-<env-id>-<normalized-resource-name>"
	Metadata *model.ApiResourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	Spec *GkeClusterSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *GkeClusterStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GkeCluster) Reset() {
	*x = GkeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeCluster) ProtoMessage() {}

func (x *GkeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeCluster.ProtoReflect.Descriptor instead.
func (*GkeCluster) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{0}
}

func (x *GkeCluster) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *GkeCluster) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GkeCluster) GetMetadata() *model.ApiResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GkeCluster) GetSpec() *GkeClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GkeCluster) GetStatus() *GkeClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// GkeClusterSpec is a message type that defines the specifications for a gke-cluster on Planton Cloud.
type GkeClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment-info
	EnvironmentInfo *model1.ApiResourceEnvironmentInfo `protobuf:"bytes,99,opt,name=environment_info,json=environmentInfo,proto3" json:"environment_info,omitempty"`
	// stack-job settings
	StackJobSettings *model2.StackJobSettings `protobuf:"bytes,98,opt,name=stack_job_settings,json=stackJobSettings,proto3" json:"stack_job_settings,omitempty"`
	// gcp-credential-id to be used for setting up gcp-provider in stack-job
	GcpCredentialId string `protobuf:"bytes,97,opt,name=gcp_credential_id,json=gcpCredentialId,proto3" json:"gcp_credential_id,omitempty"`
	// gcp billing account id required to link gke-cluster projects.
	// planton-cloud creates one/two gcp projects per gke-cluster.
	// these projects will be linked to this billing account.
	BillingAccountId string `protobuf:"bytes,1,opt,name=billing_account_id,json=billingAccountId,proto3" json:"billing_account_id,omitempty"`
	// valid gcp region in which to create the gke-cluster.
	// warning: gke-cluster will recreated if this value is updated.
	// https://cloud.google.com/compute/docs/regions-zones
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// valid gcp zone in which to create the gke-cluster.
	// https://cloud.google.com/compute/docs/regions-zones
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// flag to indicate that the cluster should be created in a shared vpc network.
	// warning: gke-cluster will be recreated if this is updated.
	// note: vpc network is created in a separate project when this is enabled.
	IsCreateSharedVpc bool `protobuf:"varint,4,opt,name=is_create_shared_vpc,json=isCreateSharedVpc,proto3" json:"is_create_shared_vpc,omitempty"`
	// flag to toggle workload logs for gke-cluster environment.
	// when workload logs is enabled, the logs from kubernetes pods would be sent to google cloud logging.
	// warning: enabling log forwarding increases cloud bills depending on the log volume.
	IsWorkloadLogsEnabled bool `protobuf:"varint,5,opt,name=is_workload_logs_enabled,json=isWorkloadLogsEnabled,proto3" json:"is_workload_logs_enabled,omitempty"`
	// cluster autoscaling configuration
	ClusterAutoscalingConfig *GkeClusterAutoscalingConfigSpec `protobuf:"bytes,6,opt,name=cluster_autoscaling_config,json=clusterAutoscalingConfig,proto3" json:"cluster_autoscaling_config,omitempty"`
	// gke-cluster node pools
	NodePools []*GkeClusterNodePool `protobuf:"bytes,7,rep,name=node_pools,json=nodePools,proto3" json:"node_pools,omitempty"`
	// gke-cluster kubernetes addons spec
	KubernetesAddons *GkeClusterAddonsSpec `protobuf:"bytes,8,opt,name=kubernetes_addons,json=kubernetesAddons,proto3" json:"kubernetes_addons,omitempty"`
	// ingress dns-domains to be configured in gke cluster.
	IngressDnsDomains []*GkeClusterIngressDnsDomainSpec `protobuf:"bytes,9,rep,name=ingress_dns_domains,json=ingressDnsDomains,proto3" json:"ingress_dns_domains,omitempty"`
	// istio-http-endpoints to be configured in the gke cluster.
	IstioHttpEndpoints []*GkeClusterIstioHttpEndpointSpec `protobuf:"bytes,10,rep,name=istio_http_endpoints,json=istioHttpEndpoints,proto3" json:"istio_http_endpoints,omitempty"`
}

func (x *GkeClusterSpec) Reset() {
	*x = GkeClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterSpec) ProtoMessage() {}

func (x *GkeClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{1}
}

func (x *GkeClusterSpec) GetEnvironmentInfo() *model1.ApiResourceEnvironmentInfo {
	if x != nil {
		return x.EnvironmentInfo
	}
	return nil
}

func (x *GkeClusterSpec) GetStackJobSettings() *model2.StackJobSettings {
	if x != nil {
		return x.StackJobSettings
	}
	return nil
}

func (x *GkeClusterSpec) GetGcpCredentialId() string {
	if x != nil {
		return x.GcpCredentialId
	}
	return ""
}

func (x *GkeClusterSpec) GetBillingAccountId() string {
	if x != nil {
		return x.BillingAccountId
	}
	return ""
}

func (x *GkeClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GkeClusterSpec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GkeClusterSpec) GetIsCreateSharedVpc() bool {
	if x != nil {
		return x.IsCreateSharedVpc
	}
	return false
}

func (x *GkeClusterSpec) GetIsWorkloadLogsEnabled() bool {
	if x != nil {
		return x.IsWorkloadLogsEnabled
	}
	return false
}

func (x *GkeClusterSpec) GetClusterAutoscalingConfig() *GkeClusterAutoscalingConfigSpec {
	if x != nil {
		return x.ClusterAutoscalingConfig
	}
	return nil
}

func (x *GkeClusterSpec) GetNodePools() []*GkeClusterNodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

func (x *GkeClusterSpec) GetKubernetesAddons() *GkeClusterAddonsSpec {
	if x != nil {
		return x.KubernetesAddons
	}
	return nil
}

func (x *GkeClusterSpec) GetIngressDnsDomains() []*GkeClusterIngressDnsDomainSpec {
	if x != nil {
		return x.IngressDnsDomains
	}
	return nil
}

func (x *GkeClusterSpec) GetIstioHttpEndpoints() []*GkeClusterIstioHttpEndpointSpec {
	if x != nil {
		return x.IstioHttpEndpoints
	}
	return nil
}

// gke-cluster kubernetes addons
type GkeClusterAddonsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to control postgres-operator installation
	IsInstallPostgresOperator bool `protobuf:"varint,1,opt,name=is_install_postgres_operator,json=isInstallPostgresOperator,proto3" json:"is_install_postgres_operator,omitempty"`
	// flag to control kafka-operator installation
	IsInstallKafkaOperator bool `protobuf:"varint,2,opt,name=is_install_kafka_operator,json=isInstallKafkaOperator,proto3" json:"is_install_kafka_operator,omitempty"`
	// flag to control solr-operator installation
	IsInstallSolrOperator bool `protobuf:"varint,3,opt,name=is_install_solr_operator,json=isInstallSolrOperator,proto3" json:"is_install_solr_operator,omitempty"`
	// flag to control kubecost
	IsInstallKubecost bool `protobuf:"varint,4,opt,name=is_install_kubecost,json=isInstallKubecost,proto3" json:"is_install_kubecost,omitempty"`
	// planton-cloud-kube-agent addon spec
	PlantonCloudKubeAgent *GkeClusterAddonsPlantonCloudKubeAgentSpec `protobuf:"bytes,5,opt,name=planton_cloud_kube_agent,json=plantonCloudKubeAgent,proto3" json:"planton_cloud_kube_agent,omitempty"`
	// flag to control ingress-nginx
	IsInstallIngressNginx bool `protobuf:"varint,6,opt,name=is_install_ingress_nginx,json=isInstallIngressNginx,proto3" json:"is_install_ingress_nginx,omitempty"`
	// flag to control istio
	IsInstallIstio bool `protobuf:"varint,7,opt,name=is_install_istio,json=isInstallIstio,proto3" json:"is_install_istio,omitempty"`
	// flag to control cert-manager
	IsInstallCertManager bool `protobuf:"varint,8,opt,name=is_install_cert_manager,json=isInstallCertManager,proto3" json:"is_install_cert_manager,omitempty"`
	// flag to control external-dns
	IsInstallExternalDns bool `protobuf:"varint,9,opt,name=is_install_external_dns,json=isInstallExternalDns,proto3" json:"is_install_external_dns,omitempty"`
	// flag to control external-secrets
	IsInstallExternalSecrets bool `protobuf:"varint,10,opt,name=is_install_external_secrets,json=isInstallExternalSecrets,proto3" json:"is_install_external_secrets,omitempty"`
}

func (x *GkeClusterAddonsSpec) Reset() {
	*x = GkeClusterAddonsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAddonsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAddonsSpec) ProtoMessage() {}

func (x *GkeClusterAddonsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAddonsSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterAddonsSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{2}
}

func (x *GkeClusterAddonsSpec) GetIsInstallPostgresOperator() bool {
	if x != nil {
		return x.IsInstallPostgresOperator
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallKafkaOperator() bool {
	if x != nil {
		return x.IsInstallKafkaOperator
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallSolrOperator() bool {
	if x != nil {
		return x.IsInstallSolrOperator
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallKubecost() bool {
	if x != nil {
		return x.IsInstallKubecost
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetPlantonCloudKubeAgent() *GkeClusterAddonsPlantonCloudKubeAgentSpec {
	if x != nil {
		return x.PlantonCloudKubeAgent
	}
	return nil
}

func (x *GkeClusterAddonsSpec) GetIsInstallIngressNginx() bool {
	if x != nil {
		return x.IsInstallIngressNginx
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallIstio() bool {
	if x != nil {
		return x.IsInstallIstio
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallCertManager() bool {
	if x != nil {
		return x.IsInstallCertManager
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallExternalDns() bool {
	if x != nil {
		return x.IsInstallExternalDns
	}
	return false
}

func (x *GkeClusterAddonsSpec) GetIsInstallExternalSecrets() bool {
	if x != nil {
		return x.IsInstallExternalSecrets
	}
	return false
}

// gke-cluster status
type GkeClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lifecycle
	Lifecycle *model.ApiResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// audit-info
	Audit *model.ApiResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
	// stack-job id
	StackJobId string `protobuf:"bytes,97,opt,name=stack_job_id,json=stackJobId,proto3" json:"stack_job_id,omitempty"`
	// stack-outputs
	StackOutputs *GkeClusterStackOutputs `protobuf:"bytes,1,opt,name=stack_outputs,json=stackOutputs,proto3" json:"stack_outputs,omitempty"`
}

func (x *GkeClusterStatus) Reset() {
	*x = GkeClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterStatus) ProtoMessage() {}

func (x *GkeClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterStatus.ProtoReflect.Descriptor instead.
func (*GkeClusterStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{3}
}

func (x *GkeClusterStatus) GetLifecycle() *model.ApiResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *GkeClusterStatus) GetAudit() *model.ApiResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *GkeClusterStatus) GetStackJobId() string {
	if x != nil {
		return x.StackJobId
	}
	return ""
}

func (x *GkeClusterStatus) GetStackOutputs() *GkeClusterStackOutputs {
	if x != nil {
		return x.StackOutputs
	}
	return nil
}

// ingress dns domain
type GkeClusterIngressDnsDomainSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier of ingress-dns-domain
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// dns domain name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// flag to toggle tls for endpoint-domain.
	// defaults to "false".
	// (important note) certificates are not created for endpoints that do not need tls.
	// (important note) ingress-dns-domains with out tls enabled are not eligible to be used for
	// creating endpoints for microservice-instances, postgres-clusters, kafka-clusters, redis-clusters or solr-clouds
	IsTlsEnabled bool `protobuf:"varint,3,opt,name=is_tls_enabled,json=isTlsEnabled,proto3" json:"is_tls_enabled,omitempty"`
	// id of the project on google cloud containing the dns zone for the endpoint-domain.
	// this value is looked up from the dns-domains in the organization dns data.
	// this value is required for configuring the cert-issuer to perform dns validations.
	DnsZoneGcpProjectId string `protobuf:"bytes,4,opt,name=dns_zone_gcp_project_id,json=dnsZoneGcpProjectId,proto3" json:"dns_zone_gcp_project_id,omitempty"`
}

func (x *GkeClusterIngressDnsDomainSpec) Reset() {
	*x = GkeClusterIngressDnsDomainSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterIngressDnsDomainSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterIngressDnsDomainSpec) ProtoMessage() {}

func (x *GkeClusterIngressDnsDomainSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterIngressDnsDomainSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterIngressDnsDomainSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{4}
}

func (x *GkeClusterIngressDnsDomainSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GkeClusterIngressDnsDomainSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GkeClusterIngressDnsDomainSpec) GetIsTlsEnabled() bool {
	if x != nil {
		return x.IsTlsEnabled
	}
	return false
}

func (x *GkeClusterIngressDnsDomainSpec) GetDnsZoneGcpProjectId() string {
	if x != nil {
		return x.DnsZoneGcpProjectId
	}
	return ""
}

// cluster autoscaling configuration for gke clusters.
// https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
type GkeClusterAutoscalingConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag to control autoscaling of kubernetes worker nodes.
	// When set to true, the cluster will automatically scale up or down based on the resource requirements.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The minimum number of CPU cores that the cluster can down up to when autoscaling is enabled.
	// The number of CPU cores is a sum across all nodes in the cluster.
	CpuMinCores int64 `protobuf:"varint,2,opt,name=cpu_min_cores,json=cpuMinCores,proto3" json:"cpu_min_cores,omitempty"`
	// The maximum number of CPU cores that the cluster can scale up to when autoscaling is enabled.
	// The number of CPU cores is a sum across all nodes in the cluster.
	CpuMaxCores int64 `protobuf:"varint,3,opt,name=cpu_max_cores,json=cpuMaxCores,proto3" json:"cpu_max_cores,omitempty"`
	// The minimum amount of memory in gigabytes (GB) that the cluster can scale down to when autoscaling is enabled.
	// The memory size is a sum across all nodes in the cluster.
	MemoryMinGb int64 `protobuf:"varint,4,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`
	// The maximum amount of memory in gigabytes (GB) that the cluster can scale up to when autoscaling is enabled.
	// The memory size is a sum across all nodes in the cluster.
	MemoryMaxGb int64 `protobuf:"varint,5,opt,name=memory_max_gb,json=memoryMaxGb,proto3" json:"memory_max_gb,omitempty"`
}

func (x *GkeClusterAutoscalingConfigSpec) Reset() {
	*x = GkeClusterAutoscalingConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAutoscalingConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAutoscalingConfigSpec) ProtoMessage() {}

func (x *GkeClusterAutoscalingConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAutoscalingConfigSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterAutoscalingConfigSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{5}
}

func (x *GkeClusterAutoscalingConfigSpec) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GkeClusterAutoscalingConfigSpec) GetCpuMinCores() int64 {
	if x != nil {
		return x.CpuMinCores
	}
	return 0
}

func (x *GkeClusterAutoscalingConfigSpec) GetCpuMaxCores() int64 {
	if x != nil {
		return x.CpuMaxCores
	}
	return 0
}

func (x *GkeClusterAutoscalingConfigSpec) GetMemoryMinGb() int64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *GkeClusterAutoscalingConfigSpec) GetMemoryMaxGb() int64 {
	if x != nil {
		return x.MemoryMaxGb
	}
	return 0
}

// planton-cloud-kube-agent addon spec
type GkeClusterAddonsPlantonCloudKubeAgentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to control planton-cloud-kube-agent installation
	IsInstall bool `protobuf:"varint,1,opt,name=is_install,json=isInstall,proto3" json:"is_install,omitempty"`
	// machine_account_email is the email of the machine-account to be used by planton-cloud-kube-agent.
	// this is only created if the is_install is true.
	MachineAccountEmail string `protobuf:"bytes,2,opt,name=machine_account_email,json=machineAccountEmail,proto3" json:"machine_account_email,omitempty"`
}

func (x *GkeClusterAddonsPlantonCloudKubeAgentSpec) Reset() {
	*x = GkeClusterAddonsPlantonCloudKubeAgentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAddonsPlantonCloudKubeAgentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAddonsPlantonCloudKubeAgentSpec) ProtoMessage() {}

func (x *GkeClusterAddonsPlantonCloudKubeAgentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAddonsPlantonCloudKubeAgentSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterAddonsPlantonCloudKubeAgentSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{6}
}

func (x *GkeClusterAddonsPlantonCloudKubeAgentSpec) GetIsInstall() bool {
	if x != nil {
		return x.IsInstall
	}
	return false
}

func (x *GkeClusterAddonsPlantonCloudKubeAgentSpec) GetMachineAccountEmail() string {
	if x != nil {
		return x.MachineAccountEmail
	}
	return ""
}

// status of the gke-cluster in gcp
type GkeClusterStackOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a folder is created with the credential folder as parent for the gke-cluster.
	// resources created for gke-cluster are linked to this folder as the parent.
	// children for a credential are the gcp projects in the gke-cluster.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// projects created on google cloud for this gke-cluster
	// this value is updated upon successful gke-cluster creation stack-job.
	// gcp project info for the gke-cluster project
	ContainerClusterProject *GcpProject `protobuf:"bytes,2,opt,name=container_cluster_project,json=containerClusterProject,proto3" json:"container_cluster_project,omitempty"`
	// gcp project info for vpc-network project
	// note: a separate project is only created when the gke-cluster is configured to use shared-vpc.
	// if the gke-cluster is not configured to use a shared-vpc, this project info will be same as
	// gke-cluster project details as the vpc-network is created in the same project as the gke-cluster.
	VpcNetworkProject *GcpProject `protobuf:"bytes,3,opt,name=vpc_network_project,json=vpcNetworkProject,proto3" json:"vpc_network_project,omitempty"`
	// gke-cluster endpoint.
	ClusterEndpoint string `protobuf:"bytes,4,opt,name=cluster_endpoint,json=clusterEndpoint,proto3" json:"cluster_endpoint,omitempty"`
	// gke-cluster certificate-authority-data.
	// this value is updated upon successful gke-cluster creation stack-job.
	ClusterCaData string `protobuf:"bytes,5,opt,name=cluster_ca_data,json=clusterCaData,proto3" json:"cluster_ca_data,omitempty"`
	// ip address of the NAT for egress traffic.
	// this is the ip addresses attached to all network requests originating from the gke-cluster.
	// if server receiving requires the exact ip of the microservice to add it the firewall rules, this is the one.
	// this value is updated upon successful gke-cluster creation stack-job.
	ExternalNatIp string `protobuf:"bytes,6,opt,name=external_nat_ip,json=externalNatIp,proto3" json:"external_nat_ip,omitempty"`
	// internal ingress ip.
	InternalIngressIp string `protobuf:"bytes,7,opt,name=internal_ingress_ip,json=internalIngressIp,proto3" json:"internal_ingress_ip,omitempty"`
	// internal ingress ip.
	ExternalIngressIp string `protobuf:"bytes,8,opt,name=external_ingress_ip,json=externalIngressIp,proto3" json:"external_ingress_ip,omitempty"`
	// google service account email created for cert-manager addon workload identity.
	// this is the service account that is used by cert-manager component to update dns records
	// to issue ssl certificates from letsencrypt provided for gke-cluster ingress-dns-domains.
	// this service account is configured with permissions required to manage dns entries for issuing certs.
	CertManagerGsaEmail string `protobuf:"bytes,9,opt,name=cert_manager_gsa_email,json=certManagerGsaEmail,proto3" json:"cert_manager_gsa_email,omitempty"`
	// google service account email created for external-secrets addon workload identity.
	// this is the service account that is used by external-secrets component to fetch secrets from the
	// secrets-manager on the cloud provider and make them available to the microservices.
	ExternalSecretsGsaEmail string `protobuf:"bytes,10,opt,name=external_secrets_gsa_email,json=externalSecretsGsaEmail,proto3" json:"external_secrets_gsa_email,omitempty"`
	// google service account email created for external-secrets addon workload identity.
	// this key for this service account is used for deploying workloads like microservices,
	// postgres clusters, kafka clusters onto the gke-cluster gke-cluster/s.
	WorkloadDeployerGsaEmail string `protobuf:"bytes,11,opt,name=workload_deployer_gsa_email,json=workloadDeployerGsaEmail,proto3" json:"workload_deployer_gsa_email,omitempty"`
	// base64 encoded workload deployer google service account key.
	// this service account key is used as a credential for deploying workloads like microservices,
	// postgres clusters, kafka clusters onto the gke-cluster gke-cluster/s.
	WorkloadDeployerGsaKeyBase64 string `protobuf:"bytes,12,opt,name=workload_deployer_gsa_key_base64,json=workloadDeployerGsaKeyBase64,proto3" json:"workload_deployer_gsa_key_base64,omitempty"`
	// google service account email created for external-dns addon workload identity.
	// this is the service account that is used by external-dns component to insert dns records in
	// google cloud dns when selected services or ingress resources are created on the GKE cluster.
	ExternalDnsGsaEmail string `protobuf:"bytes,13,opt,name=external_dns_gsa_email,json=externalDnsGsaEmail,proto3" json:"external_dns_gsa_email,omitempty"`
}

func (x *GkeClusterStackOutputs) Reset() {
	*x = GkeClusterStackOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterStackOutputs) ProtoMessage() {}

func (x *GkeClusterStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterStackOutputs.ProtoReflect.Descriptor instead.
func (*GkeClusterStackOutputs) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{7}
}

func (x *GkeClusterStackOutputs) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetContainerClusterProject() *GcpProject {
	if x != nil {
		return x.ContainerClusterProject
	}
	return nil
}

func (x *GkeClusterStackOutputs) GetVpcNetworkProject() *GcpProject {
	if x != nil {
		return x.VpcNetworkProject
	}
	return nil
}

func (x *GkeClusterStackOutputs) GetClusterEndpoint() string {
	if x != nil {
		return x.ClusterEndpoint
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetClusterCaData() string {
	if x != nil {
		return x.ClusterCaData
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetExternalNatIp() string {
	if x != nil {
		return x.ExternalNatIp
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetInternalIngressIp() string {
	if x != nil {
		return x.InternalIngressIp
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetExternalIngressIp() string {
	if x != nil {
		return x.ExternalIngressIp
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetCertManagerGsaEmail() string {
	if x != nil {
		return x.CertManagerGsaEmail
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetExternalSecretsGsaEmail() string {
	if x != nil {
		return x.ExternalSecretsGsaEmail
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetWorkloadDeployerGsaEmail() string {
	if x != nil {
		return x.WorkloadDeployerGsaEmail
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetWorkloadDeployerGsaKeyBase64() string {
	if x != nil {
		return x.WorkloadDeployerGsaKeyBase64
	}
	return ""
}

func (x *GkeClusterStackOutputs) GetExternalDnsGsaEmail() string {
	if x != nil {
		return x.ExternalDnsGsaEmail
	}
	return ""
}

// gcp gke-cluster node pool
type GkeClusterNodePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node pool. The name is added as a label to the node pool that can be used to schedule workloads.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Unique ID of the node pool. Convention for the node-pool-id is 'np-<gke-cluster-id>-<node-pool-name>'.
	// Planton Cloud ignores the input value and assigns the ID as per the convention.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Type of machine for the node pool. For example, 'n2-custom-8-16234'.
	MachineType string `protobuf:"bytes,3,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Minimum number of nodes in the node pool. Defaults to 1.
	MinNodeCount int32 `protobuf:"varint,4,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// Maximum number of nodes in the node pool. Defaults to 1.
	MaxNodeCount int32 `protobuf:"varint,5,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// Flag to enable spot instances on the node pool. Defaults to false.
	IsSpotEnabled bool `protobuf:"varint,6,opt,name=is_spot_enabled,json=isSpotEnabled,proto3" json:"is_spot_enabled,omitempty"`
}

func (x *GkeClusterNodePool) Reset() {
	*x = GkeClusterNodePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterNodePool) ProtoMessage() {}

func (x *GkeClusterNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterNodePool.ProtoReflect.Descriptor instead.
func (*GkeClusterNodePool) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{8}
}

func (x *GkeClusterNodePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GkeClusterNodePool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GkeClusterNodePool) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *GkeClusterNodePool) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *GkeClusterNodePool) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *GkeClusterNodePool) GetIsSpotEnabled() bool {
	if x != nil {
		return x.IsSpotEnabled
	}
	return false
}

// gcp project
type GcpProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the gcp project
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// id of the gcp project
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// number of the gcp project
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// id of the billing account
	BillingAccountId string `protobuf:"bytes,4,opt,name=billing_account_id,json=billingAccountId,proto3" json:"billing_account_id,omitempty"`
}

func (x *GcpProject) Reset() {
	*x = GcpProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpProject) ProtoMessage() {}

func (x *GcpProject) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpProject.ProtoReflect.Descriptor instead.
func (*GcpProject) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{9}
}

func (x *GcpProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GcpProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GcpProject) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *GcpProject) GetBillingAccountId() string {
	if x != nil {
		return x.BillingAccountId
	}
	return ""
}

// gke-cluster-istio-http-endpoint spec
type GkeClusterIstioHttpEndpointSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ingress endpoint domain name
	EndpointDomainName string `protobuf:"bytes,2,opt,name=endpoint_domain_name,json=endpointDomainName,proto3" json:"endpoint_domain_name,omitempty"`
	// (optional for create) flag to toggle tls for istio-http-endpoint.
	// defaults to "false".
	// (important note) certificates are not created for endpoints that do not need tls.
	// (important note) endpoint domains with out tls enabled are not eligible to be used for
	// creating endpoints for postgres-clusters or kafka-clusters.
	IsTlsEnabled bool `protobuf:"varint,3,opt,name=is_tls_enabled,json=isTlsEnabled,proto3" json:"is_tls_enabled,omitempty"`
	// flag to control virtual service configuration compatible for grpc-web clients.
	// grpc-web clients would rely on extra headers added by envoy proxy.
	IsGrpcWebCompatible bool `protobuf:"varint,4,opt,name=is_grpc_web_compatible,json=isGrpcWebCompatible,proto3" json:"is_grpc_web_compatible,omitempty"`
	// routes to configure backends for url paths of the domain.
	// routes allow configuring requests to be routed to different microservices based on the url path.
	// ex: if the endpoint domain name is console.example.com, then console.example.com/public/api/* can be
	// to be sent to public-api microservice and console.example.com/private/api/* can be configured to route to
	// route to private-api microservice.
	Routes []*GkeClusterIstioHttpEndpointRouteSpec `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *GkeClusterIstioHttpEndpointSpec) Reset() {
	*x = GkeClusterIstioHttpEndpointSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterIstioHttpEndpointSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterIstioHttpEndpointSpec) ProtoMessage() {}

func (x *GkeClusterIstioHttpEndpointSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterIstioHttpEndpointSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterIstioHttpEndpointSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{10}
}

func (x *GkeClusterIstioHttpEndpointSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GkeClusterIstioHttpEndpointSpec) GetEndpointDomainName() string {
	if x != nil {
		return x.EndpointDomainName
	}
	return ""
}

func (x *GkeClusterIstioHttpEndpointSpec) GetIsTlsEnabled() bool {
	if x != nil {
		return x.IsTlsEnabled
	}
	return false
}

func (x *GkeClusterIstioHttpEndpointSpec) GetIsGrpcWebCompatible() bool {
	if x != nil {
		return x.IsGrpcWebCompatible
	}
	return false
}

func (x *GkeClusterIstioHttpEndpointSpec) GetRoutes() []*GkeClusterIstioHttpEndpointRouteSpec {
	if x != nil {
		return x.Routes
	}
	return nil
}

// gke-cluster-istio-http-endpoint route
type GkeClusterIstioHttpEndpointRouteSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// if endpoint domain name is console.example.com, and if the url_path_prefix is /api, then
	// all requests that match console.example.com/api/* are forwarded to the configured kubernetes service.
	UrlPathPrefix         string `protobuf:"bytes,2,opt,name=url_path_prefix,json=urlPathPrefix,proto3" json:"url_path_prefix,omitempty"`
	KubernetesServicePort int32  `protobuf:"varint,3,opt,name=kubernetes_service_port,json=kubernetesServicePort,proto3" json:"kubernetes_service_port,omitempty"`
	KubernetesServiceFqdn string `protobuf:"bytes,4,opt,name=kubernetes_service_fqdn,json=kubernetesServiceFqdn,proto3" json:"kubernetes_service_fqdn,omitempty"`
}

func (x *GkeClusterIstioHttpEndpointRouteSpec) Reset() {
	*x = GkeClusterIstioHttpEndpointRouteSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterIstioHttpEndpointRouteSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterIstioHttpEndpointRouteSpec) ProtoMessage() {}

func (x *GkeClusterIstioHttpEndpointRouteSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterIstioHttpEndpointRouteSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterIstioHttpEndpointRouteSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP(), []int{11}
}

func (x *GkeClusterIstioHttpEndpointRouteSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GkeClusterIstioHttpEndpointRouteSpec) GetUrlPathPrefix() string {
	if x != nil {
		return x.UrlPathPrefix
	}
	return ""
}

func (x *GkeClusterIstioHttpEndpointRouteSpec) GetKubernetesServicePort() int32 {
	if x != nil {
		return x.KubernetesServicePort
	}
	return 0
}

func (x *GkeClusterIstioHttpEndpointRouteSpec) GetKubernetesServiceFqdn() string {
	if x != nil {
		return x.KubernetesServiceFqdn
	}
	return ""
}

var File_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDesc = []byte{
	0x0a, 0x41, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x35, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x67, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9d, 0x07, 0x0a, 0x0a, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xba, 0x48, 0x1f, 0x72, 0x1d, 0x0a, 0x1b, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0xcf, 0x04, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0xef, 0x03, 0xba, 0x48, 0xeb, 0x03, 0xba, 0x01, 0x6c, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x2c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x1a, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5d, 0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x53, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2e, 0x2a, 0x24, 0x27, 0x29, 0xba, 0x01, 0x47, 0x0a, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x4d,
	0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x1a, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e,
	0x2d, 0x5d, 0x24, 0x27, 0x29, 0xba, 0x01, 0x6c, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x31, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x33, 0x30, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x1a, 0x2c, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x73,
	0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x3c,
	0x3d, 0x20, 0x33, 0x30, 0xba, 0x01, 0x67, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x19, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x29, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x28, 0x88, 0xa6, 0x1d, 0x13, 0x92, 0xa6, 0x1d,
	0x20, 0x08, 0x0a, 0x12, 0x1c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x5f, 0x69,
	0x64, 0x22, 0xc5, 0x0b, 0x0a, 0x0e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x7e, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x63, 0x70, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0xe8, 0x02, 0x0a, 0x12, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb9, 0x02, 0xba, 0x48, 0xb5, 0x02, 0xba, 0x01,
	0x83, 0x01, 0x0a, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x43, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28, 0x41,
	0x2d, 0x5a, 0x2c, 0x61, 0x2d, 0x7a, 0x2c, 0x20, 0x30, 0x2d, 0x39, 0x29, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5d, 0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x55, 0x0a, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x1a, 0x18, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5e, 0x2d, 0x5d, 0x2e, 0x2a, 0x24, 0x27, 0x29, 0xba, 0x01, 0x50,
	0x0a, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x4d,
	0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29,
	0xd0, 0x01, 0x01, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56,
	0x70, 0x63, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x1a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x68, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x78, 0x0a, 0x11,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67,
	0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x14, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x48, 0x74, 0x74, 0x70,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x05, 0x0a, 0x14, 0x47, 0x6b,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x6c,
	0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b,
	0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52,
	0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x1e, 0x47, 0x6b, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x63,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8, 0x18, 0x01, 0x52, 0x13, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x01,
	0x0a, 0x1f, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x47, 0x62, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x47, 0x62,
	0x22, 0x84, 0x01, 0x0a, 0x29, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8,
	0x18, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xb0, 0x06, 0x0a, 0x16, 0x47, 0x6b, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x7d, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x63, 0x70, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x71,
	0x0a, 0x13, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11,
	0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x16,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x67, 0x73, 0x61,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x65,
	0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3d,
	0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x72, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x72, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x46, 0x0a,
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x72, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x47, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44,
	0x6e, 0x73, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x8d, 0x04, 0x0a, 0x12, 0x47,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0xb5, 0x02, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xa0, 0x02, 0xba, 0x48, 0x9c, 0x02, 0xba, 0x01, 0x7a, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28, 0x41, 0x2d,
	0x5a, 0x2c, 0x61, 0x2d, 0x7a, 0x2c, 0x20, 0x30, 0x2d, 0x39, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x4c, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x4d, 0x75, 0x73,
	0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x18, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5e, 0x2d, 0x5d, 0x2e, 0x2a,
	0x24, 0x27, 0x29, 0xba, 0x01, 0x47, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20,
	0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x19, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x04, 0x80, 0xb9, 0x18, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04,
	0x80, 0xb9, 0x18, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53,
	0x70, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x0a, 0x47, 0x63,
	0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x1f, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x6c, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x47, 0x72, 0x70, 0x63, 0x57, 0x65,
	0x62, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x22, 0xdc, 0x01, 0x0a, 0x24, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x0f, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0d, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x36, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x71,
	0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x71, 0x64, 0x6e, 0x42,
	0xb8, 0x03, 0x0a, 0x43, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65,
	0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x65, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67, 0x6b, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x08, 0x43,
	0x50, 0x41, 0x43, 0x56, 0x47, 0x47, 0x4d, 0xaa, 0x02, 0x35, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x56, 0x31, 0x2e, 0x47, 0x63, 0x70, 0x2e, 0x47,
	0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca,
	0x02, 0x35, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c,
	0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x63, 0x70, 0x5c, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x41, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x63, 0x70, 0x5c, 0x47,
	0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x56, 0x31, 0x3a, 0x3a, 0x47, 0x63, 0x70, 0x3a, 0x3a, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescData = file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDesc
)

func file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescData)
	})
	return file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDescData
}

var file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_goTypes = []interface{}{
	(*GkeCluster)(nil),                                // 0: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeCluster
	(*GkeClusterSpec)(nil),                            // 1: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec
	(*GkeClusterAddonsSpec)(nil),                      // 2: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAddonsSpec
	(*GkeClusterStatus)(nil),                          // 3: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStatus
	(*GkeClusterIngressDnsDomainSpec)(nil),            // 4: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIngressDnsDomainSpec
	(*GkeClusterAutoscalingConfigSpec)(nil),           // 5: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAutoscalingConfigSpec
	(*GkeClusterAddonsPlantonCloudKubeAgentSpec)(nil), // 6: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAddonsPlantonCloudKubeAgentSpec
	(*GkeClusterStackOutputs)(nil),                    // 7: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStackOutputs
	(*GkeClusterNodePool)(nil),                        // 8: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterNodePool
	(*GcpProject)(nil),                                // 9: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GcpProject
	(*GkeClusterIstioHttpEndpointSpec)(nil),           // 10: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIstioHttpEndpointSpec
	(*GkeClusterIstioHttpEndpointRouteSpec)(nil),      // 11: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIstioHttpEndpointRouteSpec
	(*model.ApiResourceMetadata)(nil),                 // 12: cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	(*model1.ApiResourceEnvironmentInfo)(nil),         // 13: cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo
	(*model2.StackJobSettings)(nil),                   // 14: cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings
	(*model.ApiResourceLifecycle)(nil),                // 15: cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle
	(*model.ApiResourceAudit)(nil),                    // 16: cloud.planton.apis.commons.apiresource.model.ApiResourceAudit
}
var file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_depIdxs = []int32{
	12, // 0: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeCluster.metadata:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	1,  // 1: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeCluster.spec:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec
	3,  // 2: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeCluster.status:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStatus
	13, // 3: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.environment_info:type_name -> cloud.planton.apis.resourcemanager.v1.environment.model.ApiResourceEnvironmentInfo
	14, // 4: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.stack_job_settings:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings
	5,  // 5: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.cluster_autoscaling_config:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAutoscalingConfigSpec
	8,  // 6: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.node_pools:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterNodePool
	2,  // 7: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.kubernetes_addons:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAddonsSpec
	4,  // 8: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.ingress_dns_domains:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIngressDnsDomainSpec
	10, // 9: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterSpec.istio_http_endpoints:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIstioHttpEndpointSpec
	6,  // 10: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAddonsSpec.planton_cloud_kube_agent:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterAddonsPlantonCloudKubeAgentSpec
	15, // 11: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStatus.lifecycle:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle
	16, // 12: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStatus.audit:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceAudit
	7,  // 13: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStatus.stack_outputs:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStackOutputs
	9,  // 14: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStackOutputs.container_cluster_project:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GcpProject
	9,  // 15: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterStackOutputs.vpc_network_project:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GcpProject
	11, // 16: cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIstioHttpEndpointSpec.routes:type_name -> cloud.planton.apis.code2cloud.v1.gcp.gkecluster.model.GkeClusterIstioHttpEndpointRouteSpec
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_init() }
func file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_init() {
	if File_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterAddonsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterIngressDnsDomainSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterAutoscalingConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterAddonsPlantonCloudKubeAgentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterStackOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterNodePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterIstioHttpEndpointSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GkeClusterIstioHttpEndpointRouteSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto = out.File
	file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_rawDesc = nil
	file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_goTypes = nil
	file_cloud_planton_apis_code2cloud_v1_gcp_gkecluster_model_state_proto_depIdxs = nil
}
