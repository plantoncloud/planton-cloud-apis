// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/gcp/gcsbucket/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/gcp/gcsbucket/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GcsBucketCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/previewCreate"
	GcsBucketCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/create"
	GcsBucketCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/previewUpdate"
	GcsBucketCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/update"
	GcsBucketCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/previewDelete"
	GcsBucketCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/delete"
	GcsBucketCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/previewRestore"
	GcsBucketCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/restore"
	GcsBucketCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/previewRefresh"
	GcsBucketCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController/refresh"
)

// GcsBucketCommandControllerClient is the client API for GcsBucketCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcsBucketCommandControllerClient interface {
	// preview create gcs-bucket
	PreviewCreate(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// create gcs-bucket
	Create(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// preview update an existing gcs-bucket
	PreviewUpdate(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// update an existing gcs-bucket
	Update(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// preview delete an existing gcs-bucket
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// delete an existing gcs-bucket
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// preview restore a deleted gcs-bucket
	PreviewRestore(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// restore a deleted gcs-bucket
	Restore(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// preview refresh a gcs-bucket that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GcsBucket, error)
	// refresh a gcs-bucket that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GcsBucket, error)
}

type gcsBucketCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGcsBucketCommandControllerClient(cc grpc.ClientConnInterface) GcsBucketCommandControllerClient {
	return &gcsBucketCommandControllerClient{cc}
}

func (c *gcsBucketCommandControllerClient) PreviewCreate(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) Create(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) Update(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) PreviewRestore(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) Restore(ctx context.Context, in *model.GcsBucket, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcsBucketCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.GcsBucket, error) {
	out := new(model.GcsBucket)
	err := c.cc.Invoke(ctx, GcsBucketCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcsBucketCommandControllerServer is the server API for GcsBucketCommandController service.
// All implementations should embed UnimplementedGcsBucketCommandControllerServer
// for forward compatibility
type GcsBucketCommandControllerServer interface {
	// preview create gcs-bucket
	PreviewCreate(context.Context, *model.GcsBucket) (*model.GcsBucket, error)
	// create gcs-bucket
	Create(context.Context, *model.GcsBucket) (*model.GcsBucket, error)
	// preview update an existing gcs-bucket
	PreviewUpdate(context.Context, *model.GcsBucket) (*model.GcsBucket, error)
	// update an existing gcs-bucket
	Update(context.Context, *model.GcsBucket) (*model.GcsBucket, error)
	// preview delete an existing gcs-bucket
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcsBucket, error)
	// delete an existing gcs-bucket
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcsBucket, error)
	// preview restore a deleted gcs-bucket
	PreviewRestore(context.Context, *model.GcsBucket) (*model.GcsBucket, error)
	// restore a deleted gcs-bucket
	Restore(context.Context, *model.GcsBucket) (*model.GcsBucket, error)
	// preview refresh a gcs-bucket that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GcsBucket, error)
	// refresh a gcs-bucket that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GcsBucket, error)
}

// UnimplementedGcsBucketCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGcsBucketCommandControllerServer struct {
}

func (UnimplementedGcsBucketCommandControllerServer) PreviewCreate(context.Context, *model.GcsBucket) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) Create(context.Context, *model.GcsBucket) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) PreviewUpdate(context.Context, *model.GcsBucket) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) Update(context.Context, *model.GcsBucket) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) PreviewRestore(context.Context, *model.GcsBucket) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) Restore(context.Context, *model.GcsBucket) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedGcsBucketCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.GcsBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeGcsBucketCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcsBucketCommandControllerServer will
// result in compilation errors.
type UnsafeGcsBucketCommandControllerServer interface {
	mustEmbedUnimplementedGcsBucketCommandControllerServer()
}

func RegisterGcsBucketCommandControllerServer(s grpc.ServiceRegistrar, srv GcsBucketCommandControllerServer) {
	s.RegisterService(&GcsBucketCommandController_ServiceDesc, srv)
}

func _GcsBucketCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcsBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).PreviewCreate(ctx, req.(*model.GcsBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcsBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).Create(ctx, req.(*model.GcsBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcsBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).PreviewUpdate(ctx, req.(*model.GcsBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcsBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).Update(ctx, req.(*model.GcsBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcsBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).PreviewRestore(ctx, req.(*model.GcsBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcsBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).Restore(ctx, req.(*model.GcsBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcsBucketCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcsBucketCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcsBucketCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcsBucketCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GcsBucketCommandController_ServiceDesc is the grpc.ServiceDesc for GcsBucketCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcsBucketCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gcp.gcsbucket.service.GcsBucketCommandController",
	HandlerType: (*GcsBucketCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _GcsBucketCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _GcsBucketCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _GcsBucketCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GcsBucketCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _GcsBucketCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GcsBucketCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _GcsBucketCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _GcsBucketCommandController_Restore_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _GcsBucketCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _GcsBucketCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gcp/gcsbucket/service/command.proto",
}
