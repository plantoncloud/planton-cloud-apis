// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/gcp/gcpdnszone/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/gcp/gcpdnszone/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GcpDnsZoneCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/previewCreate"
	GcpDnsZoneCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/create"
	GcpDnsZoneCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/previewUpdate"
	GcpDnsZoneCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/update"
	GcpDnsZoneCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/previewDelete"
	GcpDnsZoneCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/delete"
	GcpDnsZoneCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/previewRestore"
	GcpDnsZoneCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController/restore"
)

// GcpDnsZoneCommandControllerClient is the client API for GcpDnsZoneCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcpDnsZoneCommandControllerClient interface {
	// preview gcp-dns-zone before creating
	PreviewCreate(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// create a gcp-dns-zone
	Create(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// preview updates to a gcp-dns-zone
	PreviewUpdate(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// update an existing gcp-dns-zone
	Update(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// preview deleting a gcp-dns-zone
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// delete a gcp-dns-zone
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// preview restoring a deleted gcp-dns-zone
	PreviewRestore(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// restore a deleted gcp-dns-zone
	Restore(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
}

type gcpDnsZoneCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGcpDnsZoneCommandControllerClient(cc grpc.ClientConnInterface) GcpDnsZoneCommandControllerClient {
	return &gcpDnsZoneCommandControllerClient{cc}
}

func (c *gcpDnsZoneCommandControllerClient) PreviewCreate(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) Create(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) Update(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) PreviewRestore(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsZoneCommandControllerClient) Restore(ctx context.Context, in *model.GcpDnsZone, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsZoneCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcpDnsZoneCommandControllerServer is the server API for GcpDnsZoneCommandController service.
// All implementations should embed UnimplementedGcpDnsZoneCommandControllerServer
// for forward compatibility
type GcpDnsZoneCommandControllerServer interface {
	// preview gcp-dns-zone before creating
	PreviewCreate(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error)
	// create a gcp-dns-zone
	Create(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error)
	// preview updates to a gcp-dns-zone
	PreviewUpdate(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error)
	// update an existing gcp-dns-zone
	Update(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error)
	// preview deleting a gcp-dns-zone
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcpDnsZone, error)
	// delete a gcp-dns-zone
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcpDnsZone, error)
	// preview restoring a deleted gcp-dns-zone
	PreviewRestore(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error)
	// restore a deleted gcp-dns-zone
	Restore(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error)
}

// UnimplementedGcpDnsZoneCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGcpDnsZoneCommandControllerServer struct {
}

func (UnimplementedGcpDnsZoneCommandControllerServer) PreviewCreate(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) Create(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) PreviewUpdate(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) Update(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) PreviewRestore(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedGcpDnsZoneCommandControllerServer) Restore(context.Context, *model.GcpDnsZone) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeGcpDnsZoneCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcpDnsZoneCommandControllerServer will
// result in compilation errors.
type UnsafeGcpDnsZoneCommandControllerServer interface {
	mustEmbedUnimplementedGcpDnsZoneCommandControllerServer()
}

func RegisterGcpDnsZoneCommandControllerServer(s grpc.ServiceRegistrar, srv GcpDnsZoneCommandControllerServer) {
	s.RegisterService(&GcpDnsZoneCommandController_ServiceDesc, srv)
}

func _GcpDnsZoneCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpDnsZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewCreate(ctx, req.(*model.GcpDnsZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpDnsZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).Create(ctx, req.(*model.GcpDnsZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpDnsZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewUpdate(ctx, req.(*model.GcpDnsZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpDnsZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).Update(ctx, req.(*model.GcpDnsZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpDnsZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).PreviewRestore(ctx, req.(*model.GcpDnsZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsZoneCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpDnsZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsZoneCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsZoneCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsZoneCommandControllerServer).Restore(ctx, req.(*model.GcpDnsZone))
	}
	return interceptor(ctx, in, info, handler)
}

// GcpDnsZoneCommandController_ServiceDesc is the grpc.ServiceDesc for GcpDnsZoneCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcpDnsZoneCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsZoneCommandController",
	HandlerType: (*GcpDnsZoneCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _GcpDnsZoneCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _GcpDnsZoneCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _GcpDnsZoneCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GcpDnsZoneCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _GcpDnsZoneCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GcpDnsZoneCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _GcpDnsZoneCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _GcpDnsZoneCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gcp/gcpdnszone/service/command.proto",
}

const (
	GcpDnsRecordCommandController_Add_FullMethodName    = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsRecordCommandController/add"
	GcpDnsRecordCommandController_Update_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsRecordCommandController/update"
	GcpDnsRecordCommandController_Delete_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsRecordCommandController/delete"
)

// GcpDnsRecordCommandControllerClient is the client API for GcpDnsRecordCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcpDnsRecordCommandControllerClient interface {
	// add a new dns-record to gcp-dns-zone
	Add(ctx context.Context, in *model.AddOrUpdateGcpDnsRecordInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// update an existing dns-record in gcp-dns-zone
	Update(ctx context.Context, in *model.AddOrUpdateGcpDnsRecordInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
	// delete a dns-record from a gcp-dns-zone
	Delete(ctx context.Context, in *model.DeleteGcpDnsRecordInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error)
}

type gcpDnsRecordCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGcpDnsRecordCommandControllerClient(cc grpc.ClientConnInterface) GcpDnsRecordCommandControllerClient {
	return &gcpDnsRecordCommandControllerClient{cc}
}

func (c *gcpDnsRecordCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateGcpDnsRecordInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsRecordCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsRecordCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateGcpDnsRecordInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsRecordCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpDnsRecordCommandControllerClient) Delete(ctx context.Context, in *model.DeleteGcpDnsRecordInput, opts ...grpc.CallOption) (*model.GcpDnsZone, error) {
	out := new(model.GcpDnsZone)
	err := c.cc.Invoke(ctx, GcpDnsRecordCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcpDnsRecordCommandControllerServer is the server API for GcpDnsRecordCommandController service.
// All implementations should embed UnimplementedGcpDnsRecordCommandControllerServer
// for forward compatibility
type GcpDnsRecordCommandControllerServer interface {
	// add a new dns-record to gcp-dns-zone
	Add(context.Context, *model.AddOrUpdateGcpDnsRecordInput) (*model.GcpDnsZone, error)
	// update an existing dns-record in gcp-dns-zone
	Update(context.Context, *model.AddOrUpdateGcpDnsRecordInput) (*model.GcpDnsZone, error)
	// delete a dns-record from a gcp-dns-zone
	Delete(context.Context, *model.DeleteGcpDnsRecordInput) (*model.GcpDnsZone, error)
}

// UnimplementedGcpDnsRecordCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGcpDnsRecordCommandControllerServer struct {
}

func (UnimplementedGcpDnsRecordCommandControllerServer) Add(context.Context, *model.AddOrUpdateGcpDnsRecordInput) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGcpDnsRecordCommandControllerServer) Update(context.Context, *model.AddOrUpdateGcpDnsRecordInput) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGcpDnsRecordCommandControllerServer) Delete(context.Context, *model.DeleteGcpDnsRecordInput) (*model.GcpDnsZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeGcpDnsRecordCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcpDnsRecordCommandControllerServer will
// result in compilation errors.
type UnsafeGcpDnsRecordCommandControllerServer interface {
	mustEmbedUnimplementedGcpDnsRecordCommandControllerServer()
}

func RegisterGcpDnsRecordCommandControllerServer(s grpc.ServiceRegistrar, srv GcpDnsRecordCommandControllerServer) {
	s.RegisterService(&GcpDnsRecordCommandController_ServiceDesc, srv)
}

func _GcpDnsRecordCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateGcpDnsRecordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsRecordCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsRecordCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsRecordCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateGcpDnsRecordInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsRecordCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateGcpDnsRecordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsRecordCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsRecordCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsRecordCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateGcpDnsRecordInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpDnsRecordCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteGcpDnsRecordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpDnsRecordCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpDnsRecordCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpDnsRecordCommandControllerServer).Delete(ctx, req.(*model.DeleteGcpDnsRecordInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GcpDnsRecordCommandController_ServiceDesc is the grpc.ServiceDesc for GcpDnsRecordCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcpDnsRecordCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gcp.gcpdnszone.service.GcpDnsRecordCommandController",
	HandlerType: (*GcpDnsRecordCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _GcpDnsRecordCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GcpDnsRecordCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GcpDnsRecordCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gcp/gcpdnszone/service/command.proto",
}
