// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/code2cloud/v1/kafkakubernetes/model/io.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wrapper for id field of kafka-kubernetes
type KafkaKubernetesId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KafkaKubernetesId) Reset() {
	*x = KafkaKubernetesId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaKubernetesId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesId) ProtoMessage() {}

func (x *KafkaKubernetesId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesId.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaKubernetesId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list of kafka topics
type KafkaTopicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*KafkaTopic `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *KafkaTopicList) Reset() {
	*x = KafkaTopicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTopicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTopicList) ProtoMessage() {}

func (x *KafkaTopicList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTopicList.ProtoReflect.Descriptor instead.
func (*KafkaTopicList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaTopicList) GetEntries() []*KafkaTopic {
	if x != nil {
		return x.Entries
	}
	return nil
}

// wrapper for kafka topic id
type KafkaTopicId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KafkaTopicId) Reset() {
	*x = KafkaTopicId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTopicId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTopicId) ProtoMessage() {}

func (x *KafkaTopicId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTopicId.ProtoReflect.Descriptor instead.
func (*KafkaTopicId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaTopicId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// wrapper for kafka-kubernetes password
type KafkaKubernetesPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KafkaKubernetesPassword) Reset() {
	*x = KafkaKubernetesPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaKubernetesPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesPassword) ProtoMessage() {}

func (x *KafkaKubernetesPassword) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesPassword.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesPassword) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaKubernetesPassword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// input for command to add multiple kafka topics to a kafka-kubernetes
type AddKafkaTopicsCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the kafka-kubernetes to which the kafka topics are added
	KafkaKubernetesId string `protobuf:"bytes,1,opt,name=kafka_kubernetes_id,json=kafkaKubernetesId,proto3" json:"kafka_kubernetes_id,omitempty"`
	// list of kafka topics to be added to existing list of kafka topics
	KafkaTopics []*KafkaTopic `protobuf:"bytes,2,rep,name=kafka_topics,json=kafkaTopics,proto3" json:"kafka_topics,omitempty"`
	// A descriptive message explaining the reason for the change or operation.
	// This is used for history logging purposes.
	VersionMessage string `protobuf:"bytes,3,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *AddKafkaTopicsCommandInput) Reset() {
	*x = AddKafkaTopicsCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKafkaTopicsCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKafkaTopicsCommandInput) ProtoMessage() {}

func (x *AddKafkaTopicsCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKafkaTopicsCommandInput.ProtoReflect.Descriptor instead.
func (*AddKafkaTopicsCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *AddKafkaTopicsCommandInput) GetKafkaKubernetesId() string {
	if x != nil {
		return x.KafkaKubernetesId
	}
	return ""
}

func (x *AddKafkaTopicsCommandInput) GetKafkaTopics() []*KafkaTopic {
	if x != nil {
		return x.KafkaTopics
	}
	return nil
}

func (x *AddKafkaTopicsCommandInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// AddOrUpdateKafkaTopicCommandInput is used to encapsulate the details required
// for adding a new kafka-topic to a specific kafka-kubernetes, or updating
// an existing one. This message is typically used to transmit data between the client and
// server during an add or update operation concerning a specific kafka-topic
// associated with a particular kafka-kubernetes.
type AddOrUpdateKafkaTopicCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the kafka-kubernetes to which the kafka-topic
	// needs to be added or updated. This field must be populated with a valid
	// kafka-kubernetes ID, which can be obtained from the kafka-kubernetes entity itself.
	// The server uses this ID to identify the correct kafka-kubernetes where the
	// kafka-topic needs to be added or updated.
	KafkaKubernetesId string `protobuf:"bytes,1,opt,name=kafka_kubernetes_id,json=kafkaKubernetesId,proto3" json:"kafka_kubernetes_id,omitempty"`
	// The kafka-topic that needs to be added or updated within the product
	// environment. This field should be populated with a valid KafkaTopic object,
	// which encapsulates the details of the kafka-topic. If an kafka-topic
	// with the kafka-topic-id already exists in the kafka-kubernetes, the value will be updated.
	// Otherwise, a new kafka-topic will be created with the provided details.
	KafkaTopic *KafkaTopic `protobuf:"bytes,2,opt,name=kafka_topic,json=kafkaTopic,proto3" json:"kafka_topic,omitempty"`
	// A descriptive message explaining the reason for the change or operation.
	// This is used for history logging purposes.
	VersionMessage string `protobuf:"bytes,3,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *AddOrUpdateKafkaTopicCommandInput) Reset() {
	*x = AddOrUpdateKafkaTopicCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateKafkaTopicCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateKafkaTopicCommandInput) ProtoMessage() {}

func (x *AddOrUpdateKafkaTopicCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateKafkaTopicCommandInput.ProtoReflect.Descriptor instead.
func (*AddOrUpdateKafkaTopicCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *AddOrUpdateKafkaTopicCommandInput) GetKafkaKubernetesId() string {
	if x != nil {
		return x.KafkaKubernetesId
	}
	return ""
}

func (x *AddOrUpdateKafkaTopicCommandInput) GetKafkaTopic() *KafkaTopic {
	if x != nil {
		return x.KafkaTopic
	}
	return nil
}

func (x *AddOrUpdateKafkaTopicCommandInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// DeleteOrRestoreKafkaTopicCommandInput is used to encapsulate the details required for
// deleting or restoring a kafka-topic of a specific kafka-kubernetes.
// This message is typically used to transmit data between the client and the server
// during a delete or restore operation concerning a specific kafka-topic associated
// with a particular kafka-kubernetes.
type DeleteOrRestoreKafkaTopicCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the kafka-kubernetes from which the kafka-topic
	// needs to be deleted or restored. This field must be populated with a valid
	// kafka-kubernetes ID, which can be obtained from the kafka-kubernetes entity itself.
	// The server uses this ID to identify the correct kafka-kubernetes from which
	// the kafka-topic needs to be deleted or restored.
	KafkaKubernetesId string `protobuf:"bytes,1,opt,name=kafka_kubernetes_id,json=kafkaKubernetesId,proto3" json:"kafka_kubernetes_id,omitempty"`
	// The kafka-topic-id of the kafka-topic that needs to be deleted or restored.
	// This field should be populated with a valid
	// kafka-topic-id, which can be obtained from the kafka-topic entity itself.
	// The server uses this kafka-topic-id to identify the correct kafka-topic that
	// needs to be deleted or restored.
	KafkaTopicId string `protobuf:"bytes,2,opt,name=kafka_topic_id,json=kafkaTopicId,proto3" json:"kafka_topic_id,omitempty"`
	// A descriptive message explaining the reason for the change or operation.
	// This is used for history logging purposes.
	VersionMessage string `protobuf:"bytes,3,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *DeleteOrRestoreKafkaTopicCommandInput) Reset() {
	*x = DeleteOrRestoreKafkaTopicCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrRestoreKafkaTopicCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrRestoreKafkaTopicCommandInput) ProtoMessage() {}

func (x *DeleteOrRestoreKafkaTopicCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrRestoreKafkaTopicCommandInput.ProtoReflect.Descriptor instead.
func (*DeleteOrRestoreKafkaTopicCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteOrRestoreKafkaTopicCommandInput) GetKafkaKubernetesId() string {
	if x != nil {
		return x.KafkaKubernetesId
	}
	return ""
}

func (x *DeleteOrRestoreKafkaTopicCommandInput) GetKafkaTopicId() string {
	if x != nil {
		return x.KafkaTopicId
	}
	return ""
}

func (x *DeleteOrRestoreKafkaTopicCommandInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// KafkaTopicQueryInput is a message type that serves as input for queries
// related to Kafka topics within a specific Kafka cluster.
// It contains information about the specific Kafka cluster and the Kafka
// topic to be queried.
type KafkaTopicQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the Kafka cluster from which the Kafka topic
	// information is to be retrieved.
	// This field is required, as specified by the is_required field option.
	KafkaKubernetesId string `protobuf:"bytes,1,opt,name=kafka_kubernetes_id,json=kafkaKubernetesId,proto3" json:"kafka_kubernetes_id,omitempty"`
	// KafkaTopic object that represents the Kafka topic to be queried
	// in the Kafka cluster.
	// This encapsulates all the necessary information about the Kafka topic.
	KafkaTopic *KafkaTopic `protobuf:"bytes,2,opt,name=kafka_topic,json=kafkaTopic,proto3" json:"kafka_topic,omitempty"`
}

func (x *KafkaTopicQueryInput) Reset() {
	*x = KafkaTopicQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTopicQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTopicQueryInput) ProtoMessage() {}

func (x *KafkaTopicQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTopicQueryInput.ProtoReflect.Descriptor instead.
func (*KafkaTopicQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *KafkaTopicQueryInput) GetKafkaKubernetesId() string {
	if x != nil {
		return x.KafkaKubernetesId
	}
	return ""
}

func (x *KafkaTopicQueryInput) GetKafkaTopic() *KafkaTopic {
	if x != nil {
		return x.KafkaTopic
	}
	return nil
}

var File_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x36, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x42, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x67, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x11, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x0e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x01,
	0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x13,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x13, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x2f, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x13, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x13, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42,
	0xb9, 0x03, 0x0a, 0x44, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65,
	0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x66, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x07, 0x43, 0x50,
	0x41, 0x43, 0x56, 0x4b, 0x4d, 0xaa, 0x02, 0x36, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x56, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02,
	0x36, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41,
	0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56,
	0x31, 0x5c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x42, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41,
	0x70, 0x69, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescData = file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDesc
)

func file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDescData
}

var file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_goTypes = []interface{}{
	(*KafkaKubernetesId)(nil),                     // 0: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaKubernetesId
	(*KafkaTopicList)(nil),                        // 1: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopicList
	(*KafkaTopicId)(nil),                          // 2: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopicId
	(*KafkaKubernetesPassword)(nil),               // 3: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaKubernetesPassword
	(*AddKafkaTopicsCommandInput)(nil),            // 4: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.AddKafkaTopicsCommandInput
	(*AddOrUpdateKafkaTopicCommandInput)(nil),     // 5: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.AddOrUpdateKafkaTopicCommandInput
	(*DeleteOrRestoreKafkaTopicCommandInput)(nil), // 6: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.DeleteOrRestoreKafkaTopicCommandInput
	(*KafkaTopicQueryInput)(nil),                  // 7: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopicQueryInput
	(*KafkaTopic)(nil),                            // 8: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopic
}
var file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_depIdxs = []int32{
	8, // 0: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopicList.entries:type_name -> cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopic
	8, // 1: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.AddKafkaTopicsCommandInput.kafka_topics:type_name -> cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopic
	8, // 2: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.AddOrUpdateKafkaTopicCommandInput.kafka_topic:type_name -> cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopic
	8, // 3: cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopicQueryInput.kafka_topic:type_name -> cloud.planton.apis.code2cloud.v1.kafkakubernetes.model.KafkaTopic
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_init() }
func file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_init() {
	if File_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto != nil {
		return
	}
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaKubernetesId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTopicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTopicId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaKubernetesPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKafkaTopicsCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateKafkaTopicCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrRestoreKafkaTopicCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTopicQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto = out.File
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_goTypes = nil
	file_cloud_planton_apis_code2cloud_v1_kafkakubernetes_model_io_proto_depIdxs = nil
}
