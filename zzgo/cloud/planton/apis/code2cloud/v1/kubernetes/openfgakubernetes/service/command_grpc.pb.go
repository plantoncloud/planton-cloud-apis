// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/openfgakubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/openfgakubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenfgaKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/previewCreate"
	OpenfgaKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/create"
	OpenfgaKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/previewUpdate"
	OpenfgaKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/update"
	OpenfgaKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/previewDelete"
	OpenfgaKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/delete"
	OpenfgaKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/previewRestore"
	OpenfgaKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/restore"
	OpenfgaKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/restart"
	OpenfgaKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/pause"
	OpenfgaKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController/unpause"
)

// OpenfgaKubernetesCommandControllerClient is the client API for OpenfgaKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenfgaKubernetesCommandControllerClient interface {
	// preview creating openfga-kubernetes
	PreviewCreate(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// create openfga-kubernetes
	Create(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// preview updating an existing openfga-kubernetes
	PreviewUpdate(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// update an existing openfga-kubernetes
	Update(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// preview deleting an existing openfga-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// delete an existing openfga-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// preview restoring a previously deleted openfga-kubernetes
	PreviewRestore(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// restore a previously deleted openfga-kubernetes
	Restore(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// restart a openfga-kubernetes running in a environment.
	// openfga-kubernetes is restarted by deleting running "openfga" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.OpenfgaKubernetesId, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// pause a openfga-kubernetes running in a environment.
	// openfga-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
	// unpause a previously paused openfga-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the openfga-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error)
}

type openfgaKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenfgaKubernetesCommandControllerClient(cc grpc.ClientConnInterface) OpenfgaKubernetesCommandControllerClient {
	return &openfgaKubernetesCommandControllerClient{cc}
}

func (c *openfgaKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Create(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Update(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.OpenfgaKubernetes, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.OpenfgaKubernetesId, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openfgaKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.OpenfgaKubernetes, error) {
	out := new(model.OpenfgaKubernetes)
	err := c.cc.Invoke(ctx, OpenfgaKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenfgaKubernetesCommandControllerServer is the server API for OpenfgaKubernetesCommandController service.
// All implementations should embed UnimplementedOpenfgaKubernetesCommandControllerServer
// for forward compatibility
type OpenfgaKubernetesCommandControllerServer interface {
	// preview creating openfga-kubernetes
	PreviewCreate(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error)
	// create openfga-kubernetes
	Create(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error)
	// preview updating an existing openfga-kubernetes
	PreviewUpdate(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error)
	// update an existing openfga-kubernetes
	Update(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error)
	// preview deleting an existing openfga-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.OpenfgaKubernetes, error)
	// delete an existing openfga-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.OpenfgaKubernetes, error)
	// preview restoring a previously deleted openfga-kubernetes
	PreviewRestore(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error)
	// restore a previously deleted openfga-kubernetes
	Restore(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error)
	// restart a openfga-kubernetes running in a environment.
	// openfga-kubernetes is restarted by deleting running "openfga" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.OpenfgaKubernetesId) (*model.OpenfgaKubernetes, error)
	// pause a openfga-kubernetes running in a environment.
	// openfga-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.OpenfgaKubernetes, error)
	// unpause a previously paused openfga-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the openfga-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.OpenfgaKubernetes, error)
}

// UnimplementedOpenfgaKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedOpenfgaKubernetesCommandControllerServer struct {
}

func (UnimplementedOpenfgaKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Create(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Update(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Restore(context.Context, *model.OpenfgaKubernetes) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Restart(context.Context, *model.OpenfgaKubernetesId) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedOpenfgaKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.OpenfgaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}

// UnsafeOpenfgaKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenfgaKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafeOpenfgaKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedOpenfgaKubernetesCommandControllerServer()
}

func RegisterOpenfgaKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv OpenfgaKubernetesCommandControllerServer) {
	s.RegisterService(&OpenfgaKubernetesCommandController_ServiceDesc, srv)
}

func _OpenfgaKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.OpenfgaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Create(ctx, req.(*model.OpenfgaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.OpenfgaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Update(ctx, req.(*model.OpenfgaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.OpenfgaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Restore(ctx, req.(*model.OpenfgaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.OpenfgaKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Restart(ctx, req.(*model.OpenfgaKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenfgaKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenfgaKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenfgaKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenfgaKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenfgaKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for OpenfgaKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenfgaKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.openfgakubernetes.service.OpenfgaKubernetesCommandController",
	HandlerType: (*OpenfgaKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _OpenfgaKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _OpenfgaKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _OpenfgaKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _OpenfgaKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _OpenfgaKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _OpenfgaKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _OpenfgaKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _OpenfgaKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _OpenfgaKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _OpenfgaKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _OpenfgaKubernetesCommandController_Unpause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/openfgakubernetes/service/command.proto",
}
