// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/prometheuskubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/prometheuskubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrometheusKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/previewCreate"
	PrometheusKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/create"
	PrometheusKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/previewUpdate"
	PrometheusKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/update"
	PrometheusKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/previewDelete"
	PrometheusKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/delete"
	PrometheusKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/previewRestore"
	PrometheusKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/restore"
	PrometheusKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/restart"
	PrometheusKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/pause"
	PrometheusKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController/unpause"
)

// PrometheusKubernetesCommandControllerClient is the client API for PrometheusKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusKubernetesCommandControllerClient interface {
	// preview creating prometheus-kubernetes
	PreviewCreate(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// create prometheus-kubernetes
	Create(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// preview updating an existing prometheus-kubernetes
	PreviewUpdate(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// update an existing prometheus-kubernetes
	Update(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// preview deleting an existing prometheus-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// delete an existing prometheus-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// preview restoring a previously deleted prometheus-kubernetes
	PreviewRestore(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// restore a previously deleted prometheus-kubernetes
	Restore(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// restart a prometheus-kubernetes running in a environment.
	// prometheus-kubernetes is restarted by deleting running "prometheus" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.PrometheusKubernetesId, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// pause a prometheus-kubernetes running in a environment.
	// prometheus-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// unpause a previously paused prometheus-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the prometheus-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
}

type prometheusKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusKubernetesCommandControllerClient(cc grpc.ClientConnInterface) PrometheusKubernetesCommandControllerClient {
	return &prometheusKubernetesCommandControllerClient{cc}
}

func (c *prometheusKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Create(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Update(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.PrometheusKubernetes, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.PrometheusKubernetesId, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrometheusKubernetesCommandControllerServer is the server API for PrometheusKubernetesCommandController service.
// All implementations should embed UnimplementedPrometheusKubernetesCommandControllerServer
// for forward compatibility
type PrometheusKubernetesCommandControllerServer interface {
	// preview creating prometheus-kubernetes
	PreviewCreate(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error)
	// create prometheus-kubernetes
	Create(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error)
	// preview updating an existing prometheus-kubernetes
	PreviewUpdate(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error)
	// update an existing prometheus-kubernetes
	Update(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error)
	// preview deleting an existing prometheus-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.PrometheusKubernetes, error)
	// delete an existing prometheus-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.PrometheusKubernetes, error)
	// preview restoring a previously deleted prometheus-kubernetes
	PreviewRestore(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error)
	// restore a previously deleted prometheus-kubernetes
	Restore(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error)
	// restart a prometheus-kubernetes running in a environment.
	// prometheus-kubernetes is restarted by deleting running "prometheus" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.PrometheusKubernetesId) (*model.PrometheusKubernetes, error)
	// pause a prometheus-kubernetes running in a environment.
	// prometheus-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.PrometheusKubernetes, error)
	// unpause a previously paused prometheus-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the prometheus-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.PrometheusKubernetes, error)
}

// UnimplementedPrometheusKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedPrometheusKubernetesCommandControllerServer struct {
}

func (UnimplementedPrometheusKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Create(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Update(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Restore(context.Context, *model.PrometheusKubernetes) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Restart(context.Context, *model.PrometheusKubernetesId) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPrometheusKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}

// UnsafePrometheusKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafePrometheusKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedPrometheusKubernetesCommandControllerServer()
}

func RegisterPrometheusKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv PrometheusKubernetesCommandControllerServer) {
	s.RegisterService(&PrometheusKubernetesCommandController_ServiceDesc, srv)
}

func _PrometheusKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.PrometheusKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Create(ctx, req.(*model.PrometheusKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.PrometheusKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Update(ctx, req.(*model.PrometheusKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.PrometheusKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Restore(ctx, req.(*model.PrometheusKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Restart(ctx, req.(*model.PrometheusKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PrometheusKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for PrometheusKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrometheusKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesCommandController",
	HandlerType: (*PrometheusKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _PrometheusKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _PrometheusKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _PrometheusKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PrometheusKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _PrometheusKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PrometheusKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _PrometheusKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _PrometheusKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _PrometheusKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _PrometheusKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _PrometheusKubernetesCommandController_Unpause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/prometheuskubernetes/service/command.proto",
}
