// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/gitlabkubernetes/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/gitlabkubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitlabKubernetesQueryController_Get_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.gitlabkubernetes.service.GitlabKubernetesQueryController/get"
	GitlabKubernetesQueryController_GetPassword_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.gitlabkubernetes.service.GitlabKubernetesQueryController/getPassword"
)

// GitlabKubernetesQueryControllerClient is the client API for GitlabKubernetesQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitlabKubernetesQueryControllerClient interface {
	// look up gitlab-kubernetes using gitlab-kubernetes id
	Get(ctx context.Context, in *model.GitlabKubernetesId, opts ...grpc.CallOption) (*model.GitlabKubernetes, error)
	// look up gitlab-kubernetes sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model.GitlabKubernetesId, opts ...grpc.CallOption) (*model.GitlabKubernetesPassword, error)
}

type gitlabKubernetesQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGitlabKubernetesQueryControllerClient(cc grpc.ClientConnInterface) GitlabKubernetesQueryControllerClient {
	return &gitlabKubernetesQueryControllerClient{cc}
}

func (c *gitlabKubernetesQueryControllerClient) Get(ctx context.Context, in *model.GitlabKubernetesId, opts ...grpc.CallOption) (*model.GitlabKubernetes, error) {
	out := new(model.GitlabKubernetes)
	err := c.cc.Invoke(ctx, GitlabKubernetesQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabKubernetesQueryControllerClient) GetPassword(ctx context.Context, in *model.GitlabKubernetesId, opts ...grpc.CallOption) (*model.GitlabKubernetesPassword, error) {
	out := new(model.GitlabKubernetesPassword)
	err := c.cc.Invoke(ctx, GitlabKubernetesQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitlabKubernetesQueryControllerServer is the server API for GitlabKubernetesQueryController service.
// All implementations should embed UnimplementedGitlabKubernetesQueryControllerServer
// for forward compatibility
type GitlabKubernetesQueryControllerServer interface {
	// look up gitlab-kubernetes using gitlab-kubernetes id
	Get(context.Context, *model.GitlabKubernetesId) (*model.GitlabKubernetes, error)
	// look up gitlab-kubernetes sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model.GitlabKubernetesId) (*model.GitlabKubernetesPassword, error)
}

// UnimplementedGitlabKubernetesQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGitlabKubernetesQueryControllerServer struct {
}

func (UnimplementedGitlabKubernetesQueryControllerServer) Get(context.Context, *model.GitlabKubernetesId) (*model.GitlabKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGitlabKubernetesQueryControllerServer) GetPassword(context.Context, *model.GitlabKubernetesId) (*model.GitlabKubernetesPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}

// UnsafeGitlabKubernetesQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitlabKubernetesQueryControllerServer will
// result in compilation errors.
type UnsafeGitlabKubernetesQueryControllerServer interface {
	mustEmbedUnimplementedGitlabKubernetesQueryControllerServer()
}

func RegisterGitlabKubernetesQueryControllerServer(s grpc.ServiceRegistrar, srv GitlabKubernetesQueryControllerServer) {
	s.RegisterService(&GitlabKubernetesQueryController_ServiceDesc, srv)
}

func _GitlabKubernetesQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitlabKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabKubernetesQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabKubernetesQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabKubernetesQueryControllerServer).Get(ctx, req.(*model.GitlabKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitlabKubernetesQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitlabKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabKubernetesQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabKubernetesQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabKubernetesQueryControllerServer).GetPassword(ctx, req.(*model.GitlabKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

// GitlabKubernetesQueryController_ServiceDesc is the grpc.ServiceDesc for GitlabKubernetesQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitlabKubernetesQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.gitlabkubernetes.service.GitlabKubernetesQueryController",
	HandlerType: (*GitlabKubernetesQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _GitlabKubernetesQueryController_Get_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _GitlabKubernetesQueryController_GetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/gitlabkubernetes/service/query.proto",
}
