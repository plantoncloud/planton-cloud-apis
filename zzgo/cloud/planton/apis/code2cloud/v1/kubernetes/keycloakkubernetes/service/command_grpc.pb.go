// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/keycloakkubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/keycloakkubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeycloakKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/previewCreate"
	KeycloakKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/create"
	KeycloakKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/previewUpdate"
	KeycloakKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/update"
	KeycloakKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/previewDelete"
	KeycloakKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/delete"
	KeycloakKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/previewRestore"
	KeycloakKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/restore"
	KeycloakKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/restart"
	KeycloakKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/pause"
	KeycloakKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/unpause"
	KeycloakKubernetesCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/previewRefresh"
	KeycloakKubernetesCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController/refresh"
)

// KeycloakKubernetesCommandControllerClient is the client API for KeycloakKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeycloakKubernetesCommandControllerClient interface {
	// preview creating keycloak-kubernetes
	PreviewCreate(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// create keycloak-kubernetes
	Create(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// preview updating an existing keycloak-kubernetes
	PreviewUpdate(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// update an existing keycloak-kubernetes
	Update(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// preview deleting an existing keycloak-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// delete an existing keycloak-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// preview restoring a previously deleted keycloak-kubernetes
	PreviewRestore(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// restore a previously deleted keycloak-kubernetes
	Restore(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// restart a keycloak-kubernetes running in a environment.
	// keycloak-kubernetes is restarted by deleting running "keycloak" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.KeycloakKubernetesId, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// pause a keycloak-kubernetes running in a environment.
	// keycloak-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// unpause a previously paused keycloak-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the keycloak-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// preview refresh a keycloak-kubernetes that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
	// refresh a keycloak-kubernetes that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error)
}

type keycloakKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKeycloakKubernetesCommandControllerClient(cc grpc.ClientConnInterface) KeycloakKubernetesCommandControllerClient {
	return &keycloakKubernetesCommandControllerClient{cc}
}

func (c *keycloakKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Create(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Update(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.KeycloakKubernetes, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.KeycloakKubernetesId, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakKubernetesCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.KeycloakKubernetes, error) {
	out := new(model.KeycloakKubernetes)
	err := c.cc.Invoke(ctx, KeycloakKubernetesCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeycloakKubernetesCommandControllerServer is the server API for KeycloakKubernetesCommandController service.
// All implementations should embed UnimplementedKeycloakKubernetesCommandControllerServer
// for forward compatibility
type KeycloakKubernetesCommandControllerServer interface {
	// preview creating keycloak-kubernetes
	PreviewCreate(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error)
	// create keycloak-kubernetes
	Create(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error)
	// preview updating an existing keycloak-kubernetes
	PreviewUpdate(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error)
	// update an existing keycloak-kubernetes
	Update(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error)
	// preview deleting an existing keycloak-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.KeycloakKubernetes, error)
	// delete an existing keycloak-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.KeycloakKubernetes, error)
	// preview restoring a previously deleted keycloak-kubernetes
	PreviewRestore(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error)
	// restore a previously deleted keycloak-kubernetes
	Restore(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error)
	// restart a keycloak-kubernetes running in a environment.
	// keycloak-kubernetes is restarted by deleting running "keycloak" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.KeycloakKubernetesId) (*model.KeycloakKubernetes, error)
	// pause a keycloak-kubernetes running in a environment.
	// keycloak-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.KeycloakKubernetes, error)
	// unpause a previously paused keycloak-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the keycloak-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.KeycloakKubernetes, error)
	// preview refresh a keycloak-kubernetes that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.KeycloakKubernetes, error)
	// refresh a keycloak-kubernetes that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.KeycloakKubernetes, error)
}

// UnimplementedKeycloakKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKeycloakKubernetesCommandControllerServer struct {
}

func (UnimplementedKeycloakKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Create(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Update(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Restore(context.Context, *model.KeycloakKubernetes) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Restart(context.Context, *model.KeycloakKubernetesId) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedKeycloakKubernetesCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.KeycloakKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeKeycloakKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeycloakKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafeKeycloakKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedKeycloakKubernetesCommandControllerServer()
}

func RegisterKeycloakKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv KeycloakKubernetesCommandControllerServer) {
	s.RegisterService(&KeycloakKubernetesCommandController_ServiceDesc, srv)
}

func _KeycloakKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.KeycloakKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Create(ctx, req.(*model.KeycloakKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.KeycloakKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Update(ctx, req.(*model.KeycloakKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.KeycloakKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Restore(ctx, req.(*model.KeycloakKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Restart(ctx, req.(*model.KeycloakKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakKubernetesCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakKubernetesCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakKubernetesCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakKubernetesCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KeycloakKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for KeycloakKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeycloakKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.keycloakkubernetes.service.KeycloakKubernetesCommandController",
	HandlerType: (*KeycloakKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _KeycloakKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _KeycloakKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _KeycloakKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _KeycloakKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _KeycloakKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KeycloakKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _KeycloakKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _KeycloakKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _KeycloakKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _KeycloakKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _KeycloakKubernetesCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _KeycloakKubernetesCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _KeycloakKubernetesCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/keycloakkubernetes/service/command.proto",
}
