// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/plantoncloudkubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/plantoncloudkubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlantonCloudKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/previewCreate"
	PlantonCloudKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/create"
	PlantonCloudKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/previewUpdate"
	PlantonCloudKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/update"
	PlantonCloudKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/previewDelete"
	PlantonCloudKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/delete"
	PlantonCloudKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/previewRestore"
	PlantonCloudKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/restore"
	PlantonCloudKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/restart"
	PlantonCloudKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/pause"
	PlantonCloudKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/unpause"
	PlantonCloudKubernetesCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/previewRefresh"
	PlantonCloudKubernetesCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController/refresh"
)

// PlantonCloudKubernetesCommandControllerClient is the client API for PlantonCloudKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantonCloudKubernetesCommandControllerClient interface {
	// preview creating planton-cloud-kubernetes
	PreviewCreate(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// create planton-cloud-kubernetes
	Create(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// preview updating an existing planton-cloud-kubernetes
	PreviewUpdate(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// update an existing planton-cloud-kubernetes
	Update(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// preview deleting an existing planton-cloud-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// delete an existing planton-cloud-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// preview restoring a previously deleted planton-cloud-kubernetes
	PreviewRestore(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// restore a previously deleted planton-cloud-kubernetes
	Restore(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// restart a planton-cloud-kubernetes running in a environment.
	// planton-cloud-kubernetes is restarted by deleting running "plantoncloud" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.PlantonCloudKubernetesId, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// pause a planton-cloud-kubernetes running in a environment.
	// planton-cloud-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// unpause a previously paused planton-cloud-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the planton-cloud-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// preview refresh a planton-cloud-kubernetes that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
	// refresh a planton-cloud-kubernetes that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error)
}

type plantonCloudKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantonCloudKubernetesCommandControllerClient(cc grpc.ClientConnInterface) PlantonCloudKubernetesCommandControllerClient {
	return &plantonCloudKubernetesCommandControllerClient{cc}
}

func (c *plantonCloudKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Create(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Update(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.PlantonCloudKubernetes, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.PlantonCloudKubernetesId, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantonCloudKubernetesCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshInput, opts ...grpc.CallOption) (*model.PlantonCloudKubernetes, error) {
	out := new(model.PlantonCloudKubernetes)
	err := c.cc.Invoke(ctx, PlantonCloudKubernetesCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantonCloudKubernetesCommandControllerServer is the server API for PlantonCloudKubernetesCommandController service.
// All implementations should embed UnimplementedPlantonCloudKubernetesCommandControllerServer
// for forward compatibility
type PlantonCloudKubernetesCommandControllerServer interface {
	// preview creating planton-cloud-kubernetes
	PreviewCreate(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error)
	// create planton-cloud-kubernetes
	Create(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error)
	// preview updating an existing planton-cloud-kubernetes
	PreviewUpdate(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error)
	// update an existing planton-cloud-kubernetes
	Update(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error)
	// preview deleting an existing planton-cloud-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.PlantonCloudKubernetes, error)
	// delete an existing planton-cloud-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.PlantonCloudKubernetes, error)
	// preview restoring a previously deleted planton-cloud-kubernetes
	PreviewRestore(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error)
	// restore a previously deleted planton-cloud-kubernetes
	Restore(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error)
	// restart a planton-cloud-kubernetes running in a environment.
	// planton-cloud-kubernetes is restarted by deleting running "plantoncloud" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.PlantonCloudKubernetesId) (*model.PlantonCloudKubernetes, error)
	// pause a planton-cloud-kubernetes running in a environment.
	// planton-cloud-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.PlantonCloudKubernetes, error)
	// unpause a previously paused planton-cloud-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the planton-cloud-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.PlantonCloudKubernetes, error)
	// preview refresh a planton-cloud-kubernetes that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.PlantonCloudKubernetes, error)
	// refresh a planton-cloud-kubernetes that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.PlantonCloudKubernetes, error)
}

// UnimplementedPlantonCloudKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedPlantonCloudKubernetesCommandControllerServer struct {
}

func (UnimplementedPlantonCloudKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Create(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Update(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Restore(context.Context, *model.PlantonCloudKubernetes) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Restart(context.Context, *model.PlantonCloudKubernetesId) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshInput) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedPlantonCloudKubernetesCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshInput) (*model.PlantonCloudKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafePlantonCloudKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantonCloudKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafePlantonCloudKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedPlantonCloudKubernetesCommandControllerServer()
}

func RegisterPlantonCloudKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv PlantonCloudKubernetesCommandControllerServer) {
	s.RegisterService(&PlantonCloudKubernetesCommandController_ServiceDesc, srv)
}

func _PlantonCloudKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.PlantonCloudKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Create(ctx, req.(*model.PlantonCloudKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.PlantonCloudKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Update(ctx, req.(*model.PlantonCloudKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.PlantonCloudKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Restore(ctx, req.(*model.PlantonCloudKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PlantonCloudKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Restart(ctx, req.(*model.PlantonCloudKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantonCloudKubernetesCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantonCloudKubernetesCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantonCloudKubernetesCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantonCloudKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for PlantonCloudKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantonCloudKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.plantoncloudkubernetes.service.PlantonCloudKubernetesCommandController",
	HandlerType: (*PlantonCloudKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _PlantonCloudKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _PlantonCloudKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _PlantonCloudKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PlantonCloudKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _PlantonCloudKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PlantonCloudKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _PlantonCloudKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _PlantonCloudKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _PlantonCloudKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _PlantonCloudKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _PlantonCloudKubernetesCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _PlantonCloudKubernetesCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _PlantonCloudKubernetesCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/plantoncloudkubernetes/service/command.proto",
}
