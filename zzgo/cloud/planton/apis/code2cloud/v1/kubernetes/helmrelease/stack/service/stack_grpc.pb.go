// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/helmrelease/stack/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/helmrelease/stack/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelmReleaseStackController_Execute_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.helmrelease.stack.service.HelmReleaseStackController/execute"
)

// HelmReleaseStackControllerClient is the client API for HelmReleaseStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelmReleaseStackControllerClient interface {
	Execute(ctx context.Context, in *model.HelmReleaseStackInput, opts ...grpc.CallOption) (HelmReleaseStackController_ExecuteClient, error)
}

type helmReleaseStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelmReleaseStackControllerClient(cc grpc.ClientConnInterface) HelmReleaseStackControllerClient {
	return &helmReleaseStackControllerClient{cc}
}

func (c *helmReleaseStackControllerClient) Execute(ctx context.Context, in *model.HelmReleaseStackInput, opts ...grpc.CallOption) (HelmReleaseStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelmReleaseStackController_ServiceDesc.Streams[0], HelmReleaseStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &helmReleaseStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelmReleaseStackController_ExecuteClient interface {
	Recv() (*model.HelmReleaseStackResponse, error)
	grpc.ClientStream
}

type helmReleaseStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *helmReleaseStackControllerExecuteClient) Recv() (*model.HelmReleaseStackResponse, error) {
	m := new(model.HelmReleaseStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelmReleaseStackControllerServer is the server API for HelmReleaseStackController service.
// All implementations should embed UnimplementedHelmReleaseStackControllerServer
// for forward compatibility
type HelmReleaseStackControllerServer interface {
	Execute(*model.HelmReleaseStackInput, HelmReleaseStackController_ExecuteServer) error
}

// UnimplementedHelmReleaseStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedHelmReleaseStackControllerServer struct {
}

func (UnimplementedHelmReleaseStackControllerServer) Execute(*model.HelmReleaseStackInput, HelmReleaseStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeHelmReleaseStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelmReleaseStackControllerServer will
// result in compilation errors.
type UnsafeHelmReleaseStackControllerServer interface {
	mustEmbedUnimplementedHelmReleaseStackControllerServer()
}

func RegisterHelmReleaseStackControllerServer(s grpc.ServiceRegistrar, srv HelmReleaseStackControllerServer) {
	s.RegisterService(&HelmReleaseStackController_ServiceDesc, srv)
}

func _HelmReleaseStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.HelmReleaseStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelmReleaseStackControllerServer).Execute(m, &helmReleaseStackControllerExecuteServer{stream})
}

type HelmReleaseStackController_ExecuteServer interface {
	Send(*model.HelmReleaseStackResponse) error
	grpc.ServerStream
}

type helmReleaseStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *helmReleaseStackControllerExecuteServer) Send(m *model.HelmReleaseStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HelmReleaseStackController_ServiceDesc is the grpc.ServiceDesc for HelmReleaseStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelmReleaseStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.helmrelease.stack.service.HelmReleaseStackController",
	HandlerType: (*HelmReleaseStackControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _HelmReleaseStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/helmrelease/stack/service/stack.proto",
}
