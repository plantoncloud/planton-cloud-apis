// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/solrkubernetes/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/solrkubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SolrKubernetesStackController_Execute_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.solrkubernetes.service.SolrKubernetesStackController/execute"
)

// SolrKubernetesStackControllerClient is the client API for SolrKubernetesStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolrKubernetesStackControllerClient interface {
	Execute(ctx context.Context, in *model.SolrKubernetesStackInput, opts ...grpc.CallOption) (SolrKubernetesStackController_ExecuteClient, error)
}

type solrKubernetesStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSolrKubernetesStackControllerClient(cc grpc.ClientConnInterface) SolrKubernetesStackControllerClient {
	return &solrKubernetesStackControllerClient{cc}
}

func (c *solrKubernetesStackControllerClient) Execute(ctx context.Context, in *model.SolrKubernetesStackInput, opts ...grpc.CallOption) (SolrKubernetesStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolrKubernetesStackController_ServiceDesc.Streams[0], SolrKubernetesStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &solrKubernetesStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SolrKubernetesStackController_ExecuteClient interface {
	Recv() (*model.SolrKubernetesStackResponse, error)
	grpc.ClientStream
}

type solrKubernetesStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *solrKubernetesStackControllerExecuteClient) Recv() (*model.SolrKubernetesStackResponse, error) {
	m := new(model.SolrKubernetesStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SolrKubernetesStackControllerServer is the server API for SolrKubernetesStackController service.
// All implementations should embed UnimplementedSolrKubernetesStackControllerServer
// for forward compatibility
type SolrKubernetesStackControllerServer interface {
	Execute(*model.SolrKubernetesStackInput, SolrKubernetesStackController_ExecuteServer) error
}

// UnimplementedSolrKubernetesStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSolrKubernetesStackControllerServer struct {
}

func (UnimplementedSolrKubernetesStackControllerServer) Execute(*model.SolrKubernetesStackInput, SolrKubernetesStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeSolrKubernetesStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolrKubernetesStackControllerServer will
// result in compilation errors.
type UnsafeSolrKubernetesStackControllerServer interface {
	mustEmbedUnimplementedSolrKubernetesStackControllerServer()
}

func RegisterSolrKubernetesStackControllerServer(s grpc.ServiceRegistrar, srv SolrKubernetesStackControllerServer) {
	s.RegisterService(&SolrKubernetesStackController_ServiceDesc, srv)
}

func _SolrKubernetesStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.SolrKubernetesStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolrKubernetesStackControllerServer).Execute(m, &solrKubernetesStackControllerExecuteServer{stream})
}

type SolrKubernetesStackController_ExecuteServer interface {
	Send(*model.SolrKubernetesStackResponse) error
	grpc.ServerStream
}

type solrKubernetesStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *solrKubernetesStackControllerExecuteServer) Send(m *model.SolrKubernetesStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SolrKubernetesStackController_ServiceDesc is the grpc.ServiceDesc for SolrKubernetesStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolrKubernetesStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.solrkubernetes.service.SolrKubernetesStackController",
	HandlerType: (*SolrKubernetesStackControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _SolrKubernetesStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/solrkubernetes/service/stack.proto",
}
