// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubernetes/locustkubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubernetes/locustkubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocustKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/previewCreate"
	LocustKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/create"
	LocustKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/previewUpdate"
	LocustKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/update"
	LocustKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/previewDelete"
	LocustKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/delete"
	LocustKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/previewRestore"
	LocustKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/restore"
	LocustKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/restart"
	LocustKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/pause"
	LocustKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController/unpause"
)

// LocustKubernetesCommandControllerClient is the client API for LocustKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocustKubernetesCommandControllerClient interface {
	// preview creating locust-kubernetes
	PreviewCreate(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// create locust-kubernetes
	Create(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// preview updating an existing locust-kubernetes
	PreviewUpdate(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// update an existing locust-kubernetes
	Update(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// preview deleting an existing locust-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// delete an existing locust-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// preview restoring a previously deleted locust-kubernetes
	PreviewRestore(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// restore a previously deleted locust-kubernetes
	Restore(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// restart a locust-kubernetes running in a environment.
	// locust-kubernetes is restarted by deleting running "argocd" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.LocustKubernetesId, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// pause a locust-kubernetes running in a environment.
	// locust-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
	// unpause a previously paused locust-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the locust-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error)
}

type locustKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocustKubernetesCommandControllerClient(cc grpc.ClientConnInterface) LocustKubernetesCommandControllerClient {
	return &locustKubernetesCommandControllerClient{cc}
}

func (c *locustKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Create(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Update(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.LocustKubernetes, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.LocustKubernetesId, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locustKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.LocustKubernetes, error) {
	out := new(model.LocustKubernetes)
	err := c.cc.Invoke(ctx, LocustKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocustKubernetesCommandControllerServer is the server API for LocustKubernetesCommandController service.
// All implementations should embed UnimplementedLocustKubernetesCommandControllerServer
// for forward compatibility
type LocustKubernetesCommandControllerServer interface {
	// preview creating locust-kubernetes
	PreviewCreate(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error)
	// create locust-kubernetes
	Create(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error)
	// preview updating an existing locust-kubernetes
	PreviewUpdate(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error)
	// update an existing locust-kubernetes
	Update(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error)
	// preview deleting an existing locust-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.LocustKubernetes, error)
	// delete an existing locust-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.LocustKubernetes, error)
	// preview restoring a previously deleted locust-kubernetes
	PreviewRestore(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error)
	// restore a previously deleted locust-kubernetes
	Restore(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error)
	// restart a locust-kubernetes running in a environment.
	// locust-kubernetes is restarted by deleting running "argocd" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.LocustKubernetesId) (*model.LocustKubernetes, error)
	// pause a locust-kubernetes running in a environment.
	// locust-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.LocustKubernetes, error)
	// unpause a previously paused locust-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the locust-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.LocustKubernetes, error)
}

// UnimplementedLocustKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedLocustKubernetesCommandControllerServer struct {
}

func (UnimplementedLocustKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Create(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Update(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Restore(context.Context, *model.LocustKubernetes) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Restart(context.Context, *model.LocustKubernetesId) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedLocustKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.LocustKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}

// UnsafeLocustKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocustKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafeLocustKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedLocustKubernetesCommandControllerServer()
}

func RegisterLocustKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv LocustKubernetesCommandControllerServer) {
	s.RegisterService(&LocustKubernetesCommandController_ServiceDesc, srv)
}

func _LocustKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.LocustKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Create(ctx, req.(*model.LocustKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.LocustKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Update(ctx, req.(*model.LocustKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.LocustKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Restore(ctx, req.(*model.LocustKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LocustKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Restart(ctx, req.(*model.LocustKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocustKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocustKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocustKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocustKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

// LocustKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for LocustKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocustKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubernetes.locustkubernetes.service.LocustKubernetesCommandController",
	HandlerType: (*LocustKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _LocustKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _LocustKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _LocustKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _LocustKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _LocustKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _LocustKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _LocustKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _LocustKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _LocustKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _LocustKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _LocustKubernetesCommandController_Unpause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubernetes/locustkubernetes/service/command.proto",
}
