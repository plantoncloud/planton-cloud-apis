// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/solrcloud/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/solrcloud/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SolrCloudQueryController_GetById_FullMethodName     = "/cloud.planton.apis.code2cloud.v1.solrcloud.service.SolrCloudQueryController/getById"
	SolrCloudQueryController_GetPassword_FullMethodName = "/cloud.planton.apis.code2cloud.v1.solrcloud.service.SolrCloudQueryController/getPassword"
)

// SolrCloudQueryControllerClient is the client API for SolrCloudQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolrCloudQueryControllerClient interface {
	// look up solr-cloud using solr-cloud id
	GetById(ctx context.Context, in *model.SolrCloudId, opts ...grpc.CallOption) (*model.SolrCloud, error)
	// look up solr-cloud sasl password
	// password is retrieved from the kubernetes cloud.
	GetPassword(ctx context.Context, in *model.SolrCloudId, opts ...grpc.CallOption) (*model.SolrCloudPassword, error)
}

type solrCloudQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSolrCloudQueryControllerClient(cc grpc.ClientConnInterface) SolrCloudQueryControllerClient {
	return &solrCloudQueryControllerClient{cc}
}

func (c *solrCloudQueryControllerClient) GetById(ctx context.Context, in *model.SolrCloudId, opts ...grpc.CallOption) (*model.SolrCloud, error) {
	out := new(model.SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) GetPassword(ctx context.Context, in *model.SolrCloudId, opts ...grpc.CallOption) (*model.SolrCloudPassword, error) {
	out := new(model.SolrCloudPassword)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolrCloudQueryControllerServer is the server API for SolrCloudQueryController service.
// All implementations should embed UnimplementedSolrCloudQueryControllerServer
// for forward compatibility
type SolrCloudQueryControllerServer interface {
	// look up solr-cloud using solr-cloud id
	GetById(context.Context, *model.SolrCloudId) (*model.SolrCloud, error)
	// look up solr-cloud sasl password
	// password is retrieved from the kubernetes cloud.
	GetPassword(context.Context, *model.SolrCloudId) (*model.SolrCloudPassword, error)
}

// UnimplementedSolrCloudQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSolrCloudQueryControllerServer struct {
}

func (UnimplementedSolrCloudQueryControllerServer) GetById(context.Context, *model.SolrCloudId) (*model.SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) GetPassword(context.Context, *model.SolrCloudId) (*model.SolrCloudPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}

// UnsafeSolrCloudQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolrCloudQueryControllerServer will
// result in compilation errors.
type UnsafeSolrCloudQueryControllerServer interface {
	mustEmbedUnimplementedSolrCloudQueryControllerServer()
}

func RegisterSolrCloudQueryControllerServer(s grpc.ServiceRegistrar, srv SolrCloudQueryControllerServer) {
	s.RegisterService(&SolrCloudQueryController_ServiceDesc, srv)
}

func _SolrCloudQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).GetById(ctx, req.(*model.SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).GetPassword(ctx, req.(*model.SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

// SolrCloudQueryController_ServiceDesc is the grpc.ServiceDesc for SolrCloudQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolrCloudQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.solrcloud.service.SolrCloudQueryController",
	HandlerType: (*SolrCloudQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _SolrCloudQueryController_GetById_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _SolrCloudQueryController_GetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/solrcloud/service/query.proto",
}
