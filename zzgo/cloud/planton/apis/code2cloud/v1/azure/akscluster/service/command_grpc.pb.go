// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/azure/akscluster/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/azure/akscluster/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AksClusterCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/previewCreate"
	AksClusterCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/create"
	AksClusterCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/previewUpdate"
	AksClusterCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/update"
	AksClusterCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/previewDelete"
	AksClusterCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/delete"
	AksClusterCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/previewRestore"
	AksClusterCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/restore"
	AksClusterCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/pause"
	AksClusterCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController/unpause"
)

// AksClusterCommandControllerClient is the client API for AksClusterCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AksClusterCommandControllerClient interface {
	// preview create a aks-cluster.
	PreviewCreate(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error)
	// create a aks-cluster.
	Create(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error)
	// preview updating an existing aks-cluster.
	PreviewUpdate(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error)
	// update an existing aks-cluster.
	Update(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error)
	// preview deleting a aks-cluster.
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AksCluster, error)
	// delete a aks-cluster.
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AksCluster, error)
	// preview restoring a deleted aks-cluster.
	PreviewRestore(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error)
	// restore a deleted aks-cluster.
	Restore(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error)
	// pause a aks-cluster.
	// a aks-cluster is paused by setting the number of nodes in each node pool of the aks-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the aks-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a aks-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.AksCluster, error)
	// unpause a aks-cluster.
	// a aks-cluster is resumed by setting the number of nodes in each node pool of the aks-cluster to the
	// values configured for the aks-cluster.
	// when the aks-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.AksCluster, error)
}

type aksClusterCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAksClusterCommandControllerClient(cc grpc.ClientConnInterface) AksClusterCommandControllerClient {
	return &aksClusterCommandControllerClient{cc}
}

func (c *aksClusterCommandControllerClient) PreviewCreate(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) Create(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) Update(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) PreviewRestore(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) Restore(ctx context.Context, in *model.AksCluster, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseInput, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aksClusterCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseInput, opts ...grpc.CallOption) (*model.AksCluster, error) {
	out := new(model.AksCluster)
	err := c.cc.Invoke(ctx, AksClusterCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AksClusterCommandControllerServer is the server API for AksClusterCommandController service.
// All implementations should embed UnimplementedAksClusterCommandControllerServer
// for forward compatibility
type AksClusterCommandControllerServer interface {
	// preview create a aks-cluster.
	PreviewCreate(context.Context, *model.AksCluster) (*model.AksCluster, error)
	// create a aks-cluster.
	Create(context.Context, *model.AksCluster) (*model.AksCluster, error)
	// preview updating an existing aks-cluster.
	PreviewUpdate(context.Context, *model.AksCluster) (*model.AksCluster, error)
	// update an existing aks-cluster.
	Update(context.Context, *model.AksCluster) (*model.AksCluster, error)
	// preview deleting a aks-cluster.
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.AksCluster, error)
	// delete a aks-cluster.
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.AksCluster, error)
	// preview restoring a deleted aks-cluster.
	PreviewRestore(context.Context, *model.AksCluster) (*model.AksCluster, error)
	// restore a deleted aks-cluster.
	Restore(context.Context, *model.AksCluster) (*model.AksCluster, error)
	// pause a aks-cluster.
	// a aks-cluster is paused by setting the number of nodes in each node pool of the aks-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the aks-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a aks-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(context.Context, *model1.ApiResourcePauseInput) (*model.AksCluster, error)
	// unpause a aks-cluster.
	// a aks-cluster is resumed by setting the number of nodes in each node pool of the aks-cluster to the
	// values configured for the aks-cluster.
	// when the aks-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.AksCluster, error)
}

// UnimplementedAksClusterCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedAksClusterCommandControllerServer struct {
}

func (UnimplementedAksClusterCommandControllerServer) PreviewCreate(context.Context, *model.AksCluster) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) Create(context.Context, *model.AksCluster) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) PreviewUpdate(context.Context, *model.AksCluster) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) Update(context.Context, *model.AksCluster) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) PreviewRestore(context.Context, *model.AksCluster) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) Restore(context.Context, *model.AksCluster) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseInput) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedAksClusterCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseInput) (*model.AksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}

// UnsafeAksClusterCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AksClusterCommandControllerServer will
// result in compilation errors.
type UnsafeAksClusterCommandControllerServer interface {
	mustEmbedUnimplementedAksClusterCommandControllerServer()
}

func RegisterAksClusterCommandControllerServer(s grpc.ServiceRegistrar, srv AksClusterCommandControllerServer) {
	s.RegisterService(&AksClusterCommandController_ServiceDesc, srv)
}

func _AksClusterCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).PreviewCreate(ctx, req.(*model.AksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).Create(ctx, req.(*model.AksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).PreviewUpdate(ctx, req.(*model.AksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).Update(ctx, req.(*model.AksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).PreviewRestore(ctx, req.(*model.AksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).Restore(ctx, req.(*model.AksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AksClusterCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AksClusterCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AksClusterCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AksClusterCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseInput))
	}
	return interceptor(ctx, in, info, handler)
}

// AksClusterCommandController_ServiceDesc is the grpc.ServiceDesc for AksClusterCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AksClusterCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.azure.akscluster.service.AksClusterCommandController",
	HandlerType: (*AksClusterCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _AksClusterCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _AksClusterCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _AksClusterCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _AksClusterCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _AksClusterCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _AksClusterCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _AksClusterCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _AksClusterCommandController_Restore_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _AksClusterCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _AksClusterCommandController_Unpause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/azure/akscluster/service/command.proto",
}
