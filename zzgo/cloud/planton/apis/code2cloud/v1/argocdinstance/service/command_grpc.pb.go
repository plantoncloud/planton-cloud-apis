// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/argocdinstance/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/argocdinstance/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArgocdInstanceCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/previewCreate"
	ArgocdInstanceCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/create"
	ArgocdInstanceCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/previewUpdate"
	ArgocdInstanceCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/update"
	ArgocdInstanceCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/previewDelete"
	ArgocdInstanceCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/delete"
	ArgocdInstanceCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/previewRestore"
	ArgocdInstanceCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/restore"
	ArgocdInstanceCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/createStackJob"
	ArgocdInstanceCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/restart"
	ArgocdInstanceCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/pause"
	ArgocdInstanceCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/unpause"
	ArgocdInstanceCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/previewRefresh"
	ArgocdInstanceCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController/refresh"
)

// ArgocdInstanceCommandControllerClient is the client API for ArgocdInstanceCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArgocdInstanceCommandControllerClient interface {
	// preview creating argocd-instance
	PreviewCreate(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// create argocd-instance
	Create(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// preview updating an existing argocd-instance
	PreviewUpdate(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// update an existing argocd-instance
	Update(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// preview deleting an existing argocd-instance
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// delete an existing argocd-instance
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// preview restoring a previously deleted argocd-instance
	PreviewRestore(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// restore a previously deleted argocd-instance
	Restore(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// create-stack-job for argocd-instance
	CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// restart a argocd-instance running in a environment.
	// argocd-instance is restarted by deleting running "argocd" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.ArgocdInstanceId, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// pause a argocd-instance running in a environment.
	// argocd-instance is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// unpause a previously paused argocd-instance running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the argocd-instance.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// preview refresh a argocd-instance that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
	// refresh a argocd-instance that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error)
}

type argocdInstanceCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewArgocdInstanceCommandControllerClient(cc grpc.ClientConnInterface) ArgocdInstanceCommandControllerClient {
	return &argocdInstanceCommandControllerClient{cc}
}

func (c *argocdInstanceCommandControllerClient) PreviewCreate(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Create(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Update(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) PreviewRestore(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Restore(ctx context.Context, in *model.ArgocdInstance, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Restart(ctx context.Context, in *model.ArgocdInstanceId, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *argocdInstanceCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.ArgocdInstance, error) {
	out := new(model.ArgocdInstance)
	err := c.cc.Invoke(ctx, ArgocdInstanceCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArgocdInstanceCommandControllerServer is the server API for ArgocdInstanceCommandController service.
// All implementations should embed UnimplementedArgocdInstanceCommandControllerServer
// for forward compatibility
type ArgocdInstanceCommandControllerServer interface {
	// preview creating argocd-instance
	PreviewCreate(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error)
	// create argocd-instance
	Create(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error)
	// preview updating an existing argocd-instance
	PreviewUpdate(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error)
	// update an existing argocd-instance
	Update(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error)
	// preview deleting an existing argocd-instance
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.ArgocdInstance, error)
	// delete an existing argocd-instance
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.ArgocdInstance, error)
	// preview restoring a previously deleted argocd-instance
	PreviewRestore(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error)
	// restore a previously deleted argocd-instance
	Restore(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error)
	// create-stack-job for argocd-instance
	CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.ArgocdInstance, error)
	// restart a argocd-instance running in a environment.
	// argocd-instance is restarted by deleting running "argocd" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.ArgocdInstanceId) (*model.ArgocdInstance, error)
	// pause a argocd-instance running in a environment.
	// argocd-instance is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.ArgocdInstance, error)
	// unpause a previously paused argocd-instance running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the argocd-instance.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.ArgocdInstance, error)
	// preview refresh a argocd-instance that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.ArgocdInstance, error)
	// refresh a argocd-instance that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.ArgocdInstance, error)
}

// UnimplementedArgocdInstanceCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedArgocdInstanceCommandControllerServer struct {
}

func (UnimplementedArgocdInstanceCommandControllerServer) PreviewCreate(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Create(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) PreviewUpdate(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Update(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) PreviewRestore(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Restore(context.Context, *model.ArgocdInstance) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Restart(context.Context, *model.ArgocdInstanceId) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedArgocdInstanceCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.ArgocdInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeArgocdInstanceCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArgocdInstanceCommandControllerServer will
// result in compilation errors.
type UnsafeArgocdInstanceCommandControllerServer interface {
	mustEmbedUnimplementedArgocdInstanceCommandControllerServer()
}

func RegisterArgocdInstanceCommandControllerServer(s grpc.ServiceRegistrar, srv ArgocdInstanceCommandControllerServer) {
	s.RegisterService(&ArgocdInstanceCommandController_ServiceDesc, srv)
}

func _ArgocdInstanceCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewCreate(ctx, req.(*model.ArgocdInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Create(ctx, req.(*model.ArgocdInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewUpdate(ctx, req.(*model.ArgocdInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Update(ctx, req.(*model.ArgocdInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewRestore(ctx, req.(*model.ArgocdInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Restore(ctx, req.(*model.ArgocdInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).CreateStackJob(ctx, req.(*model2.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArgocdInstanceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Restart(ctx, req.(*model.ArgocdInstanceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArgocdInstanceCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArgocdInstanceCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArgocdInstanceCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArgocdInstanceCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ArgocdInstanceCommandController_ServiceDesc is the grpc.ServiceDesc for ArgocdInstanceCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArgocdInstanceCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.argocdinstance.service.ArgocdInstanceCommandController",
	HandlerType: (*ArgocdInstanceCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _ArgocdInstanceCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _ArgocdInstanceCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _ArgocdInstanceCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ArgocdInstanceCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _ArgocdInstanceCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ArgocdInstanceCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _ArgocdInstanceCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _ArgocdInstanceCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _ArgocdInstanceCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _ArgocdInstanceCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _ArgocdInstanceCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _ArgocdInstanceCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _ArgocdInstanceCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _ArgocdInstanceCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/argocdinstance/service/command.proto",
}
