// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/helmrelease/service/query.proto

package service

import (
	context "context"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/environment/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/helmrelease/model"
	model3 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubecluster/model"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model4 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/product/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelmReleaseQueryController_List_FullMethodName                = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController/list"
	HelmReleaseQueryController_GetById_FullMethodName             = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController/getById"
	HelmReleaseQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController/findByProductId"
	HelmReleaseQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController/findByEnvironmentId"
	HelmReleaseQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController/findByKubeClusterId"
	HelmReleaseQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController/findPods"
)

// HelmReleaseQueryControllerClient is the client API for HelmReleaseQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelmReleaseQueryControllerClient interface {
	// list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.HelmReleaseList, error)
	// look up redis-cluster using redis-cluster id
	GetById(ctx context.Context, in *model.HelmReleaseId, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// find redis-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *model1.ProductId, opts ...grpc.CallOption) (*model.HelmReleases, error)
	// find redis-clusters by environment
	FindByEnvironmentId(ctx context.Context, in *model2.EnvironmentId, opts ...grpc.CallOption) (*model.HelmReleases, error)
	FindByKubeClusterId(ctx context.Context, in *model3.KubeClusterId, opts ...grpc.CallOption) (*model.HelmReleases, error)
	// lookup pods of a redis-cluster deployed to a environment
	FindPods(ctx context.Context, in *model.HelmReleaseId, opts ...grpc.CallOption) (*model4.Pods, error)
}

type helmReleaseQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelmReleaseQueryControllerClient(cc grpc.ClientConnInterface) HelmReleaseQueryControllerClient {
	return &helmReleaseQueryControllerClient{cc}
}

func (c *helmReleaseQueryControllerClient) List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.HelmReleaseList, error) {
	out := new(model.HelmReleaseList)
	err := c.cc.Invoke(ctx, HelmReleaseQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseQueryControllerClient) GetById(ctx context.Context, in *model.HelmReleaseId, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseQueryControllerClient) FindByProductId(ctx context.Context, in *model1.ProductId, opts ...grpc.CallOption) (*model.HelmReleases, error) {
	out := new(model.HelmReleases)
	err := c.cc.Invoke(ctx, HelmReleaseQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *model2.EnvironmentId, opts ...grpc.CallOption) (*model.HelmReleases, error) {
	out := new(model.HelmReleases)
	err := c.cc.Invoke(ctx, HelmReleaseQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *model3.KubeClusterId, opts ...grpc.CallOption) (*model.HelmReleases, error) {
	out := new(model.HelmReleases)
	err := c.cc.Invoke(ctx, HelmReleaseQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseQueryControllerClient) FindPods(ctx context.Context, in *model.HelmReleaseId, opts ...grpc.CallOption) (*model4.Pods, error) {
	out := new(model4.Pods)
	err := c.cc.Invoke(ctx, HelmReleaseQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelmReleaseQueryControllerServer is the server API for HelmReleaseQueryController service.
// All implementations should embed UnimplementedHelmReleaseQueryControllerServer
// for forward compatibility
type HelmReleaseQueryControllerServer interface {
	// list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
	List(context.Context, *rpc.PageInfo) (*model.HelmReleaseList, error)
	// look up redis-cluster using redis-cluster id
	GetById(context.Context, *model.HelmReleaseId) (*model.HelmRelease, error)
	// find redis-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *model1.ProductId) (*model.HelmReleases, error)
	// find redis-clusters by environment
	FindByEnvironmentId(context.Context, *model2.EnvironmentId) (*model.HelmReleases, error)
	FindByKubeClusterId(context.Context, *model3.KubeClusterId) (*model.HelmReleases, error)
	// lookup pods of a redis-cluster deployed to a environment
	FindPods(context.Context, *model.HelmReleaseId) (*model4.Pods, error)
}

// UnimplementedHelmReleaseQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedHelmReleaseQueryControllerServer struct {
}

func (UnimplementedHelmReleaseQueryControllerServer) List(context.Context, *rpc.PageInfo) (*model.HelmReleaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHelmReleaseQueryControllerServer) GetById(context.Context, *model.HelmReleaseId) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedHelmReleaseQueryControllerServer) FindByProductId(context.Context, *model1.ProductId) (*model.HelmReleases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedHelmReleaseQueryControllerServer) FindByEnvironmentId(context.Context, *model2.EnvironmentId) (*model.HelmReleases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedHelmReleaseQueryControllerServer) FindByKubeClusterId(context.Context, *model3.KubeClusterId) (*model.HelmReleases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedHelmReleaseQueryControllerServer) FindPods(context.Context, *model.HelmReleaseId) (*model4.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeHelmReleaseQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelmReleaseQueryControllerServer will
// result in compilation errors.
type UnsafeHelmReleaseQueryControllerServer interface {
	mustEmbedUnimplementedHelmReleaseQueryControllerServer()
}

func RegisterHelmReleaseQueryControllerServer(s grpc.ServiceRegistrar, srv HelmReleaseQueryControllerServer) {
	s.RegisterService(&HelmReleaseQueryController_ServiceDesc, srv)
}

func _HelmReleaseQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseQueryControllerServer).List(ctx, req.(*rpc.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseQueryControllerServer).GetById(ctx, req.(*model.HelmReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseQueryControllerServer).FindByProductId(ctx, req.(*model1.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseQueryControllerServer).FindByEnvironmentId(ctx, req.(*model2.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model3.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseQueryControllerServer).FindByKubeClusterId(ctx, req.(*model3.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseQueryControllerServer).FindPods(ctx, req.(*model.HelmReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

// HelmReleaseQueryController_ServiceDesc is the grpc.ServiceDesc for HelmReleaseQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelmReleaseQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseQueryController",
	HandlerType: (*HelmReleaseQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _HelmReleaseQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _HelmReleaseQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _HelmReleaseQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _HelmReleaseQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _HelmReleaseQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _HelmReleaseQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/helmrelease/service/query.proto",
}
