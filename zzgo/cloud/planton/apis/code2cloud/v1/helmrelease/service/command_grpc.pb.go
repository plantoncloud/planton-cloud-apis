// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/helmrelease/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/helmrelease/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelmReleaseCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/previewCreate"
	HelmReleaseCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/create"
	HelmReleaseCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/previewUpdate"
	HelmReleaseCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/update"
	HelmReleaseCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/previewDelete"
	HelmReleaseCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/delete"
	HelmReleaseCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/previewRestore"
	HelmReleaseCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/restore"
	HelmReleaseCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/createStackJob"
	HelmReleaseCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/restart"
	HelmReleaseCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/pause"
	HelmReleaseCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/unpause"
	HelmReleaseCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/previewRefresh"
	HelmReleaseCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController/refresh"
)

// HelmReleaseCommandControllerClient is the client API for HelmReleaseCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelmReleaseCommandControllerClient interface {
	// preview creating redis-cluster
	PreviewCreate(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// create redis-cluster
	Create(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// preview updating an existing redis-cluster
	PreviewUpdate(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// update an existing redis-cluster
	Update(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// preview deleting an existing redis-cluster
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// delete an existing redis-cluster
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// preview restoring a previously deleted redis-cluster
	PreviewRestore(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// restore a previously deleted redis-cluster
	Restore(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// create-stack-job for redis-cluster
	CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// restart a redis-cluster running in a environment.
	// redis-cluster is restarted by deleting running "redis" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.HelmReleaseId, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// pause a redis-cluster running in a environment.
	// redis-cluster is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// unpause a previously paused redis-cluster running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the redis-cluster.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// preview refresh a redis-cluster that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
	// refresh a redis-cluster that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error)
}

type helmReleaseCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelmReleaseCommandControllerClient(cc grpc.ClientConnInterface) HelmReleaseCommandControllerClient {
	return &helmReleaseCommandControllerClient{cc}
}

func (c *helmReleaseCommandControllerClient) PreviewCreate(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Create(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Update(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) PreviewRestore(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Restore(ctx context.Context, in *model.HelmRelease, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Restart(ctx context.Context, in *model.HelmReleaseId, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmReleaseCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.HelmRelease, error) {
	out := new(model.HelmRelease)
	err := c.cc.Invoke(ctx, HelmReleaseCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelmReleaseCommandControllerServer is the server API for HelmReleaseCommandController service.
// All implementations should embed UnimplementedHelmReleaseCommandControllerServer
// for forward compatibility
type HelmReleaseCommandControllerServer interface {
	// preview creating redis-cluster
	PreviewCreate(context.Context, *model.HelmRelease) (*model.HelmRelease, error)
	// create redis-cluster
	Create(context.Context, *model.HelmRelease) (*model.HelmRelease, error)
	// preview updating an existing redis-cluster
	PreviewUpdate(context.Context, *model.HelmRelease) (*model.HelmRelease, error)
	// update an existing redis-cluster
	Update(context.Context, *model.HelmRelease) (*model.HelmRelease, error)
	// preview deleting an existing redis-cluster
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.HelmRelease, error)
	// delete an existing redis-cluster
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.HelmRelease, error)
	// preview restoring a previously deleted redis-cluster
	PreviewRestore(context.Context, *model.HelmRelease) (*model.HelmRelease, error)
	// restore a previously deleted redis-cluster
	Restore(context.Context, *model.HelmRelease) (*model.HelmRelease, error)
	// create-stack-job for redis-cluster
	CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.HelmRelease, error)
	// restart a redis-cluster running in a environment.
	// redis-cluster is restarted by deleting running "redis" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.HelmReleaseId) (*model.HelmRelease, error)
	// pause a redis-cluster running in a environment.
	// redis-cluster is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.HelmRelease, error)
	// unpause a previously paused redis-cluster running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the redis-cluster.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.HelmRelease, error)
	// preview refresh a redis-cluster that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.HelmRelease, error)
	// refresh a redis-cluster that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.HelmRelease, error)
}

// UnimplementedHelmReleaseCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedHelmReleaseCommandControllerServer struct {
}

func (UnimplementedHelmReleaseCommandControllerServer) PreviewCreate(context.Context, *model.HelmRelease) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Create(context.Context, *model.HelmRelease) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) PreviewUpdate(context.Context, *model.HelmRelease) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Update(context.Context, *model.HelmRelease) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) PreviewRestore(context.Context, *model.HelmRelease) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Restore(context.Context, *model.HelmRelease) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Restart(context.Context, *model.HelmReleaseId) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedHelmReleaseCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.HelmRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeHelmReleaseCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelmReleaseCommandControllerServer will
// result in compilation errors.
type UnsafeHelmReleaseCommandControllerServer interface {
	mustEmbedUnimplementedHelmReleaseCommandControllerServer()
}

func RegisterHelmReleaseCommandControllerServer(s grpc.ServiceRegistrar, srv HelmReleaseCommandControllerServer) {
	s.RegisterService(&HelmReleaseCommandController_ServiceDesc, srv)
}

func _HelmReleaseCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).PreviewCreate(ctx, req.(*model.HelmRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Create(ctx, req.(*model.HelmRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).PreviewUpdate(ctx, req.(*model.HelmRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Update(ctx, req.(*model.HelmRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).PreviewRestore(ctx, req.(*model.HelmRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Restore(ctx, req.(*model.HelmRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).CreateStackJob(ctx, req.(*model2.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HelmReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Restart(ctx, req.(*model.HelmReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmReleaseCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmReleaseCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmReleaseCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmReleaseCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// HelmReleaseCommandController_ServiceDesc is the grpc.ServiceDesc for HelmReleaseCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelmReleaseCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.helmrelease.service.HelmReleaseCommandController",
	HandlerType: (*HelmReleaseCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _HelmReleaseCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _HelmReleaseCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _HelmReleaseCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _HelmReleaseCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _HelmReleaseCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _HelmReleaseCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _HelmReleaseCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _HelmReleaseCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _HelmReleaseCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _HelmReleaseCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _HelmReleaseCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _HelmReleaseCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _HelmReleaseCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _HelmReleaseCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/helmrelease/service/command.proto",
}
