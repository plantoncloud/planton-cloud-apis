// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/jenkinskubernetes/stack/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/jenkinskubernetes/stack/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JenkinsKubernetesStackController_Execute_FullMethodName = "/cloud.planton.apis.code2cloud.v1.jenkinskubernetes.stack.service.JenkinsKubernetesStackController/execute"
)

// JenkinsKubernetesStackControllerClient is the client API for JenkinsKubernetesStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JenkinsKubernetesStackControllerClient interface {
	Execute(ctx context.Context, in *model.JenkinsKubernetesStackInput, opts ...grpc.CallOption) (JenkinsKubernetesStackController_ExecuteClient, error)
}

type jenkinsKubernetesStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewJenkinsKubernetesStackControllerClient(cc grpc.ClientConnInterface) JenkinsKubernetesStackControllerClient {
	return &jenkinsKubernetesStackControllerClient{cc}
}

func (c *jenkinsKubernetesStackControllerClient) Execute(ctx context.Context, in *model.JenkinsKubernetesStackInput, opts ...grpc.CallOption) (JenkinsKubernetesStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &JenkinsKubernetesStackController_ServiceDesc.Streams[0], JenkinsKubernetesStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jenkinsKubernetesStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JenkinsKubernetesStackController_ExecuteClient interface {
	Recv() (*model.JenkinsKubernetesStackResponse, error)
	grpc.ClientStream
}

type jenkinsKubernetesStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *jenkinsKubernetesStackControllerExecuteClient) Recv() (*model.JenkinsKubernetesStackResponse, error) {
	m := new(model.JenkinsKubernetesStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JenkinsKubernetesStackControllerServer is the server API for JenkinsKubernetesStackController service.
// All implementations should embed UnimplementedJenkinsKubernetesStackControllerServer
// for forward compatibility
type JenkinsKubernetesStackControllerServer interface {
	Execute(*model.JenkinsKubernetesStackInput, JenkinsKubernetesStackController_ExecuteServer) error
}

// UnimplementedJenkinsKubernetesStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedJenkinsKubernetesStackControllerServer struct {
}

func (UnimplementedJenkinsKubernetesStackControllerServer) Execute(*model.JenkinsKubernetesStackInput, JenkinsKubernetesStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeJenkinsKubernetesStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JenkinsKubernetesStackControllerServer will
// result in compilation errors.
type UnsafeJenkinsKubernetesStackControllerServer interface {
	mustEmbedUnimplementedJenkinsKubernetesStackControllerServer()
}

func RegisterJenkinsKubernetesStackControllerServer(s grpc.ServiceRegistrar, srv JenkinsKubernetesStackControllerServer) {
	s.RegisterService(&JenkinsKubernetesStackController_ServiceDesc, srv)
}

func _JenkinsKubernetesStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.JenkinsKubernetesStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JenkinsKubernetesStackControllerServer).Execute(m, &jenkinsKubernetesStackControllerExecuteServer{stream})
}

type JenkinsKubernetesStackController_ExecuteServer interface {
	Send(*model.JenkinsKubernetesStackResponse) error
	grpc.ServerStream
}

type jenkinsKubernetesStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *jenkinsKubernetesStackControllerExecuteServer) Send(m *model.JenkinsKubernetesStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JenkinsKubernetesStackController_ServiceDesc is the grpc.ServiceDesc for JenkinsKubernetesStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JenkinsKubernetesStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.jenkinskubernetes.stack.service.JenkinsKubernetesStackController",
	HandlerType: (*JenkinsKubernetesStackControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _JenkinsKubernetesStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/jenkinskubernetes/stack/service/stack.proto",
}
