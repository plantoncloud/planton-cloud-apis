// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/aws/ekscluster/stack/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/aws/ekscluster/stack/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EksClusterStackController_Execute_FullMethodName = "/cloud.planton.apis.code2cloud.v1.aws.ekscluster.stack.service.EksClusterStackController/execute"
)

// EksClusterStackControllerClient is the client API for EksClusterStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EksClusterStackControllerClient interface {
	Execute(ctx context.Context, in *model.EksClusterStackInput, opts ...grpc.CallOption) (EksClusterStackController_ExecuteClient, error)
}

type eksClusterStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEksClusterStackControllerClient(cc grpc.ClientConnInterface) EksClusterStackControllerClient {
	return &eksClusterStackControllerClient{cc}
}

func (c *eksClusterStackControllerClient) Execute(ctx context.Context, in *model.EksClusterStackInput, opts ...grpc.CallOption) (EksClusterStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &EksClusterStackController_ServiceDesc.Streams[0], EksClusterStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eksClusterStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EksClusterStackController_ExecuteClient interface {
	Recv() (*model.EksClusterStackResponse, error)
	grpc.ClientStream
}

type eksClusterStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *eksClusterStackControllerExecuteClient) Recv() (*model.EksClusterStackResponse, error) {
	m := new(model.EksClusterStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EksClusterStackControllerServer is the server API for EksClusterStackController service.
// All implementations should embed UnimplementedEksClusterStackControllerServer
// for forward compatibility
type EksClusterStackControllerServer interface {
	Execute(*model.EksClusterStackInput, EksClusterStackController_ExecuteServer) error
}

// UnimplementedEksClusterStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEksClusterStackControllerServer struct {
}

func (UnimplementedEksClusterStackControllerServer) Execute(*model.EksClusterStackInput, EksClusterStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeEksClusterStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EksClusterStackControllerServer will
// result in compilation errors.
type UnsafeEksClusterStackControllerServer interface {
	mustEmbedUnimplementedEksClusterStackControllerServer()
}

func RegisterEksClusterStackControllerServer(s grpc.ServiceRegistrar, srv EksClusterStackControllerServer) {
	s.RegisterService(&EksClusterStackController_ServiceDesc, srv)
}

func _EksClusterStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.EksClusterStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EksClusterStackControllerServer).Execute(m, &eksClusterStackControllerExecuteServer{stream})
}

type EksClusterStackController_ExecuteServer interface {
	Send(*model.EksClusterStackResponse) error
	grpc.ServerStream
}

type eksClusterStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *eksClusterStackControllerExecuteServer) Send(m *model.EksClusterStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EksClusterStackController_ServiceDesc is the grpc.ServiceDesc for EksClusterStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EksClusterStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.aws.ekscluster.stack.service.EksClusterStackController",
	HandlerType: (*EksClusterStackControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _EksClusterStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/aws/ekscluster/stack/service/stack.proto",
}
