// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/aws/awssecretset/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/aws/awssecretset/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AwsSecretSetCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/previewCreate"
	AwsSecretSetCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/create"
	AwsSecretSetCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/previewUpdate"
	AwsSecretSetCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/update"
	AwsSecretSetCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/previewDelete"
	AwsSecretSetCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/delete"
	AwsSecretSetCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/previewRestore"
	AwsSecretSetCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController/restore"
)

// AwsSecretSetCommandControllerClient is the client API for AwsSecretSetCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsSecretSetCommandControllerClient interface {
	// preview create aws-secret-set
	PreviewCreate(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// create aws-secret-set
	Create(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// preview update an existing aws-secret-set
	PreviewUpdate(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// update an existing aws-secret-set
	Update(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// preview delete an existing aws-secret-set
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// delete an existing aws-secret-set
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// preview restore a deleted aws-secret-set
	PreviewRestore(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
	// restore a deleted aws-secret-set
	Restore(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error)
}

type awsSecretSetCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsSecretSetCommandControllerClient(cc grpc.ClientConnInterface) AwsSecretSetCommandControllerClient {
	return &awsSecretSetCommandControllerClient{cc}
}

func (c *awsSecretSetCommandControllerClient) PreviewCreate(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) Create(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) Update(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) PreviewRestore(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsSecretSetCommandControllerClient) Restore(ctx context.Context, in *model.AwsSecretSet, opts ...grpc.CallOption) (*model.AwsSecretSet, error) {
	out := new(model.AwsSecretSet)
	err := c.cc.Invoke(ctx, AwsSecretSetCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwsSecretSetCommandControllerServer is the server API for AwsSecretSetCommandController service.
// All implementations should embed UnimplementedAwsSecretSetCommandControllerServer
// for forward compatibility
type AwsSecretSetCommandControllerServer interface {
	// preview create aws-secret-set
	PreviewCreate(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error)
	// create aws-secret-set
	Create(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error)
	// preview update an existing aws-secret-set
	PreviewUpdate(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error)
	// update an existing aws-secret-set
	Update(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error)
	// preview delete an existing aws-secret-set
	PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.AwsSecretSet, error)
	// delete an existing aws-secret-set
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.AwsSecretSet, error)
	// preview restore a deleted aws-secret-set
	PreviewRestore(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error)
	// restore a deleted aws-secret-set
	Restore(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error)
}

// UnimplementedAwsSecretSetCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedAwsSecretSetCommandControllerServer struct {
}

func (UnimplementedAwsSecretSetCommandControllerServer) PreviewCreate(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) Create(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) PreviewUpdate(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) Update(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteInput) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) PreviewRestore(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedAwsSecretSetCommandControllerServer) Restore(context.Context, *model.AwsSecretSet) (*model.AwsSecretSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeAwsSecretSetCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsSecretSetCommandControllerServer will
// result in compilation errors.
type UnsafeAwsSecretSetCommandControllerServer interface {
	mustEmbedUnimplementedAwsSecretSetCommandControllerServer()
}

func RegisterAwsSecretSetCommandControllerServer(s grpc.ServiceRegistrar, srv AwsSecretSetCommandControllerServer) {
	s.RegisterService(&AwsSecretSetCommandController_ServiceDesc, srv)
}

func _AwsSecretSetCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AwsSecretSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).PreviewCreate(ctx, req.(*model.AwsSecretSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AwsSecretSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).Create(ctx, req.(*model.AwsSecretSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AwsSecretSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).PreviewUpdate(ctx, req.(*model.AwsSecretSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AwsSecretSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).Update(ctx, req.(*model.AwsSecretSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AwsSecretSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).PreviewRestore(ctx, req.(*model.AwsSecretSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsSecretSetCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AwsSecretSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsSecretSetCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AwsSecretSetCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsSecretSetCommandControllerServer).Restore(ctx, req.(*model.AwsSecretSet))
	}
	return interceptor(ctx, in, info, handler)
}

// AwsSecretSetCommandController_ServiceDesc is the grpc.ServiceDesc for AwsSecretSetCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsSecretSetCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.aws.awssecretset.service.AwsSecretSetCommandController",
	HandlerType: (*AwsSecretSetCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _AwsSecretSetCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _AwsSecretSetCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _AwsSecretSetCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _AwsSecretSetCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _AwsSecretSetCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _AwsSecretSetCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _AwsSecretSetCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _AwsSecretSetCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/aws/awssecretset/service/command.proto",
}
