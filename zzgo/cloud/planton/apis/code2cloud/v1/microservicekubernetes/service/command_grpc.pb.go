// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/microservicekubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/microservicekubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MicroserviceKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/previewCreate"
	MicroserviceKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/create"
	MicroserviceKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/previewUpdate"
	MicroserviceKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/update"
	MicroserviceKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/previewDelete"
	MicroserviceKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/delete"
	MicroserviceKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/previewRestore"
	MicroserviceKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/restore"
	MicroserviceKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/restart"
	MicroserviceKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/pause"
	MicroserviceKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/unpause"
	MicroserviceKubernetesCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/previewRefresh"
	MicroserviceKubernetesCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController/refresh"
)

// MicroserviceKubernetesCommandControllerClient is the client API for MicroserviceKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceKubernetesCommandControllerClient interface {
	// preview create microservice-kubernetes
	PreviewCreate(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// create microservice-kubernetes
	Create(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// preview update microservice-kubernetes
	PreviewUpdate(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// update microservice-kubernetes
	Update(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// preview delete microservice-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// delete microservice-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// preview restoring a deleted microservice-kubernetes
	PreviewRestore(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// restore a deleted microservice-kubernetes of a environment.
	Restore(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// restart a microservice-kubernetes running in a environment.
	// microservice-kubernetes is restarted by deleting running pods which will be automatically recreated by kubernetes.
	Restart(ctx context.Context, in *model.MicroserviceKubernetesId, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// pause a microservice-kubernetes running in a environment.
	// microservice-kubernetes is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// unpause a previously paused microservice-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the microservice-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// preview refresh a microservice-kubernetes that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
	// refresh a microservice-kubernetes that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error)
}

type microserviceKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceKubernetesCommandControllerClient(cc grpc.ClientConnInterface) MicroserviceKubernetesCommandControllerClient {
	return &microserviceKubernetesCommandControllerClient{cc}
}

func (c *microserviceKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Create(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Update(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.MicroserviceKubernetes, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.MicroserviceKubernetesId, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceKubernetesCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.MicroserviceKubernetes, error) {
	out := new(model.MicroserviceKubernetes)
	err := c.cc.Invoke(ctx, MicroserviceKubernetesCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceKubernetesCommandControllerServer is the server API for MicroserviceKubernetesCommandController service.
// All implementations should embed UnimplementedMicroserviceKubernetesCommandControllerServer
// for forward compatibility
type MicroserviceKubernetesCommandControllerServer interface {
	// preview create microservice-kubernetes
	PreviewCreate(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error)
	// create microservice-kubernetes
	Create(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error)
	// preview update microservice-kubernetes
	PreviewUpdate(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error)
	// update microservice-kubernetes
	Update(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error)
	// preview delete microservice-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.MicroserviceKubernetes, error)
	// delete microservice-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.MicroserviceKubernetes, error)
	// preview restoring a deleted microservice-kubernetes
	PreviewRestore(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error)
	// restore a deleted microservice-kubernetes of a environment.
	Restore(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error)
	// restart a microservice-kubernetes running in a environment.
	// microservice-kubernetes is restarted by deleting running pods which will be automatically recreated by kubernetes.
	Restart(context.Context, *model.MicroserviceKubernetesId) (*model.MicroserviceKubernetes, error)
	// pause a microservice-kubernetes running in a environment.
	// microservice-kubernetes is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.MicroserviceKubernetes, error)
	// unpause a previously paused microservice-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the microservice-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.MicroserviceKubernetes, error)
	// preview refresh a microservice-kubernetes that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.MicroserviceKubernetes, error)
	// refresh a microservice-kubernetes that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.MicroserviceKubernetes, error)
}

// UnimplementedMicroserviceKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedMicroserviceKubernetesCommandControllerServer struct {
}

func (UnimplementedMicroserviceKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Create(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Update(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Restore(context.Context, *model.MicroserviceKubernetes) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Restart(context.Context, *model.MicroserviceKubernetesId) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedMicroserviceKubernetesCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.MicroserviceKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeMicroserviceKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafeMicroserviceKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedMicroserviceKubernetesCommandControllerServer()
}

func RegisterMicroserviceKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv MicroserviceKubernetesCommandControllerServer) {
	s.RegisterService(&MicroserviceKubernetesCommandController_ServiceDesc, srv)
}

func _MicroserviceKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.MicroserviceKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Create(ctx, req.(*model.MicroserviceKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.MicroserviceKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Update(ctx, req.(*model.MicroserviceKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.MicroserviceKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Restore(ctx, req.(*model.MicroserviceKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Restart(ctx, req.(*model.MicroserviceKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceKubernetesCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceKubernetesCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceKubernetesCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceKubernetesCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroserviceKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for MicroserviceKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroserviceKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.microservicekubernetes.service.MicroserviceKubernetesCommandController",
	HandlerType: (*MicroserviceKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _MicroserviceKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _MicroserviceKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _MicroserviceKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _MicroserviceKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _MicroserviceKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _MicroserviceKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _MicroserviceKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _MicroserviceKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _MicroserviceKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _MicroserviceKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _MicroserviceKubernetesCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _MicroserviceKubernetesCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _MicroserviceKubernetesCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/microservicekubernetes/service/command.proto",
}
