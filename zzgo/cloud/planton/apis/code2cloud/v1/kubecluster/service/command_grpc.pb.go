// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubecluster/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubecluster/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeClusterCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/previewCreate"
	KubeClusterCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/create"
	KubeClusterCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/previewUpdate"
	KubeClusterCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/update"
	KubeClusterCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/previewDelete"
	KubeClusterCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/delete"
	KubeClusterCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/previewRestore"
	KubeClusterCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/restore"
	KubeClusterCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/pause"
	KubeClusterCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/unpause"
	KubeClusterCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/previewRefresh"
	KubeClusterCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController/refresh"
)

// KubeClusterCommandControllerClient is the client API for KubeClusterCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeClusterCommandControllerClient interface {
	// preview create a kube-cluster.
	PreviewCreate(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// create a kube-cluster.
	Create(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// preview updating an existing kube-cluster.
	PreviewUpdate(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// update an existing kube-cluster.
	Update(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// preview deleting a kube-cluster.
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// delete a kube-cluster.
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// preview restoring a deleted kube-cluster.
	PreviewRestore(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// restore a deleted kube-cluster.
	Restore(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// pause a kube-cluster.
	// a kube-cluster is paused by setting the number of nodes in each node pool of the kube-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a kube-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// unpause a kube-cluster.
	// a kube-cluster is resumed by setting the number of nodes in each node pool of the kube-cluster to the
	// values configured for the kube-cluster.
	// when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// preview refresh a kube-cluster that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// refresh a kube-cluster that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
}

type kubeClusterCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeClusterCommandControllerClient(cc grpc.ClientConnInterface) KubeClusterCommandControllerClient {
	return &kubeClusterCommandControllerClient{cc}
}

func (c *kubeClusterCommandControllerClient) PreviewCreate(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Create(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Update(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) PreviewRestore(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Restore(ctx context.Context, in *model.KubeCluster, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeClusterCommandControllerServer is the server API for KubeClusterCommandController service.
// All implementations should embed UnimplementedKubeClusterCommandControllerServer
// for forward compatibility
type KubeClusterCommandControllerServer interface {
	// preview create a kube-cluster.
	PreviewCreate(context.Context, *model.KubeCluster) (*model.KubeCluster, error)
	// create a kube-cluster.
	Create(context.Context, *model.KubeCluster) (*model.KubeCluster, error)
	// preview updating an existing kube-cluster.
	PreviewUpdate(context.Context, *model.KubeCluster) (*model.KubeCluster, error)
	// update an existing kube-cluster.
	Update(context.Context, *model.KubeCluster) (*model.KubeCluster, error)
	// preview deleting a kube-cluster.
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KubeCluster, error)
	// delete a kube-cluster.
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KubeCluster, error)
	// preview restoring a deleted kube-cluster.
	PreviewRestore(context.Context, *model.KubeCluster) (*model.KubeCluster, error)
	// restore a deleted kube-cluster.
	Restore(context.Context, *model.KubeCluster) (*model.KubeCluster, error)
	// pause a kube-cluster.
	// a kube-cluster is paused by setting the number of nodes in each node pool of the kube-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a kube-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.KubeCluster, error)
	// unpause a kube-cluster.
	// a kube-cluster is resumed by setting the number of nodes in each node pool of the kube-cluster to the
	// values configured for the kube-cluster.
	// when the kube-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.KubeCluster, error)
	// preview refresh a kube-cluster that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KubeCluster, error)
	// refresh a kube-cluster that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KubeCluster, error)
}

// UnimplementedKubeClusterCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubeClusterCommandControllerServer struct {
}

func (UnimplementedKubeClusterCommandControllerServer) PreviewCreate(context.Context, *model.KubeCluster) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Create(context.Context, *model.KubeCluster) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) PreviewUpdate(context.Context, *model.KubeCluster) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Update(context.Context, *model.KubeCluster) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) PreviewRestore(context.Context, *model.KubeCluster) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Restore(context.Context, *model.KubeCluster) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedKubeClusterCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeKubeClusterCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeClusterCommandControllerServer will
// result in compilation errors.
type UnsafeKubeClusterCommandControllerServer interface {
	mustEmbedUnimplementedKubeClusterCommandControllerServer()
}

func RegisterKubeClusterCommandControllerServer(s grpc.ServiceRegistrar, srv KubeClusterCommandControllerServer) {
	s.RegisterService(&KubeClusterCommandController_ServiceDesc, srv)
}

func _KubeClusterCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).PreviewCreate(ctx, req.(*model.KubeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Create(ctx, req.(*model.KubeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).PreviewUpdate(ctx, req.(*model.KubeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Update(ctx, req.(*model.KubeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).PreviewRestore(ctx, req.(*model.KubeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Restore(ctx, req.(*model.KubeCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeClusterCommandController_ServiceDesc is the grpc.ServiceDesc for KubeClusterCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeClusterCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterCommandController",
	HandlerType: (*KubeClusterCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _KubeClusterCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _KubeClusterCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _KubeClusterCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _KubeClusterCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _KubeClusterCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KubeClusterCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _KubeClusterCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _KubeClusterCommandController_Restore_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _KubeClusterCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _KubeClusterCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _KubeClusterCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _KubeClusterCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/command.proto",
}

const (
	KubeClusterNodePoolGcpCommandController_Add_FullMethodName    = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterNodePoolGcpCommandController/add"
	KubeClusterNodePoolGcpCommandController_Update_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterNodePoolGcpCommandController/update"
	KubeClusterNodePoolGcpCommandController_Delete_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterNodePoolGcpCommandController/delete"
)

// KubeClusterNodePoolGcpCommandControllerClient is the client API for KubeClusterNodePoolGcpCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeClusterNodePoolGcpCommandControllerClient interface {
	// add a node pool to a kube-cluster in a kube-cluster
	Add(ctx context.Context, in *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// update a node pool of a kube-cluster in a kube-cluster
	Update(ctx context.Context, in *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// delete a node pool from a kube-cluster in a kube-cluster
	Delete(ctx context.Context, in *model.DeleteKubeClusterNodePoolGcpCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error)
}

type kubeClusterNodePoolGcpCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeClusterNodePoolGcpCommandControllerClient(cc grpc.ClientConnInterface) KubeClusterNodePoolGcpCommandControllerClient {
	return &kubeClusterNodePoolGcpCommandControllerClient{cc}
}

func (c *kubeClusterNodePoolGcpCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterNodePoolGcpCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterNodePoolGcpCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterNodePoolGcpCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterNodePoolGcpCommandControllerClient) Delete(ctx context.Context, in *model.DeleteKubeClusterNodePoolGcpCommandInput, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterNodePoolGcpCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeClusterNodePoolGcpCommandControllerServer is the server API for KubeClusterNodePoolGcpCommandController service.
// All implementations should embed UnimplementedKubeClusterNodePoolGcpCommandControllerServer
// for forward compatibility
type KubeClusterNodePoolGcpCommandControllerServer interface {
	// add a node pool to a kube-cluster in a kube-cluster
	Add(context.Context, *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput) (*model.KubeCluster, error)
	// update a node pool of a kube-cluster in a kube-cluster
	Update(context.Context, *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput) (*model.KubeCluster, error)
	// delete a node pool from a kube-cluster in a kube-cluster
	Delete(context.Context, *model.DeleteKubeClusterNodePoolGcpCommandInput) (*model.KubeCluster, error)
}

// UnimplementedKubeClusterNodePoolGcpCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubeClusterNodePoolGcpCommandControllerServer struct {
}

func (UnimplementedKubeClusterNodePoolGcpCommandControllerServer) Add(context.Context, *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedKubeClusterNodePoolGcpCommandControllerServer) Update(context.Context, *model.AddOrUpdateKubeClusterNodePoolGcpCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKubeClusterNodePoolGcpCommandControllerServer) Delete(context.Context, *model.DeleteKubeClusterNodePoolGcpCommandInput) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeKubeClusterNodePoolGcpCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeClusterNodePoolGcpCommandControllerServer will
// result in compilation errors.
type UnsafeKubeClusterNodePoolGcpCommandControllerServer interface {
	mustEmbedUnimplementedKubeClusterNodePoolGcpCommandControllerServer()
}

func RegisterKubeClusterNodePoolGcpCommandControllerServer(s grpc.ServiceRegistrar, srv KubeClusterNodePoolGcpCommandControllerServer) {
	s.RegisterService(&KubeClusterNodePoolGcpCommandController_ServiceDesc, srv)
}

func _KubeClusterNodePoolGcpCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateKubeClusterNodePoolGcpCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterNodePoolGcpCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterNodePoolGcpCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterNodePoolGcpCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateKubeClusterNodePoolGcpCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterNodePoolGcpCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateKubeClusterNodePoolGcpCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterNodePoolGcpCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterNodePoolGcpCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterNodePoolGcpCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateKubeClusterNodePoolGcpCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterNodePoolGcpCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteKubeClusterNodePoolGcpCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterNodePoolGcpCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterNodePoolGcpCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterNodePoolGcpCommandControllerServer).Delete(ctx, req.(*model.DeleteKubeClusterNodePoolGcpCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeClusterNodePoolGcpCommandController_ServiceDesc is the grpc.ServiceDesc for KubeClusterNodePoolGcpCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeClusterNodePoolGcpCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterNodePoolGcpCommandController",
	HandlerType: (*KubeClusterNodePoolGcpCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _KubeClusterNodePoolGcpCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _KubeClusterNodePoolGcpCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KubeClusterNodePoolGcpCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/command.proto",
}

const (
	KubeClusterKubernetesApiCommandController_Update_FullMethodName               = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesApiCommandController/update"
	KubeClusterKubernetesApiCommandController_Delete_FullMethodName               = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesApiCommandController/delete"
	KubeClusterKubernetesApiCommandController_ExecIntoPodContainer_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesApiCommandController/execIntoPodContainer"
)

// KubeClusterKubernetesApiCommandControllerClient is the client API for KubeClusterKubernetesApiCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeClusterKubernetesApiCommandControllerClient interface {
	// get detailed object of a kubernetes api-resource
	Update(ctx context.Context, in *model.UpdateKubeClusterKubernetesApiResourceInput, opts ...grpc.CallOption) (*model2.KubernetesApiResource, error)
	// delete a kubernetes api-resource
	Delete(ctx context.Context, in *model.KubeClusterKubernetesApiResource, opts ...grpc.CallOption) (*model2.KubernetesApiResource, error)
	// mimic kubectl exec
	ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (KubeClusterKubernetesApiCommandController_ExecIntoPodContainerClient, error)
}

type kubeClusterKubernetesApiCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeClusterKubernetesApiCommandControllerClient(cc grpc.ClientConnInterface) KubeClusterKubernetesApiCommandControllerClient {
	return &kubeClusterKubernetesApiCommandControllerClient{cc}
}

func (c *kubeClusterKubernetesApiCommandControllerClient) Update(ctx context.Context, in *model.UpdateKubeClusterKubernetesApiResourceInput, opts ...grpc.CallOption) (*model2.KubernetesApiResource, error) {
	out := new(model2.KubernetesApiResource)
	err := c.cc.Invoke(ctx, KubeClusterKubernetesApiCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterKubernetesApiCommandControllerClient) Delete(ctx context.Context, in *model.KubeClusterKubernetesApiResource, opts ...grpc.CallOption) (*model2.KubernetesApiResource, error) {
	out := new(model2.KubernetesApiResource)
	err := c.cc.Invoke(ctx, KubeClusterKubernetesApiCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterKubernetesApiCommandControllerClient) ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (KubeClusterKubernetesApiCommandController_ExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubeClusterKubernetesApiCommandController_ServiceDesc.Streams[0], KubeClusterKubernetesApiCommandController_ExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubeClusterKubernetesApiCommandControllerExecIntoPodContainerClient{stream}
	return x, nil
}

type KubeClusterKubernetesApiCommandController_ExecIntoPodContainerClient interface {
	Send(*model.KubeClusterExecIntoPodContainerInput) error
	Recv() (*model2.ExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type kubeClusterKubernetesApiCommandControllerExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *kubeClusterKubernetesApiCommandControllerExecIntoPodContainerClient) Send(m *model.KubeClusterExecIntoPodContainerInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kubeClusterKubernetesApiCommandControllerExecIntoPodContainerClient) Recv() (*model2.ExecIntoPodContainerResponse, error) {
	m := new(model2.ExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubeClusterKubernetesApiCommandControllerServer is the server API for KubeClusterKubernetesApiCommandController service.
// All implementations should embed UnimplementedKubeClusterKubernetesApiCommandControllerServer
// for forward compatibility
type KubeClusterKubernetesApiCommandControllerServer interface {
	// get detailed object of a kubernetes api-resource
	Update(context.Context, *model.UpdateKubeClusterKubernetesApiResourceInput) (*model2.KubernetesApiResource, error)
	// delete a kubernetes api-resource
	Delete(context.Context, *model.KubeClusterKubernetesApiResource) (*model2.KubernetesApiResource, error)
	// mimic kubectl exec
	ExecIntoPodContainer(KubeClusterKubernetesApiCommandController_ExecIntoPodContainerServer) error
}

// UnimplementedKubeClusterKubernetesApiCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubeClusterKubernetesApiCommandControllerServer struct {
}

func (UnimplementedKubeClusterKubernetesApiCommandControllerServer) Update(context.Context, *model.UpdateKubeClusterKubernetesApiResourceInput) (*model2.KubernetesApiResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKubeClusterKubernetesApiCommandControllerServer) Delete(context.Context, *model.KubeClusterKubernetesApiResource) (*model2.KubernetesApiResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKubeClusterKubernetesApiCommandControllerServer) ExecIntoPodContainer(KubeClusterKubernetesApiCommandController_ExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecIntoPodContainer not implemented")
}

// UnsafeKubeClusterKubernetesApiCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeClusterKubernetesApiCommandControllerServer will
// result in compilation errors.
type UnsafeKubeClusterKubernetesApiCommandControllerServer interface {
	mustEmbedUnimplementedKubeClusterKubernetesApiCommandControllerServer()
}

func RegisterKubeClusterKubernetesApiCommandControllerServer(s grpc.ServiceRegistrar, srv KubeClusterKubernetesApiCommandControllerServer) {
	s.RegisterService(&KubeClusterKubernetesApiCommandController_ServiceDesc, srv)
}

func _KubeClusterKubernetesApiCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateKubeClusterKubernetesApiResourceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterKubernetesApiCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterKubernetesApiCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterKubernetesApiCommandControllerServer).Update(ctx, req.(*model.UpdateKubeClusterKubernetesApiResourceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterKubernetesApiCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeClusterKubernetesApiResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterKubernetesApiCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterKubernetesApiCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterKubernetesApiCommandControllerServer).Delete(ctx, req.(*model.KubeClusterKubernetesApiResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterKubernetesApiCommandController_ExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubeClusterKubernetesApiCommandControllerServer).ExecIntoPodContainer(&kubeClusterKubernetesApiCommandControllerExecIntoPodContainerServer{stream})
}

type KubeClusterKubernetesApiCommandController_ExecIntoPodContainerServer interface {
	Send(*model2.ExecIntoPodContainerResponse) error
	Recv() (*model.KubeClusterExecIntoPodContainerInput, error)
	grpc.ServerStream
}

type kubeClusterKubernetesApiCommandControllerExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *kubeClusterKubernetesApiCommandControllerExecIntoPodContainerServer) Send(m *model2.ExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kubeClusterKubernetesApiCommandControllerExecIntoPodContainerServer) Recv() (*model.KubeClusterExecIntoPodContainerInput, error) {
	m := new(model.KubeClusterExecIntoPodContainerInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubeClusterKubernetesApiCommandController_ServiceDesc is the grpc.ServiceDesc for KubeClusterKubernetesApiCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeClusterKubernetesApiCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesApiCommandController",
	HandlerType: (*KubeClusterKubernetesApiCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _KubeClusterKubernetesApiCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KubeClusterKubernetesApiCommandController_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execIntoPodContainer",
			Handler:       _KubeClusterKubernetesApiCommandController_ExecIntoPodContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/command.proto",
}
