// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/kubecluster/service/query.proto

package service

import (
	context "context"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/cloudaccount/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubecluster/model"
	model4 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	protobuf "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/protobuf"
	model3 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/company/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeClusterQueryController_GetById_FullMethodName                           = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterQueryController/getById"
	KubeClusterQueryController_FindByCompanyId_FullMethodName                   = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterQueryController/findByCompanyId"
	KubeClusterQueryController_FindByCloudAccountId_FullMethodName              = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterQueryController/findByCloudAccountId"
	KubeClusterQueryController_FindEnvironmentCreateKubeClusters_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterQueryController/findEnvironmentCreateKubeClusters"
)

// KubeClusterQueryControllerClient is the client API for KubeClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeClusterQueryControllerClient interface {
	// lookup kube-cluster using kube-cluster id
	GetById(ctx context.Context, in *model.KubeClusterId, opts ...grpc.CallOption) (*model.KubeCluster, error)
	// find kube-clusters by company id
	FindByCompanyId(ctx context.Context, in *model1.CompanyId, opts ...grpc.CallOption) (*model.KubeClusters, error)
	// find kube-clusters in a cloud account.
	FindByCloudAccountId(ctx context.Context, in *model2.CloudAccountId, opts ...grpc.CallOption) (*model.KubeClusters, error)
	// find kube-clusters by company id to create environment.
	// this will be used to populate drop down of kube-clusters in create environment form.
	// the response should only include kube-clusters that a company is authorised to create environment.
	// the authorization is verified by looking up kube-clusters with `company-environment-creator` relation with the company id provided in input.
	FindEnvironmentCreateKubeClusters(ctx context.Context, in *model1.CompanyId, opts ...grpc.CallOption) (*model.KubeClusters, error)
}

type kubeClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeClusterQueryControllerClient(cc grpc.ClientConnInterface) KubeClusterQueryControllerClient {
	return &kubeClusterQueryControllerClient{cc}
}

func (c *kubeClusterQueryControllerClient) GetById(ctx context.Context, in *model.KubeClusterId, opts ...grpc.CallOption) (*model.KubeCluster, error) {
	out := new(model.KubeCluster)
	err := c.cc.Invoke(ctx, KubeClusterQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterQueryControllerClient) FindByCompanyId(ctx context.Context, in *model1.CompanyId, opts ...grpc.CallOption) (*model.KubeClusters, error) {
	out := new(model.KubeClusters)
	err := c.cc.Invoke(ctx, KubeClusterQueryController_FindByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterQueryControllerClient) FindByCloudAccountId(ctx context.Context, in *model2.CloudAccountId, opts ...grpc.CallOption) (*model.KubeClusters, error) {
	out := new(model.KubeClusters)
	err := c.cc.Invoke(ctx, KubeClusterQueryController_FindByCloudAccountId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterQueryControllerClient) FindEnvironmentCreateKubeClusters(ctx context.Context, in *model1.CompanyId, opts ...grpc.CallOption) (*model.KubeClusters, error) {
	out := new(model.KubeClusters)
	err := c.cc.Invoke(ctx, KubeClusterQueryController_FindEnvironmentCreateKubeClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeClusterQueryControllerServer is the server API for KubeClusterQueryController service.
// All implementations should embed UnimplementedKubeClusterQueryControllerServer
// for forward compatibility
type KubeClusterQueryControllerServer interface {
	// lookup kube-cluster using kube-cluster id
	GetById(context.Context, *model.KubeClusterId) (*model.KubeCluster, error)
	// find kube-clusters by company id
	FindByCompanyId(context.Context, *model1.CompanyId) (*model.KubeClusters, error)
	// find kube-clusters in a cloud account.
	FindByCloudAccountId(context.Context, *model2.CloudAccountId) (*model.KubeClusters, error)
	// find kube-clusters by company id to create environment.
	// this will be used to populate drop down of kube-clusters in create environment form.
	// the response should only include kube-clusters that a company is authorised to create environment.
	// the authorization is verified by looking up kube-clusters with `company-environment-creator` relation with the company id provided in input.
	FindEnvironmentCreateKubeClusters(context.Context, *model1.CompanyId) (*model.KubeClusters, error)
}

// UnimplementedKubeClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubeClusterQueryControllerServer struct {
}

func (UnimplementedKubeClusterQueryControllerServer) GetById(context.Context, *model.KubeClusterId) (*model.KubeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedKubeClusterQueryControllerServer) FindByCompanyId(context.Context, *model1.CompanyId) (*model.KubeClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCompanyId not implemented")
}
func (UnimplementedKubeClusterQueryControllerServer) FindByCloudAccountId(context.Context, *model2.CloudAccountId) (*model.KubeClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCloudAccountId not implemented")
}
func (UnimplementedKubeClusterQueryControllerServer) FindEnvironmentCreateKubeClusters(context.Context, *model1.CompanyId) (*model.KubeClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnvironmentCreateKubeClusters not implemented")
}

// UnsafeKubeClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeClusterQueryControllerServer will
// result in compilation errors.
type UnsafeKubeClusterQueryControllerServer interface {
	mustEmbedUnimplementedKubeClusterQueryControllerServer()
}

func RegisterKubeClusterQueryControllerServer(s grpc.ServiceRegistrar, srv KubeClusterQueryControllerServer) {
	s.RegisterService(&KubeClusterQueryController_ServiceDesc, srv)
}

func _KubeClusterQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterQueryControllerServer).GetById(ctx, req.(*model.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterQueryController_FindByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterQueryControllerServer).FindByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterQueryController_FindByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterQueryControllerServer).FindByCompanyId(ctx, req.(*model1.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterQueryController_FindByCloudAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterQueryControllerServer).FindByCloudAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterQueryController_FindByCloudAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterQueryControllerServer).FindByCloudAccountId(ctx, req.(*model2.CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterQueryController_FindEnvironmentCreateKubeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterQueryControllerServer).FindEnvironmentCreateKubeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterQueryController_FindEnvironmentCreateKubeClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterQueryControllerServer).FindEnvironmentCreateKubeClusters(ctx, req.(*model1.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeClusterQueryController_ServiceDesc is the grpc.ServiceDesc for KubeClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterQueryController",
	HandlerType: (*KubeClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _KubeClusterQueryController_GetById_Handler,
		},
		{
			MethodName: "findByCompanyId",
			Handler:    _KubeClusterQueryController_FindByCompanyId_Handler,
		},
		{
			MethodName: "findByCloudAccountId",
			Handler:    _KubeClusterQueryController_FindByCloudAccountId_Handler,
		},
		{
			MethodName: "findEnvironmentCreateKubeClusters",
			Handler:    _KubeClusterQueryController_FindEnvironmentCreateKubeClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/query.proto",
}

const (
	KubeClusterNodePoolGcpQueryController_GetByGcpContainerNodePoolId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterNodePoolGcpQueryController/getByGcpContainerNodePoolId"
)

// KubeClusterNodePoolGcpQueryControllerClient is the client API for KubeClusterNodePoolGcpQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeClusterNodePoolGcpQueryControllerClient interface {
	// lookup gcp container node pool env using container-nodepool-id
	GetByGcpContainerNodePoolId(ctx context.Context, in *model.GetByKubeClusterNodePoolGcpIdInput, opts ...grpc.CallOption) (*model.KubeClusterNodePoolGcp, error)
}

type kubeClusterNodePoolGcpQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeClusterNodePoolGcpQueryControllerClient(cc grpc.ClientConnInterface) KubeClusterNodePoolGcpQueryControllerClient {
	return &kubeClusterNodePoolGcpQueryControllerClient{cc}
}

func (c *kubeClusterNodePoolGcpQueryControllerClient) GetByGcpContainerNodePoolId(ctx context.Context, in *model.GetByKubeClusterNodePoolGcpIdInput, opts ...grpc.CallOption) (*model.KubeClusterNodePoolGcp, error) {
	out := new(model.KubeClusterNodePoolGcp)
	err := c.cc.Invoke(ctx, KubeClusterNodePoolGcpQueryController_GetByGcpContainerNodePoolId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeClusterNodePoolGcpQueryControllerServer is the server API for KubeClusterNodePoolGcpQueryController service.
// All implementations should embed UnimplementedKubeClusterNodePoolGcpQueryControllerServer
// for forward compatibility
type KubeClusterNodePoolGcpQueryControllerServer interface {
	// lookup gcp container node pool env using container-nodepool-id
	GetByGcpContainerNodePoolId(context.Context, *model.GetByKubeClusterNodePoolGcpIdInput) (*model.KubeClusterNodePoolGcp, error)
}

// UnimplementedKubeClusterNodePoolGcpQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubeClusterNodePoolGcpQueryControllerServer struct {
}

func (UnimplementedKubeClusterNodePoolGcpQueryControllerServer) GetByGcpContainerNodePoolId(context.Context, *model.GetByKubeClusterNodePoolGcpIdInput) (*model.KubeClusterNodePoolGcp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGcpContainerNodePoolId not implemented")
}

// UnsafeKubeClusterNodePoolGcpQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeClusterNodePoolGcpQueryControllerServer will
// result in compilation errors.
type UnsafeKubeClusterNodePoolGcpQueryControllerServer interface {
	mustEmbedUnimplementedKubeClusterNodePoolGcpQueryControllerServer()
}

func RegisterKubeClusterNodePoolGcpQueryControllerServer(s grpc.ServiceRegistrar, srv KubeClusterNodePoolGcpQueryControllerServer) {
	s.RegisterService(&KubeClusterNodePoolGcpQueryController_ServiceDesc, srv)
}

func _KubeClusterNodePoolGcpQueryController_GetByGcpContainerNodePoolId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetByKubeClusterNodePoolGcpIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterNodePoolGcpQueryControllerServer).GetByGcpContainerNodePoolId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterNodePoolGcpQueryController_GetByGcpContainerNodePoolId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterNodePoolGcpQueryControllerServer).GetByGcpContainerNodePoolId(ctx, req.(*model.GetByKubeClusterNodePoolGcpIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeClusterNodePoolGcpQueryController_ServiceDesc is the grpc.ServiceDesc for KubeClusterNodePoolGcpQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeClusterNodePoolGcpQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterNodePoolGcpQueryController",
	HandlerType: (*KubeClusterNodePoolGcpQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getByGcpContainerNodePoolId",
			Handler:    _KubeClusterNodePoolGcpQueryController_GetByGcpContainerNodePoolId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/query.proto",
}

const (
	GcpQueryController_FindRegions_FullMethodName                 = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.GcpQueryController/findRegions"
	GcpQueryController_FindZonesByRegionIdentifier_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.GcpQueryController/findZonesByRegionIdentifier"
)

// GcpQueryControllerClient is the client API for GcpQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcpQueryControllerClient interface {
	// list all gcp regions
	FindRegions(ctx context.Context, in *protobuf.CustomEmpty, opts ...grpc.CallOption) (*model.GcpRegions, error)
	// list all zones in a gcp region
	FindZonesByRegionIdentifier(ctx context.Context, in *model.GcpRegionIdentifier, opts ...grpc.CallOption) (*model.GcpZones, error)
}

type gcpQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGcpQueryControllerClient(cc grpc.ClientConnInterface) GcpQueryControllerClient {
	return &gcpQueryControllerClient{cc}
}

func (c *gcpQueryControllerClient) FindRegions(ctx context.Context, in *protobuf.CustomEmpty, opts ...grpc.CallOption) (*model.GcpRegions, error) {
	out := new(model.GcpRegions)
	err := c.cc.Invoke(ctx, GcpQueryController_FindRegions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpQueryControllerClient) FindZonesByRegionIdentifier(ctx context.Context, in *model.GcpRegionIdentifier, opts ...grpc.CallOption) (*model.GcpZones, error) {
	out := new(model.GcpZones)
	err := c.cc.Invoke(ctx, GcpQueryController_FindZonesByRegionIdentifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcpQueryControllerServer is the server API for GcpQueryController service.
// All implementations should embed UnimplementedGcpQueryControllerServer
// for forward compatibility
type GcpQueryControllerServer interface {
	// list all gcp regions
	FindRegions(context.Context, *protobuf.CustomEmpty) (*model.GcpRegions, error)
	// list all zones in a gcp region
	FindZonesByRegionIdentifier(context.Context, *model.GcpRegionIdentifier) (*model.GcpZones, error)
}

// UnimplementedGcpQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGcpQueryControllerServer struct {
}

func (UnimplementedGcpQueryControllerServer) FindRegions(context.Context, *protobuf.CustomEmpty) (*model.GcpRegions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRegions not implemented")
}
func (UnimplementedGcpQueryControllerServer) FindZonesByRegionIdentifier(context.Context, *model.GcpRegionIdentifier) (*model.GcpZones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindZonesByRegionIdentifier not implemented")
}

// UnsafeGcpQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcpQueryControllerServer will
// result in compilation errors.
type UnsafeGcpQueryControllerServer interface {
	mustEmbedUnimplementedGcpQueryControllerServer()
}

func RegisterGcpQueryControllerServer(s grpc.ServiceRegistrar, srv GcpQueryControllerServer) {
	s.RegisterService(&GcpQueryController_ServiceDesc, srv)
}

func _GcpQueryController_FindRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.CustomEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpQueryControllerServer).FindRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpQueryController_FindRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpQueryControllerServer).FindRegions(ctx, req.(*protobuf.CustomEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpQueryController_FindZonesByRegionIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpRegionIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpQueryControllerServer).FindZonesByRegionIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpQueryController_FindZonesByRegionIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpQueryControllerServer).FindZonesByRegionIdentifier(ctx, req.(*model.GcpRegionIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

// GcpQueryController_ServiceDesc is the grpc.ServiceDesc for GcpQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcpQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.GcpQueryController",
	HandlerType: (*GcpQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findRegions",
			Handler:    _GcpQueryController_FindRegions_Handler,
		},
		{
			MethodName: "findZonesByRegionIdentifier",
			Handler:    _GcpQueryController_FindZonesByRegionIdentifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/query.proto",
}

const (
	KubeClusterKubernetesObjectQueryController_Get_FullMethodName                     = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController/get"
	KubeClusterKubernetesObjectQueryController_FindNamespaces_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController/findNamespaces"
	KubeClusterKubernetesObjectQueryController_StreamKubernetesObjects_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController/streamKubernetesObjects"
	KubeClusterKubernetesObjectQueryController_FindPods_FullMethodName                = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController/findPods"
	KubeClusterKubernetesObjectQueryController_GetPod_FullMethodName                  = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController/getPod"
	KubeClusterKubernetesObjectQueryController_StreamPodLogs_FullMethodName           = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController/streamPodLogs"
)

// KubeClusterKubernetesObjectQueryControllerClient is the client API for KubeClusterKubernetesObjectQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeClusterKubernetesObjectQueryControllerClient interface {
	// get detailed object of a kubernetes object
	Get(ctx context.Context, in *model.KubeClusterKubernetesObject, opts ...grpc.CallOption) (*model3.KubernetesObjectDetail, error)
	// find list of namespaces on a kubernetes cluster
	FindNamespaces(ctx context.Context, in *model.KubeClusterId, opts ...grpc.CallOption) (*model3.KubernetesNamespaces, error)
	// stream all kubernetes objects from a kubernetes namespace in kube-cluster.
	// this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
	// because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
	StreamKubernetesObjects(ctx context.Context, in *model.StreamKubeClusterNamespaceKubernetesObjectsInput, opts ...grpc.CallOption) (KubeClusterKubernetesObjectQueryController_StreamKubernetesObjectsClient, error)
	// find list of pods in a kube-cluster on the specified filters
	FindPods(ctx context.Context, in *model.FindKubeClusterPodsInput, opts ...grpc.CallOption) (*model3.Pods, error)
	// get details of a pod
	GetPod(ctx context.Context, in *model.KubeClusterKubernetesObject, opts ...grpc.CallOption) (*model3.Pod, error)
	// stream logs of all kubernetes pods running in a kube-cluster on the specified filters
	StreamPodLogs(ctx context.Context, in *model.StreamKubeClusterPodLogsInput, opts ...grpc.CallOption) (KubeClusterKubernetesObjectQueryController_StreamPodLogsClient, error)
}

type kubeClusterKubernetesObjectQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeClusterKubernetesObjectQueryControllerClient(cc grpc.ClientConnInterface) KubeClusterKubernetesObjectQueryControllerClient {
	return &kubeClusterKubernetesObjectQueryControllerClient{cc}
}

func (c *kubeClusterKubernetesObjectQueryControllerClient) Get(ctx context.Context, in *model.KubeClusterKubernetesObject, opts ...grpc.CallOption) (*model3.KubernetesObjectDetail, error) {
	out := new(model3.KubernetesObjectDetail)
	err := c.cc.Invoke(ctx, KubeClusterKubernetesObjectQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterKubernetesObjectQueryControllerClient) FindNamespaces(ctx context.Context, in *model.KubeClusterId, opts ...grpc.CallOption) (*model3.KubernetesNamespaces, error) {
	out := new(model3.KubernetesNamespaces)
	err := c.cc.Invoke(ctx, KubeClusterKubernetesObjectQueryController_FindNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterKubernetesObjectQueryControllerClient) StreamKubernetesObjects(ctx context.Context, in *model.StreamKubeClusterNamespaceKubernetesObjectsInput, opts ...grpc.CallOption) (KubeClusterKubernetesObjectQueryController_StreamKubernetesObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubeClusterKubernetesObjectQueryController_ServiceDesc.Streams[0], KubeClusterKubernetesObjectQueryController_StreamKubernetesObjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubeClusterKubernetesObjectQueryControllerStreamKubernetesObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubeClusterKubernetesObjectQueryController_StreamKubernetesObjectsClient interface {
	Recv() (*model3.KubernetesObjects, error)
	grpc.ClientStream
}

type kubeClusterKubernetesObjectQueryControllerStreamKubernetesObjectsClient struct {
	grpc.ClientStream
}

func (x *kubeClusterKubernetesObjectQueryControllerStreamKubernetesObjectsClient) Recv() (*model3.KubernetesObjects, error) {
	m := new(model3.KubernetesObjects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kubeClusterKubernetesObjectQueryControllerClient) FindPods(ctx context.Context, in *model.FindKubeClusterPodsInput, opts ...grpc.CallOption) (*model3.Pods, error) {
	out := new(model3.Pods)
	err := c.cc.Invoke(ctx, KubeClusterKubernetesObjectQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterKubernetesObjectQueryControllerClient) GetPod(ctx context.Context, in *model.KubeClusterKubernetesObject, opts ...grpc.CallOption) (*model3.Pod, error) {
	out := new(model3.Pod)
	err := c.cc.Invoke(ctx, KubeClusterKubernetesObjectQueryController_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClusterKubernetesObjectQueryControllerClient) StreamPodLogs(ctx context.Context, in *model.StreamKubeClusterPodLogsInput, opts ...grpc.CallOption) (KubeClusterKubernetesObjectQueryController_StreamPodLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubeClusterKubernetesObjectQueryController_ServiceDesc.Streams[1], KubeClusterKubernetesObjectQueryController_StreamPodLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubeClusterKubernetesObjectQueryControllerStreamPodLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubeClusterKubernetesObjectQueryController_StreamPodLogsClient interface {
	Recv() (*model3.PodLogLine, error)
	grpc.ClientStream
}

type kubeClusterKubernetesObjectQueryControllerStreamPodLogsClient struct {
	grpc.ClientStream
}

func (x *kubeClusterKubernetesObjectQueryControllerStreamPodLogsClient) Recv() (*model3.PodLogLine, error) {
	m := new(model3.PodLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubeClusterKubernetesObjectQueryControllerServer is the server API for KubeClusterKubernetesObjectQueryController service.
// All implementations should embed UnimplementedKubeClusterKubernetesObjectQueryControllerServer
// for forward compatibility
type KubeClusterKubernetesObjectQueryControllerServer interface {
	// get detailed object of a kubernetes object
	Get(context.Context, *model.KubeClusterKubernetesObject) (*model3.KubernetesObjectDetail, error)
	// find list of namespaces on a kubernetes cluster
	FindNamespaces(context.Context, *model.KubeClusterId) (*model3.KubernetesNamespaces, error)
	// stream all kubernetes objects from a kubernetes namespace in kube-cluster.
	// this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
	// because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
	StreamKubernetesObjects(*model.StreamKubeClusterNamespaceKubernetesObjectsInput, KubeClusterKubernetesObjectQueryController_StreamKubernetesObjectsServer) error
	// find list of pods in a kube-cluster on the specified filters
	FindPods(context.Context, *model.FindKubeClusterPodsInput) (*model3.Pods, error)
	// get details of a pod
	GetPod(context.Context, *model.KubeClusterKubernetesObject) (*model3.Pod, error)
	// stream logs of all kubernetes pods running in a kube-cluster on the specified filters
	StreamPodLogs(*model.StreamKubeClusterPodLogsInput, KubeClusterKubernetesObjectQueryController_StreamPodLogsServer) error
}

// UnimplementedKubeClusterKubernetesObjectQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubeClusterKubernetesObjectQueryControllerServer struct {
}

func (UnimplementedKubeClusterKubernetesObjectQueryControllerServer) Get(context.Context, *model.KubeClusterKubernetesObject) (*model3.KubernetesObjectDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKubeClusterKubernetesObjectQueryControllerServer) FindNamespaces(context.Context, *model.KubeClusterId) (*model3.KubernetesNamespaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNamespaces not implemented")
}
func (UnimplementedKubeClusterKubernetesObjectQueryControllerServer) StreamKubernetesObjects(*model.StreamKubeClusterNamespaceKubernetesObjectsInput, KubeClusterKubernetesObjectQueryController_StreamKubernetesObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamKubernetesObjects not implemented")
}
func (UnimplementedKubeClusterKubernetesObjectQueryControllerServer) FindPods(context.Context, *model.FindKubeClusterPodsInput) (*model3.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}
func (UnimplementedKubeClusterKubernetesObjectQueryControllerServer) GetPod(context.Context, *model.KubeClusterKubernetesObject) (*model3.Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedKubeClusterKubernetesObjectQueryControllerServer) StreamPodLogs(*model.StreamKubeClusterPodLogsInput, KubeClusterKubernetesObjectQueryController_StreamPodLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodLogs not implemented")
}

// UnsafeKubeClusterKubernetesObjectQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeClusterKubernetesObjectQueryControllerServer will
// result in compilation errors.
type UnsafeKubeClusterKubernetesObjectQueryControllerServer interface {
	mustEmbedUnimplementedKubeClusterKubernetesObjectQueryControllerServer()
}

func RegisterKubeClusterKubernetesObjectQueryControllerServer(s grpc.ServiceRegistrar, srv KubeClusterKubernetesObjectQueryControllerServer) {
	s.RegisterService(&KubeClusterKubernetesObjectQueryController_ServiceDesc, srv)
}

func _KubeClusterKubernetesObjectQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeClusterKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterKubernetesObjectQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).Get(ctx, req.(*model.KubeClusterKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterKubernetesObjectQueryController_FindNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).FindNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterKubernetesObjectQueryController_FindNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).FindNamespaces(ctx, req.(*model.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterKubernetesObjectQueryController_StreamKubernetesObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubeClusterNamespaceKubernetesObjectsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubeClusterKubernetesObjectQueryControllerServer).StreamKubernetesObjects(m, &kubeClusterKubernetesObjectQueryControllerStreamKubernetesObjectsServer{stream})
}

type KubeClusterKubernetesObjectQueryController_StreamKubernetesObjectsServer interface {
	Send(*model3.KubernetesObjects) error
	grpc.ServerStream
}

type kubeClusterKubernetesObjectQueryControllerStreamKubernetesObjectsServer struct {
	grpc.ServerStream
}

func (x *kubeClusterKubernetesObjectQueryControllerStreamKubernetesObjectsServer) Send(m *model3.KubernetesObjects) error {
	return x.ServerStream.SendMsg(m)
}

func _KubeClusterKubernetesObjectQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindKubeClusterPodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterKubernetesObjectQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).FindPods(ctx, req.(*model.FindKubeClusterPodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterKubernetesObjectQueryController_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeClusterKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeClusterKubernetesObjectQueryController_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClusterKubernetesObjectQueryControllerServer).GetPod(ctx, req.(*model.KubeClusterKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusterKubernetesObjectQueryController_StreamPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubeClusterPodLogsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubeClusterKubernetesObjectQueryControllerServer).StreamPodLogs(m, &kubeClusterKubernetesObjectQueryControllerStreamPodLogsServer{stream})
}

type KubeClusterKubernetesObjectQueryController_StreamPodLogsServer interface {
	Send(*model3.PodLogLine) error
	grpc.ServerStream
}

type kubeClusterKubernetesObjectQueryControllerStreamPodLogsServer struct {
	grpc.ServerStream
}

func (x *kubeClusterKubernetesObjectQueryControllerStreamPodLogsServer) Send(m *model3.PodLogLine) error {
	return x.ServerStream.SendMsg(m)
}

// KubeClusterKubernetesObjectQueryController_ServiceDesc is the grpc.ServiceDesc for KubeClusterKubernetesObjectQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeClusterKubernetesObjectQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.KubeClusterKubernetesObjectQueryController",
	HandlerType: (*KubeClusterKubernetesObjectQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _KubeClusterKubernetesObjectQueryController_Get_Handler,
		},
		{
			MethodName: "findNamespaces",
			Handler:    _KubeClusterKubernetesObjectQueryController_FindNamespaces_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _KubeClusterKubernetesObjectQueryController_FindPods_Handler,
		},
		{
			MethodName: "getPod",
			Handler:    _KubeClusterKubernetesObjectQueryController_GetPod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamKubernetesObjects",
			Handler:       _KubeClusterKubernetesObjectQueryController_StreamKubernetesObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamPodLogs",
			Handler:       _KubeClusterKubernetesObjectQueryController_StreamPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/query.proto",
}

const (
	ApiResourceKubernetesObjectQueryController_Get_FullMethodName                     = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.ApiResourceKubernetesObjectQueryController/get"
	ApiResourceKubernetesObjectQueryController_StreamKubernetesObjects_FullMethodName = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.ApiResourceKubernetesObjectQueryController/streamKubernetesObjects"
	ApiResourceKubernetesObjectQueryController_FindPods_FullMethodName                = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.ApiResourceKubernetesObjectQueryController/findPods"
	ApiResourceKubernetesObjectQueryController_GetPod_FullMethodName                  = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.ApiResourceKubernetesObjectQueryController/getPod"
	ApiResourceKubernetesObjectQueryController_StreamPodLogs_FullMethodName           = "/cloud.planton.apis.code2cloud.v1.kubecluster.service.ApiResourceKubernetesObjectQueryController/streamPodLogs"
)

// ApiResourceKubernetesObjectQueryControllerClient is the client API for ApiResourceKubernetesObjectQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiResourceKubernetesObjectQueryControllerClient interface {
	// get detailed object of a kubernetes object that belongs to a planton-cloud api-resource.
	Get(ctx context.Context, in *model.ApiResourceKubernetesObject, opts ...grpc.CallOption) (*model3.KubernetesObjectDetail, error)
	// stream all kubernetes objects corresponding to a planton-cloud api-resource.
	// this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
	// because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
	StreamKubernetesObjects(ctx context.Context, in *model4.ApiResourceKindApiResourceId, opts ...grpc.CallOption) (ApiResourceKubernetesObjectQueryController_StreamKubernetesObjectsClient, error)
	// find list of pods that belong to a planton-cloud api-resource with provided filters
	FindPods(ctx context.Context, in *model.FindApiResourcePodsInput, opts ...grpc.CallOption) (*model3.Pods, error)
	// get details of a pod
	GetPod(ctx context.Context, in *model.ApiResourceKubernetesObject, opts ...grpc.CallOption) (*model3.Pod, error)
	// stream logs of all kubernetes pods that correspond to a planton-cloud api-resource based
	// on the specified filters
	StreamPodLogs(ctx context.Context, in *model.StreamApiResourcePodLogsInput, opts ...grpc.CallOption) (ApiResourceKubernetesObjectQueryController_StreamPodLogsClient, error)
}

type apiResourceKubernetesObjectQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewApiResourceKubernetesObjectQueryControllerClient(cc grpc.ClientConnInterface) ApiResourceKubernetesObjectQueryControllerClient {
	return &apiResourceKubernetesObjectQueryControllerClient{cc}
}

func (c *apiResourceKubernetesObjectQueryControllerClient) Get(ctx context.Context, in *model.ApiResourceKubernetesObject, opts ...grpc.CallOption) (*model3.KubernetesObjectDetail, error) {
	out := new(model3.KubernetesObjectDetail)
	err := c.cc.Invoke(ctx, ApiResourceKubernetesObjectQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiResourceKubernetesObjectQueryControllerClient) StreamKubernetesObjects(ctx context.Context, in *model4.ApiResourceKindApiResourceId, opts ...grpc.CallOption) (ApiResourceKubernetesObjectQueryController_StreamKubernetesObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiResourceKubernetesObjectQueryController_ServiceDesc.Streams[0], ApiResourceKubernetesObjectQueryController_StreamKubernetesObjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiResourceKubernetesObjectQueryControllerStreamKubernetesObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiResourceKubernetesObjectQueryController_StreamKubernetesObjectsClient interface {
	Recv() (*model3.KubernetesObjects, error)
	grpc.ClientStream
}

type apiResourceKubernetesObjectQueryControllerStreamKubernetesObjectsClient struct {
	grpc.ClientStream
}

func (x *apiResourceKubernetesObjectQueryControllerStreamKubernetesObjectsClient) Recv() (*model3.KubernetesObjects, error) {
	m := new(model3.KubernetesObjects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiResourceKubernetesObjectQueryControllerClient) FindPods(ctx context.Context, in *model.FindApiResourcePodsInput, opts ...grpc.CallOption) (*model3.Pods, error) {
	out := new(model3.Pods)
	err := c.cc.Invoke(ctx, ApiResourceKubernetesObjectQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiResourceKubernetesObjectQueryControllerClient) GetPod(ctx context.Context, in *model.ApiResourceKubernetesObject, opts ...grpc.CallOption) (*model3.Pod, error) {
	out := new(model3.Pod)
	err := c.cc.Invoke(ctx, ApiResourceKubernetesObjectQueryController_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiResourceKubernetesObjectQueryControllerClient) StreamPodLogs(ctx context.Context, in *model.StreamApiResourcePodLogsInput, opts ...grpc.CallOption) (ApiResourceKubernetesObjectQueryController_StreamPodLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiResourceKubernetesObjectQueryController_ServiceDesc.Streams[1], ApiResourceKubernetesObjectQueryController_StreamPodLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiResourceKubernetesObjectQueryControllerStreamPodLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiResourceKubernetesObjectQueryController_StreamPodLogsClient interface {
	Recv() (*model3.PodLogLine, error)
	grpc.ClientStream
}

type apiResourceKubernetesObjectQueryControllerStreamPodLogsClient struct {
	grpc.ClientStream
}

func (x *apiResourceKubernetesObjectQueryControllerStreamPodLogsClient) Recv() (*model3.PodLogLine, error) {
	m := new(model3.PodLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiResourceKubernetesObjectQueryControllerServer is the server API for ApiResourceKubernetesObjectQueryController service.
// All implementations should embed UnimplementedApiResourceKubernetesObjectQueryControllerServer
// for forward compatibility
type ApiResourceKubernetesObjectQueryControllerServer interface {
	// get detailed object of a kubernetes object that belongs to a planton-cloud api-resource.
	Get(context.Context, *model.ApiResourceKubernetesObject) (*model3.KubernetesObjectDetail, error)
	// stream all kubernetes objects corresponding to a planton-cloud api-resource.
	// this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
	// because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
	StreamKubernetesObjects(*model4.ApiResourceKindApiResourceId, ApiResourceKubernetesObjectQueryController_StreamKubernetesObjectsServer) error
	// find list of pods that belong to a planton-cloud api-resource with provided filters
	FindPods(context.Context, *model.FindApiResourcePodsInput) (*model3.Pods, error)
	// get details of a pod
	GetPod(context.Context, *model.ApiResourceKubernetesObject) (*model3.Pod, error)
	// stream logs of all kubernetes pods that correspond to a planton-cloud api-resource based
	// on the specified filters
	StreamPodLogs(*model.StreamApiResourcePodLogsInput, ApiResourceKubernetesObjectQueryController_StreamPodLogsServer) error
}

// UnimplementedApiResourceKubernetesObjectQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedApiResourceKubernetesObjectQueryControllerServer struct {
}

func (UnimplementedApiResourceKubernetesObjectQueryControllerServer) Get(context.Context, *model.ApiResourceKubernetesObject) (*model3.KubernetesObjectDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApiResourceKubernetesObjectQueryControllerServer) StreamKubernetesObjects(*model4.ApiResourceKindApiResourceId, ApiResourceKubernetesObjectQueryController_StreamKubernetesObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamKubernetesObjects not implemented")
}
func (UnimplementedApiResourceKubernetesObjectQueryControllerServer) FindPods(context.Context, *model.FindApiResourcePodsInput) (*model3.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}
func (UnimplementedApiResourceKubernetesObjectQueryControllerServer) GetPod(context.Context, *model.ApiResourceKubernetesObject) (*model3.Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedApiResourceKubernetesObjectQueryControllerServer) StreamPodLogs(*model.StreamApiResourcePodLogsInput, ApiResourceKubernetesObjectQueryController_StreamPodLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodLogs not implemented")
}

// UnsafeApiResourceKubernetesObjectQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiResourceKubernetesObjectQueryControllerServer will
// result in compilation errors.
type UnsafeApiResourceKubernetesObjectQueryControllerServer interface {
	mustEmbedUnimplementedApiResourceKubernetesObjectQueryControllerServer()
}

func RegisterApiResourceKubernetesObjectQueryControllerServer(s grpc.ServiceRegistrar, srv ApiResourceKubernetesObjectQueryControllerServer) {
	s.RegisterService(&ApiResourceKubernetesObjectQueryController_ServiceDesc, srv)
}

func _ApiResourceKubernetesObjectQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ApiResourceKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiResourceKubernetesObjectQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiResourceKubernetesObjectQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiResourceKubernetesObjectQueryControllerServer).Get(ctx, req.(*model.ApiResourceKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiResourceKubernetesObjectQueryController_StreamKubernetesObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model4.ApiResourceKindApiResourceId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiResourceKubernetesObjectQueryControllerServer).StreamKubernetesObjects(m, &apiResourceKubernetesObjectQueryControllerStreamKubernetesObjectsServer{stream})
}

type ApiResourceKubernetesObjectQueryController_StreamKubernetesObjectsServer interface {
	Send(*model3.KubernetesObjects) error
	grpc.ServerStream
}

type apiResourceKubernetesObjectQueryControllerStreamKubernetesObjectsServer struct {
	grpc.ServerStream
}

func (x *apiResourceKubernetesObjectQueryControllerStreamKubernetesObjectsServer) Send(m *model3.KubernetesObjects) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiResourceKubernetesObjectQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindApiResourcePodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiResourceKubernetesObjectQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiResourceKubernetesObjectQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiResourceKubernetesObjectQueryControllerServer).FindPods(ctx, req.(*model.FindApiResourcePodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiResourceKubernetesObjectQueryController_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ApiResourceKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiResourceKubernetesObjectQueryControllerServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiResourceKubernetesObjectQueryController_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiResourceKubernetesObjectQueryControllerServer).GetPod(ctx, req.(*model.ApiResourceKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiResourceKubernetesObjectQueryController_StreamPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamApiResourcePodLogsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiResourceKubernetesObjectQueryControllerServer).StreamPodLogs(m, &apiResourceKubernetesObjectQueryControllerStreamPodLogsServer{stream})
}

type ApiResourceKubernetesObjectQueryController_StreamPodLogsServer interface {
	Send(*model3.PodLogLine) error
	grpc.ServerStream
}

type apiResourceKubernetesObjectQueryControllerStreamPodLogsServer struct {
	grpc.ServerStream
}

func (x *apiResourceKubernetesObjectQueryControllerStreamPodLogsServer) Send(m *model3.PodLogLine) error {
	return x.ServerStream.SendMsg(m)
}

// ApiResourceKubernetesObjectQueryController_ServiceDesc is the grpc.ServiceDesc for ApiResourceKubernetesObjectQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiResourceKubernetesObjectQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.kubecluster.service.ApiResourceKubernetesObjectQueryController",
	HandlerType: (*ApiResourceKubernetesObjectQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _ApiResourceKubernetesObjectQueryController_Get_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _ApiResourceKubernetesObjectQueryController_FindPods_Handler,
		},
		{
			MethodName: "getPod",
			Handler:    _ApiResourceKubernetesObjectQueryController_GetPod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamKubernetesObjects",
			Handler:       _ApiResourceKubernetesObjectQueryController_StreamKubernetesObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamPodLogs",
			Handler:       _ApiResourceKubernetesObjectQueryController_StreamPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/kubecluster/service/query.proto",
}
