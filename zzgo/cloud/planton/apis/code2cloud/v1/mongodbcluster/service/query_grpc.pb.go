// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/mongodbcluster/service/query.proto

package service

import (
	context "context"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/environment/model"
	model3 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubecluster/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/mongodbcluster/model"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model4 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/product/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MongoDBClusterQueryController_List_FullMethodName                = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/list"
	MongoDBClusterQueryController_GetById_FullMethodName             = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/getById"
	MongoDBClusterQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/findByProductId"
	MongoDBClusterQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/findByEnvironmentId"
	MongoDBClusterQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/findByKubeClusterId"
	MongoDBClusterQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/getPassword"
	MongoDBClusterQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController/findPods"
)

// MongoDBClusterQueryControllerClient is the client API for MongoDBClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoDBClusterQueryControllerClient interface {
	// list all mongodb-clusters on planton cluster for the requested page.
	List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.MongoDBClusterList, error)
	// look up mongodb-cluster using mongodb-cluster id
	GetById(ctx context.Context, in *model.MongoDBClusterId, opts ...grpc.CallOption) (*model.MongoDBCluster, error)
	// find mongodb-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *model1.ProductId, opts ...grpc.CallOption) (*model.MongoDBClusters, error)
	// find mongodb-clusters by environment
	FindByEnvironmentId(ctx context.Context, in *model2.EnvironmentId, opts ...grpc.CallOption) (*model.MongoDBClusters, error)
	FindByKubeClusterId(ctx context.Context, in *model3.KubeClusterId, opts ...grpc.CallOption) (*model.MongoDBClusters, error)
	// look up mongodb-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model.MongoDBClusterId, opts ...grpc.CallOption) (*model.MongoDBClusterPassword, error)
	// lookup pods of a mongodb-cluster deployed to a environment
	FindPods(ctx context.Context, in *model.MongoDBClusterId, opts ...grpc.CallOption) (*model4.Pods, error)
}

type mongoDBClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDBClusterQueryControllerClient(cc grpc.ClientConnInterface) MongoDBClusterQueryControllerClient {
	return &mongoDBClusterQueryControllerClient{cc}
}

func (c *mongoDBClusterQueryControllerClient) List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.MongoDBClusterList, error) {
	out := new(model.MongoDBClusterList)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClusterQueryControllerClient) GetById(ctx context.Context, in *model.MongoDBClusterId, opts ...grpc.CallOption) (*model.MongoDBCluster, error) {
	out := new(model.MongoDBCluster)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClusterQueryControllerClient) FindByProductId(ctx context.Context, in *model1.ProductId, opts ...grpc.CallOption) (*model.MongoDBClusters, error) {
	out := new(model.MongoDBClusters)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClusterQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *model2.EnvironmentId, opts ...grpc.CallOption) (*model.MongoDBClusters, error) {
	out := new(model.MongoDBClusters)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClusterQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *model3.KubeClusterId, opts ...grpc.CallOption) (*model.MongoDBClusters, error) {
	out := new(model.MongoDBClusters)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClusterQueryControllerClient) GetPassword(ctx context.Context, in *model.MongoDBClusterId, opts ...grpc.CallOption) (*model.MongoDBClusterPassword, error) {
	out := new(model.MongoDBClusterPassword)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClusterQueryControllerClient) FindPods(ctx context.Context, in *model.MongoDBClusterId, opts ...grpc.CallOption) (*model4.Pods, error) {
	out := new(model4.Pods)
	err := c.cc.Invoke(ctx, MongoDBClusterQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDBClusterQueryControllerServer is the server API for MongoDBClusterQueryController service.
// All implementations should embed UnimplementedMongoDBClusterQueryControllerServer
// for forward compatibility
type MongoDBClusterQueryControllerServer interface {
	// list all mongodb-clusters on planton cluster for the requested page.
	List(context.Context, *rpc.PageInfo) (*model.MongoDBClusterList, error)
	// look up mongodb-cluster using mongodb-cluster id
	GetById(context.Context, *model.MongoDBClusterId) (*model.MongoDBCluster, error)
	// find mongodb-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *model1.ProductId) (*model.MongoDBClusters, error)
	// find mongodb-clusters by environment
	FindByEnvironmentId(context.Context, *model2.EnvironmentId) (*model.MongoDBClusters, error)
	FindByKubeClusterId(context.Context, *model3.KubeClusterId) (*model.MongoDBClusters, error)
	// look up mongodb-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model.MongoDBClusterId) (*model.MongoDBClusterPassword, error)
	// lookup pods of a mongodb-cluster deployed to a environment
	FindPods(context.Context, *model.MongoDBClusterId) (*model4.Pods, error)
}

// UnimplementedMongoDBClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedMongoDBClusterQueryControllerServer struct {
}

func (UnimplementedMongoDBClusterQueryControllerServer) List(context.Context, *rpc.PageInfo) (*model.MongoDBClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMongoDBClusterQueryControllerServer) GetById(context.Context, *model.MongoDBClusterId) (*model.MongoDBCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedMongoDBClusterQueryControllerServer) FindByProductId(context.Context, *model1.ProductId) (*model.MongoDBClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedMongoDBClusterQueryControllerServer) FindByEnvironmentId(context.Context, *model2.EnvironmentId) (*model.MongoDBClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedMongoDBClusterQueryControllerServer) FindByKubeClusterId(context.Context, *model3.KubeClusterId) (*model.MongoDBClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedMongoDBClusterQueryControllerServer) GetPassword(context.Context, *model.MongoDBClusterId) (*model.MongoDBClusterPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedMongoDBClusterQueryControllerServer) FindPods(context.Context, *model.MongoDBClusterId) (*model4.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeMongoDBClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoDBClusterQueryControllerServer will
// result in compilation errors.
type UnsafeMongoDBClusterQueryControllerServer interface {
	mustEmbedUnimplementedMongoDBClusterQueryControllerServer()
}

func RegisterMongoDBClusterQueryControllerServer(s grpc.ServiceRegistrar, srv MongoDBClusterQueryControllerServer) {
	s.RegisterService(&MongoDBClusterQueryController_ServiceDesc, srv)
}

func _MongoDBClusterQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).List(ctx, req.(*rpc.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBClusterQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MongoDBClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).GetById(ctx, req.(*model.MongoDBClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBClusterQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).FindByProductId(ctx, req.(*model1.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBClusterQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).FindByEnvironmentId(ctx, req.(*model2.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBClusterQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model3.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).FindByKubeClusterId(ctx, req.(*model3.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBClusterQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MongoDBClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).GetPassword(ctx, req.(*model.MongoDBClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBClusterQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MongoDBClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBClusterQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBClusterQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBClusterQueryControllerServer).FindPods(ctx, req.(*model.MongoDBClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoDBClusterQueryController_ServiceDesc is the grpc.ServiceDesc for MongoDBClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoDBClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.mongodbcluster.service.MongoDBClusterQueryController",
	HandlerType: (*MongoDBClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _MongoDBClusterQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _MongoDBClusterQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _MongoDBClusterQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _MongoDBClusterQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _MongoDBClusterQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _MongoDBClusterQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _MongoDBClusterQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/mongodbcluster/service/query.proto",
}
