// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/keycloakkubernetes/stack/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/keycloakkubernetes/stack/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeycloakKubernetesKubernetesStackController_Execute_FullMethodName = "/cloud.planton.apis.code2cloud.v1.keycloakkubernetes.stack.service.KeycloakKubernetesKubernetesStackController/execute"
)

// KeycloakKubernetesKubernetesStackControllerClient is the client API for KeycloakKubernetesKubernetesStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeycloakKubernetesKubernetesStackControllerClient interface {
	Execute(ctx context.Context, in *model.KeycloakKubernetesStackInput, opts ...grpc.CallOption) (KeycloakKubernetesKubernetesStackController_ExecuteClient, error)
}

type keycloakKubernetesKubernetesStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKeycloakKubernetesKubernetesStackControllerClient(cc grpc.ClientConnInterface) KeycloakKubernetesKubernetesStackControllerClient {
	return &keycloakKubernetesKubernetesStackControllerClient{cc}
}

func (c *keycloakKubernetesKubernetesStackControllerClient) Execute(ctx context.Context, in *model.KeycloakKubernetesStackInput, opts ...grpc.CallOption) (KeycloakKubernetesKubernetesStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &KeycloakKubernetesKubernetesStackController_ServiceDesc.Streams[0], KeycloakKubernetesKubernetesStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keycloakKubernetesKubernetesStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeycloakKubernetesKubernetesStackController_ExecuteClient interface {
	Recv() (*model.KeycloakKubernetesStackResponse, error)
	grpc.ClientStream
}

type keycloakKubernetesKubernetesStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *keycloakKubernetesKubernetesStackControllerExecuteClient) Recv() (*model.KeycloakKubernetesStackResponse, error) {
	m := new(model.KeycloakKubernetesStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeycloakKubernetesKubernetesStackControllerServer is the server API for KeycloakKubernetesKubernetesStackController service.
// All implementations should embed UnimplementedKeycloakKubernetesKubernetesStackControllerServer
// for forward compatibility
type KeycloakKubernetesKubernetesStackControllerServer interface {
	Execute(*model.KeycloakKubernetesStackInput, KeycloakKubernetesKubernetesStackController_ExecuteServer) error
}

// UnimplementedKeycloakKubernetesKubernetesStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKeycloakKubernetesKubernetesStackControllerServer struct {
}

func (UnimplementedKeycloakKubernetesKubernetesStackControllerServer) Execute(*model.KeycloakKubernetesStackInput, KeycloakKubernetesKubernetesStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeKeycloakKubernetesKubernetesStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeycloakKubernetesKubernetesStackControllerServer will
// result in compilation errors.
type UnsafeKeycloakKubernetesKubernetesStackControllerServer interface {
	mustEmbedUnimplementedKeycloakKubernetesKubernetesStackControllerServer()
}

func RegisterKeycloakKubernetesKubernetesStackControllerServer(s grpc.ServiceRegistrar, srv KeycloakKubernetesKubernetesStackControllerServer) {
	s.RegisterService(&KeycloakKubernetesKubernetesStackController_ServiceDesc, srv)
}

func _KeycloakKubernetesKubernetesStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.KeycloakKubernetesStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeycloakKubernetesKubernetesStackControllerServer).Execute(m, &keycloakKubernetesKubernetesStackControllerExecuteServer{stream})
}

type KeycloakKubernetesKubernetesStackController_ExecuteServer interface {
	Send(*model.KeycloakKubernetesStackResponse) error
	grpc.ServerStream
}

type keycloakKubernetesKubernetesStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *keycloakKubernetesKubernetesStackControllerExecuteServer) Send(m *model.KeycloakKubernetesStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KeycloakKubernetesKubernetesStackController_ServiceDesc is the grpc.ServiceDesc for KeycloakKubernetesKubernetesStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeycloakKubernetesKubernetesStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.keycloakkubernetes.stack.service.KeycloakKubernetesKubernetesStackController",
	HandlerType: (*KeycloakKubernetesKubernetesStackControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _KeycloakKubernetesKubernetesStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/keycloakkubernetes/stack/service/stack.proto",
}
