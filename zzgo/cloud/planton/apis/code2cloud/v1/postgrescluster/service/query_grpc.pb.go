// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/postgrescluster/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/postgrescluster/model"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostgresClusterQueryController_List_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.postgrescluster.service.PostgresClusterQueryController/list"
	PostgresClusterQueryController_GetById_FullMethodName     = "/cloud.planton.apis.code2cloud.v1.postgrescluster.service.PostgresClusterQueryController/getById"
	PostgresClusterQueryController_GetPassword_FullMethodName = "/cloud.planton.apis.code2cloud.v1.postgrescluster.service.PostgresClusterQueryController/getPassword"
	PostgresClusterQueryController_FindPods_FullMethodName    = "/cloud.planton.apis.code2cloud.v1.postgrescluster.service.PostgresClusterQueryController/findPods"
)

// PostgresClusterQueryControllerClient is the client API for PostgresClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresClusterQueryControllerClient interface {
	// list all postgres-clusters for the requested page.
	List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.PostgresClusterList, error)
	// look up a postgres-cluster using postgres-cluster id
	GetById(ctx context.Context, in *model.PostgresClusterId, opts ...grpc.CallOption) (*model.PostgresCluster, error)
	// look up postgres-cluster password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model.PostgresClusterId, opts ...grpc.CallOption) (*model.PostgresClusterPassword, error)
	// lookup pods of a postgres-cluster deployment
	FindPods(ctx context.Context, in *model.PostgresClusterId, opts ...grpc.CallOption) (*model1.Pods, error)
}

type postgresClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresClusterQueryControllerClient(cc grpc.ClientConnInterface) PostgresClusterQueryControllerClient {
	return &postgresClusterQueryControllerClient{cc}
}

func (c *postgresClusterQueryControllerClient) List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.PostgresClusterList, error) {
	out := new(model.PostgresClusterList)
	err := c.cc.Invoke(ctx, PostgresClusterQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClusterQueryControllerClient) GetById(ctx context.Context, in *model.PostgresClusterId, opts ...grpc.CallOption) (*model.PostgresCluster, error) {
	out := new(model.PostgresCluster)
	err := c.cc.Invoke(ctx, PostgresClusterQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClusterQueryControllerClient) GetPassword(ctx context.Context, in *model.PostgresClusterId, opts ...grpc.CallOption) (*model.PostgresClusterPassword, error) {
	out := new(model.PostgresClusterPassword)
	err := c.cc.Invoke(ctx, PostgresClusterQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClusterQueryControllerClient) FindPods(ctx context.Context, in *model.PostgresClusterId, opts ...grpc.CallOption) (*model1.Pods, error) {
	out := new(model1.Pods)
	err := c.cc.Invoke(ctx, PostgresClusterQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresClusterQueryControllerServer is the server API for PostgresClusterQueryController service.
// All implementations should embed UnimplementedPostgresClusterQueryControllerServer
// for forward compatibility
type PostgresClusterQueryControllerServer interface {
	// list all postgres-clusters for the requested page.
	List(context.Context, *rpc.PageInfo) (*model.PostgresClusterList, error)
	// look up a postgres-cluster using postgres-cluster id
	GetById(context.Context, *model.PostgresClusterId) (*model.PostgresCluster, error)
	// look up postgres-cluster password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model.PostgresClusterId) (*model.PostgresClusterPassword, error)
	// lookup pods of a postgres-cluster deployment
	FindPods(context.Context, *model.PostgresClusterId) (*model1.Pods, error)
}

// UnimplementedPostgresClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedPostgresClusterQueryControllerServer struct {
}

func (UnimplementedPostgresClusterQueryControllerServer) List(context.Context, *rpc.PageInfo) (*model.PostgresClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPostgresClusterQueryControllerServer) GetById(context.Context, *model.PostgresClusterId) (*model.PostgresCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPostgresClusterQueryControllerServer) GetPassword(context.Context, *model.PostgresClusterId) (*model.PostgresClusterPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedPostgresClusterQueryControllerServer) FindPods(context.Context, *model.PostgresClusterId) (*model1.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafePostgresClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresClusterQueryControllerServer will
// result in compilation errors.
type UnsafePostgresClusterQueryControllerServer interface {
	mustEmbedUnimplementedPostgresClusterQueryControllerServer()
}

func RegisterPostgresClusterQueryControllerServer(s grpc.ServiceRegistrar, srv PostgresClusterQueryControllerServer) {
	s.RegisterService(&PostgresClusterQueryController_ServiceDesc, srv)
}

func _PostgresClusterQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClusterQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresClusterQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClusterQueryControllerServer).List(ctx, req.(*rpc.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClusterQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClusterQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresClusterQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClusterQueryControllerServer).GetById(ctx, req.(*model.PostgresClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClusterQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClusterQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresClusterQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClusterQueryControllerServer).GetPassword(ctx, req.(*model.PostgresClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClusterQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClusterQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresClusterQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClusterQueryControllerServer).FindPods(ctx, req.(*model.PostgresClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// PostgresClusterQueryController_ServiceDesc is the grpc.ServiceDesc for PostgresClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostgresClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.postgrescluster.service.PostgresClusterQueryController",
	HandlerType: (*PostgresClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _PostgresClusterQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _PostgresClusterQueryController_GetById_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _PostgresClusterQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _PostgresClusterQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/postgrescluster/service/query.proto",
}
