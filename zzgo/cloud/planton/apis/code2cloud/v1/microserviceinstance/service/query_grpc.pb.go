// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/microserviceinstance/service/query.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/codeproject/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/microserviceinstance/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MicroserviceInstanceQueryController_GetById_FullMethodName                            = "/cloud.planton.apis.code2cloud.v1.microserviceinstance.service.MicroserviceInstanceQueryController/getById"
	MicroserviceInstanceQueryController_FindByEnvironmentIdByCodeProjectId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.microserviceinstance.service.MicroserviceInstanceQueryController/findByEnvironmentIdByCodeProjectId"
	MicroserviceInstanceQueryController_GetByCodeProjectId_FullMethodName                 = "/cloud.planton.apis.code2cloud.v1.microserviceinstance.service.MicroserviceInstanceQueryController/getByCodeProjectId"
	MicroserviceInstanceQueryController_FindByCodeProjectUrl_FullMethodName               = "/cloud.planton.apis.code2cloud.v1.microserviceinstance.service.MicroserviceInstanceQueryController/findByCodeProjectUrl"
	MicroserviceInstanceQueryController_GetEnvVarMap_FullMethodName                       = "/cloud.planton.apis.code2cloud.v1.microserviceinstance.service.MicroserviceInstanceQueryController/getEnvVarMap"
)

// MicroserviceInstanceQueryControllerClient is the client API for MicroserviceInstanceQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceInstanceQueryControllerClient interface {
	// look up microservice-instance using microservice-instance id
	GetById(ctx context.Context, in *model.MicroserviceInstanceId, opts ...grpc.CallOption) (*model.MicroserviceInstance, error)
	// find microservice-instances in a environment for a code-project
	FindByEnvironmentIdByCodeProjectId(ctx context.Context, in *model.ByEnvironmentIdByCodeProjectIdInput, opts ...grpc.CallOption) (*model.MicroserviceInstanceList, error)
	// lookup a microservice-instance by code project id
	GetByCodeProjectId(ctx context.Context, in *model1.CodeProjectId, opts ...grpc.CallOption) (*model.MicroserviceInstance, error)
	// lookup all microservice-instances by code project url
	FindByCodeProjectUrl(ctx context.Context, in *model1.CodeProjectUrl, opts ...grpc.CallOption) (*model.MicroserviceInstanceList, error)
	GetEnvVarMap(ctx context.Context, in *model.GetMicroserviceInstanceEnvVarMapInput, opts ...grpc.CallOption) (*model.MicroserviceInstanceEnvVarMap, error)
}

type microserviceInstanceQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceInstanceQueryControllerClient(cc grpc.ClientConnInterface) MicroserviceInstanceQueryControllerClient {
	return &microserviceInstanceQueryControllerClient{cc}
}

func (c *microserviceInstanceQueryControllerClient) GetById(ctx context.Context, in *model.MicroserviceInstanceId, opts ...grpc.CallOption) (*model.MicroserviceInstance, error) {
	out := new(model.MicroserviceInstance)
	err := c.cc.Invoke(ctx, MicroserviceInstanceQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceInstanceQueryControllerClient) FindByEnvironmentIdByCodeProjectId(ctx context.Context, in *model.ByEnvironmentIdByCodeProjectIdInput, opts ...grpc.CallOption) (*model.MicroserviceInstanceList, error) {
	out := new(model.MicroserviceInstanceList)
	err := c.cc.Invoke(ctx, MicroserviceInstanceQueryController_FindByEnvironmentIdByCodeProjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceInstanceQueryControllerClient) GetByCodeProjectId(ctx context.Context, in *model1.CodeProjectId, opts ...grpc.CallOption) (*model.MicroserviceInstance, error) {
	out := new(model.MicroserviceInstance)
	err := c.cc.Invoke(ctx, MicroserviceInstanceQueryController_GetByCodeProjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceInstanceQueryControllerClient) FindByCodeProjectUrl(ctx context.Context, in *model1.CodeProjectUrl, opts ...grpc.CallOption) (*model.MicroserviceInstanceList, error) {
	out := new(model.MicroserviceInstanceList)
	err := c.cc.Invoke(ctx, MicroserviceInstanceQueryController_FindByCodeProjectUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceInstanceQueryControllerClient) GetEnvVarMap(ctx context.Context, in *model.GetMicroserviceInstanceEnvVarMapInput, opts ...grpc.CallOption) (*model.MicroserviceInstanceEnvVarMap, error) {
	out := new(model.MicroserviceInstanceEnvVarMap)
	err := c.cc.Invoke(ctx, MicroserviceInstanceQueryController_GetEnvVarMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceInstanceQueryControllerServer is the server API for MicroserviceInstanceQueryController service.
// All implementations should embed UnimplementedMicroserviceInstanceQueryControllerServer
// for forward compatibility
type MicroserviceInstanceQueryControllerServer interface {
	// look up microservice-instance using microservice-instance id
	GetById(context.Context, *model.MicroserviceInstanceId) (*model.MicroserviceInstance, error)
	// find microservice-instances in a environment for a code-project
	FindByEnvironmentIdByCodeProjectId(context.Context, *model.ByEnvironmentIdByCodeProjectIdInput) (*model.MicroserviceInstanceList, error)
	// lookup a microservice-instance by code project id
	GetByCodeProjectId(context.Context, *model1.CodeProjectId) (*model.MicroserviceInstance, error)
	// lookup all microservice-instances by code project url
	FindByCodeProjectUrl(context.Context, *model1.CodeProjectUrl) (*model.MicroserviceInstanceList, error)
	GetEnvVarMap(context.Context, *model.GetMicroserviceInstanceEnvVarMapInput) (*model.MicroserviceInstanceEnvVarMap, error)
}

// UnimplementedMicroserviceInstanceQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedMicroserviceInstanceQueryControllerServer struct {
}

func (UnimplementedMicroserviceInstanceQueryControllerServer) GetById(context.Context, *model.MicroserviceInstanceId) (*model.MicroserviceInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedMicroserviceInstanceQueryControllerServer) FindByEnvironmentIdByCodeProjectId(context.Context, *model.ByEnvironmentIdByCodeProjectIdInput) (*model.MicroserviceInstanceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentIdByCodeProjectId not implemented")
}
func (UnimplementedMicroserviceInstanceQueryControllerServer) GetByCodeProjectId(context.Context, *model1.CodeProjectId) (*model.MicroserviceInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCodeProjectId not implemented")
}
func (UnimplementedMicroserviceInstanceQueryControllerServer) FindByCodeProjectUrl(context.Context, *model1.CodeProjectUrl) (*model.MicroserviceInstanceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCodeProjectUrl not implemented")
}
func (UnimplementedMicroserviceInstanceQueryControllerServer) GetEnvVarMap(context.Context, *model.GetMicroserviceInstanceEnvVarMapInput) (*model.MicroserviceInstanceEnvVarMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvVarMap not implemented")
}

// UnsafeMicroserviceInstanceQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceInstanceQueryControllerServer will
// result in compilation errors.
type UnsafeMicroserviceInstanceQueryControllerServer interface {
	mustEmbedUnimplementedMicroserviceInstanceQueryControllerServer()
}

func RegisterMicroserviceInstanceQueryControllerServer(s grpc.ServiceRegistrar, srv MicroserviceInstanceQueryControllerServer) {
	s.RegisterService(&MicroserviceInstanceQueryController_ServiceDesc, srv)
}

func _MicroserviceInstanceQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MicroserviceInstanceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceInstanceQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceInstanceQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceInstanceQueryControllerServer).GetById(ctx, req.(*model.MicroserviceInstanceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceInstanceQueryController_FindByEnvironmentIdByCodeProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ByEnvironmentIdByCodeProjectIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceInstanceQueryControllerServer).FindByEnvironmentIdByCodeProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceInstanceQueryController_FindByEnvironmentIdByCodeProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceInstanceQueryControllerServer).FindByEnvironmentIdByCodeProjectId(ctx, req.(*model.ByEnvironmentIdByCodeProjectIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceInstanceQueryController_GetByCodeProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.CodeProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceInstanceQueryControllerServer).GetByCodeProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceInstanceQueryController_GetByCodeProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceInstanceQueryControllerServer).GetByCodeProjectId(ctx, req.(*model1.CodeProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceInstanceQueryController_FindByCodeProjectUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.CodeProjectUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceInstanceQueryControllerServer).FindByCodeProjectUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceInstanceQueryController_FindByCodeProjectUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceInstanceQueryControllerServer).FindByCodeProjectUrl(ctx, req.(*model1.CodeProjectUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceInstanceQueryController_GetEnvVarMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMicroserviceInstanceEnvVarMapInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceInstanceQueryControllerServer).GetEnvVarMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceInstanceQueryController_GetEnvVarMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceInstanceQueryControllerServer).GetEnvVarMap(ctx, req.(*model.GetMicroserviceInstanceEnvVarMapInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroserviceInstanceQueryController_ServiceDesc is the grpc.ServiceDesc for MicroserviceInstanceQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroserviceInstanceQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.microserviceinstance.service.MicroserviceInstanceQueryController",
	HandlerType: (*MicroserviceInstanceQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _MicroserviceInstanceQueryController_GetById_Handler,
		},
		{
			MethodName: "findByEnvironmentIdByCodeProjectId",
			Handler:    _MicroserviceInstanceQueryController_FindByEnvironmentIdByCodeProjectId_Handler,
		},
		{
			MethodName: "getByCodeProjectId",
			Handler:    _MicroserviceInstanceQueryController_GetByCodeProjectId_Handler,
		},
		{
			MethodName: "findByCodeProjectUrl",
			Handler:    _MicroserviceInstanceQueryController_FindByCodeProjectUrl_Handler,
		},
		{
			MethodName: "getEnvVarMap",
			Handler:    _MicroserviceInstanceQueryController_GetEnvVarMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/microserviceinstance/service/query.proto",
}
