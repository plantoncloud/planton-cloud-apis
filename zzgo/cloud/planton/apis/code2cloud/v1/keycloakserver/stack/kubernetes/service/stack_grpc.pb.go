// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/keycloakserver/stack/kubernetes/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/keycloakserver/stack/kubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeycloakServerKubernetesStackController_Execute_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.keycloakserver.stack.kubernetes.service.KeycloakServerKubernetesStackController/execute"
	KeycloakServerKubernetesStackController_GetStackOutputs_FullMethodName = "/cloud.planton.apis.code2cloud.v1.keycloakserver.stack.kubernetes.service.KeycloakServerKubernetesStackController/getStackOutputs"
)

// KeycloakServerKubernetesStackControllerClient is the client API for KeycloakServerKubernetesStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeycloakServerKubernetesStackControllerClient interface {
	Execute(ctx context.Context, in *model.KeycloakServerKubernetesStackInput, opts ...grpc.CallOption) (KeycloakServerKubernetesStackController_ExecuteClient, error)
	GetStackOutputs(ctx context.Context, in *model.KeycloakServerKubernetesStackInput, opts ...grpc.CallOption) (*model.KeycloakServerKubernetesStackOutputs, error)
}

type keycloakServerKubernetesStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKeycloakServerKubernetesStackControllerClient(cc grpc.ClientConnInterface) KeycloakServerKubernetesStackControllerClient {
	return &keycloakServerKubernetesStackControllerClient{cc}
}

func (c *keycloakServerKubernetesStackControllerClient) Execute(ctx context.Context, in *model.KeycloakServerKubernetesStackInput, opts ...grpc.CallOption) (KeycloakServerKubernetesStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &KeycloakServerKubernetesStackController_ServiceDesc.Streams[0], KeycloakServerKubernetesStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keycloakServerKubernetesStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeycloakServerKubernetesStackController_ExecuteClient interface {
	Recv() (*model.KeycloakServerKubernetesStackResponse, error)
	grpc.ClientStream
}

type keycloakServerKubernetesStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *keycloakServerKubernetesStackControllerExecuteClient) Recv() (*model.KeycloakServerKubernetesStackResponse, error) {
	m := new(model.KeycloakServerKubernetesStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keycloakServerKubernetesStackControllerClient) GetStackOutputs(ctx context.Context, in *model.KeycloakServerKubernetesStackInput, opts ...grpc.CallOption) (*model.KeycloakServerKubernetesStackOutputs, error) {
	out := new(model.KeycloakServerKubernetesStackOutputs)
	err := c.cc.Invoke(ctx, KeycloakServerKubernetesStackController_GetStackOutputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeycloakServerKubernetesStackControllerServer is the server API for KeycloakServerKubernetesStackController service.
// All implementations should embed UnimplementedKeycloakServerKubernetesStackControllerServer
// for forward compatibility
type KeycloakServerKubernetesStackControllerServer interface {
	Execute(*model.KeycloakServerKubernetesStackInput, KeycloakServerKubernetesStackController_ExecuteServer) error
	GetStackOutputs(context.Context, *model.KeycloakServerKubernetesStackInput) (*model.KeycloakServerKubernetesStackOutputs, error)
}

// UnimplementedKeycloakServerKubernetesStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKeycloakServerKubernetesStackControllerServer struct {
}

func (UnimplementedKeycloakServerKubernetesStackControllerServer) Execute(*model.KeycloakServerKubernetesStackInput, KeycloakServerKubernetesStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedKeycloakServerKubernetesStackControllerServer) GetStackOutputs(context.Context, *model.KeycloakServerKubernetesStackInput) (*model.KeycloakServerKubernetesStackOutputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStackOutputs not implemented")
}

// UnsafeKeycloakServerKubernetesStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeycloakServerKubernetesStackControllerServer will
// result in compilation errors.
type UnsafeKeycloakServerKubernetesStackControllerServer interface {
	mustEmbedUnimplementedKeycloakServerKubernetesStackControllerServer()
}

func RegisterKeycloakServerKubernetesStackControllerServer(s grpc.ServiceRegistrar, srv KeycloakServerKubernetesStackControllerServer) {
	s.RegisterService(&KeycloakServerKubernetesStackController_ServiceDesc, srv)
}

func _KeycloakServerKubernetesStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.KeycloakServerKubernetesStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeycloakServerKubernetesStackControllerServer).Execute(m, &keycloakServerKubernetesStackControllerExecuteServer{stream})
}

type KeycloakServerKubernetesStackController_ExecuteServer interface {
	Send(*model.KeycloakServerKubernetesStackResponse) error
	grpc.ServerStream
}

type keycloakServerKubernetesStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *keycloakServerKubernetesStackControllerExecuteServer) Send(m *model.KeycloakServerKubernetesStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KeycloakServerKubernetesStackController_GetStackOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KeycloakServerKubernetesStackInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakServerKubernetesStackControllerServer).GetStackOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeycloakServerKubernetesStackController_GetStackOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakServerKubernetesStackControllerServer).GetStackOutputs(ctx, req.(*model.KeycloakServerKubernetesStackInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KeycloakServerKubernetesStackController_ServiceDesc is the grpc.ServiceDesc for KeycloakServerKubernetesStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeycloakServerKubernetesStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.keycloakserver.stack.kubernetes.service.KeycloakServerKubernetesStackController",
	HandlerType: (*KeycloakServerKubernetesStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStackOutputs",
			Handler:    _KeycloakServerKubernetesStackController_GetStackOutputs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _KeycloakServerKubernetesStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/keycloakserver/stack/kubernetes/service/stack.proto",
}
