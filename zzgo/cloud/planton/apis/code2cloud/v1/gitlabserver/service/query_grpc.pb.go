// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/gitlabserver/service/query.proto

package service

import (
	context "context"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/environment/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/gitlabserver/model"
	model3 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/kubecluster/model"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model4 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/product/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitLabServerQueryController_List_FullMethodName                = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/list"
	GitLabServerQueryController_GetById_FullMethodName             = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/getById"
	GitLabServerQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/findByProductId"
	GitLabServerQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/findByEnvironmentId"
	GitLabServerQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/findByKubeClusterId"
	GitLabServerQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/getPassword"
	GitLabServerQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController/findPods"
)

// GitLabServerQueryControllerClient is the client API for GitLabServerQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitLabServerQueryControllerClient interface {
	// list all gitlab-servers on planton cluster for the requested page.
	List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.GitLabServerList, error)
	// look up gitlab-server using gitlab-server id
	GetById(ctx context.Context, in *model.GitLabServerId, opts ...grpc.CallOption) (*model.GitLabServer, error)
	// find gitlab-servers by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *model1.ProductId, opts ...grpc.CallOption) (*model.GitLabServers, error)
	// find gitlab-servers by environment
	FindByEnvironmentId(ctx context.Context, in *model2.EnvironmentId, opts ...grpc.CallOption) (*model.GitLabServers, error)
	FindByKubeClusterId(ctx context.Context, in *model3.KubeClusterId, opts ...grpc.CallOption) (*model.GitLabServers, error)
	// look up gitlab-server sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model.GitLabServerId, opts ...grpc.CallOption) (*model.GitLabServerPassword, error)
	// lookup pods of a gitlab-server deployed to a environment
	FindPods(ctx context.Context, in *model.GitLabServerId, opts ...grpc.CallOption) (*model4.Pods, error)
}

type gitLabServerQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGitLabServerQueryControllerClient(cc grpc.ClientConnInterface) GitLabServerQueryControllerClient {
	return &gitLabServerQueryControllerClient{cc}
}

func (c *gitLabServerQueryControllerClient) List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.GitLabServerList, error) {
	out := new(model.GitLabServerList)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitLabServerQueryControllerClient) GetById(ctx context.Context, in *model.GitLabServerId, opts ...grpc.CallOption) (*model.GitLabServer, error) {
	out := new(model.GitLabServer)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitLabServerQueryControllerClient) FindByProductId(ctx context.Context, in *model1.ProductId, opts ...grpc.CallOption) (*model.GitLabServers, error) {
	out := new(model.GitLabServers)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitLabServerQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *model2.EnvironmentId, opts ...grpc.CallOption) (*model.GitLabServers, error) {
	out := new(model.GitLabServers)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitLabServerQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *model3.KubeClusterId, opts ...grpc.CallOption) (*model.GitLabServers, error) {
	out := new(model.GitLabServers)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitLabServerQueryControllerClient) GetPassword(ctx context.Context, in *model.GitLabServerId, opts ...grpc.CallOption) (*model.GitLabServerPassword, error) {
	out := new(model.GitLabServerPassword)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitLabServerQueryControllerClient) FindPods(ctx context.Context, in *model.GitLabServerId, opts ...grpc.CallOption) (*model4.Pods, error) {
	out := new(model4.Pods)
	err := c.cc.Invoke(ctx, GitLabServerQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitLabServerQueryControllerServer is the server API for GitLabServerQueryController service.
// All implementations should embed UnimplementedGitLabServerQueryControllerServer
// for forward compatibility
type GitLabServerQueryControllerServer interface {
	// list all gitlab-servers on planton cluster for the requested page.
	List(context.Context, *rpc.PageInfo) (*model.GitLabServerList, error)
	// look up gitlab-server using gitlab-server id
	GetById(context.Context, *model.GitLabServerId) (*model.GitLabServer, error)
	// find gitlab-servers by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *model1.ProductId) (*model.GitLabServers, error)
	// find gitlab-servers by environment
	FindByEnvironmentId(context.Context, *model2.EnvironmentId) (*model.GitLabServers, error)
	FindByKubeClusterId(context.Context, *model3.KubeClusterId) (*model.GitLabServers, error)
	// look up gitlab-server sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model.GitLabServerId) (*model.GitLabServerPassword, error)
	// lookup pods of a gitlab-server deployed to a environment
	FindPods(context.Context, *model.GitLabServerId) (*model4.Pods, error)
}

// UnimplementedGitLabServerQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGitLabServerQueryControllerServer struct {
}

func (UnimplementedGitLabServerQueryControllerServer) List(context.Context, *rpc.PageInfo) (*model.GitLabServerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGitLabServerQueryControllerServer) GetById(context.Context, *model.GitLabServerId) (*model.GitLabServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedGitLabServerQueryControllerServer) FindByProductId(context.Context, *model1.ProductId) (*model.GitLabServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedGitLabServerQueryControllerServer) FindByEnvironmentId(context.Context, *model2.EnvironmentId) (*model.GitLabServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedGitLabServerQueryControllerServer) FindByKubeClusterId(context.Context, *model3.KubeClusterId) (*model.GitLabServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedGitLabServerQueryControllerServer) GetPassword(context.Context, *model.GitLabServerId) (*model.GitLabServerPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedGitLabServerQueryControllerServer) FindPods(context.Context, *model.GitLabServerId) (*model4.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeGitLabServerQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitLabServerQueryControllerServer will
// result in compilation errors.
type UnsafeGitLabServerQueryControllerServer interface {
	mustEmbedUnimplementedGitLabServerQueryControllerServer()
}

func RegisterGitLabServerQueryControllerServer(s grpc.ServiceRegistrar, srv GitLabServerQueryControllerServer) {
	s.RegisterService(&GitLabServerQueryController_ServiceDesc, srv)
}

func _GitLabServerQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).List(ctx, req.(*rpc.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitLabServerQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitLabServerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).GetById(ctx, req.(*model.GitLabServerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitLabServerQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).FindByProductId(ctx, req.(*model1.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitLabServerQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).FindByEnvironmentId(ctx, req.(*model2.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitLabServerQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model3.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).FindByKubeClusterId(ctx, req.(*model3.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitLabServerQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitLabServerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).GetPassword(ctx, req.(*model.GitLabServerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitLabServerQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitLabServerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerQueryControllerServer).FindPods(ctx, req.(*model.GitLabServerId))
	}
	return interceptor(ctx, in, info, handler)
}

// GitLabServerQueryController_ServiceDesc is the grpc.ServiceDesc for GitLabServerQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitLabServerQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gitlabserver.service.GitLabServerQueryController",
	HandlerType: (*GitLabServerQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _GitLabServerQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _GitLabServerQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _GitLabServerQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _GitLabServerQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _GitLabServerQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _GitLabServerQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _GitLabServerQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/gitlabserver/service/query.proto",
}
