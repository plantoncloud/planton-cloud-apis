// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/gitlabserver/stack/kubernetes/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/gitlabserver/stack/kubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitLabServerKubernetesStackController_Execute_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.gitlabserver.stack.kubernetes.service.GitLabServerKubernetesStackController/execute"
	GitLabServerKubernetesStackController_GetStackOutputs_FullMethodName = "/cloud.planton.apis.code2cloud.v1.gitlabserver.stack.kubernetes.service.GitLabServerKubernetesStackController/getStackOutputs"
)

// GitLabServerKubernetesStackControllerClient is the client API for GitLabServerKubernetesStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitLabServerKubernetesStackControllerClient interface {
	Execute(ctx context.Context, in *model.GitLabServerKubernetesStackInput, opts ...grpc.CallOption) (GitLabServerKubernetesStackController_ExecuteClient, error)
	GetStackOutputs(ctx context.Context, in *model.GitLabServerKubernetesStackInput, opts ...grpc.CallOption) (*model.GitLabServerKubernetesStackOutputs, error)
}

type gitLabServerKubernetesStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGitLabServerKubernetesStackControllerClient(cc grpc.ClientConnInterface) GitLabServerKubernetesStackControllerClient {
	return &gitLabServerKubernetesStackControllerClient{cc}
}

func (c *gitLabServerKubernetesStackControllerClient) Execute(ctx context.Context, in *model.GitLabServerKubernetesStackInput, opts ...grpc.CallOption) (GitLabServerKubernetesStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitLabServerKubernetesStackController_ServiceDesc.Streams[0], GitLabServerKubernetesStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitLabServerKubernetesStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitLabServerKubernetesStackController_ExecuteClient interface {
	Recv() (*model.GitLabServerKubernetesStackResponse, error)
	grpc.ClientStream
}

type gitLabServerKubernetesStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *gitLabServerKubernetesStackControllerExecuteClient) Recv() (*model.GitLabServerKubernetesStackResponse, error) {
	m := new(model.GitLabServerKubernetesStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitLabServerKubernetesStackControllerClient) GetStackOutputs(ctx context.Context, in *model.GitLabServerKubernetesStackInput, opts ...grpc.CallOption) (*model.GitLabServerKubernetesStackOutputs, error) {
	out := new(model.GitLabServerKubernetesStackOutputs)
	err := c.cc.Invoke(ctx, GitLabServerKubernetesStackController_GetStackOutputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitLabServerKubernetesStackControllerServer is the server API for GitLabServerKubernetesStackController service.
// All implementations should embed UnimplementedGitLabServerKubernetesStackControllerServer
// for forward compatibility
type GitLabServerKubernetesStackControllerServer interface {
	Execute(*model.GitLabServerKubernetesStackInput, GitLabServerKubernetesStackController_ExecuteServer) error
	GetStackOutputs(context.Context, *model.GitLabServerKubernetesStackInput) (*model.GitLabServerKubernetesStackOutputs, error)
}

// UnimplementedGitLabServerKubernetesStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGitLabServerKubernetesStackControllerServer struct {
}

func (UnimplementedGitLabServerKubernetesStackControllerServer) Execute(*model.GitLabServerKubernetesStackInput, GitLabServerKubernetesStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedGitLabServerKubernetesStackControllerServer) GetStackOutputs(context.Context, *model.GitLabServerKubernetesStackInput) (*model.GitLabServerKubernetesStackOutputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStackOutputs not implemented")
}

// UnsafeGitLabServerKubernetesStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitLabServerKubernetesStackControllerServer will
// result in compilation errors.
type UnsafeGitLabServerKubernetesStackControllerServer interface {
	mustEmbedUnimplementedGitLabServerKubernetesStackControllerServer()
}

func RegisterGitLabServerKubernetesStackControllerServer(s grpc.ServiceRegistrar, srv GitLabServerKubernetesStackControllerServer) {
	s.RegisterService(&GitLabServerKubernetesStackController_ServiceDesc, srv)
}

func _GitLabServerKubernetesStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.GitLabServerKubernetesStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitLabServerKubernetesStackControllerServer).Execute(m, &gitLabServerKubernetesStackControllerExecuteServer{stream})
}

type GitLabServerKubernetesStackController_ExecuteServer interface {
	Send(*model.GitLabServerKubernetesStackResponse) error
	grpc.ServerStream
}

type gitLabServerKubernetesStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *gitLabServerKubernetesStackControllerExecuteServer) Send(m *model.GitLabServerKubernetesStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitLabServerKubernetesStackController_GetStackOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitLabServerKubernetesStackInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitLabServerKubernetesStackControllerServer).GetStackOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitLabServerKubernetesStackController_GetStackOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitLabServerKubernetesStackControllerServer).GetStackOutputs(ctx, req.(*model.GitLabServerKubernetesStackInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GitLabServerKubernetesStackController_ServiceDesc is the grpc.ServiceDesc for GitLabServerKubernetesStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitLabServerKubernetesStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.gitlabserver.stack.kubernetes.service.GitLabServerKubernetesStackController",
	HandlerType: (*GitLabServerKubernetesStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStackOutputs",
			Handler:    _GitLabServerKubernetesStackController_GetStackOutputs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _GitLabServerKubernetesStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/code2cloud/v1/gitlabserver/stack/kubernetes/service/stack.proto",
}
