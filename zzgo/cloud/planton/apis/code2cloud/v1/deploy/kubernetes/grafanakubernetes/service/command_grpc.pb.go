// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/deploy/kubernetes/grafanakubernetes/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/deploy/kubernetes/grafanakubernetes/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrafanaKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/previewCreate"
	GrafanaKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/create"
	GrafanaKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/previewUpdate"
	GrafanaKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/update"
	GrafanaKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/previewDelete"
	GrafanaKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/delete"
	GrafanaKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/previewRestore"
	GrafanaKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/restore"
	GrafanaKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/restart"
	GrafanaKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/pause"
	GrafanaKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/unpause"
	GrafanaKubernetesCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/previewRefresh"
	GrafanaKubernetesCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController/refresh"
)

// GrafanaKubernetesCommandControllerClient is the client API for GrafanaKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrafanaKubernetesCommandControllerClient interface {
	// preview creating grafana-kubernetes
	PreviewCreate(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// create grafana-kubernetes
	Create(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// preview updating an existing grafana-kubernetes
	PreviewUpdate(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// update an existing grafana-kubernetes
	Update(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// preview deleting an existing grafana-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// delete an existing grafana-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// preview restoring a previously deleted grafana-kubernetes
	PreviewRestore(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// restore a previously deleted grafana-kubernetes
	Restore(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// restart a grafana-kubernetes running in a environment.
	// grafana-kubernetes is restarted by deleting running "grafana" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.GrafanaKubernetesId, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// pause a grafana-kubernetes running in a environment.
	// grafana-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// unpause a previously paused grafana-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the grafana-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// preview refresh a grafana-kubernetes that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
	// refresh a grafana-kubernetes that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
}

type grafanaKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrafanaKubernetesCommandControllerClient(cc grpc.ClientConnInterface) GrafanaKubernetesCommandControllerClient {
	return &grafanaKubernetesCommandControllerClient{cc}
}

func (c *grafanaKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Create(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Update(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.GrafanaKubernetes, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.GrafanaKubernetesId, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaKubernetesCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafanaKubernetesCommandControllerServer is the server API for GrafanaKubernetesCommandController service.
// All implementations should embed UnimplementedGrafanaKubernetesCommandControllerServer
// for forward compatibility
type GrafanaKubernetesCommandControllerServer interface {
	// preview creating grafana-kubernetes
	PreviewCreate(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error)
	// create grafana-kubernetes
	Create(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error)
	// preview updating an existing grafana-kubernetes
	PreviewUpdate(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error)
	// update an existing grafana-kubernetes
	Update(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error)
	// preview deleting an existing grafana-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.GrafanaKubernetes, error)
	// delete an existing grafana-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.GrafanaKubernetes, error)
	// preview restoring a previously deleted grafana-kubernetes
	PreviewRestore(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error)
	// restore a previously deleted grafana-kubernetes
	Restore(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error)
	// restart a grafana-kubernetes running in a environment.
	// grafana-kubernetes is restarted by deleting running "grafana" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.GrafanaKubernetesId) (*model.GrafanaKubernetes, error)
	// pause a grafana-kubernetes running in a environment.
	// grafana-kubernetes is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.GrafanaKubernetes, error)
	// unpause a previously paused grafana-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the grafana-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.GrafanaKubernetes, error)
	// preview refresh a grafana-kubernetes that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.GrafanaKubernetes, error)
	// refresh a grafana-kubernetes that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.GrafanaKubernetes, error)
}

// UnimplementedGrafanaKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGrafanaKubernetesCommandControllerServer struct {
}

func (UnimplementedGrafanaKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Create(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Update(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Restore(context.Context, *model.GrafanaKubernetes) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Restart(context.Context, *model.GrafanaKubernetesId) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedGrafanaKubernetesCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeGrafanaKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrafanaKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafeGrafanaKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedGrafanaKubernetesCommandControllerServer()
}

func RegisterGrafanaKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv GrafanaKubernetesCommandControllerServer) {
	s.RegisterService(&GrafanaKubernetesCommandController_ServiceDesc, srv)
}

func _GrafanaKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.GrafanaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Create(ctx, req.(*model.GrafanaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.GrafanaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Update(ctx, req.(*model.GrafanaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.GrafanaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Restore(ctx, req.(*model.GrafanaKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Restart(ctx, req.(*model.GrafanaKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaKubernetesCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GrafanaKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for GrafanaKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrafanaKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.deploy.kubernetes.grafanakubernetes.service.GrafanaKubernetesCommandController",
	HandlerType: (*GrafanaKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _GrafanaKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _GrafanaKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _GrafanaKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GrafanaKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _GrafanaKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GrafanaKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _GrafanaKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _GrafanaKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _GrafanaKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _GrafanaKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _GrafanaKubernetesCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _GrafanaKubernetesCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _GrafanaKubernetesCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/deploy/kubernetes/grafanakubernetes/service/command.proto",
}
