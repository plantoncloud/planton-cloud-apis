// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/deploy/kubernetes/rediskubernetes/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/deploy/kubernetes/rediskubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RedisKubernetesQueryController_Get_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.rediskubernetes.service.RedisKubernetesQueryController/get"
	RedisKubernetesQueryController_GetPassword_FullMethodName = "/cloud.planton.apis.code2cloud.v1.deploy.kubernetes.rediskubernetes.service.RedisKubernetesQueryController/getPassword"
)

// RedisKubernetesQueryControllerClient is the client API for RedisKubernetesQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisKubernetesQueryControllerClient interface {
	// look up redis-kubernetes using redis-kubernetes id
	Get(ctx context.Context, in *model.RedisKubernetesId, opts ...grpc.CallOption) (*model.RedisKubernetes, error)
	// look up redis-kubernetes sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model.RedisKubernetesId, opts ...grpc.CallOption) (*model.RedisKubernetesPassword, error)
}

type redisKubernetesQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisKubernetesQueryControllerClient(cc grpc.ClientConnInterface) RedisKubernetesQueryControllerClient {
	return &redisKubernetesQueryControllerClient{cc}
}

func (c *redisKubernetesQueryControllerClient) Get(ctx context.Context, in *model.RedisKubernetesId, opts ...grpc.CallOption) (*model.RedisKubernetes, error) {
	out := new(model.RedisKubernetes)
	err := c.cc.Invoke(ctx, RedisKubernetesQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisKubernetesQueryControllerClient) GetPassword(ctx context.Context, in *model.RedisKubernetesId, opts ...grpc.CallOption) (*model.RedisKubernetesPassword, error) {
	out := new(model.RedisKubernetesPassword)
	err := c.cc.Invoke(ctx, RedisKubernetesQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisKubernetesQueryControllerServer is the server API for RedisKubernetesQueryController service.
// All implementations should embed UnimplementedRedisKubernetesQueryControllerServer
// for forward compatibility
type RedisKubernetesQueryControllerServer interface {
	// look up redis-kubernetes using redis-kubernetes id
	Get(context.Context, *model.RedisKubernetesId) (*model.RedisKubernetes, error)
	// look up redis-kubernetes sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model.RedisKubernetesId) (*model.RedisKubernetesPassword, error)
}

// UnimplementedRedisKubernetesQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedRedisKubernetesQueryControllerServer struct {
}

func (UnimplementedRedisKubernetesQueryControllerServer) Get(context.Context, *model.RedisKubernetesId) (*model.RedisKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisKubernetesQueryControllerServer) GetPassword(context.Context, *model.RedisKubernetesId) (*model.RedisKubernetesPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}

// UnsafeRedisKubernetesQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisKubernetesQueryControllerServer will
// result in compilation errors.
type UnsafeRedisKubernetesQueryControllerServer interface {
	mustEmbedUnimplementedRedisKubernetesQueryControllerServer()
}

func RegisterRedisKubernetesQueryControllerServer(s grpc.ServiceRegistrar, srv RedisKubernetesQueryControllerServer) {
	s.RegisterService(&RedisKubernetesQueryController_ServiceDesc, srv)
}

func _RedisKubernetesQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.RedisKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisKubernetesQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisKubernetesQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisKubernetesQueryControllerServer).Get(ctx, req.(*model.RedisKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisKubernetesQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.RedisKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisKubernetesQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisKubernetesQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisKubernetesQueryControllerServer).GetPassword(ctx, req.(*model.RedisKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisKubernetesQueryController_ServiceDesc is the grpc.ServiceDesc for RedisKubernetesQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisKubernetesQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.deploy.kubernetes.rediskubernetes.service.RedisKubernetesQueryController",
	HandlerType: (*RedisKubernetesQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _RedisKubernetesQueryController_Get_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _RedisKubernetesQueryController_GetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/deploy/kubernetes/rediskubernetes/service/query.proto",
}
