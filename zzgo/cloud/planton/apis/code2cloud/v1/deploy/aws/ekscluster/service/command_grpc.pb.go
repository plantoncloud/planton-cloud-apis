// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/code2cloud/v1/deploy/aws/ekscluster/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/deploy/aws/ekscluster/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EksClusterCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/previewCreate"
	EksClusterCommandController_Create_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/create"
	EksClusterCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/previewUpdate"
	EksClusterCommandController_Update_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/update"
	EksClusterCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/previewDelete"
	EksClusterCommandController_Delete_FullMethodName         = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/delete"
	EksClusterCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/previewRestore"
	EksClusterCommandController_Restore_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/restore"
	EksClusterCommandController_Pause_FullMethodName          = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/pause"
	EksClusterCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/unpause"
	EksClusterCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/previewRefresh"
	EksClusterCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController/refresh"
)

// EksClusterCommandControllerClient is the client API for EksClusterCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EksClusterCommandControllerClient interface {
	// preview create a eks-cluster.
	PreviewCreate(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error)
	// create a eks-cluster.
	Create(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error)
	// preview updating an existing eks-cluster.
	PreviewUpdate(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error)
	// update an existing eks-cluster.
	Update(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error)
	// preview deleting a eks-cluster.
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error)
	// delete a eks-cluster.
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error)
	// preview restoring a deleted eks-cluster.
	PreviewRestore(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error)
	// restore a deleted eks-cluster.
	Restore(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error)
	// pause a eks-cluster.
	// a eks-cluster is paused by setting the number of nodes in each node pool of the eks-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the eks-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a eks-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error)
	// unpause a eks-cluster.
	// a eks-cluster is resumed by setting the number of nodes in each node pool of the eks-cluster to the
	// values configured for the eks-cluster.
	// when the eks-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error)
	// preview refresh a eks-cluster that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error)
	// refresh a eks-cluster that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error)
}

type eksClusterCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEksClusterCommandControllerClient(cc grpc.ClientConnInterface) EksClusterCommandControllerClient {
	return &eksClusterCommandControllerClient{cc}
}

func (c *eksClusterCommandControllerClient) PreviewCreate(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Create(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Update(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) PreviewRestore(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Restore(ctx context.Context, in *model.EksCluster, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eksClusterCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.EksCluster, error) {
	out := new(model.EksCluster)
	err := c.cc.Invoke(ctx, EksClusterCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EksClusterCommandControllerServer is the server API for EksClusterCommandController service.
// All implementations should embed UnimplementedEksClusterCommandControllerServer
// for forward compatibility
type EksClusterCommandControllerServer interface {
	// preview create a eks-cluster.
	PreviewCreate(context.Context, *model.EksCluster) (*model.EksCluster, error)
	// create a eks-cluster.
	Create(context.Context, *model.EksCluster) (*model.EksCluster, error)
	// preview updating an existing eks-cluster.
	PreviewUpdate(context.Context, *model.EksCluster) (*model.EksCluster, error)
	// update an existing eks-cluster.
	Update(context.Context, *model.EksCluster) (*model.EksCluster, error)
	// preview deleting a eks-cluster.
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.EksCluster, error)
	// delete a eks-cluster.
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.EksCluster, error)
	// preview restoring a deleted eks-cluster.
	PreviewRestore(context.Context, *model.EksCluster) (*model.EksCluster, error)
	// restore a deleted eks-cluster.
	Restore(context.Context, *model.EksCluster) (*model.EksCluster, error)
	// pause a eks-cluster.
	// a eks-cluster is paused by setting the number of nodes in each node pool of the eks-cluster to zero.
	// microservice, database and kafka cluster workload pods will be deleted as there wont be any nodes to run on.
	// when the eks-cluster is resumed, the pods come back up online automatically when nodes become available.
	// when a eks-cluster is paused, cloud provider will not charge for the compute resources(cpu & memory) but
	// may continue to charge a modest operational fee for the cluster.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.EksCluster, error)
	// unpause a eks-cluster.
	// a eks-cluster is resumed by setting the number of nodes in each node pool of the eks-cluster to the
	// values configured for the eks-cluster.
	// when the eks-cluster is resumed, the pods come back up online automatically when nodes become available.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.EksCluster, error)
	// preview refresh a eks-cluster that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.EksCluster, error)
	// refresh a eks-cluster that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.EksCluster, error)
}

// UnimplementedEksClusterCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEksClusterCommandControllerServer struct {
}

func (UnimplementedEksClusterCommandControllerServer) PreviewCreate(context.Context, *model.EksCluster) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Create(context.Context, *model.EksCluster) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) PreviewUpdate(context.Context, *model.EksCluster) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Update(context.Context, *model.EksCluster) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) PreviewRestore(context.Context, *model.EksCluster) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Restore(context.Context, *model.EksCluster) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedEksClusterCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.EksCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeEksClusterCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EksClusterCommandControllerServer will
// result in compilation errors.
type UnsafeEksClusterCommandControllerServer interface {
	mustEmbedUnimplementedEksClusterCommandControllerServer()
}

func RegisterEksClusterCommandControllerServer(s grpc.ServiceRegistrar, srv EksClusterCommandControllerServer) {
	s.RegisterService(&EksClusterCommandController_ServiceDesc, srv)
}

func _EksClusterCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).PreviewCreate(ctx, req.(*model.EksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Create(ctx, req.(*model.EksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).PreviewUpdate(ctx, req.(*model.EksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Update(ctx, req.(*model.EksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).PreviewRestore(ctx, req.(*model.EksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EksCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Restore(ctx, req.(*model.EksCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EksClusterCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EksClusterCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EksClusterCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EksClusterCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EksClusterCommandController_ServiceDesc is the grpc.ServiceDesc for EksClusterCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EksClusterCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.code2cloud.v1.deploy.aws.ekscluster.service.EksClusterCommandController",
	HandlerType: (*EksClusterCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _EksClusterCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _EksClusterCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _EksClusterCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EksClusterCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _EksClusterCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EksClusterCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _EksClusterCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _EksClusterCommandController_Restore_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _EksClusterCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _EksClusterCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _EksClusterCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _EksClusterCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/code2cloud/v1/deploy/aws/ekscluster/service/command.proto",
}
