// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/cost/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/cost/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CostAllocationCommandController_Create_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.cost.service.CostAllocationCommandController/create"
)

// CostAllocationCommandControllerClient is the client API for CostAllocationCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostAllocationCommandControllerClient interface {
	// create cost allocations
	Create(ctx context.Context, in *model.CostAllocations, opts ...grpc.CallOption) (*model.CostAllocations, error)
}

type costAllocationCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCostAllocationCommandControllerClient(cc grpc.ClientConnInterface) CostAllocationCommandControllerClient {
	return &costAllocationCommandControllerClient{cc}
}

func (c *costAllocationCommandControllerClient) Create(ctx context.Context, in *model.CostAllocations, opts ...grpc.CallOption) (*model.CostAllocations, error) {
	out := new(model.CostAllocations)
	err := c.cc.Invoke(ctx, CostAllocationCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostAllocationCommandControllerServer is the server API for CostAllocationCommandController service.
// All implementations should embed UnimplementedCostAllocationCommandControllerServer
// for forward compatibility
type CostAllocationCommandControllerServer interface {
	// create cost allocations
	Create(context.Context, *model.CostAllocations) (*model.CostAllocations, error)
}

// UnimplementedCostAllocationCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCostAllocationCommandControllerServer struct {
}

func (UnimplementedCostAllocationCommandControllerServer) Create(context.Context, *model.CostAllocations) (*model.CostAllocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeCostAllocationCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostAllocationCommandControllerServer will
// result in compilation errors.
type UnsafeCostAllocationCommandControllerServer interface {
	mustEmbedUnimplementedCostAllocationCommandControllerServer()
}

func RegisterCostAllocationCommandControllerServer(s grpc.ServiceRegistrar, srv CostAllocationCommandControllerServer) {
	s.RegisterService(&CostAllocationCommandController_ServiceDesc, srv)
}

func _CostAllocationCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CostAllocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostAllocationCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostAllocationCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostAllocationCommandControllerServer).Create(ctx, req.(*model.CostAllocations))
	}
	return interceptor(ctx, in, info, handler)
}

// CostAllocationCommandController_ServiceDesc is the grpc.ServiceDesc for CostAllocationCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostAllocationCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.cost.service.CostAllocationCommandController",
	HandlerType: (*CostAllocationCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CostAllocationCommandController_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/cost/service/command.proto",
}
