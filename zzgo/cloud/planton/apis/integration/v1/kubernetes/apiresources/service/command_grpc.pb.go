// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/apiresources/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesApiResourcesCommandController_Update_FullMethodName               = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesCommandController/update"
	KubernetesApiResourcesCommandController_Delete_FullMethodName               = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesCommandController/delete"
	KubernetesApiResourcesCommandController_ExecIntoPodContainer_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesCommandController/execIntoPodContainer"
)

// KubernetesApiResourcesCommandControllerClient is the client API for KubernetesApiResourcesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesApiResourcesCommandControllerClient interface {
	Update(ctx context.Context, in *model.UpdateKubernetesApiResourceInput, opts ...grpc.CallOption) (*model.KubernetesApiResource, error)
	Delete(ctx context.Context, in *model.DeleteKubernetesApiResourceInput, opts ...grpc.CallOption) (*model.KubernetesApiResource, error)
	// mimic kubectl exec
	ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (KubernetesApiResourcesCommandController_ExecIntoPodContainerClient, error)
}

type kubernetesApiResourcesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesApiResourcesCommandControllerClient(cc grpc.ClientConnInterface) KubernetesApiResourcesCommandControllerClient {
	return &kubernetesApiResourcesCommandControllerClient{cc}
}

func (c *kubernetesApiResourcesCommandControllerClient) Update(ctx context.Context, in *model.UpdateKubernetesApiResourceInput, opts ...grpc.CallOption) (*model.KubernetesApiResource, error) {
	out := new(model.KubernetesApiResource)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesCommandControllerClient) Delete(ctx context.Context, in *model.DeleteKubernetesApiResourceInput, opts ...grpc.CallOption) (*model.KubernetesApiResource, error) {
	out := new(model.KubernetesApiResource)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesCommandControllerClient) ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (KubernetesApiResourcesCommandController_ExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesApiResourcesCommandController_ServiceDesc.Streams[0], KubernetesApiResourcesCommandController_ExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesApiResourcesCommandControllerExecIntoPodContainerClient{stream}
	return x, nil
}

type KubernetesApiResourcesCommandController_ExecIntoPodContainerClient interface {
	Send(*model.ExecIntoPodContainerInput) error
	Recv() (*model.ExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type kubernetesApiResourcesCommandControllerExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *kubernetesApiResourcesCommandControllerExecIntoPodContainerClient) Send(m *model.ExecIntoPodContainerInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kubernetesApiResourcesCommandControllerExecIntoPodContainerClient) Recv() (*model.ExecIntoPodContainerResponse, error) {
	m := new(model.ExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesApiResourcesCommandControllerServer is the server API for KubernetesApiResourcesCommandController service.
// All implementations should embed UnimplementedKubernetesApiResourcesCommandControllerServer
// for forward compatibility
type KubernetesApiResourcesCommandControllerServer interface {
	Update(context.Context, *model.UpdateKubernetesApiResourceInput) (*model.KubernetesApiResource, error)
	Delete(context.Context, *model.DeleteKubernetesApiResourceInput) (*model.KubernetesApiResource, error)
	// mimic kubectl exec
	ExecIntoPodContainer(KubernetesApiResourcesCommandController_ExecIntoPodContainerServer) error
}

// UnimplementedKubernetesApiResourcesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubernetesApiResourcesCommandControllerServer struct {
}

func (UnimplementedKubernetesApiResourcesCommandControllerServer) Update(context.Context, *model.UpdateKubernetesApiResourceInput) (*model.KubernetesApiResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKubernetesApiResourcesCommandControllerServer) Delete(context.Context, *model.DeleteKubernetesApiResourceInput) (*model.KubernetesApiResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKubernetesApiResourcesCommandControllerServer) ExecIntoPodContainer(KubernetesApiResourcesCommandController_ExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecIntoPodContainer not implemented")
}

// UnsafeKubernetesApiResourcesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesApiResourcesCommandControllerServer will
// result in compilation errors.
type UnsafeKubernetesApiResourcesCommandControllerServer interface {
	mustEmbedUnimplementedKubernetesApiResourcesCommandControllerServer()
}

func RegisterKubernetesApiResourcesCommandControllerServer(s grpc.ServiceRegistrar, srv KubernetesApiResourcesCommandControllerServer) {
	s.RegisterService(&KubernetesApiResourcesCommandController_ServiceDesc, srv)
}

func _KubernetesApiResourcesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateKubernetesApiResourceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesCommandControllerServer).Update(ctx, req.(*model.UpdateKubernetesApiResourceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteKubernetesApiResourceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesCommandControllerServer).Delete(ctx, req.(*model.DeleteKubernetesApiResourceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesCommandController_ExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesApiResourcesCommandControllerServer).ExecIntoPodContainer(&kubernetesApiResourcesCommandControllerExecIntoPodContainerServer{stream})
}

type KubernetesApiResourcesCommandController_ExecIntoPodContainerServer interface {
	Send(*model.ExecIntoPodContainerResponse) error
	Recv() (*model.ExecIntoPodContainerInput, error)
	grpc.ServerStream
}

type kubernetesApiResourcesCommandControllerExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *kubernetesApiResourcesCommandControllerExecIntoPodContainerServer) Send(m *model.ExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kubernetesApiResourcesCommandControllerExecIntoPodContainerServer) Recv() (*model.ExecIntoPodContainerInput, error) {
	m := new(model.ExecIntoPodContainerInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesApiResourcesCommandController_ServiceDesc is the grpc.ServiceDesc for KubernetesApiResourcesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesApiResourcesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesCommandController",
	HandlerType: (*KubernetesApiResourcesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _KubernetesApiResourcesCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KubernetesApiResourcesCommandController_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execIntoPodContainer",
			Handler:       _KubernetesApiResourcesCommandController_ExecIntoPodContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/apiresources/service/command.proto",
}
