// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/apiresources/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesObjectsCommandController_Update_FullMethodName               = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsCommandController/update"
	KubernetesObjectsCommandController_Delete_FullMethodName               = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsCommandController/delete"
	KubernetesObjectsCommandController_ExecIntoPodContainer_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsCommandController/execIntoPodContainer"
)

// KubernetesObjectsCommandControllerClient is the client API for KubernetesObjectsCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesObjectsCommandControllerClient interface {
	Update(ctx context.Context, in *model.UpdateKubernetesObjectInput, opts ...grpc.CallOption) (*model.KubernetesObject, error)
	Delete(ctx context.Context, in *model.DeleteKubernetesObjectInput, opts ...grpc.CallOption) (*model.KubernetesObject, error)
	// mimic kubectl exec
	ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (KubernetesObjectsCommandController_ExecIntoPodContainerClient, error)
}

type kubernetesObjectsCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesObjectsCommandControllerClient(cc grpc.ClientConnInterface) KubernetesObjectsCommandControllerClient {
	return &kubernetesObjectsCommandControllerClient{cc}
}

func (c *kubernetesObjectsCommandControllerClient) Update(ctx context.Context, in *model.UpdateKubernetesObjectInput, opts ...grpc.CallOption) (*model.KubernetesObject, error) {
	out := new(model.KubernetesObject)
	err := c.cc.Invoke(ctx, KubernetesObjectsCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectsCommandControllerClient) Delete(ctx context.Context, in *model.DeleteKubernetesObjectInput, opts ...grpc.CallOption) (*model.KubernetesObject, error) {
	out := new(model.KubernetesObject)
	err := c.cc.Invoke(ctx, KubernetesObjectsCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectsCommandControllerClient) ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (KubernetesObjectsCommandController_ExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesObjectsCommandController_ServiceDesc.Streams[0], KubernetesObjectsCommandController_ExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesObjectsCommandControllerExecIntoPodContainerClient{stream}
	return x, nil
}

type KubernetesObjectsCommandController_ExecIntoPodContainerClient interface {
	Send(*model.ExecIntoPodContainerInput) error
	Recv() (*model.ExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type kubernetesObjectsCommandControllerExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *kubernetesObjectsCommandControllerExecIntoPodContainerClient) Send(m *model.ExecIntoPodContainerInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kubernetesObjectsCommandControllerExecIntoPodContainerClient) Recv() (*model.ExecIntoPodContainerResponse, error) {
	m := new(model.ExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesObjectsCommandControllerServer is the server API for KubernetesObjectsCommandController service.
// All implementations should embed UnimplementedKubernetesObjectsCommandControllerServer
// for forward compatibility
type KubernetesObjectsCommandControllerServer interface {
	Update(context.Context, *model.UpdateKubernetesObjectInput) (*model.KubernetesObject, error)
	Delete(context.Context, *model.DeleteKubernetesObjectInput) (*model.KubernetesObject, error)
	// mimic kubectl exec
	ExecIntoPodContainer(KubernetesObjectsCommandController_ExecIntoPodContainerServer) error
}

// UnimplementedKubernetesObjectsCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubernetesObjectsCommandControllerServer struct {
}

func (UnimplementedKubernetesObjectsCommandControllerServer) Update(context.Context, *model.UpdateKubernetesObjectInput) (*model.KubernetesObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKubernetesObjectsCommandControllerServer) Delete(context.Context, *model.DeleteKubernetesObjectInput) (*model.KubernetesObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKubernetesObjectsCommandControllerServer) ExecIntoPodContainer(KubernetesObjectsCommandController_ExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecIntoPodContainer not implemented")
}

// UnsafeKubernetesObjectsCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesObjectsCommandControllerServer will
// result in compilation errors.
type UnsafeKubernetesObjectsCommandControllerServer interface {
	mustEmbedUnimplementedKubernetesObjectsCommandControllerServer()
}

func RegisterKubernetesObjectsCommandControllerServer(s grpc.ServiceRegistrar, srv KubernetesObjectsCommandControllerServer) {
	s.RegisterService(&KubernetesObjectsCommandController_ServiceDesc, srv)
}

func _KubernetesObjectsCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateKubernetesObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectsCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectsCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectsCommandControllerServer).Update(ctx, req.(*model.UpdateKubernetesObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectsCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteKubernetesObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectsCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectsCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectsCommandControllerServer).Delete(ctx, req.(*model.DeleteKubernetesObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectsCommandController_ExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesObjectsCommandControllerServer).ExecIntoPodContainer(&kubernetesObjectsCommandControllerExecIntoPodContainerServer{stream})
}

type KubernetesObjectsCommandController_ExecIntoPodContainerServer interface {
	Send(*model.ExecIntoPodContainerResponse) error
	Recv() (*model.ExecIntoPodContainerInput, error)
	grpc.ServerStream
}

type kubernetesObjectsCommandControllerExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *kubernetesObjectsCommandControllerExecIntoPodContainerServer) Send(m *model.ExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kubernetesObjectsCommandControllerExecIntoPodContainerServer) Recv() (*model.ExecIntoPodContainerInput, error) {
	m := new(model.ExecIntoPodContainerInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesObjectsCommandController_ServiceDesc is the grpc.ServiceDesc for KubernetesObjectsCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesObjectsCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsCommandController",
	HandlerType: (*KubernetesObjectsCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _KubernetesObjectsCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KubernetesObjectsCommandController_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execIntoPodContainer",
			Handler:       _KubernetesObjectsCommandController_ExecIntoPodContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/apiresources/service/command.proto",
}
