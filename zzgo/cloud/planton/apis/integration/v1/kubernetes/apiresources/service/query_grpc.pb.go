// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/apiresources/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/getCertificateByNamespaceByName"
	KubernetesApiResourcesQueryController_FindCertificates_FullMethodName                = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/findCertificates"
	KubernetesApiResourcesQueryController_StreamByNamespace_FullMethodName               = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/streamByNamespace"
	KubernetesApiResourcesQueryController_GetKubernetesApiResource_FullMethodName        = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/getKubernetesApiResource"
	KubernetesApiResourcesQueryController_ListPods_FullMethodName                        = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/listPods"
	KubernetesApiResourcesQueryController_StreamPodLogs_FullMethodName                   = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/streamPodLogs"
)

// KubernetesApiResourcesQueryControllerClient is the client API for KubernetesApiResourcesQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesApiResourcesQueryControllerClient interface {
	GetCertificateByNamespaceByName(ctx context.Context, in *model.GetCertificateByNamespaceByNameQueryInput, opts ...grpc.CallOption) (*model.Certificate, error)
	FindCertificates(ctx context.Context, in *model.FindCertificatesQueryInput, opts ...grpc.CallOption) (*model.Certificates, error)
	// stream all kubernetes api-resources corresponding to the api-resource on planton-cloud.
	StreamByNamespace(ctx context.Context, in *model.StreamKubernetesApiResourcesByNamespaceInput, opts ...grpc.CallOption) (KubernetesApiResourcesQueryController_StreamByNamespaceClient, error)
	// get detailed object of a kubernetes api-resource
	GetKubernetesApiResource(ctx context.Context, in *model.LookupKubernetesApiResourceInput, opts ...grpc.CallOption) (*model.KubernetesApiResourceDetail, error)
	// list pods from a namespace.
	ListPods(ctx context.Context, in *model.ListPodsInput, opts ...grpc.CallOption) (*model.Pods, error)
	// stream logs of a pod/s corresponding to the api-resource on planton-cloud based
	// on specified options.
	StreamPodLogs(ctx context.Context, in *model.StreamPodLogsInput, opts ...grpc.CallOption) (KubernetesApiResourcesQueryController_StreamPodLogsClient, error)
}

type kubernetesApiResourcesQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesApiResourcesQueryControllerClient(cc grpc.ClientConnInterface) KubernetesApiResourcesQueryControllerClient {
	return &kubernetesApiResourcesQueryControllerClient{cc}
}

func (c *kubernetesApiResourcesQueryControllerClient) GetCertificateByNamespaceByName(ctx context.Context, in *model.GetCertificateByNamespaceByNameQueryInput, opts ...grpc.CallOption) (*model.Certificate, error) {
	out := new(model.Certificate)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesQueryControllerClient) FindCertificates(ctx context.Context, in *model.FindCertificatesQueryInput, opts ...grpc.CallOption) (*model.Certificates, error) {
	out := new(model.Certificates)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesQueryController_FindCertificates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesQueryControllerClient) StreamByNamespace(ctx context.Context, in *model.StreamKubernetesApiResourcesByNamespaceInput, opts ...grpc.CallOption) (KubernetesApiResourcesQueryController_StreamByNamespaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesApiResourcesQueryController_ServiceDesc.Streams[0], KubernetesApiResourcesQueryController_StreamByNamespace_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesApiResourcesQueryControllerStreamByNamespaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubernetesApiResourcesQueryController_StreamByNamespaceClient interface {
	Recv() (*model.KubernetesApiResources, error)
	grpc.ClientStream
}

type kubernetesApiResourcesQueryControllerStreamByNamespaceClient struct {
	grpc.ClientStream
}

func (x *kubernetesApiResourcesQueryControllerStreamByNamespaceClient) Recv() (*model.KubernetesApiResources, error) {
	m := new(model.KubernetesApiResources)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kubernetesApiResourcesQueryControllerClient) GetKubernetesApiResource(ctx context.Context, in *model.LookupKubernetesApiResourceInput, opts ...grpc.CallOption) (*model.KubernetesApiResourceDetail, error) {
	out := new(model.KubernetesApiResourceDetail)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesQueryController_GetKubernetesApiResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesQueryControllerClient) ListPods(ctx context.Context, in *model.ListPodsInput, opts ...grpc.CallOption) (*model.Pods, error) {
	out := new(model.Pods)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesQueryController_ListPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesQueryControllerClient) StreamPodLogs(ctx context.Context, in *model.StreamPodLogsInput, opts ...grpc.CallOption) (KubernetesApiResourcesQueryController_StreamPodLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesApiResourcesQueryController_ServiceDesc.Streams[1], KubernetesApiResourcesQueryController_StreamPodLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesApiResourcesQueryControllerStreamPodLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubernetesApiResourcesQueryController_StreamPodLogsClient interface {
	Recv() (*model.PodLogLine, error)
	grpc.ClientStream
}

type kubernetesApiResourcesQueryControllerStreamPodLogsClient struct {
	grpc.ClientStream
}

func (x *kubernetesApiResourcesQueryControllerStreamPodLogsClient) Recv() (*model.PodLogLine, error) {
	m := new(model.PodLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesApiResourcesQueryControllerServer is the server API for KubernetesApiResourcesQueryController service.
// All implementations should embed UnimplementedKubernetesApiResourcesQueryControllerServer
// for forward compatibility
type KubernetesApiResourcesQueryControllerServer interface {
	GetCertificateByNamespaceByName(context.Context, *model.GetCertificateByNamespaceByNameQueryInput) (*model.Certificate, error)
	FindCertificates(context.Context, *model.FindCertificatesQueryInput) (*model.Certificates, error)
	// stream all kubernetes api-resources corresponding to the api-resource on planton-cloud.
	StreamByNamespace(*model.StreamKubernetesApiResourcesByNamespaceInput, KubernetesApiResourcesQueryController_StreamByNamespaceServer) error
	// get detailed object of a kubernetes api-resource
	GetKubernetesApiResource(context.Context, *model.LookupKubernetesApiResourceInput) (*model.KubernetesApiResourceDetail, error)
	// list pods from a namespace.
	ListPods(context.Context, *model.ListPodsInput) (*model.Pods, error)
	// stream logs of a pod/s corresponding to the api-resource on planton-cloud based
	// on specified options.
	StreamPodLogs(*model.StreamPodLogsInput, KubernetesApiResourcesQueryController_StreamPodLogsServer) error
}

// UnimplementedKubernetesApiResourcesQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubernetesApiResourcesQueryControllerServer struct {
}

func (UnimplementedKubernetesApiResourcesQueryControllerServer) GetCertificateByNamespaceByName(context.Context, *model.GetCertificateByNamespaceByNameQueryInput) (*model.Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByNamespaceByName not implemented")
}
func (UnimplementedKubernetesApiResourcesQueryControllerServer) FindCertificates(context.Context, *model.FindCertificatesQueryInput) (*model.Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCertificates not implemented")
}
func (UnimplementedKubernetesApiResourcesQueryControllerServer) StreamByNamespace(*model.StreamKubernetesApiResourcesByNamespaceInput, KubernetesApiResourcesQueryController_StreamByNamespaceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamByNamespace not implemented")
}
func (UnimplementedKubernetesApiResourcesQueryControllerServer) GetKubernetesApiResource(context.Context, *model.LookupKubernetesApiResourceInput) (*model.KubernetesApiResourceDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesApiResource not implemented")
}
func (UnimplementedKubernetesApiResourcesQueryControllerServer) ListPods(context.Context, *model.ListPodsInput) (*model.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedKubernetesApiResourcesQueryControllerServer) StreamPodLogs(*model.StreamPodLogsInput, KubernetesApiResourcesQueryController_StreamPodLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodLogs not implemented")
}

// UnsafeKubernetesApiResourcesQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesApiResourcesQueryControllerServer will
// result in compilation errors.
type UnsafeKubernetesApiResourcesQueryControllerServer interface {
	mustEmbedUnimplementedKubernetesApiResourcesQueryControllerServer()
}

func RegisterKubernetesApiResourcesQueryControllerServer(s grpc.ServiceRegistrar, srv KubernetesApiResourcesQueryControllerServer) {
	s.RegisterService(&KubernetesApiResourcesQueryController_ServiceDesc, srv)
}

func _KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetCertificateByNamespaceByNameQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesQueryControllerServer).GetCertificateByNamespaceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesQueryControllerServer).GetCertificateByNamespaceByName(ctx, req.(*model.GetCertificateByNamespaceByNameQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesQueryController_FindCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindCertificatesQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesQueryControllerServer).FindCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesQueryController_FindCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesQueryControllerServer).FindCertificates(ctx, req.(*model.FindCertificatesQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesQueryController_StreamByNamespace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubernetesApiResourcesByNamespaceInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubernetesApiResourcesQueryControllerServer).StreamByNamespace(m, &kubernetesApiResourcesQueryControllerStreamByNamespaceServer{stream})
}

type KubernetesApiResourcesQueryController_StreamByNamespaceServer interface {
	Send(*model.KubernetesApiResources) error
	grpc.ServerStream
}

type kubernetesApiResourcesQueryControllerStreamByNamespaceServer struct {
	grpc.ServerStream
}

func (x *kubernetesApiResourcesQueryControllerStreamByNamespaceServer) Send(m *model.KubernetesApiResources) error {
	return x.ServerStream.SendMsg(m)
}

func _KubernetesApiResourcesQueryController_GetKubernetesApiResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LookupKubernetesApiResourceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesQueryControllerServer).GetKubernetesApiResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesQueryController_GetKubernetesApiResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesQueryControllerServer).GetKubernetesApiResource(ctx, req.(*model.LookupKubernetesApiResourceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesQueryController_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ListPodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesQueryControllerServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesQueryController_ListPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesQueryControllerServer).ListPods(ctx, req.(*model.ListPodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesQueryController_StreamPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamPodLogsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubernetesApiResourcesQueryControllerServer).StreamPodLogs(m, &kubernetesApiResourcesQueryControllerStreamPodLogsServer{stream})
}

type KubernetesApiResourcesQueryController_StreamPodLogsServer interface {
	Send(*model.PodLogLine) error
	grpc.ServerStream
}

type kubernetesApiResourcesQueryControllerStreamPodLogsServer struct {
	grpc.ServerStream
}

func (x *kubernetesApiResourcesQueryControllerStreamPodLogsServer) Send(m *model.PodLogLine) error {
	return x.ServerStream.SendMsg(m)
}

// KubernetesApiResourcesQueryController_ServiceDesc is the grpc.ServiceDesc for KubernetesApiResourcesQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesApiResourcesQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController",
	HandlerType: (*KubernetesApiResourcesQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCertificateByNamespaceByName",
			Handler:    _KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_Handler,
		},
		{
			MethodName: "findCertificates",
			Handler:    _KubernetesApiResourcesQueryController_FindCertificates_Handler,
		},
		{
			MethodName: "getKubernetesApiResource",
			Handler:    _KubernetesApiResourcesQueryController_GetKubernetesApiResource_Handler,
		},
		{
			MethodName: "listPods",
			Handler:    _KubernetesApiResourcesQueryController_ListPods_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamByNamespace",
			Handler:       _KubernetesApiResourcesQueryController_StreamByNamespace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamPodLogs",
			Handler:       _KubernetesApiResourcesQueryController_StreamPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/apiresources/service/query.proto",
}
