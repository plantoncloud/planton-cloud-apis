// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/apiresources/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/getCertificateByNamespaceByName"
	KubernetesApiResourcesQueryController_FindCertificates_FullMethodName                = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController/findCertificates"
)

// KubernetesApiResourcesQueryControllerClient is the client API for KubernetesApiResourcesQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesApiResourcesQueryControllerClient interface {
	GetCertificateByNamespaceByName(ctx context.Context, in *model.GetCertificateByNamespaceByNameQueryInput, opts ...grpc.CallOption) (*model.Certificate, error)
	FindCertificates(ctx context.Context, in *model.FindCertificatesQueryInput, opts ...grpc.CallOption) (*model.Certificates, error)
}

type kubernetesApiResourcesQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesApiResourcesQueryControllerClient(cc grpc.ClientConnInterface) KubernetesApiResourcesQueryControllerClient {
	return &kubernetesApiResourcesQueryControllerClient{cc}
}

func (c *kubernetesApiResourcesQueryControllerClient) GetCertificateByNamespaceByName(ctx context.Context, in *model.GetCertificateByNamespaceByNameQueryInput, opts ...grpc.CallOption) (*model.Certificate, error) {
	out := new(model.Certificate)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesApiResourcesQueryControllerClient) FindCertificates(ctx context.Context, in *model.FindCertificatesQueryInput, opts ...grpc.CallOption) (*model.Certificates, error) {
	out := new(model.Certificates)
	err := c.cc.Invoke(ctx, KubernetesApiResourcesQueryController_FindCertificates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubernetesApiResourcesQueryControllerServer is the server API for KubernetesApiResourcesQueryController service.
// All implementations should embed UnimplementedKubernetesApiResourcesQueryControllerServer
// for forward compatibility
type KubernetesApiResourcesQueryControllerServer interface {
	GetCertificateByNamespaceByName(context.Context, *model.GetCertificateByNamespaceByNameQueryInput) (*model.Certificate, error)
	FindCertificates(context.Context, *model.FindCertificatesQueryInput) (*model.Certificates, error)
}

// UnimplementedKubernetesApiResourcesQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubernetesApiResourcesQueryControllerServer struct {
}

func (UnimplementedKubernetesApiResourcesQueryControllerServer) GetCertificateByNamespaceByName(context.Context, *model.GetCertificateByNamespaceByNameQueryInput) (*model.Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByNamespaceByName not implemented")
}
func (UnimplementedKubernetesApiResourcesQueryControllerServer) FindCertificates(context.Context, *model.FindCertificatesQueryInput) (*model.Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCertificates not implemented")
}

// UnsafeKubernetesApiResourcesQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesApiResourcesQueryControllerServer will
// result in compilation errors.
type UnsafeKubernetesApiResourcesQueryControllerServer interface {
	mustEmbedUnimplementedKubernetesApiResourcesQueryControllerServer()
}

func RegisterKubernetesApiResourcesQueryControllerServer(s grpc.ServiceRegistrar, srv KubernetesApiResourcesQueryControllerServer) {
	s.RegisterService(&KubernetesApiResourcesQueryController_ServiceDesc, srv)
}

func _KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetCertificateByNamespaceByNameQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesQueryControllerServer).GetCertificateByNamespaceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesQueryControllerServer).GetCertificateByNamespaceByName(ctx, req.(*model.GetCertificateByNamespaceByNameQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesApiResourcesQueryController_FindCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindCertificatesQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesApiResourcesQueryControllerServer).FindCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesApiResourcesQueryController_FindCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesApiResourcesQueryControllerServer).FindCertificates(ctx, req.(*model.FindCertificatesQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KubernetesApiResourcesQueryController_ServiceDesc is the grpc.ServiceDesc for KubernetesApiResourcesQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesApiResourcesQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesApiResourcesQueryController",
	HandlerType: (*KubernetesApiResourcesQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCertificateByNamespaceByName",
			Handler:    _KubernetesApiResourcesQueryController_GetCertificateByNamespaceByName_Handler,
		},
		{
			MethodName: "findCertificates",
			Handler:    _KubernetesApiResourcesQueryController_FindCertificates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/apiresources/service/query.proto",
}
