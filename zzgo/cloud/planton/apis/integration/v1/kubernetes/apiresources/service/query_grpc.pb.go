// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/apiresources/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesObjectsQueryController_StreamByNamespace_FullMethodName   = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsQueryController/streamByNamespace"
	KubernetesObjectsQueryController_GetKubernetesObject_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsQueryController/getKubernetesObject"
	KubernetesObjectsQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsQueryController/findPods"
	KubernetesObjectsQueryController_StreamPodLogs_FullMethodName       = "/cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsQueryController/streamPodLogs"
)

// KubernetesObjectsQueryControllerClient is the client API for KubernetesObjectsQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesObjectsQueryControllerClient interface {
	// stream all kubernetes objects corresponding to a planton-cloud api-resource.
	StreamByNamespace(ctx context.Context, in *model.StreamKubernetesObjectsByNamespaceInput, opts ...grpc.CallOption) (KubernetesObjectsQueryController_StreamByNamespaceClient, error)
	// get detailed object of a kubernetes object
	GetKubernetesObject(ctx context.Context, in *model.GetKubernetesObjectInput, opts ...grpc.CallOption) (*model.KubernetesObjectDetail, error)
	// find list of pods from a namespace.
	FindPods(ctx context.Context, in *model.FindPodsInput, opts ...grpc.CallOption) (*model.Pods, error)
	// stream logs of a pod/s corresponding to a planton-cloud api-resource based
	// on specified options.
	StreamPodLogs(ctx context.Context, in *model.StreamPodLogsInput, opts ...grpc.CallOption) (KubernetesObjectsQueryController_StreamPodLogsClient, error)
}

type kubernetesObjectsQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesObjectsQueryControllerClient(cc grpc.ClientConnInterface) KubernetesObjectsQueryControllerClient {
	return &kubernetesObjectsQueryControllerClient{cc}
}

func (c *kubernetesObjectsQueryControllerClient) StreamByNamespace(ctx context.Context, in *model.StreamKubernetesObjectsByNamespaceInput, opts ...grpc.CallOption) (KubernetesObjectsQueryController_StreamByNamespaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesObjectsQueryController_ServiceDesc.Streams[0], KubernetesObjectsQueryController_StreamByNamespace_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesObjectsQueryControllerStreamByNamespaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubernetesObjectsQueryController_StreamByNamespaceClient interface {
	Recv() (*model.KubernetesObjects, error)
	grpc.ClientStream
}

type kubernetesObjectsQueryControllerStreamByNamespaceClient struct {
	grpc.ClientStream
}

func (x *kubernetesObjectsQueryControllerStreamByNamespaceClient) Recv() (*model.KubernetesObjects, error) {
	m := new(model.KubernetesObjects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kubernetesObjectsQueryControllerClient) GetKubernetesObject(ctx context.Context, in *model.GetKubernetesObjectInput, opts ...grpc.CallOption) (*model.KubernetesObjectDetail, error) {
	out := new(model.KubernetesObjectDetail)
	err := c.cc.Invoke(ctx, KubernetesObjectsQueryController_GetKubernetesObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectsQueryControllerClient) FindPods(ctx context.Context, in *model.FindPodsInput, opts ...grpc.CallOption) (*model.Pods, error) {
	out := new(model.Pods)
	err := c.cc.Invoke(ctx, KubernetesObjectsQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectsQueryControllerClient) StreamPodLogs(ctx context.Context, in *model.StreamPodLogsInput, opts ...grpc.CallOption) (KubernetesObjectsQueryController_StreamPodLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesObjectsQueryController_ServiceDesc.Streams[1], KubernetesObjectsQueryController_StreamPodLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesObjectsQueryControllerStreamPodLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubernetesObjectsQueryController_StreamPodLogsClient interface {
	Recv() (*model.PodLogLine, error)
	grpc.ClientStream
}

type kubernetesObjectsQueryControllerStreamPodLogsClient struct {
	grpc.ClientStream
}

func (x *kubernetesObjectsQueryControllerStreamPodLogsClient) Recv() (*model.PodLogLine, error) {
	m := new(model.PodLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesObjectsQueryControllerServer is the server API for KubernetesObjectsQueryController service.
// All implementations should embed UnimplementedKubernetesObjectsQueryControllerServer
// for forward compatibility
type KubernetesObjectsQueryControllerServer interface {
	// stream all kubernetes objects corresponding to a planton-cloud api-resource.
	StreamByNamespace(*model.StreamKubernetesObjectsByNamespaceInput, KubernetesObjectsQueryController_StreamByNamespaceServer) error
	// get detailed object of a kubernetes object
	GetKubernetesObject(context.Context, *model.GetKubernetesObjectInput) (*model.KubernetesObjectDetail, error)
	// find list of pods from a namespace.
	FindPods(context.Context, *model.FindPodsInput) (*model.Pods, error)
	// stream logs of a pod/s corresponding to a planton-cloud api-resource based
	// on specified options.
	StreamPodLogs(*model.StreamPodLogsInput, KubernetesObjectsQueryController_StreamPodLogsServer) error
}

// UnimplementedKubernetesObjectsQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubernetesObjectsQueryControllerServer struct {
}

func (UnimplementedKubernetesObjectsQueryControllerServer) StreamByNamespace(*model.StreamKubernetesObjectsByNamespaceInput, KubernetesObjectsQueryController_StreamByNamespaceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamByNamespace not implemented")
}
func (UnimplementedKubernetesObjectsQueryControllerServer) GetKubernetesObject(context.Context, *model.GetKubernetesObjectInput) (*model.KubernetesObjectDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesObject not implemented")
}
func (UnimplementedKubernetesObjectsQueryControllerServer) FindPods(context.Context, *model.FindPodsInput) (*model.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}
func (UnimplementedKubernetesObjectsQueryControllerServer) StreamPodLogs(*model.StreamPodLogsInput, KubernetesObjectsQueryController_StreamPodLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodLogs not implemented")
}

// UnsafeKubernetesObjectsQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesObjectsQueryControllerServer will
// result in compilation errors.
type UnsafeKubernetesObjectsQueryControllerServer interface {
	mustEmbedUnimplementedKubernetesObjectsQueryControllerServer()
}

func RegisterKubernetesObjectsQueryControllerServer(s grpc.ServiceRegistrar, srv KubernetesObjectsQueryControllerServer) {
	s.RegisterService(&KubernetesObjectsQueryController_ServiceDesc, srv)
}

func _KubernetesObjectsQueryController_StreamByNamespace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubernetesObjectsByNamespaceInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubernetesObjectsQueryControllerServer).StreamByNamespace(m, &kubernetesObjectsQueryControllerStreamByNamespaceServer{stream})
}

type KubernetesObjectsQueryController_StreamByNamespaceServer interface {
	Send(*model.KubernetesObjects) error
	grpc.ServerStream
}

type kubernetesObjectsQueryControllerStreamByNamespaceServer struct {
	grpc.ServerStream
}

func (x *kubernetesObjectsQueryControllerStreamByNamespaceServer) Send(m *model.KubernetesObjects) error {
	return x.ServerStream.SendMsg(m)
}

func _KubernetesObjectsQueryController_GetKubernetesObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetKubernetesObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectsQueryControllerServer).GetKubernetesObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectsQueryController_GetKubernetesObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectsQueryControllerServer).GetKubernetesObject(ctx, req.(*model.GetKubernetesObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectsQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindPodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectsQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectsQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectsQueryControllerServer).FindPods(ctx, req.(*model.FindPodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectsQueryController_StreamPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamPodLogsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubernetesObjectsQueryControllerServer).StreamPodLogs(m, &kubernetesObjectsQueryControllerStreamPodLogsServer{stream})
}

type KubernetesObjectsQueryController_StreamPodLogsServer interface {
	Send(*model.PodLogLine) error
	grpc.ServerStream
}

type kubernetesObjectsQueryControllerStreamPodLogsServer struct {
	grpc.ServerStream
}

func (x *kubernetesObjectsQueryControllerStreamPodLogsServer) Send(m *model.PodLogLine) error {
	return x.ServerStream.SendMsg(m)
}

// KubernetesObjectsQueryController_ServiceDesc is the grpc.ServiceDesc for KubernetesObjectsQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesObjectsQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.apiresources.service.KubernetesObjectsQueryController",
	HandlerType: (*KubernetesObjectsQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getKubernetesObject",
			Handler:    _KubernetesObjectsQueryController_GetKubernetesObject_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _KubernetesObjectsQueryController_FindPods_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamByNamespace",
			Handler:       _KubernetesObjectsQueryController_StreamByNamespace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamPodLogs",
			Handler:       _KubernetesObjectsQueryController_StreamPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/apiresources/service/query.proto",
}
