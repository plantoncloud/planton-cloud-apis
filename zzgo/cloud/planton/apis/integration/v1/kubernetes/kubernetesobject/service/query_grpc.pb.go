// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/kubernetes/kubernetesobject/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/kubernetesobject/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesObjectQueryController_FindNamespaces_FullMethodName      = "/cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController/findNamespaces"
	KubernetesObjectQueryController_StreamByNamespace_FullMethodName   = "/cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController/streamByNamespace"
	KubernetesObjectQueryController_GetKubernetesObject_FullMethodName = "/cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController/getKubernetesObject"
	KubernetesObjectQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController/findPods"
	KubernetesObjectQueryController_GetPod_FullMethodName              = "/cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController/getPod"
	KubernetesObjectQueryController_StreamPodLogs_FullMethodName       = "/cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController/streamPodLogs"
)

// KubernetesObjectQueryControllerClient is the client API for KubernetesObjectQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesObjectQueryControllerClient interface {
	// find list of namespaces on the kubernetes cluster
	FindNamespaces(ctx context.Context, in *model.KubeConfigBase64Encoded, opts ...grpc.CallOption) (*model.KubernetesNamespaceList, error)
	// stream all kubernetes objects corresponding to a planton-cloud api-resource.
	StreamByNamespace(ctx context.Context, in *model.StreamKubernetesObjectsInNamespaceWithKubeConfigInput, opts ...grpc.CallOption) (KubernetesObjectQueryController_StreamByNamespaceClient, error)
	// get detailed object of a kubernetes object
	GetKubernetesObject(ctx context.Context, in *model.GetKubernetesObjectWithKubeConfigInput, opts ...grpc.CallOption) (*model.KubernetesObjectDetail, error)
	// find list of pods from a namespace.
	FindPods(ctx context.Context, in *model.FindPodsWithKubeConfigInput, opts ...grpc.CallOption) (*model.KubernetesPodList, error)
	// find list of pods from a namespace.
	GetPod(ctx context.Context, in *model.GetKubernetesObjectWithKubeConfigInput, opts ...grpc.CallOption) (*model.KubernetesPod, error)
	// stream logs of a pod/s corresponding to a planton-cloud api-resource based
	// on specified options.
	StreamPodLogs(ctx context.Context, in *model.StreamPodLogsWithKubeConfigInput, opts ...grpc.CallOption) (KubernetesObjectQueryController_StreamPodLogsClient, error)
}

type kubernetesObjectQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesObjectQueryControllerClient(cc grpc.ClientConnInterface) KubernetesObjectQueryControllerClient {
	return &kubernetesObjectQueryControllerClient{cc}
}

func (c *kubernetesObjectQueryControllerClient) FindNamespaces(ctx context.Context, in *model.KubeConfigBase64Encoded, opts ...grpc.CallOption) (*model.KubernetesNamespaceList, error) {
	out := new(model.KubernetesNamespaceList)
	err := c.cc.Invoke(ctx, KubernetesObjectQueryController_FindNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectQueryControllerClient) StreamByNamespace(ctx context.Context, in *model.StreamKubernetesObjectsInNamespaceWithKubeConfigInput, opts ...grpc.CallOption) (KubernetesObjectQueryController_StreamByNamespaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesObjectQueryController_ServiceDesc.Streams[0], KubernetesObjectQueryController_StreamByNamespace_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesObjectQueryControllerStreamByNamespaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubernetesObjectQueryController_StreamByNamespaceClient interface {
	Recv() (*model.KubernetesObjectList, error)
	grpc.ClientStream
}

type kubernetesObjectQueryControllerStreamByNamespaceClient struct {
	grpc.ClientStream
}

func (x *kubernetesObjectQueryControllerStreamByNamespaceClient) Recv() (*model.KubernetesObjectList, error) {
	m := new(model.KubernetesObjectList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kubernetesObjectQueryControllerClient) GetKubernetesObject(ctx context.Context, in *model.GetKubernetesObjectWithKubeConfigInput, opts ...grpc.CallOption) (*model.KubernetesObjectDetail, error) {
	out := new(model.KubernetesObjectDetail)
	err := c.cc.Invoke(ctx, KubernetesObjectQueryController_GetKubernetesObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectQueryControllerClient) FindPods(ctx context.Context, in *model.FindPodsWithKubeConfigInput, opts ...grpc.CallOption) (*model.KubernetesPodList, error) {
	out := new(model.KubernetesPodList)
	err := c.cc.Invoke(ctx, KubernetesObjectQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectQueryControllerClient) GetPod(ctx context.Context, in *model.GetKubernetesObjectWithKubeConfigInput, opts ...grpc.CallOption) (*model.KubernetesPod, error) {
	out := new(model.KubernetesPod)
	err := c.cc.Invoke(ctx, KubernetesObjectQueryController_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesObjectQueryControllerClient) StreamPodLogs(ctx context.Context, in *model.StreamPodLogsWithKubeConfigInput, opts ...grpc.CallOption) (KubernetesObjectQueryController_StreamPodLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesObjectQueryController_ServiceDesc.Streams[1], KubernetesObjectQueryController_StreamPodLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesObjectQueryControllerStreamPodLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubernetesObjectQueryController_StreamPodLogsClient interface {
	Recv() (*model.PodLogLine, error)
	grpc.ClientStream
}

type kubernetesObjectQueryControllerStreamPodLogsClient struct {
	grpc.ClientStream
}

func (x *kubernetesObjectQueryControllerStreamPodLogsClient) Recv() (*model.PodLogLine, error) {
	m := new(model.PodLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesObjectQueryControllerServer is the server API for KubernetesObjectQueryController service.
// All implementations should embed UnimplementedKubernetesObjectQueryControllerServer
// for forward compatibility
type KubernetesObjectQueryControllerServer interface {
	// find list of namespaces on the kubernetes cluster
	FindNamespaces(context.Context, *model.KubeConfigBase64Encoded) (*model.KubernetesNamespaceList, error)
	// stream all kubernetes objects corresponding to a planton-cloud api-resource.
	StreamByNamespace(*model.StreamKubernetesObjectsInNamespaceWithKubeConfigInput, KubernetesObjectQueryController_StreamByNamespaceServer) error
	// get detailed object of a kubernetes object
	GetKubernetesObject(context.Context, *model.GetKubernetesObjectWithKubeConfigInput) (*model.KubernetesObjectDetail, error)
	// find list of pods from a namespace.
	FindPods(context.Context, *model.FindPodsWithKubeConfigInput) (*model.KubernetesPodList, error)
	// find list of pods from a namespace.
	GetPod(context.Context, *model.GetKubernetesObjectWithKubeConfigInput) (*model.KubernetesPod, error)
	// stream logs of a pod/s corresponding to a planton-cloud api-resource based
	// on specified options.
	StreamPodLogs(*model.StreamPodLogsWithKubeConfigInput, KubernetesObjectQueryController_StreamPodLogsServer) error
}

// UnimplementedKubernetesObjectQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKubernetesObjectQueryControllerServer struct {
}

func (UnimplementedKubernetesObjectQueryControllerServer) FindNamespaces(context.Context, *model.KubeConfigBase64Encoded) (*model.KubernetesNamespaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNamespaces not implemented")
}
func (UnimplementedKubernetesObjectQueryControllerServer) StreamByNamespace(*model.StreamKubernetesObjectsInNamespaceWithKubeConfigInput, KubernetesObjectQueryController_StreamByNamespaceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamByNamespace not implemented")
}
func (UnimplementedKubernetesObjectQueryControllerServer) GetKubernetesObject(context.Context, *model.GetKubernetesObjectWithKubeConfigInput) (*model.KubernetesObjectDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesObject not implemented")
}
func (UnimplementedKubernetesObjectQueryControllerServer) FindPods(context.Context, *model.FindPodsWithKubeConfigInput) (*model.KubernetesPodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}
func (UnimplementedKubernetesObjectQueryControllerServer) GetPod(context.Context, *model.GetKubernetesObjectWithKubeConfigInput) (*model.KubernetesPod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedKubernetesObjectQueryControllerServer) StreamPodLogs(*model.StreamPodLogsWithKubeConfigInput, KubernetesObjectQueryController_StreamPodLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodLogs not implemented")
}

// UnsafeKubernetesObjectQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesObjectQueryControllerServer will
// result in compilation errors.
type UnsafeKubernetesObjectQueryControllerServer interface {
	mustEmbedUnimplementedKubernetesObjectQueryControllerServer()
}

func RegisterKubernetesObjectQueryControllerServer(s grpc.ServiceRegistrar, srv KubernetesObjectQueryControllerServer) {
	s.RegisterService(&KubernetesObjectQueryController_ServiceDesc, srv)
}

func _KubernetesObjectQueryController_FindNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubeConfigBase64Encoded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectQueryControllerServer).FindNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectQueryController_FindNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectQueryControllerServer).FindNamespaces(ctx, req.(*model.KubeConfigBase64Encoded))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectQueryController_StreamByNamespace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubernetesObjectsInNamespaceWithKubeConfigInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubernetesObjectQueryControllerServer).StreamByNamespace(m, &kubernetesObjectQueryControllerStreamByNamespaceServer{stream})
}

type KubernetesObjectQueryController_StreamByNamespaceServer interface {
	Send(*model.KubernetesObjectList) error
	grpc.ServerStream
}

type kubernetesObjectQueryControllerStreamByNamespaceServer struct {
	grpc.ServerStream
}

func (x *kubernetesObjectQueryControllerStreamByNamespaceServer) Send(m *model.KubernetesObjectList) error {
	return x.ServerStream.SendMsg(m)
}

func _KubernetesObjectQueryController_GetKubernetesObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetKubernetesObjectWithKubeConfigInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectQueryControllerServer).GetKubernetesObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectQueryController_GetKubernetesObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectQueryControllerServer).GetKubernetesObject(ctx, req.(*model.GetKubernetesObjectWithKubeConfigInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindPodsWithKubeConfigInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectQueryControllerServer).FindPods(ctx, req.(*model.FindPodsWithKubeConfigInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectQueryController_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetKubernetesObjectWithKubeConfigInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesObjectQueryControllerServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesObjectQueryController_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesObjectQueryControllerServer).GetPod(ctx, req.(*model.GetKubernetesObjectWithKubeConfigInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesObjectQueryController_StreamPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamPodLogsWithKubeConfigInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubernetesObjectQueryControllerServer).StreamPodLogs(m, &kubernetesObjectQueryControllerStreamPodLogsServer{stream})
}

type KubernetesObjectQueryController_StreamPodLogsServer interface {
	Send(*model.PodLogLine) error
	grpc.ServerStream
}

type kubernetesObjectQueryControllerStreamPodLogsServer struct {
	grpc.ServerStream
}

func (x *kubernetesObjectQueryControllerStreamPodLogsServer) Send(m *model.PodLogLine) error {
	return x.ServerStream.SendMsg(m)
}

// KubernetesObjectQueryController_ServiceDesc is the grpc.ServiceDesc for KubernetesObjectQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesObjectQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.kubernetes.kubernetesobject.service.KubernetesObjectQueryController",
	HandlerType: (*KubernetesObjectQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findNamespaces",
			Handler:    _KubernetesObjectQueryController_FindNamespaces_Handler,
		},
		{
			MethodName: "getKubernetesObject",
			Handler:    _KubernetesObjectQueryController_GetKubernetesObject_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _KubernetesObjectQueryController_FindPods_Handler,
		},
		{
			MethodName: "getPod",
			Handler:    _KubernetesObjectQueryController_GetPod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamByNamespace",
			Handler:       _KubernetesObjectQueryController_StreamByNamespace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamPodLogs",
			Handler:       _KubernetesObjectQueryController_StreamPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/integration/v1/kubernetes/kubernetesobject/service/query.proto",
}
