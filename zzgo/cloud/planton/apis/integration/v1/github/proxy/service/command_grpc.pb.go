// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/github/proxy/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/codeproject/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/codeserver/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/github/proxy/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GithubProxyCommandController_CreRepository_FullMethodName                 = "/cloud.planton.apis.integration.v1.github.proxy.service.GithubProxyCommandController/creRepository"
	GithubProxyCommandController_ApplyTemplate_FullMethodName                 = "/cloud.planton.apis.integration.v1.github.proxy.service.GithubProxyCommandController/applyTemplate"
	GithubProxyCommandController_AddSecretsToRepo_FullMethodName              = "/cloud.planton.apis.integration.v1.github.proxy.service.GithubProxyCommandController/addSecretsToRepo"
	GithubProxyCommandController_AddSecretsToOrg_FullMethodName               = "/cloud.planton.apis.integration.v1.github.proxy.service.GithubProxyCommandController/addSecretsToOrg"
	GithubProxyCommandController_SynchronizeMagicPipelineFiles_FullMethodName = "/cloud.planton.apis.integration.v1.github.proxy.service.GithubProxyCommandController/synchronizeMagicPipelineFiles"
)

// GithubProxyCommandControllerClient is the client API for GithubProxyCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubProxyCommandControllerClient interface {
	// create a new repository on github
	// https://docs.github.com/en/rest/apps/installations?apiVersion=2022-11-28#add-a-repository-to-an-app-installation
	// https://docs.github.com/en/rest/repos/repos#create-a-repository-for-the-authenticated-user
	// https://docs.github.com/en/rest/repos/repos#create-an-organization-repository
	CreRepository(ctx context.Context, in *model.CreRepositoryCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error)
	// apply a cookiecutter template on a code project created on github
	ApplyTemplate(ctx context.Context, in *model.GithubApplyTemplateCommandInput, opts ...grpc.CallOption) (*model1.CodeProjectProfile, error)
	// add a list of secrets to a github repository
	AddSecretsToRepo(ctx context.Context, in *model.AddSecretsToRepoCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error)
	// add a list of secrets to a github organization
	AddSecretsToOrg(ctx context.Context, in *model.AddSecretsToOrgCommandInput, opts ...grpc.CallOption) (*model2.CodeServer, error)
	// synchronization is achieved by first removing all yaml files prefixed with "pc:" inside .github/workflows and
	// then add files in the input to .github/workflows directory.
	SynchronizeMagicPipelineFiles(ctx context.Context, in *model.SynchronizeGithubMagicPipelineFilesCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error)
}

type githubProxyCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubProxyCommandControllerClient(cc grpc.ClientConnInterface) GithubProxyCommandControllerClient {
	return &githubProxyCommandControllerClient{cc}
}

func (c *githubProxyCommandControllerClient) CreRepository(ctx context.Context, in *model.CreRepositoryCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error) {
	out := new(model1.CodeProject)
	err := c.cc.Invoke(ctx, GithubProxyCommandController_CreRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProxyCommandControllerClient) ApplyTemplate(ctx context.Context, in *model.GithubApplyTemplateCommandInput, opts ...grpc.CallOption) (*model1.CodeProjectProfile, error) {
	out := new(model1.CodeProjectProfile)
	err := c.cc.Invoke(ctx, GithubProxyCommandController_ApplyTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProxyCommandControllerClient) AddSecretsToRepo(ctx context.Context, in *model.AddSecretsToRepoCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error) {
	out := new(model1.CodeProject)
	err := c.cc.Invoke(ctx, GithubProxyCommandController_AddSecretsToRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProxyCommandControllerClient) AddSecretsToOrg(ctx context.Context, in *model.AddSecretsToOrgCommandInput, opts ...grpc.CallOption) (*model2.CodeServer, error) {
	out := new(model2.CodeServer)
	err := c.cc.Invoke(ctx, GithubProxyCommandController_AddSecretsToOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProxyCommandControllerClient) SynchronizeMagicPipelineFiles(ctx context.Context, in *model.SynchronizeGithubMagicPipelineFilesCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error) {
	out := new(model1.CodeProject)
	err := c.cc.Invoke(ctx, GithubProxyCommandController_SynchronizeMagicPipelineFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubProxyCommandControllerServer is the server API for GithubProxyCommandController service.
// All implementations should embed UnimplementedGithubProxyCommandControllerServer
// for forward compatibility
type GithubProxyCommandControllerServer interface {
	// create a new repository on github
	// https://docs.github.com/en/rest/apps/installations?apiVersion=2022-11-28#add-a-repository-to-an-app-installation
	// https://docs.github.com/en/rest/repos/repos#create-a-repository-for-the-authenticated-user
	// https://docs.github.com/en/rest/repos/repos#create-an-organization-repository
	CreRepository(context.Context, *model.CreRepositoryCommandInput) (*model1.CodeProject, error)
	// apply a cookiecutter template on a code project created on github
	ApplyTemplate(context.Context, *model.GithubApplyTemplateCommandInput) (*model1.CodeProjectProfile, error)
	// add a list of secrets to a github repository
	AddSecretsToRepo(context.Context, *model.AddSecretsToRepoCommandInput) (*model1.CodeProject, error)
	// add a list of secrets to a github organization
	AddSecretsToOrg(context.Context, *model.AddSecretsToOrgCommandInput) (*model2.CodeServer, error)
	// synchronization is achieved by first removing all yaml files prefixed with "pc:" inside .github/workflows and
	// then add files in the input to .github/workflows directory.
	SynchronizeMagicPipelineFiles(context.Context, *model.SynchronizeGithubMagicPipelineFilesCommandInput) (*model1.CodeProject, error)
}

// UnimplementedGithubProxyCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGithubProxyCommandControllerServer struct {
}

func (UnimplementedGithubProxyCommandControllerServer) CreRepository(context.Context, *model.CreRepositoryCommandInput) (*model1.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreRepository not implemented")
}
func (UnimplementedGithubProxyCommandControllerServer) ApplyTemplate(context.Context, *model.GithubApplyTemplateCommandInput) (*model1.CodeProjectProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyTemplate not implemented")
}
func (UnimplementedGithubProxyCommandControllerServer) AddSecretsToRepo(context.Context, *model.AddSecretsToRepoCommandInput) (*model1.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecretsToRepo not implemented")
}
func (UnimplementedGithubProxyCommandControllerServer) AddSecretsToOrg(context.Context, *model.AddSecretsToOrgCommandInput) (*model2.CodeServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecretsToOrg not implemented")
}
func (UnimplementedGithubProxyCommandControllerServer) SynchronizeMagicPipelineFiles(context.Context, *model.SynchronizeGithubMagicPipelineFilesCommandInput) (*model1.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeMagicPipelineFiles not implemented")
}

// UnsafeGithubProxyCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubProxyCommandControllerServer will
// result in compilation errors.
type UnsafeGithubProxyCommandControllerServer interface {
	mustEmbedUnimplementedGithubProxyCommandControllerServer()
}

func RegisterGithubProxyCommandControllerServer(s grpc.ServiceRegistrar, srv GithubProxyCommandControllerServer) {
	s.RegisterService(&GithubProxyCommandController_ServiceDesc, srv)
}

func _GithubProxyCommandController_CreRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreRepositoryCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProxyCommandControllerServer).CreRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProxyCommandController_CreRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProxyCommandControllerServer).CreRepository(ctx, req.(*model.CreRepositoryCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProxyCommandController_ApplyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GithubApplyTemplateCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProxyCommandControllerServer).ApplyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProxyCommandController_ApplyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProxyCommandControllerServer).ApplyTemplate(ctx, req.(*model.GithubApplyTemplateCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProxyCommandController_AddSecretsToRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddSecretsToRepoCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProxyCommandControllerServer).AddSecretsToRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProxyCommandController_AddSecretsToRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProxyCommandControllerServer).AddSecretsToRepo(ctx, req.(*model.AddSecretsToRepoCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProxyCommandController_AddSecretsToOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddSecretsToOrgCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProxyCommandControllerServer).AddSecretsToOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProxyCommandController_AddSecretsToOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProxyCommandControllerServer).AddSecretsToOrg(ctx, req.(*model.AddSecretsToOrgCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProxyCommandController_SynchronizeMagicPipelineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SynchronizeGithubMagicPipelineFilesCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProxyCommandControllerServer).SynchronizeMagicPipelineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProxyCommandController_SynchronizeMagicPipelineFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProxyCommandControllerServer).SynchronizeMagicPipelineFiles(ctx, req.(*model.SynchronizeGithubMagicPipelineFilesCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubProxyCommandController_ServiceDesc is the grpc.ServiceDesc for GithubProxyCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubProxyCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.github.proxy.service.GithubProxyCommandController",
	HandlerType: (*GithubProxyCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "creRepository",
			Handler:    _GithubProxyCommandController_CreRepository_Handler,
		},
		{
			MethodName: "applyTemplate",
			Handler:    _GithubProxyCommandController_ApplyTemplate_Handler,
		},
		{
			MethodName: "addSecretsToRepo",
			Handler:    _GithubProxyCommandController_AddSecretsToRepo_Handler,
		},
		{
			MethodName: "addSecretsToOrg",
			Handler:    _GithubProxyCommandController_AddSecretsToOrg_Handler,
		},
		{
			MethodName: "synchronizeMagicPipelineFiles",
			Handler:    _GithubProxyCommandController_SynchronizeMagicPipelineFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/integration/v1/github/proxy/service/command.proto",
}
