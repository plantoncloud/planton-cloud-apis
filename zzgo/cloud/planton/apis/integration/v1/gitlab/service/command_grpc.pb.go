// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/integration/v1/gitlab/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/codeproject/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/code2cloud/v1/codeserver/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/gitlab/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitlabProxyCommandController_CreProject_FullMethodName            = "/cloud.planton.apis.integration.v1.gitlab.service.GitlabProxyCommandController/creProject"
	GitlabProxyCommandController_ApplyTemplate_FullMethodName         = "/cloud.planton.apis.integration.v1.gitlab.service.GitlabProxyCommandController/applyTemplate"
	GitlabProxyCommandController_AddVariablesToProject_FullMethodName = "/cloud.planton.apis.integration.v1.gitlab.service.GitlabProxyCommandController/addVariablesToProject"
	GitlabProxyCommandController_AddVariablesToGroup_FullMethodName   = "/cloud.planton.apis.integration.v1.gitlab.service.GitlabProxyCommandController/addVariablesToGroup"
	GitlabProxyCommandController_AddFilesToProject_FullMethodName     = "/cloud.planton.apis.integration.v1.gitlab.service.GitlabProxyCommandController/addFilesToProject"
)

// GitlabProxyCommandControllerClient is the client API for GitlabProxyCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitlabProxyCommandControllerClient interface {
	// create new project on gitlab
	// https://docs.gitlab.com/ee/api/projects.html#create-project
	CreProject(ctx context.Context, in *model.CreProjectCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error)
	// apply a cookiecutter template on a code project created on gitlab
	ApplyTemplate(ctx context.Context, in *model.GitlabApplyTemplateCommandInput, opts ...grpc.CallOption) (*model1.CodeProjectProfile, error)
	// add a list of variables to a gitlab project
	AddVariablesToProject(ctx context.Context, in *model.AddVariablesToProjectCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error)
	// add a list of variables to a gitlab group
	AddVariablesToGroup(ctx context.Context, in *model.AddVariablesToGroupCommandInput, opts ...grpc.CallOption) (*model2.CodeServer, error)
	// add a list of files to a gitlab project
	AddFilesToProject(ctx context.Context, in *model.AddFilesToGitlabProjectCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error)
}

type gitlabProxyCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGitlabProxyCommandControllerClient(cc grpc.ClientConnInterface) GitlabProxyCommandControllerClient {
	return &gitlabProxyCommandControllerClient{cc}
}

func (c *gitlabProxyCommandControllerClient) CreProject(ctx context.Context, in *model.CreProjectCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error) {
	out := new(model1.CodeProject)
	err := c.cc.Invoke(ctx, GitlabProxyCommandController_CreProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabProxyCommandControllerClient) ApplyTemplate(ctx context.Context, in *model.GitlabApplyTemplateCommandInput, opts ...grpc.CallOption) (*model1.CodeProjectProfile, error) {
	out := new(model1.CodeProjectProfile)
	err := c.cc.Invoke(ctx, GitlabProxyCommandController_ApplyTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabProxyCommandControllerClient) AddVariablesToProject(ctx context.Context, in *model.AddVariablesToProjectCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error) {
	out := new(model1.CodeProject)
	err := c.cc.Invoke(ctx, GitlabProxyCommandController_AddVariablesToProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabProxyCommandControllerClient) AddVariablesToGroup(ctx context.Context, in *model.AddVariablesToGroupCommandInput, opts ...grpc.CallOption) (*model2.CodeServer, error) {
	out := new(model2.CodeServer)
	err := c.cc.Invoke(ctx, GitlabProxyCommandController_AddVariablesToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabProxyCommandControllerClient) AddFilesToProject(ctx context.Context, in *model.AddFilesToGitlabProjectCommandInput, opts ...grpc.CallOption) (*model1.CodeProject, error) {
	out := new(model1.CodeProject)
	err := c.cc.Invoke(ctx, GitlabProxyCommandController_AddFilesToProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitlabProxyCommandControllerServer is the server API for GitlabProxyCommandController service.
// All implementations should embed UnimplementedGitlabProxyCommandControllerServer
// for forward compatibility
type GitlabProxyCommandControllerServer interface {
	// create new project on gitlab
	// https://docs.gitlab.com/ee/api/projects.html#create-project
	CreProject(context.Context, *model.CreProjectCommandInput) (*model1.CodeProject, error)
	// apply a cookiecutter template on a code project created on gitlab
	ApplyTemplate(context.Context, *model.GitlabApplyTemplateCommandInput) (*model1.CodeProjectProfile, error)
	// add a list of variables to a gitlab project
	AddVariablesToProject(context.Context, *model.AddVariablesToProjectCommandInput) (*model1.CodeProject, error)
	// add a list of variables to a gitlab group
	AddVariablesToGroup(context.Context, *model.AddVariablesToGroupCommandInput) (*model2.CodeServer, error)
	// add a list of files to a gitlab project
	AddFilesToProject(context.Context, *model.AddFilesToGitlabProjectCommandInput) (*model1.CodeProject, error)
}

// UnimplementedGitlabProxyCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGitlabProxyCommandControllerServer struct {
}

func (UnimplementedGitlabProxyCommandControllerServer) CreProject(context.Context, *model.CreProjectCommandInput) (*model1.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreProject not implemented")
}
func (UnimplementedGitlabProxyCommandControllerServer) ApplyTemplate(context.Context, *model.GitlabApplyTemplateCommandInput) (*model1.CodeProjectProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyTemplate not implemented")
}
func (UnimplementedGitlabProxyCommandControllerServer) AddVariablesToProject(context.Context, *model.AddVariablesToProjectCommandInput) (*model1.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVariablesToProject not implemented")
}
func (UnimplementedGitlabProxyCommandControllerServer) AddVariablesToGroup(context.Context, *model.AddVariablesToGroupCommandInput) (*model2.CodeServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVariablesToGroup not implemented")
}
func (UnimplementedGitlabProxyCommandControllerServer) AddFilesToProject(context.Context, *model.AddFilesToGitlabProjectCommandInput) (*model1.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFilesToProject not implemented")
}

// UnsafeGitlabProxyCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitlabProxyCommandControllerServer will
// result in compilation errors.
type UnsafeGitlabProxyCommandControllerServer interface {
	mustEmbedUnimplementedGitlabProxyCommandControllerServer()
}

func RegisterGitlabProxyCommandControllerServer(s grpc.ServiceRegistrar, srv GitlabProxyCommandControllerServer) {
	s.RegisterService(&GitlabProxyCommandController_ServiceDesc, srv)
}

func _GitlabProxyCommandController_CreProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreProjectCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabProxyCommandControllerServer).CreProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabProxyCommandController_CreProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabProxyCommandControllerServer).CreProject(ctx, req.(*model.CreProjectCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitlabProxyCommandController_ApplyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GitlabApplyTemplateCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabProxyCommandControllerServer).ApplyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabProxyCommandController_ApplyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabProxyCommandControllerServer).ApplyTemplate(ctx, req.(*model.GitlabApplyTemplateCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitlabProxyCommandController_AddVariablesToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddVariablesToProjectCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabProxyCommandControllerServer).AddVariablesToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabProxyCommandController_AddVariablesToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabProxyCommandControllerServer).AddVariablesToProject(ctx, req.(*model.AddVariablesToProjectCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitlabProxyCommandController_AddVariablesToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddVariablesToGroupCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabProxyCommandControllerServer).AddVariablesToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabProxyCommandController_AddVariablesToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabProxyCommandControllerServer).AddVariablesToGroup(ctx, req.(*model.AddVariablesToGroupCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitlabProxyCommandController_AddFilesToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddFilesToGitlabProjectCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabProxyCommandControllerServer).AddFilesToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabProxyCommandController_AddFilesToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabProxyCommandControllerServer).AddFilesToProject(ctx, req.(*model.AddFilesToGitlabProjectCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GitlabProxyCommandController_ServiceDesc is the grpc.ServiceDesc for GitlabProxyCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitlabProxyCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.integration.v1.gitlab.service.GitlabProxyCommandController",
	HandlerType: (*GitlabProxyCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "creProject",
			Handler:    _GitlabProxyCommandController_CreProject_Handler,
		},
		{
			MethodName: "applyTemplate",
			Handler:    _GitlabProxyCommandController_ApplyTemplate_Handler,
		},
		{
			MethodName: "addVariablesToProject",
			Handler:    _GitlabProxyCommandController_AddVariablesToProject_Handler,
		},
		{
			MethodName: "addVariablesToGroup",
			Handler:    _GitlabProxyCommandController_AddVariablesToGroup_Handler,
		},
		{
			MethodName: "addFilesToProject",
			Handler:    _GitlabProxyCommandController_AddFilesToProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/integration/v1/gitlab/service/command.proto",
}
