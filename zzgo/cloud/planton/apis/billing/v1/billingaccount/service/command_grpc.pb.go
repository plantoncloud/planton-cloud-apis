// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/billing/v1/billingaccount/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/billing/v1/billingaccount/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingAccountCommandController_Update_FullMethodName  = "/cloud.planton.apis.billing.v1.billingaccount.service.BillingAccountCommandController/update"
	BillingAccountCommandController_Delete_FullMethodName  = "/cloud.planton.apis.billing.v1.billingaccount.service.BillingAccountCommandController/delete"
	BillingAccountCommandController_Restore_FullMethodName = "/cloud.planton.apis.billing.v1.billingaccount.service.BillingAccountCommandController/restore"
)

// BillingAccountCommandControllerClient is the client API for BillingAccountCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingAccountCommandControllerClient interface {
	// update an existing billing account.
	Update(ctx context.Context, in *model.BillingAccount, opts ...grpc.CallOption) (*model.BillingAccount, error)
	// delete an existing billing account.
	// a billing account can not be deleted without deleting all the subscriptions linked to the billing account.
	Delete(ctx context.Context, in *model.BillingAccountId, opts ...grpc.CallOption) (*model.BillingAccount, error)
	// restore a previously deleted billing account.
	Restore(ctx context.Context, in *model.BillingAccountId, opts ...grpc.CallOption) (*model.BillingAccount, error)
}

type billingAccountCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingAccountCommandControllerClient(cc grpc.ClientConnInterface) BillingAccountCommandControllerClient {
	return &billingAccountCommandControllerClient{cc}
}

func (c *billingAccountCommandControllerClient) Update(ctx context.Context, in *model.BillingAccount, opts ...grpc.CallOption) (*model.BillingAccount, error) {
	out := new(model.BillingAccount)
	err := c.cc.Invoke(ctx, BillingAccountCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingAccountCommandControllerClient) Delete(ctx context.Context, in *model.BillingAccountId, opts ...grpc.CallOption) (*model.BillingAccount, error) {
	out := new(model.BillingAccount)
	err := c.cc.Invoke(ctx, BillingAccountCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingAccountCommandControllerClient) Restore(ctx context.Context, in *model.BillingAccountId, opts ...grpc.CallOption) (*model.BillingAccount, error) {
	out := new(model.BillingAccount)
	err := c.cc.Invoke(ctx, BillingAccountCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingAccountCommandControllerServer is the server API for BillingAccountCommandController service.
// All implementations should embed UnimplementedBillingAccountCommandControllerServer
// for forward compatibility
type BillingAccountCommandControllerServer interface {
	// update an existing billing account.
	Update(context.Context, *model.BillingAccount) (*model.BillingAccount, error)
	// delete an existing billing account.
	// a billing account can not be deleted without deleting all the subscriptions linked to the billing account.
	Delete(context.Context, *model.BillingAccountId) (*model.BillingAccount, error)
	// restore a previously deleted billing account.
	Restore(context.Context, *model.BillingAccountId) (*model.BillingAccount, error)
}

// UnimplementedBillingAccountCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedBillingAccountCommandControllerServer struct {
}

func (UnimplementedBillingAccountCommandControllerServer) Update(context.Context, *model.BillingAccount) (*model.BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBillingAccountCommandControllerServer) Delete(context.Context, *model.BillingAccountId) (*model.BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBillingAccountCommandControllerServer) Restore(context.Context, *model.BillingAccountId) (*model.BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeBillingAccountCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingAccountCommandControllerServer will
// result in compilation errors.
type UnsafeBillingAccountCommandControllerServer interface {
	mustEmbedUnimplementedBillingAccountCommandControllerServer()
}

func RegisterBillingAccountCommandControllerServer(s grpc.ServiceRegistrar, srv BillingAccountCommandControllerServer) {
	s.RegisterService(&BillingAccountCommandController_ServiceDesc, srv)
}

func _BillingAccountCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.BillingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingAccountCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingAccountCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingAccountCommandControllerServer).Update(ctx, req.(*model.BillingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingAccountCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.BillingAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingAccountCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingAccountCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingAccountCommandControllerServer).Delete(ctx, req.(*model.BillingAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingAccountCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.BillingAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingAccountCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingAccountCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingAccountCommandControllerServer).Restore(ctx, req.(*model.BillingAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingAccountCommandController_ServiceDesc is the grpc.ServiceDesc for BillingAccountCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingAccountCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.billing.v1.billingaccount.service.BillingAccountCommandController",
	HandlerType: (*BillingAccountCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _BillingAccountCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _BillingAccountCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _BillingAccountCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/billing/v1/billingaccount/service/command.proto",
}
