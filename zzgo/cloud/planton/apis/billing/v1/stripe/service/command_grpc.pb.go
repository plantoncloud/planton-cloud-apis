// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/billing/v1/stripe/service/command.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StripeDataCommandController_LoadStripeProductsAndPrices_FullMethodName = "/cloud.planton.apis.billing.v1.stripe.service.StripeDataCommandController/loadStripeProductsAndPrices"
)

// StripeDataCommandControllerClient is the client API for StripeDataCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StripeDataCommandControllerClient interface {
	LoadStripeProductsAndPrices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stripeDataCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStripeDataCommandControllerClient(cc grpc.ClientConnInterface) StripeDataCommandControllerClient {
	return &stripeDataCommandControllerClient{cc}
}

func (c *stripeDataCommandControllerClient) LoadStripeProductsAndPrices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StripeDataCommandController_LoadStripeProductsAndPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StripeDataCommandControllerServer is the server API for StripeDataCommandController service.
// All implementations should embed UnimplementedStripeDataCommandControllerServer
// for forward compatibility
type StripeDataCommandControllerServer interface {
	LoadStripeProductsAndPrices(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedStripeDataCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStripeDataCommandControllerServer struct {
}

func (UnimplementedStripeDataCommandControllerServer) LoadStripeProductsAndPrices(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadStripeProductsAndPrices not implemented")
}

// UnsafeStripeDataCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StripeDataCommandControllerServer will
// result in compilation errors.
type UnsafeStripeDataCommandControllerServer interface {
	mustEmbedUnimplementedStripeDataCommandControllerServer()
}

func RegisterStripeDataCommandControllerServer(s grpc.ServiceRegistrar, srv StripeDataCommandControllerServer) {
	s.RegisterService(&StripeDataCommandController_ServiceDesc, srv)
}

func _StripeDataCommandController_LoadStripeProductsAndPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripeDataCommandControllerServer).LoadStripeProductsAndPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripeDataCommandController_LoadStripeProductsAndPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripeDataCommandControllerServer).LoadStripeProductsAndPrices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StripeDataCommandController_ServiceDesc is the grpc.ServiceDesc for StripeDataCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StripeDataCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.billing.v1.stripe.service.StripeDataCommandController",
	HandlerType: (*StripeDataCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loadStripeProductsAndPrices",
			Handler:    _StripeDataCommandController_LoadStripeProductsAndPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/billing/v1/stripe/service/command.proto",
}
