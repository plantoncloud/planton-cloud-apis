// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/k8sd2ops/v1/service/query.proto

package service

import (
	context "context"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/connect/v1/kubernetesclustercredential/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/k8sd2ops/v1/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SD2OpsQueryController_Get_FullMethodName                     = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController/get"
	K8SD2OpsQueryController_FindNamespaces_FullMethodName          = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController/findNamespaces"
	K8SD2OpsQueryController_StreamKubernetesObjects_FullMethodName = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController/streamKubernetesObjects"
	K8SD2OpsQueryController_FindPods_FullMethodName                = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController/findPods"
	K8SD2OpsQueryController_GetPod_FullMethodName                  = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController/getPod"
	K8SD2OpsQueryController_StreamPodLogs_FullMethodName           = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController/streamPodLogs"
)

// K8SD2OpsQueryControllerClient is the client API for K8SD2OpsQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SD2OpsQueryControllerClient interface {
	// get detailed object of a kubernetes object
	Get(ctx context.Context, in *model.KubernetesClusterKubernetesObject, opts ...grpc.CallOption) (*model1.KubernetesObjectDetail, error)
	// find list of namespaces on a kubernetes cluster
	FindNamespaces(ctx context.Context, in *model2.KubernetesClusterCredentialId, opts ...grpc.CallOption) (*model1.KubernetesNamespaces, error)
	// stream all kubernetes objects from a kubernetes namespace in kube-cluster.
	// this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
	// because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
	StreamKubernetesObjects(ctx context.Context, in *model.StreamKubernetesClusterNamespaceKubernetesObjectsInput, opts ...grpc.CallOption) (K8SD2OpsQueryController_StreamKubernetesObjectsClient, error)
	// find list of pods in a kube-cluster on the specified filters
	FindPods(ctx context.Context, in *model.FindKubernetesClusterPodsInput, opts ...grpc.CallOption) (*model1.Pods, error)
	// get details of a pod
	GetPod(ctx context.Context, in *model.KubernetesClusterKubernetesObject, opts ...grpc.CallOption) (*model1.Pod, error)
	// stream logs of all kubernetes pods running in a kube-cluster on the specified filters
	StreamPodLogs(ctx context.Context, in *model.StreamKubernetesClusterPodLogsInput, opts ...grpc.CallOption) (K8SD2OpsQueryController_StreamPodLogsClient, error)
}

type k8SD2OpsQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SD2OpsQueryControllerClient(cc grpc.ClientConnInterface) K8SD2OpsQueryControllerClient {
	return &k8SD2OpsQueryControllerClient{cc}
}

func (c *k8SD2OpsQueryControllerClient) Get(ctx context.Context, in *model.KubernetesClusterKubernetesObject, opts ...grpc.CallOption) (*model1.KubernetesObjectDetail, error) {
	out := new(model1.KubernetesObjectDetail)
	err := c.cc.Invoke(ctx, K8SD2OpsQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SD2OpsQueryControllerClient) FindNamespaces(ctx context.Context, in *model2.KubernetesClusterCredentialId, opts ...grpc.CallOption) (*model1.KubernetesNamespaces, error) {
	out := new(model1.KubernetesNamespaces)
	err := c.cc.Invoke(ctx, K8SD2OpsQueryController_FindNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SD2OpsQueryControllerClient) StreamKubernetesObjects(ctx context.Context, in *model.StreamKubernetesClusterNamespaceKubernetesObjectsInput, opts ...grpc.CallOption) (K8SD2OpsQueryController_StreamKubernetesObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &K8SD2OpsQueryController_ServiceDesc.Streams[0], K8SD2OpsQueryController_StreamKubernetesObjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &k8SD2OpsQueryControllerStreamKubernetesObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type K8SD2OpsQueryController_StreamKubernetesObjectsClient interface {
	Recv() (*model1.KubernetesObjects, error)
	grpc.ClientStream
}

type k8SD2OpsQueryControllerStreamKubernetesObjectsClient struct {
	grpc.ClientStream
}

func (x *k8SD2OpsQueryControllerStreamKubernetesObjectsClient) Recv() (*model1.KubernetesObjects, error) {
	m := new(model1.KubernetesObjects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *k8SD2OpsQueryControllerClient) FindPods(ctx context.Context, in *model.FindKubernetesClusterPodsInput, opts ...grpc.CallOption) (*model1.Pods, error) {
	out := new(model1.Pods)
	err := c.cc.Invoke(ctx, K8SD2OpsQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SD2OpsQueryControllerClient) GetPod(ctx context.Context, in *model.KubernetesClusterKubernetesObject, opts ...grpc.CallOption) (*model1.Pod, error) {
	out := new(model1.Pod)
	err := c.cc.Invoke(ctx, K8SD2OpsQueryController_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SD2OpsQueryControllerClient) StreamPodLogs(ctx context.Context, in *model.StreamKubernetesClusterPodLogsInput, opts ...grpc.CallOption) (K8SD2OpsQueryController_StreamPodLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &K8SD2OpsQueryController_ServiceDesc.Streams[1], K8SD2OpsQueryController_StreamPodLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &k8SD2OpsQueryControllerStreamPodLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type K8SD2OpsQueryController_StreamPodLogsClient interface {
	Recv() (*model1.PodLogLine, error)
	grpc.ClientStream
}

type k8SD2OpsQueryControllerStreamPodLogsClient struct {
	grpc.ClientStream
}

func (x *k8SD2OpsQueryControllerStreamPodLogsClient) Recv() (*model1.PodLogLine, error) {
	m := new(model1.PodLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// K8SD2OpsQueryControllerServer is the server API for K8SD2OpsQueryController service.
// All implementations should embed UnimplementedK8SD2OpsQueryControllerServer
// for forward compatibility
type K8SD2OpsQueryControllerServer interface {
	// get detailed object of a kubernetes object
	Get(context.Context, *model.KubernetesClusterKubernetesObject) (*model1.KubernetesObjectDetail, error)
	// find list of namespaces on a kubernetes cluster
	FindNamespaces(context.Context, *model2.KubernetesClusterCredentialId) (*model1.KubernetesNamespaces, error)
	// stream all kubernetes objects from a kubernetes namespace in kube-cluster.
	// this is a streaming rpc since the lookup involves several kubernetes api-calls to fetch all the kubernetes-api-resources.
	// because of high number of api calls to upstream kubernetes cluster, the response is streamed to the client.
	StreamKubernetesObjects(*model.StreamKubernetesClusterNamespaceKubernetesObjectsInput, K8SD2OpsQueryController_StreamKubernetesObjectsServer) error
	// find list of pods in a kube-cluster on the specified filters
	FindPods(context.Context, *model.FindKubernetesClusterPodsInput) (*model1.Pods, error)
	// get details of a pod
	GetPod(context.Context, *model.KubernetesClusterKubernetesObject) (*model1.Pod, error)
	// stream logs of all kubernetes pods running in a kube-cluster on the specified filters
	StreamPodLogs(*model.StreamKubernetesClusterPodLogsInput, K8SD2OpsQueryController_StreamPodLogsServer) error
}

// UnimplementedK8SD2OpsQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedK8SD2OpsQueryControllerServer struct {
}

func (UnimplementedK8SD2OpsQueryControllerServer) Get(context.Context, *model.KubernetesClusterKubernetesObject) (*model1.KubernetesObjectDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedK8SD2OpsQueryControllerServer) FindNamespaces(context.Context, *model2.KubernetesClusterCredentialId) (*model1.KubernetesNamespaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNamespaces not implemented")
}
func (UnimplementedK8SD2OpsQueryControllerServer) StreamKubernetesObjects(*model.StreamKubernetesClusterNamespaceKubernetesObjectsInput, K8SD2OpsQueryController_StreamKubernetesObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamKubernetesObjects not implemented")
}
func (UnimplementedK8SD2OpsQueryControllerServer) FindPods(context.Context, *model.FindKubernetesClusterPodsInput) (*model1.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}
func (UnimplementedK8SD2OpsQueryControllerServer) GetPod(context.Context, *model.KubernetesClusterKubernetesObject) (*model1.Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedK8SD2OpsQueryControllerServer) StreamPodLogs(*model.StreamKubernetesClusterPodLogsInput, K8SD2OpsQueryController_StreamPodLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodLogs not implemented")
}

// UnsafeK8SD2OpsQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SD2OpsQueryControllerServer will
// result in compilation errors.
type UnsafeK8SD2OpsQueryControllerServer interface {
	mustEmbedUnimplementedK8SD2OpsQueryControllerServer()
}

func RegisterK8SD2OpsQueryControllerServer(s grpc.ServiceRegistrar, srv K8SD2OpsQueryControllerServer) {
	s.RegisterService(&K8SD2OpsQueryController_ServiceDesc, srv)
}

func _K8SD2OpsQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubernetesClusterKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsQueryControllerServer).Get(ctx, req.(*model.KubernetesClusterKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SD2OpsQueryController_FindNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.KubernetesClusterCredentialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsQueryControllerServer).FindNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsQueryController_FindNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsQueryControllerServer).FindNamespaces(ctx, req.(*model2.KubernetesClusterCredentialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SD2OpsQueryController_StreamKubernetesObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubernetesClusterNamespaceKubernetesObjectsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(K8SD2OpsQueryControllerServer).StreamKubernetesObjects(m, &k8SD2OpsQueryControllerStreamKubernetesObjectsServer{stream})
}

type K8SD2OpsQueryController_StreamKubernetesObjectsServer interface {
	Send(*model1.KubernetesObjects) error
	grpc.ServerStream
}

type k8SD2OpsQueryControllerStreamKubernetesObjectsServer struct {
	grpc.ServerStream
}

func (x *k8SD2OpsQueryControllerStreamKubernetesObjectsServer) Send(m *model1.KubernetesObjects) error {
	return x.ServerStream.SendMsg(m)
}

func _K8SD2OpsQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FindKubernetesClusterPodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsQueryControllerServer).FindPods(ctx, req.(*model.FindKubernetesClusterPodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SD2OpsQueryController_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubernetesClusterKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsQueryControllerServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsQueryController_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsQueryControllerServer).GetPod(ctx, req.(*model.KubernetesClusterKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SD2OpsQueryController_StreamPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamKubernetesClusterPodLogsInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(K8SD2OpsQueryControllerServer).StreamPodLogs(m, &k8SD2OpsQueryControllerStreamPodLogsServer{stream})
}

type K8SD2OpsQueryController_StreamPodLogsServer interface {
	Send(*model1.PodLogLine) error
	grpc.ServerStream
}

type k8SD2OpsQueryControllerStreamPodLogsServer struct {
	grpc.ServerStream
}

func (x *k8SD2OpsQueryControllerStreamPodLogsServer) Send(m *model1.PodLogLine) error {
	return x.ServerStream.SendMsg(m)
}

// K8SD2OpsQueryController_ServiceDesc is the grpc.ServiceDesc for K8SD2OpsQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SD2OpsQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsQueryController",
	HandlerType: (*K8SD2OpsQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _K8SD2OpsQueryController_Get_Handler,
		},
		{
			MethodName: "findNamespaces",
			Handler:    _K8SD2OpsQueryController_FindNamespaces_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _K8SD2OpsQueryController_FindPods_Handler,
		},
		{
			MethodName: "getPod",
			Handler:    _K8SD2OpsQueryController_GetPod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamKubernetesObjects",
			Handler:       _K8SD2OpsQueryController_StreamKubernetesObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamPodLogs",
			Handler:       _K8SD2OpsQueryController_StreamPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/k8sd2ops/v1/service/query.proto",
}
