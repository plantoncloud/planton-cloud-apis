// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/k8sd2ops/v1/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/apiresources/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/k8sd2ops/v1/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SD2OpsCommandController_Update_FullMethodName                                  = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsCommandController/update"
	K8SD2OpsCommandController_Delete_FullMethodName                                  = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsCommandController/delete"
	K8SD2OpsCommandController_ExecIntoPodContainer_FullMethodName                    = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsCommandController/execIntoPodContainer"
	K8SD2OpsCommandController_BrowserExecIntoPodContainer_FullMethodName             = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsCommandController/browserExecIntoPodContainer"
	K8SD2OpsCommandController_BrowserExecuteNextCommandInPodContainer_FullMethodName = "/cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsCommandController/browserExecuteNextCommandInPodContainer"
)

// K8SD2OpsCommandControllerClient is the client API for K8SD2OpsCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SD2OpsCommandControllerClient interface {
	// update kubernetes object in a kube-cluster
	Update(ctx context.Context, in *model.UpdateKubernetesClusterKubernetesObjectInput, opts ...grpc.CallOption) (*model1.KubernetesObject, error)
	// delete kubernetes object in a kube-cluster
	Delete(ctx context.Context, in *model.KubernetesClusterKubernetesObject, opts ...grpc.CallOption) (*model1.KubernetesObject, error)
	// mimic kubectl exec for a container on kube-cluster
	ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (K8SD2OpsCommandController_ExecIntoPodContainerClient, error)
	// *
	// Mimic kubectl exec for a container on a kube-cluster from browsers.
	// This is a workaround to handle the limitation of browsers not supporting bi-directional gRPC streams.
	BrowserExecIntoPodContainer(ctx context.Context, in *model.ExecIntoKubernetesClusterPodContainerInput, opts ...grpc.CallOption) (K8SD2OpsCommandController_BrowserExecIntoPodContainerClient, error)
	// *
	// Send the next command to execute for kube-ctl exec.
	// This RPC is used to send input from the client (browser) which originally would have been sent in a bi-directional stream.
	// NOTE: Authorization will be handled based on the api-resource kind and id since the request input is same for
	// all other api-resources and kube-cluster resources.
	BrowserExecuteNextCommandInPodContainer(ctx context.Context, in *model.BrowserExecuteNextCommandInPodContainerInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type k8SD2OpsCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SD2OpsCommandControllerClient(cc grpc.ClientConnInterface) K8SD2OpsCommandControllerClient {
	return &k8SD2OpsCommandControllerClient{cc}
}

func (c *k8SD2OpsCommandControllerClient) Update(ctx context.Context, in *model.UpdateKubernetesClusterKubernetesObjectInput, opts ...grpc.CallOption) (*model1.KubernetesObject, error) {
	out := new(model1.KubernetesObject)
	err := c.cc.Invoke(ctx, K8SD2OpsCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SD2OpsCommandControllerClient) Delete(ctx context.Context, in *model.KubernetesClusterKubernetesObject, opts ...grpc.CallOption) (*model1.KubernetesObject, error) {
	out := new(model1.KubernetesObject)
	err := c.cc.Invoke(ctx, K8SD2OpsCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SD2OpsCommandControllerClient) ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (K8SD2OpsCommandController_ExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &K8SD2OpsCommandController_ServiceDesc.Streams[0], K8SD2OpsCommandController_ExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &k8SD2OpsCommandControllerExecIntoPodContainerClient{stream}
	return x, nil
}

type K8SD2OpsCommandController_ExecIntoPodContainerClient interface {
	Send(*model.ExecIntoKubernetesClusterPodContainerInput) error
	Recv() (*model1.ExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type k8SD2OpsCommandControllerExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *k8SD2OpsCommandControllerExecIntoPodContainerClient) Send(m *model.ExecIntoKubernetesClusterPodContainerInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *k8SD2OpsCommandControllerExecIntoPodContainerClient) Recv() (*model1.ExecIntoPodContainerResponse, error) {
	m := new(model1.ExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *k8SD2OpsCommandControllerClient) BrowserExecIntoPodContainer(ctx context.Context, in *model.ExecIntoKubernetesClusterPodContainerInput, opts ...grpc.CallOption) (K8SD2OpsCommandController_BrowserExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &K8SD2OpsCommandController_ServiceDesc.Streams[1], K8SD2OpsCommandController_BrowserExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &k8SD2OpsCommandControllerBrowserExecIntoPodContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type K8SD2OpsCommandController_BrowserExecIntoPodContainerClient interface {
	Recv() (*model.BrowserExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type k8SD2OpsCommandControllerBrowserExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *k8SD2OpsCommandControllerBrowserExecIntoPodContainerClient) Recv() (*model.BrowserExecIntoPodContainerResponse, error) {
	m := new(model.BrowserExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *k8SD2OpsCommandControllerClient) BrowserExecuteNextCommandInPodContainer(ctx context.Context, in *model.BrowserExecuteNextCommandInPodContainerInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, K8SD2OpsCommandController_BrowserExecuteNextCommandInPodContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SD2OpsCommandControllerServer is the server API for K8SD2OpsCommandController service.
// All implementations should embed UnimplementedK8SD2OpsCommandControllerServer
// for forward compatibility
type K8SD2OpsCommandControllerServer interface {
	// update kubernetes object in a kube-cluster
	Update(context.Context, *model.UpdateKubernetesClusterKubernetesObjectInput) (*model1.KubernetesObject, error)
	// delete kubernetes object in a kube-cluster
	Delete(context.Context, *model.KubernetesClusterKubernetesObject) (*model1.KubernetesObject, error)
	// mimic kubectl exec for a container on kube-cluster
	ExecIntoPodContainer(K8SD2OpsCommandController_ExecIntoPodContainerServer) error
	// *
	// Mimic kubectl exec for a container on a kube-cluster from browsers.
	// This is a workaround to handle the limitation of browsers not supporting bi-directional gRPC streams.
	BrowserExecIntoPodContainer(*model.ExecIntoKubernetesClusterPodContainerInput, K8SD2OpsCommandController_BrowserExecIntoPodContainerServer) error
	// *
	// Send the next command to execute for kube-ctl exec.
	// This RPC is used to send input from the client (browser) which originally would have been sent in a bi-directional stream.
	// NOTE: Authorization will be handled based on the api-resource kind and id since the request input is same for
	// all other api-resources and kube-cluster resources.
	BrowserExecuteNextCommandInPodContainer(context.Context, *model.BrowserExecuteNextCommandInPodContainerInput) (*emptypb.Empty, error)
}

// UnimplementedK8SD2OpsCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedK8SD2OpsCommandControllerServer struct {
}

func (UnimplementedK8SD2OpsCommandControllerServer) Update(context.Context, *model.UpdateKubernetesClusterKubernetesObjectInput) (*model1.KubernetesObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedK8SD2OpsCommandControllerServer) Delete(context.Context, *model.KubernetesClusterKubernetesObject) (*model1.KubernetesObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedK8SD2OpsCommandControllerServer) ExecIntoPodContainer(K8SD2OpsCommandController_ExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecIntoPodContainer not implemented")
}
func (UnimplementedK8SD2OpsCommandControllerServer) BrowserExecIntoPodContainer(*model.ExecIntoKubernetesClusterPodContainerInput, K8SD2OpsCommandController_BrowserExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method BrowserExecIntoPodContainer not implemented")
}
func (UnimplementedK8SD2OpsCommandControllerServer) BrowserExecuteNextCommandInPodContainer(context.Context, *model.BrowserExecuteNextCommandInPodContainerInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowserExecuteNextCommandInPodContainer not implemented")
}

// UnsafeK8SD2OpsCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SD2OpsCommandControllerServer will
// result in compilation errors.
type UnsafeK8SD2OpsCommandControllerServer interface {
	mustEmbedUnimplementedK8SD2OpsCommandControllerServer()
}

func RegisterK8SD2OpsCommandControllerServer(s grpc.ServiceRegistrar, srv K8SD2OpsCommandControllerServer) {
	s.RegisterService(&K8SD2OpsCommandController_ServiceDesc, srv)
}

func _K8SD2OpsCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateKubernetesClusterKubernetesObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsCommandControllerServer).Update(ctx, req.(*model.UpdateKubernetesClusterKubernetesObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SD2OpsCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KubernetesClusterKubernetesObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsCommandControllerServer).Delete(ctx, req.(*model.KubernetesClusterKubernetesObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SD2OpsCommandController_ExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(K8SD2OpsCommandControllerServer).ExecIntoPodContainer(&k8SD2OpsCommandControllerExecIntoPodContainerServer{stream})
}

type K8SD2OpsCommandController_ExecIntoPodContainerServer interface {
	Send(*model1.ExecIntoPodContainerResponse) error
	Recv() (*model.ExecIntoKubernetesClusterPodContainerInput, error)
	grpc.ServerStream
}

type k8SD2OpsCommandControllerExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *k8SD2OpsCommandControllerExecIntoPodContainerServer) Send(m *model1.ExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *k8SD2OpsCommandControllerExecIntoPodContainerServer) Recv() (*model.ExecIntoKubernetesClusterPodContainerInput, error) {
	m := new(model.ExecIntoKubernetesClusterPodContainerInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _K8SD2OpsCommandController_BrowserExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.ExecIntoKubernetesClusterPodContainerInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(K8SD2OpsCommandControllerServer).BrowserExecIntoPodContainer(m, &k8SD2OpsCommandControllerBrowserExecIntoPodContainerServer{stream})
}

type K8SD2OpsCommandController_BrowserExecIntoPodContainerServer interface {
	Send(*model.BrowserExecIntoPodContainerResponse) error
	grpc.ServerStream
}

type k8SD2OpsCommandControllerBrowserExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *k8SD2OpsCommandControllerBrowserExecIntoPodContainerServer) Send(m *model.BrowserExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _K8SD2OpsCommandController_BrowserExecuteNextCommandInPodContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.BrowserExecuteNextCommandInPodContainerInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SD2OpsCommandControllerServer).BrowserExecuteNextCommandInPodContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SD2OpsCommandController_BrowserExecuteNextCommandInPodContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SD2OpsCommandControllerServer).BrowserExecuteNextCommandInPodContainer(ctx, req.(*model.BrowserExecuteNextCommandInPodContainerInput))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SD2OpsCommandController_ServiceDesc is the grpc.ServiceDesc for K8SD2OpsCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SD2OpsCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.k8sd2ops.v1.service.K8sD2OpsCommandController",
	HandlerType: (*K8SD2OpsCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _K8SD2OpsCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _K8SD2OpsCommandController_Delete_Handler,
		},
		{
			MethodName: "browserExecuteNextCommandInPodContainer",
			Handler:    _K8SD2OpsCommandController_BrowserExecuteNextCommandInPodContainer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execIntoPodContainer",
			Handler:       _K8SD2OpsCommandController_ExecIntoPodContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "browserExecIntoPodContainer",
			Handler:       _K8SD2OpsCommandController_BrowserExecIntoPodContainer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/k8sd2ops/v1/service/command.proto",
}
