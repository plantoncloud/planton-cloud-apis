// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/k8sd2ops/v1/podexec/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/integration/v1/kubernetes/kubernetesobject/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/k8sd2ops/v1/podexec/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainer_FullMethodName                    = "/cloud.planton.apis.k8sd2ops.v1.podexec.service.ApiResourceKubernetesPodExecCommandController/execIntoPodContainer"
	ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainer_FullMethodName             = "/cloud.planton.apis.k8sd2ops.v1.podexec.service.ApiResourceKubernetesPodExecCommandController/browserExecIntoPodContainer"
	ApiResourceKubernetesPodExecCommandController_BrowserExecuteNextCommandInPodContainer_FullMethodName = "/cloud.planton.apis.k8sd2ops.v1.podexec.service.ApiResourceKubernetesPodExecCommandController/browserExecuteNextCommandInPodContainer"
)

// ApiResourceKubernetesPodExecCommandControllerClient is the client API for ApiResourceKubernetesPodExecCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiResourceKubernetesPodExecCommandControllerClient interface {
	// mimic kubectl exec for a container on kube-cluster
	ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainerClient, error)
	// *
	// Mimic kubectl exec for a container on a kube-cluster from browsers.
	// This is a workaround to handle the limitation of browsers not supporting bi-directional gRPC streams.
	BrowserExecIntoPodContainer(ctx context.Context, in *model.ExecIntoPodContainerInput, opts ...grpc.CallOption) (ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainerClient, error)
	// *
	// Send the next command to execute for kube-ctl exec.
	// This RPC is used to send input from the client (browser) which originally would have been sent in a bi-directional stream.
	// NOTE: Authorization will be handled based on the api-resource kind and id since the request input is same for
	// all other api-resources and kube-cluster resources.
	BrowserExecuteNextCommandInPodContainer(ctx context.Context, in *model.BrowserExecuteNextCommandInPodContainerInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type apiResourceKubernetesPodExecCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewApiResourceKubernetesPodExecCommandControllerClient(cc grpc.ClientConnInterface) ApiResourceKubernetesPodExecCommandControllerClient {
	return &apiResourceKubernetesPodExecCommandControllerClient{cc}
}

func (c *apiResourceKubernetesPodExecCommandControllerClient) ExecIntoPodContainer(ctx context.Context, opts ...grpc.CallOption) (ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiResourceKubernetesPodExecCommandController_ServiceDesc.Streams[0], ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerClient{stream}
	return x, nil
}

type ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainerClient interface {
	Send(*model.ExecIntoPodContainerInput) error
	Recv() (*model1.ExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerClient) Send(m *model.ExecIntoPodContainerInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerClient) Recv() (*model1.ExecIntoPodContainerResponse, error) {
	m := new(model1.ExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiResourceKubernetesPodExecCommandControllerClient) BrowserExecIntoPodContainer(ctx context.Context, in *model.ExecIntoPodContainerInput, opts ...grpc.CallOption) (ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiResourceKubernetesPodExecCommandController_ServiceDesc.Streams[1], ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiResourceKubernetesPodExecCommandControllerBrowserExecIntoPodContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainerClient interface {
	Recv() (*model.BrowserExecIntoPodContainerResponse, error)
	grpc.ClientStream
}

type apiResourceKubernetesPodExecCommandControllerBrowserExecIntoPodContainerClient struct {
	grpc.ClientStream
}

func (x *apiResourceKubernetesPodExecCommandControllerBrowserExecIntoPodContainerClient) Recv() (*model.BrowserExecIntoPodContainerResponse, error) {
	m := new(model.BrowserExecIntoPodContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiResourceKubernetesPodExecCommandControllerClient) BrowserExecuteNextCommandInPodContainer(ctx context.Context, in *model.BrowserExecuteNextCommandInPodContainerInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiResourceKubernetesPodExecCommandController_BrowserExecuteNextCommandInPodContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiResourceKubernetesPodExecCommandControllerServer is the server API for ApiResourceKubernetesPodExecCommandController service.
// All implementations should embed UnimplementedApiResourceKubernetesPodExecCommandControllerServer
// for forward compatibility
type ApiResourceKubernetesPodExecCommandControllerServer interface {
	// mimic kubectl exec for a container on kube-cluster
	ExecIntoPodContainer(ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainerServer) error
	// *
	// Mimic kubectl exec for a container on a kube-cluster from browsers.
	// This is a workaround to handle the limitation of browsers not supporting bi-directional gRPC streams.
	BrowserExecIntoPodContainer(*model.ExecIntoPodContainerInput, ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainerServer) error
	// *
	// Send the next command to execute for kube-ctl exec.
	// This RPC is used to send input from the client (browser) which originally would have been sent in a bi-directional stream.
	// NOTE: Authorization will be handled based on the api-resource kind and id since the request input is same for
	// all other api-resources and kube-cluster resources.
	BrowserExecuteNextCommandInPodContainer(context.Context, *model.BrowserExecuteNextCommandInPodContainerInput) (*emptypb.Empty, error)
}

// UnimplementedApiResourceKubernetesPodExecCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedApiResourceKubernetesPodExecCommandControllerServer struct {
}

func (UnimplementedApiResourceKubernetesPodExecCommandControllerServer) ExecIntoPodContainer(ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecIntoPodContainer not implemented")
}
func (UnimplementedApiResourceKubernetesPodExecCommandControllerServer) BrowserExecIntoPodContainer(*model.ExecIntoPodContainerInput, ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method BrowserExecIntoPodContainer not implemented")
}
func (UnimplementedApiResourceKubernetesPodExecCommandControllerServer) BrowserExecuteNextCommandInPodContainer(context.Context, *model.BrowserExecuteNextCommandInPodContainerInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowserExecuteNextCommandInPodContainer not implemented")
}

// UnsafeApiResourceKubernetesPodExecCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiResourceKubernetesPodExecCommandControllerServer will
// result in compilation errors.
type UnsafeApiResourceKubernetesPodExecCommandControllerServer interface {
	mustEmbedUnimplementedApiResourceKubernetesPodExecCommandControllerServer()
}

func RegisterApiResourceKubernetesPodExecCommandControllerServer(s grpc.ServiceRegistrar, srv ApiResourceKubernetesPodExecCommandControllerServer) {
	s.RegisterService(&ApiResourceKubernetesPodExecCommandController_ServiceDesc, srv)
}

func _ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiResourceKubernetesPodExecCommandControllerServer).ExecIntoPodContainer(&apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerServer{stream})
}

type ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainerServer interface {
	Send(*model1.ExecIntoPodContainerResponse) error
	Recv() (*model.ExecIntoPodContainerInput, error)
	grpc.ServerStream
}

type apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerServer) Send(m *model1.ExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiResourceKubernetesPodExecCommandControllerExecIntoPodContainerServer) Recv() (*model.ExecIntoPodContainerInput, error) {
	m := new(model.ExecIntoPodContainerInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.ExecIntoPodContainerInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiResourceKubernetesPodExecCommandControllerServer).BrowserExecIntoPodContainer(m, &apiResourceKubernetesPodExecCommandControllerBrowserExecIntoPodContainerServer{stream})
}

type ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainerServer interface {
	Send(*model.BrowserExecIntoPodContainerResponse) error
	grpc.ServerStream
}

type apiResourceKubernetesPodExecCommandControllerBrowserExecIntoPodContainerServer struct {
	grpc.ServerStream
}

func (x *apiResourceKubernetesPodExecCommandControllerBrowserExecIntoPodContainerServer) Send(m *model.BrowserExecIntoPodContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiResourceKubernetesPodExecCommandController_BrowserExecuteNextCommandInPodContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.BrowserExecuteNextCommandInPodContainerInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiResourceKubernetesPodExecCommandControllerServer).BrowserExecuteNextCommandInPodContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiResourceKubernetesPodExecCommandController_BrowserExecuteNextCommandInPodContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiResourceKubernetesPodExecCommandControllerServer).BrowserExecuteNextCommandInPodContainer(ctx, req.(*model.BrowserExecuteNextCommandInPodContainerInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiResourceKubernetesPodExecCommandController_ServiceDesc is the grpc.ServiceDesc for ApiResourceKubernetesPodExecCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiResourceKubernetesPodExecCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.k8sd2ops.v1.podexec.service.ApiResourceKubernetesPodExecCommandController",
	HandlerType: (*ApiResourceKubernetesPodExecCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "browserExecuteNextCommandInPodContainer",
			Handler:    _ApiResourceKubernetesPodExecCommandController_BrowserExecuteNextCommandInPodContainer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execIntoPodContainer",
			Handler:       _ApiResourceKubernetesPodExecCommandController_ExecIntoPodContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "browserExecIntoPodContainer",
			Handler:       _ApiResourceKubernetesPodExecCommandController_BrowserExecIntoPodContainer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/k8sd2ops/v1/podexec/service/command.proto",
}
