// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/search/v1/model/io.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	apiresourcekind "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	apiresourcelookupfilter "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcelookupfilter"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Resource is a message type that represents a single resource object.
// Resource object has all fields that are required to save in search engine collection.
// It contains identifying and contextual information about the resource,
// such as its id, name, type, and the associated organization and
// environment identifiers.
type ApiResourceSearchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the resource.
	// example for resource in planton-cloud could be postgres_cluster/ kafka_cluster/ microservice_instance etc.;
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human-readable name for the resource.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the resource.
	Type apiresourcekind.ApiResourceKind `protobuf:"varint,3,opt,name=type,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"type,omitempty"`
	// Unique identifier for the organization associated with this resource.
	OrgId string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Unique identifier for the environment
	EnvId string `protobuf:"bytes,5,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	// This field records the identifier (typically a username or a system process name)
	// of the entity that created the resource associated with this message.
	// It provides an audit trail for tracking who created a particular record. Depending on the
	// context, this could be a user ID, system process name, or another form of identifier that can
	// uniquely identify the creator.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// This field records the timestamp at which the record associated with the resource was created.
	// The Timestamp message represents a point in time independent of any time zone or calendar, represented
	// as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time. It provides an audit trail for tracking
	// when a particular record was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// flag to indicate if the resource is deleted.
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// this field is specific to identity account resource and it represents the email of the identity account
	Email string `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	// list of supported deployment-modules
	// this field is specific to stack job runner
	SupportedDeploymentModules []apiresourcekind.ApiResourceKind `protobuf:"varint,10,rep,packed,name=supported_deployment_modules,json=supportedDeploymentModules,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"supported_deployment_modules,omitempty"`
}

func (x *ApiResourceSearchRecord) Reset() {
	*x = ApiResourceSearchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceSearchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceSearchRecord) ProtoMessage() {}

func (x *ApiResourceSearchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceSearchRecord.ProtoReflect.Descriptor instead.
func (*ApiResourceSearchRecord) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *ApiResourceSearchRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiResourceSearchRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiResourceSearchRecord) GetType() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.Type
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *ApiResourceSearchRecord) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ApiResourceSearchRecord) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *ApiResourceSearchRecord) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ApiResourceSearchRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApiResourceSearchRecord) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ApiResourceSearchRecord) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ApiResourceSearchRecord) GetSupportedDeploymentModules() []apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.SupportedDeploymentModules
	}
	return nil
}

// ResourceList is a message type that represents a paginated list of Resource objects.
// It contains information about the total number of pages in the list and an array of Resource entries.
type ApiResourceSearchResultRecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of pages in the paginated list of Resource objects.
	TotalPages int32 `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// An array of Resource objects contained in the current page of the paginated list.
	Entries []*ApiResourceSearchRecord `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ApiResourceSearchResultRecordList) Reset() {
	*x = ApiResourceSearchResultRecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceSearchResultRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceSearchResultRecordList) ProtoMessage() {}

func (x *ApiResourceSearchResultRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceSearchResultRecordList.ProtoReflect.Descriptor instead.
func (*ApiResourceSearchResultRecordList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *ApiResourceSearchResultRecordList) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ApiResourceSearchResultRecordList) GetEntries() []*ApiResourceSearchRecord {
	if x != nil {
		return x.Entries
	}
	return nil
}

// SearchByTextInput is a message type that represents the input parameters
// for a text-based search query for a given context of organization and environement.
// It contains the organization identifier, environment identifier, and the search
// text to be used in the query.
type SearchByTextInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the organization associated with the search query.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Unique identifier for the environment associated with the search query.
	EnvId string `protobuf:"bytes,2,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	// The text input to be used as the basis for the search query.
	SearchText string `protobuf:"bytes,3,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	// pagination info to get specific paginated data
	PageInfo *rpc.PageInfo `protobuf:"bytes,4,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *SearchByTextInput) Reset() {
	*x = SearchByTextInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchByTextInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByTextInput) ProtoMessage() {}

func (x *SearchByTextInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByTextInput.ProtoReflect.Descriptor instead.
func (*SearchByTextInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *SearchByTextInput) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SearchByTextInput) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *SearchByTextInput) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *SearchByTextInput) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

// The SearchByApiResourceKindInput message represents the input parameters required for
// executing a search operation based on a specified resource type within a given
// organization's environment.
type SearchApiResourcesByKindInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the unique identifier for the organization
	// associated with the search query. The search operation will only consider resources
	// associated with this organization.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// This is the unique identifier for the environment
	// associated with the search query. The search operation will only consider resources
	// that are linked with this environment.
	EnvId string `protobuf:"bytes,2,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	// This field indicates the type of resource that the search operation will be focusing on.
	// The possible resource types are defined by the ApiResourceKind enum.
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,3,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// This field contains the pagination information used for retrieving specific paginated
	// data. It enables the client to specify the number of records per page and the page number.
	PageInfo *rpc.PageInfo `protobuf:"bytes,4,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// this field is an enumeration used to dictate the active status of the resources
	// included in the search results.
	LookupFilter apiresourcelookupfilter.ApiResourceLookupFilter `protobuf:"varint,5,opt,name=lookup_filter,json=lookupFilter,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter" json:"lookup_filter,omitempty"`
}

func (x *SearchApiResourcesByKindInput) Reset() {
	*x = SearchApiResourcesByKindInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchApiResourcesByKindInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchApiResourcesByKindInput) ProtoMessage() {}

func (x *SearchApiResourcesByKindInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchApiResourcesByKindInput.ProtoReflect.Descriptor instead.
func (*SearchApiResourcesByKindInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *SearchApiResourcesByKindInput) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SearchApiResourcesByKindInput) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *SearchApiResourcesByKindInput) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *SearchApiResourcesByKindInput) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *SearchApiResourcesByKindInput) GetLookupFilter() apiresourcelookupfilter.ApiResourceLookupFilter {
	if x != nil {
		return x.LookupFilter
	}
	return apiresourcelookupfilter.ApiResourceLookupFilter(0)
}

// SearchIdentityAccountByEmail is a message type that represents the input parameters
// for a search query based on the email for a given context of a organization.
// It contains the organization identifier and the search text to be used in the query,
// along with pagination information for retrieving specific data subsets.
type SearchIdentityAccountByEmailInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the organization associated with the search query.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The email or part of the email to be used as the basis for the search query.
	SearchText string `protobuf:"bytes,2,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	// Pagination info to retrieve specific paginated data.
	PageInfo *rpc.PageInfo `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *SearchIdentityAccountByEmailInput) Reset() {
	*x = SearchIdentityAccountByEmailInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIdentityAccountByEmailInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIdentityAccountByEmailInput) ProtoMessage() {}

func (x *SearchIdentityAccountByEmailInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIdentityAccountByEmailInput.ProtoReflect.Descriptor instead.
func (*SearchIdentityAccountByEmailInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *SearchIdentityAccountByEmailInput) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SearchIdentityAccountByEmailInput) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *SearchIdentityAccountByEmailInput) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type SearchStackJobRunnerByDeploymentModuleInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the unique identifier for the organization
	// associated with the search query. The search operation will only consider resources
	// associated with this organization.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// This field indicates the supported_deployment_modules of the stack job runner that the search operation will be focusing on.
	// The possible supported_deployment_modules are defined by the ApiResourceKind enum.
	DeploymentModule apiresourcekind.ApiResourceKind `protobuf:"varint,2,opt,name=deployment_module,json=deploymentModule,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"deployment_module,omitempty"`
	// This field contains the pagination information used for retrieving specific paginated
	// data. It enables the client to specify the number of records per page and the page number.
	PageInfo *rpc.PageInfo `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *SearchStackJobRunnerByDeploymentModuleInput) Reset() {
	*x = SearchStackJobRunnerByDeploymentModuleInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchStackJobRunnerByDeploymentModuleInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStackJobRunnerByDeploymentModuleInput) ProtoMessage() {}

func (x *SearchStackJobRunnerByDeploymentModuleInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStackJobRunnerByDeploymentModuleInput.ProtoReflect.Descriptor instead.
func (*SearchStackJobRunnerByDeploymentModuleInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *SearchStackJobRunnerByDeploymentModuleInput) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SearchStackJobRunnerByDeploymentModuleInput) GetDeploymentModule() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.DeploymentModule
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *SearchStackJobRunnerByDeploymentModuleInput) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type SearchContextHierarchyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text input to be used as the basis for the search query.
	SearchText string `protobuf:"bytes,1,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
}

func (x *SearchContextHierarchyInput) Reset() {
	*x = SearchContextHierarchyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContextHierarchyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContextHierarchyInput) ProtoMessage() {}

func (x *SearchContextHierarchyInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContextHierarchyInput.ProtoReflect.Descriptor instead.
func (*SearchContextHierarchyInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *SearchContextHierarchyInput) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

type SearchContextHierarchy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgs []*ContextOrg `protobuf:"bytes,3,rep,name=orgs,proto3" json:"orgs,omitempty"`
}

func (x *SearchContextHierarchy) Reset() {
	*x = SearchContextHierarchy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContextHierarchy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContextHierarchy) ProtoMessage() {}

func (x *SearchContextHierarchy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContextHierarchy.ProtoReflect.Descriptor instead.
func (*SearchContextHierarchy) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *SearchContextHierarchy) GetOrgs() []*ContextOrg {
	if x != nil {
		return x.Orgs
	}
	return nil
}

type ContextOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId   string        `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgName string        `protobuf:"bytes,2,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	Envs    []*ContextEnv `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs,omitempty"`
}

func (x *ContextOrg) Reset() {
	*x = ContextOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOrg) ProtoMessage() {}

func (x *ContextOrg) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOrg.ProtoReflect.Descriptor instead.
func (*ContextOrg) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{8}
}

func (x *ContextOrg) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ContextOrg) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ContextOrg) GetEnvs() []*ContextEnv {
	if x != nil {
		return x.Envs
	}
	return nil
}

type ContextEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId   string `protobuf:"bytes,1,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	EnvName string `protobuf:"bytes,2,opt,name=env_name,json=envName,proto3" json:"env_name,omitempty"`
}

func (x *ContextEnv) Reset() {
	*x = ContextEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextEnv) ProtoMessage() {}

func (x *ContextEnv) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextEnv.ProtoReflect.Descriptor instead.
func (*ContextEnv) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP(), []int{9}
}

func (x *ContextEnv) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *ContextEnv) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

var File_cloud_planton_apis_search_v1_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_search_v1_model_io_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x1a, 0x54, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x67,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x03, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b,
	0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8d, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64,
	0x12, 0x72, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x82, 0x01, 0x0a, 0x0d,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xaa, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x02,
	0x0a, 0x2b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5c, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x12, 0x42, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x72, 0x67, 0x52,
	0x04, 0x6f, 0x72, 0x67, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4f, 0x72, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x76, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0xbf, 0x02, 0x0a, 0x30, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02,
	0x06, 0x43, 0x50, 0x41, 0x53, 0x56, 0x4d, 0xaa, 0x02, 0x22, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x22, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69,
	0x73, 0x5c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5c, 0x56, 0x31, 0x5c, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0xe2, 0x02, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5c, 0x56, 0x31,
	0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x27, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_search_v1_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_search_v1_model_io_proto_rawDescData = file_cloud_planton_apis_search_v1_model_io_proto_rawDesc
)

func file_cloud_planton_apis_search_v1_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_search_v1_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_search_v1_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_search_v1_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_search_v1_model_io_proto_rawDescData
}

var file_cloud_planton_apis_search_v1_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cloud_planton_apis_search_v1_model_io_proto_goTypes = []interface{}{
	(*ApiResourceSearchRecord)(nil),                      // 0: cloud.planton.apis.search.v1.model.ApiResourceSearchRecord
	(*ApiResourceSearchResultRecordList)(nil),            // 1: cloud.planton.apis.search.v1.model.ApiResourceSearchResultRecordList
	(*SearchByTextInput)(nil),                            // 2: cloud.planton.apis.search.v1.model.SearchByTextInput
	(*SearchApiResourcesByKindInput)(nil),                // 3: cloud.planton.apis.search.v1.model.SearchApiResourcesByKindInput
	(*SearchIdentityAccountByEmailInput)(nil),            // 4: cloud.planton.apis.search.v1.model.SearchIdentityAccountByEmailInput
	(*SearchStackJobRunnerByDeploymentModuleInput)(nil),  // 5: cloud.planton.apis.search.v1.model.SearchStackJobRunnerByDeploymentModuleInput
	(*SearchContextHierarchyInput)(nil),                  // 6: cloud.planton.apis.search.v1.model.SearchContextHierarchyInput
	(*SearchContextHierarchy)(nil),                       // 7: cloud.planton.apis.search.v1.model.SearchContextHierarchy
	(*ContextOrg)(nil),                                   // 8: cloud.planton.apis.search.v1.model.ContextOrg
	(*ContextEnv)(nil),                                   // 9: cloud.planton.apis.search.v1.model.ContextEnv
	(apiresourcekind.ApiResourceKind)(0),                 // 10: cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	(*timestamppb.Timestamp)(nil),                        // 11: google.protobuf.Timestamp
	(*rpc.PageInfo)(nil),                                 // 12: cloud.planton.apis.commons.rpc.PageInfo
	(apiresourcelookupfilter.ApiResourceLookupFilter)(0), // 13: cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter
}
var file_cloud_planton_apis_search_v1_model_io_proto_depIdxs = []int32{
	10, // 0: cloud.planton.apis.search.v1.model.ApiResourceSearchRecord.type:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	11, // 1: cloud.planton.apis.search.v1.model.ApiResourceSearchRecord.created_at:type_name -> google.protobuf.Timestamp
	10, // 2: cloud.planton.apis.search.v1.model.ApiResourceSearchRecord.supported_deployment_modules:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	0,  // 3: cloud.planton.apis.search.v1.model.ApiResourceSearchResultRecordList.entries:type_name -> cloud.planton.apis.search.v1.model.ApiResourceSearchRecord
	12, // 4: cloud.planton.apis.search.v1.model.SearchByTextInput.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	10, // 5: cloud.planton.apis.search.v1.model.SearchApiResourcesByKindInput.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	12, // 6: cloud.planton.apis.search.v1.model.SearchApiResourcesByKindInput.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	13, // 7: cloud.planton.apis.search.v1.model.SearchApiResourcesByKindInput.lookup_filter:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter
	12, // 8: cloud.planton.apis.search.v1.model.SearchIdentityAccountByEmailInput.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	10, // 9: cloud.planton.apis.search.v1.model.SearchStackJobRunnerByDeploymentModuleInput.deployment_module:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	12, // 10: cloud.planton.apis.search.v1.model.SearchStackJobRunnerByDeploymentModuleInput.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	8,  // 11: cloud.planton.apis.search.v1.model.SearchContextHierarchy.orgs:type_name -> cloud.planton.apis.search.v1.model.ContextOrg
	9,  // 12: cloud.planton.apis.search.v1.model.ContextOrg.envs:type_name -> cloud.planton.apis.search.v1.model.ContextEnv
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_search_v1_model_io_proto_init() }
func file_cloud_planton_apis_search_v1_model_io_proto_init() {
	if File_cloud_planton_apis_search_v1_model_io_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceSearchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceSearchResultRecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchByTextInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchApiResourcesByKindInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIdentityAccountByEmailInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchStackJobRunnerByDeploymentModuleInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContextHierarchyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContextHierarchy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_search_v1_model_io_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_search_v1_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_search_v1_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_search_v1_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_search_v1_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_search_v1_model_io_proto = out.File
	file_cloud_planton_apis_search_v1_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_search_v1_model_io_proto_goTypes = nil
	file_cloud_planton_apis_search_v1_model_io_proto_depIdxs = nil
}
