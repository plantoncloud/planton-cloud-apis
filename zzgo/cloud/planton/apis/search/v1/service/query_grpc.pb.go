// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/search/v1/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/search/v1/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchQueryController_SearchByText_FullMethodName                           = "/cloud.planton.apis.search.v1.service.SearchQueryController/searchByText"
	SearchQueryController_SearchByApiResourceKind_FullMethodName                = "/cloud.planton.apis.search.v1.service.SearchQueryController/searchByApiResourceKind"
	SearchQueryController_SearchIdentityAccountByEmail_FullMethodName           = "/cloud.planton.apis.search.v1.service.SearchQueryController/searchIdentityAccountByEmail"
	SearchQueryController_SearchStackJobRunnerByDeploymentModule_FullMethodName = "/cloud.planton.apis.search.v1.service.SearchQueryController/searchStackJobRunnerByDeploymentModule"
	SearchQueryController_SearchContextHierarchy_FullMethodName                 = "/cloud.planton.apis.search.v1.service.SearchQueryController/searchContextHierarchy"
)

// SearchQueryControllerClient is the client API for SearchQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchQueryControllerClient interface {
	// SearchByText is an RPC method that takes a SearchByTextInput message
	// containing the organization identifier, environment identifier, and search text.
	// This method is responsible for performing a text-based search query
	// related to the specified organization and environment, and it returns a response
	// containing the search results.
	SearchByText(ctx context.Context, in *model.SearchByTextInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error)
	// This method returns a `ResourceList` message, which encapsulates a list of resources that match
	// the input search parameters. Each resource in the list should match the specified resource type,
	// and be associated with the specified organization and environment.
	SearchByApiResourceKind(ctx context.Context, in *model.SearchApiResourcesByKindInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error)
	// This method returns a `ResourceList` message, which encapsulates a list of identities that match
	// the input search parameters. Each identity in the list should be associated with the specified organization
	// and match the specified email or part thereof.
	SearchIdentityAccountByEmail(ctx context.Context, in *model.SearchIdentityAccountByEmailInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error)
	// This method returns a `ResourceList` message, which encapsulates a list of stack job runners that match
	// the input search parameters. Each stack job runner in the list should be associated with the specified organization
	// and support the specified deployment module.
	SearchStackJobRunnerByDeploymentModule(ctx context.Context, in *model.SearchStackJobRunnerByDeploymentModuleInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error)
	// Each environment within an organization is represented by a `EnvInfo` message, containing a unique identifier (`env_id`)
	// and the environment's name (`env_name`).
	SearchContextHierarchy(ctx context.Context, in *model.SearchContextHierarchyInput, opts ...grpc.CallOption) (*model.SearchContextHierarchy, error)
}

type searchQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchQueryControllerClient(cc grpc.ClientConnInterface) SearchQueryControllerClient {
	return &searchQueryControllerClient{cc}
}

func (c *searchQueryControllerClient) SearchByText(ctx context.Context, in *model.SearchByTextInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error) {
	out := new(model.ApiResourceSearchRecordList)
	err := c.cc.Invoke(ctx, SearchQueryController_SearchByText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchQueryControllerClient) SearchByApiResourceKind(ctx context.Context, in *model.SearchApiResourcesByKindInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error) {
	out := new(model.ApiResourceSearchRecordList)
	err := c.cc.Invoke(ctx, SearchQueryController_SearchByApiResourceKind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchQueryControllerClient) SearchIdentityAccountByEmail(ctx context.Context, in *model.SearchIdentityAccountByEmailInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error) {
	out := new(model.ApiResourceSearchRecordList)
	err := c.cc.Invoke(ctx, SearchQueryController_SearchIdentityAccountByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchQueryControllerClient) SearchStackJobRunnerByDeploymentModule(ctx context.Context, in *model.SearchStackJobRunnerByDeploymentModuleInput, opts ...grpc.CallOption) (*model.ApiResourceSearchRecordList, error) {
	out := new(model.ApiResourceSearchRecordList)
	err := c.cc.Invoke(ctx, SearchQueryController_SearchStackJobRunnerByDeploymentModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchQueryControllerClient) SearchContextHierarchy(ctx context.Context, in *model.SearchContextHierarchyInput, opts ...grpc.CallOption) (*model.SearchContextHierarchy, error) {
	out := new(model.SearchContextHierarchy)
	err := c.cc.Invoke(ctx, SearchQueryController_SearchContextHierarchy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchQueryControllerServer is the server API for SearchQueryController service.
// All implementations should embed UnimplementedSearchQueryControllerServer
// for forward compatibility
type SearchQueryControllerServer interface {
	// SearchByText is an RPC method that takes a SearchByTextInput message
	// containing the organization identifier, environment identifier, and search text.
	// This method is responsible for performing a text-based search query
	// related to the specified organization and environment, and it returns a response
	// containing the search results.
	SearchByText(context.Context, *model.SearchByTextInput) (*model.ApiResourceSearchRecordList, error)
	// This method returns a `ResourceList` message, which encapsulates a list of resources that match
	// the input search parameters. Each resource in the list should match the specified resource type,
	// and be associated with the specified organization and environment.
	SearchByApiResourceKind(context.Context, *model.SearchApiResourcesByKindInput) (*model.ApiResourceSearchRecordList, error)
	// This method returns a `ResourceList` message, which encapsulates a list of identities that match
	// the input search parameters. Each identity in the list should be associated with the specified organization
	// and match the specified email or part thereof.
	SearchIdentityAccountByEmail(context.Context, *model.SearchIdentityAccountByEmailInput) (*model.ApiResourceSearchRecordList, error)
	// This method returns a `ResourceList` message, which encapsulates a list of stack job runners that match
	// the input search parameters. Each stack job runner in the list should be associated with the specified organization
	// and support the specified deployment module.
	SearchStackJobRunnerByDeploymentModule(context.Context, *model.SearchStackJobRunnerByDeploymentModuleInput) (*model.ApiResourceSearchRecordList, error)
	// Each environment within an organization is represented by a `EnvInfo` message, containing a unique identifier (`env_id`)
	// and the environment's name (`env_name`).
	SearchContextHierarchy(context.Context, *model.SearchContextHierarchyInput) (*model.SearchContextHierarchy, error)
}

// UnimplementedSearchQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSearchQueryControllerServer struct {
}

func (UnimplementedSearchQueryControllerServer) SearchByText(context.Context, *model.SearchByTextInput) (*model.ApiResourceSearchRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByText not implemented")
}
func (UnimplementedSearchQueryControllerServer) SearchByApiResourceKind(context.Context, *model.SearchApiResourcesByKindInput) (*model.ApiResourceSearchRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByApiResourceKind not implemented")
}
func (UnimplementedSearchQueryControllerServer) SearchIdentityAccountByEmail(context.Context, *model.SearchIdentityAccountByEmailInput) (*model.ApiResourceSearchRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIdentityAccountByEmail not implemented")
}
func (UnimplementedSearchQueryControllerServer) SearchStackJobRunnerByDeploymentModule(context.Context, *model.SearchStackJobRunnerByDeploymentModuleInput) (*model.ApiResourceSearchRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStackJobRunnerByDeploymentModule not implemented")
}
func (UnimplementedSearchQueryControllerServer) SearchContextHierarchy(context.Context, *model.SearchContextHierarchyInput) (*model.SearchContextHierarchy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContextHierarchy not implemented")
}

// UnsafeSearchQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchQueryControllerServer will
// result in compilation errors.
type UnsafeSearchQueryControllerServer interface {
	mustEmbedUnimplementedSearchQueryControllerServer()
}

func RegisterSearchQueryControllerServer(s grpc.ServiceRegistrar, srv SearchQueryControllerServer) {
	s.RegisterService(&SearchQueryController_ServiceDesc, srv)
}

func _SearchQueryController_SearchByText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SearchByTextInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchQueryControllerServer).SearchByText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchQueryController_SearchByText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchQueryControllerServer).SearchByText(ctx, req.(*model.SearchByTextInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchQueryController_SearchByApiResourceKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SearchApiResourcesByKindInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchQueryControllerServer).SearchByApiResourceKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchQueryController_SearchByApiResourceKind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchQueryControllerServer).SearchByApiResourceKind(ctx, req.(*model.SearchApiResourcesByKindInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchQueryController_SearchIdentityAccountByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SearchIdentityAccountByEmailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchQueryControllerServer).SearchIdentityAccountByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchQueryController_SearchIdentityAccountByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchQueryControllerServer).SearchIdentityAccountByEmail(ctx, req.(*model.SearchIdentityAccountByEmailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchQueryController_SearchStackJobRunnerByDeploymentModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SearchStackJobRunnerByDeploymentModuleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchQueryControllerServer).SearchStackJobRunnerByDeploymentModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchQueryController_SearchStackJobRunnerByDeploymentModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchQueryControllerServer).SearchStackJobRunnerByDeploymentModule(ctx, req.(*model.SearchStackJobRunnerByDeploymentModuleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchQueryController_SearchContextHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SearchContextHierarchyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchQueryControllerServer).SearchContextHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchQueryController_SearchContextHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchQueryControllerServer).SearchContextHierarchy(ctx, req.(*model.SearchContextHierarchyInput))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchQueryController_ServiceDesc is the grpc.ServiceDesc for SearchQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.search.v1.service.SearchQueryController",
	HandlerType: (*SearchQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchByText",
			Handler:    _SearchQueryController_SearchByText_Handler,
		},
		{
			MethodName: "searchByApiResourceKind",
			Handler:    _SearchQueryController_SearchByApiResourceKind_Handler,
		},
		{
			MethodName: "searchIdentityAccountByEmail",
			Handler:    _SearchQueryController_SearchIdentityAccountByEmail_Handler,
		},
		{
			MethodName: "searchStackJobRunnerByDeploymentModule",
			Handler:    _SearchQueryController_SearchStackJobRunnerByDeploymentModule_Handler,
		},
		{
			MethodName: "searchContextHierarchy",
			Handler:    _SearchQueryController_SearchContextHierarchy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/search/v1/service/query.proto",
}
