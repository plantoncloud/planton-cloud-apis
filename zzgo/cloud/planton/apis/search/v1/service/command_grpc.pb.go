// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/search/v1/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/search/v1/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchCommandController_AddToSearchIndex_FullMethodName = "/cloud.planton.apis.search.v1.service.SearchCommandController/addToSearchIndex"
)

// SearchCommandControllerClient is the client API for SearchCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchCommandControllerClient interface {
	// This method returns the `ApiResourceSearchRecord` message, confirming the details of the API resource
	// that was added to the search index.
	AddToSearchIndex(ctx context.Context, in *model.ApiResourceSearchRecord, opts ...grpc.CallOption) (*model.ApiResourceSearchRecord, error)
}

type searchCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchCommandControllerClient(cc grpc.ClientConnInterface) SearchCommandControllerClient {
	return &searchCommandControllerClient{cc}
}

func (c *searchCommandControllerClient) AddToSearchIndex(ctx context.Context, in *model.ApiResourceSearchRecord, opts ...grpc.CallOption) (*model.ApiResourceSearchRecord, error) {
	out := new(model.ApiResourceSearchRecord)
	err := c.cc.Invoke(ctx, SearchCommandController_AddToSearchIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchCommandControllerServer is the server API for SearchCommandController service.
// All implementations should embed UnimplementedSearchCommandControllerServer
// for forward compatibility
type SearchCommandControllerServer interface {
	// This method returns the `ApiResourceSearchRecord` message, confirming the details of the API resource
	// that was added to the search index.
	AddToSearchIndex(context.Context, *model.ApiResourceSearchRecord) (*model.ApiResourceSearchRecord, error)
}

// UnimplementedSearchCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSearchCommandControllerServer struct {
}

func (UnimplementedSearchCommandControllerServer) AddToSearchIndex(context.Context, *model.ApiResourceSearchRecord) (*model.ApiResourceSearchRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToSearchIndex not implemented")
}

// UnsafeSearchCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchCommandControllerServer will
// result in compilation errors.
type UnsafeSearchCommandControllerServer interface {
	mustEmbedUnimplementedSearchCommandControllerServer()
}

func RegisterSearchCommandControllerServer(s grpc.ServiceRegistrar, srv SearchCommandControllerServer) {
	s.RegisterService(&SearchCommandController_ServiceDesc, srv)
}

func _SearchCommandController_AddToSearchIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ApiResourceSearchRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchCommandControllerServer).AddToSearchIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchCommandController_AddToSearchIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchCommandControllerServer).AddToSearchIndex(ctx, req.(*model.ApiResourceSearchRecord))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchCommandController_ServiceDesc is the grpc.ServiceDesc for SearchCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.search.v1.service.SearchCommandController",
	HandlerType: (*SearchCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addToSearchIndex",
			Handler:    _SearchCommandController_AddToSearchIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/search/v1/service/command.proto",
}
