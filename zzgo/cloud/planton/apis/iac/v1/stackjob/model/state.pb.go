// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/iac/v1/stackjob/model/state.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	apiresourcekind "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions"
	pulumioperationstatustype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/pulumioperationstatustype"
	stackjoboperationtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype"
	stackjobprogressstatustype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogressstatustype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// stack-job
type StackJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api-version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource-kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// metadata
	// id format "sj-<ulid>"
	Metadata *model.ApiResourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	Spec *StackJobSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *StackJobStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StackJob) Reset() {
	*x = StackJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJob) ProtoMessage() {}

func (x *StackJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJob.ProtoReflect.Descriptor instead.
func (*StackJob) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{0}
}

func (x *StackJob) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *StackJob) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *StackJob) GetMetadata() *model.ApiResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StackJob) GetSpec() *StackJobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *StackJob) GetStatus() *StackJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// stack-job spec
type StackJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the organization to which the stack-job belongs to.
	// value is computed from stack
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// id of the environment to which the stack-job belongs to.
	// value is empty for non-environment specific resources
	EnvId string `protobuf:"bytes,2,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	// resource type for which the stack-job is created
	// value is computed from stack.
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,3,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// id of the resource for which the stack-job is created.
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// id of the resource version for which the stack-job is created.
	ResourceVersionId string `protobuf:"bytes,5,opt,name=resource_version_id,json=resourceVersionId,proto3" json:"resource_version_id,omitempty"`
	// id of the stack to which the stack-job belongs to.
	// value is computed based on resource-id.
	StackId string `protobuf:"bytes,6,opt,name=stack_id,json=stackId,proto3" json:"stack_id,omitempty"`
	// stack-job operation type
	OperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,7,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.stackjoboperationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// name of the pulumi-stack.
	// this value is computed by stack service.
	PulumiStackName string `protobuf:"bytes,8,opt,name=pulumi_stack_name,json=pulumiStackName,proto3" json:"pulumi_stack_name,omitempty"`
	// event type of the resource that triggered the stack job
	ApiResourceEventType string `protobuf:"bytes,9,opt,name=api_resource_event_type,json=apiResourceEventType,proto3" json:"api_resource_event_type,omitempty"`
	// id of the identity-account that created the event
	// this is used to configure the audit-actor before persisting the state of stack-job resource.
	ApiResourceEventCreatedBy string `protobuf:"bytes,10,opt,name=api_resource_event_created_by,json=apiResourceEventCreatedBy,proto3" json:"api_resource_event_created_by,omitempty"`
}

func (x *StackJobSpec) Reset() {
	*x = StackJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobSpec) ProtoMessage() {}

func (x *StackJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobSpec.ProtoReflect.Descriptor instead.
func (*StackJobSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{1}
}

func (x *StackJobSpec) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *StackJobSpec) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *StackJobSpec) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *StackJobSpec) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *StackJobSpec) GetResourceVersionId() string {
	if x != nil {
		return x.ResourceVersionId
	}
	return ""
}

func (x *StackJobSpec) GetStackId() string {
	if x != nil {
		return x.StackId
	}
	return ""
}

func (x *StackJobSpec) GetOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *StackJobSpec) GetPulumiStackName() string {
	if x != nil {
		return x.PulumiStackName
	}
	return ""
}

func (x *StackJobSpec) GetApiResourceEventType() string {
	if x != nil {
		return x.ApiResourceEventType
	}
	return ""
}

func (x *StackJobSpec) GetApiResourceEventCreatedBy() string {
	if x != nil {
		return x.ApiResourceEventCreatedBy
	}
	return ""
}

// stack-job status
type StackJobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lifecycle
	Lifecycle *model.ApiResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// audit-info
	Audit *model.ApiResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
	// stack-job progress status
	Progress *StackJobStatusProgressStatus `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// status of pulumi operations
	PulumiOperations *StackJobStatusPulumiOperationsStatus `protobuf:"bytes,4,opt,name=pulumi_operations,json=pulumiOperations,proto3" json:"pulumi_operations,omitempty"`
}

func (x *StackJobStatus) Reset() {
	*x = StackJobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobStatus) ProtoMessage() {}

func (x *StackJobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobStatus.ProtoReflect.Descriptor instead.
func (*StackJobStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{2}
}

func (x *StackJobStatus) GetLifecycle() *model.ApiResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *StackJobStatus) GetAudit() *model.ApiResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *StackJobStatus) GetProgress() *StackJobStatusProgressStatus {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *StackJobStatus) GetPulumiOperations() *StackJobStatusPulumiOperationsStatus {
	if x != nil {
		return x.PulumiOperations
	}
	return nil
}

// stack-job progress status
type StackJobStatusProgressStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// progress status of the stack-job
	Status stackjobprogressstatustype.StackJobProgressStatusType `protobuf:"varint,1,opt,name=status,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressstatustype.StackJobProgressStatusType" json:"status,omitempty"`
	// execution start time of stack job
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// execution end time of stack job
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// if the job has failed, this attribute contains list of errors describing the cause for failure.
	// if the job failed because the job result determining pulumi operation has failed, then the
	// diagnostic messages with severity "error" from that pulumi operation are copied into this field.
	Errors []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StackJobStatusProgressStatus) Reset() {
	*x = StackJobStatusProgressStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobStatusProgressStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobStatusProgressStatus) ProtoMessage() {}

func (x *StackJobStatusProgressStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobStatusProgressStatus.ProtoReflect.Descriptor instead.
func (*StackJobStatusProgressStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{3}
}

func (x *StackJobStatusProgressStatus) GetStatus() stackjobprogressstatustype.StackJobProgressStatusType {
	if x != nil {
		return x.Status
	}
	return stackjobprogressstatustype.StackJobProgressStatusType(0)
}

func (x *StackJobStatusProgressStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StackJobStatusProgressStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *StackJobStatusProgressStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// pulumi operations status of the stack job
type StackJobStatusPulumiOperationsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of refresh operation populated only when pulumi refresh is required for the stack-job
	Refresh *StackJobStatusPulumiOperationStatus `protobuf:"bytes,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// status of refresh operation populated only when pulumi preview(apply) is required for the stack-job
	ApplyPreview *StackJobStatusPulumiOperationStatus `protobuf:"bytes,2,opt,name=apply_preview,json=applyPreview,proto3" json:"apply_preview,omitempty"`
	// status of refresh operation populated only when pulumi preview(apply) is required for the stack-job
	DestroyPreview *StackJobStatusPulumiOperationStatus `protobuf:"bytes,3,opt,name=destroy_preview,json=destroyPreview,proto3" json:"destroy_preview,omitempty"`
	// status of apply operation populated only when pulumi apply is required for the stack-job
	Apply *StackJobStatusPulumiOperationStatus `protobuf:"bytes,4,opt,name=apply,proto3" json:"apply,omitempty"`
	// status of apply operation populated only when pulumi destroy is required for the stack-job
	Destroy *StackJobStatusPulumiOperationStatus `protobuf:"bytes,5,opt,name=destroy,proto3" json:"destroy,omitempty"`
}

func (x *StackJobStatusPulumiOperationsStatus) Reset() {
	*x = StackJobStatusPulumiOperationsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobStatusPulumiOperationsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobStatusPulumiOperationsStatus) ProtoMessage() {}

func (x *StackJobStatusPulumiOperationsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobStatusPulumiOperationsStatus.ProtoReflect.Descriptor instead.
func (*StackJobStatusPulumiOperationsStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{4}
}

func (x *StackJobStatusPulumiOperationsStatus) GetRefresh() *StackJobStatusPulumiOperationStatus {
	if x != nil {
		return x.Refresh
	}
	return nil
}

func (x *StackJobStatusPulumiOperationsStatus) GetApplyPreview() *StackJobStatusPulumiOperationStatus {
	if x != nil {
		return x.ApplyPreview
	}
	return nil
}

func (x *StackJobStatusPulumiOperationsStatus) GetDestroyPreview() *StackJobStatusPulumiOperationStatus {
	if x != nil {
		return x.DestroyPreview
	}
	return nil
}

func (x *StackJobStatusPulumiOperationsStatus) GetApply() *StackJobStatusPulumiOperationStatus {
	if x != nil {
		return x.Apply
	}
	return nil
}

func (x *StackJobStatusPulumiOperationsStatus) GetDestroy() *StackJobStatusPulumiOperationStatus {
	if x != nil {
		return x.Destroy
	}
	return nil
}

// progress of a pulumi operation in a stack-job
type StackJobStatusPulumiOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the operation-status.
	// this is in the format "<stack-job-id>-<operation-type>".
	// this attribute acts as a binder between the stack-job entity and
	// pulumi-operation-status entity in database and is unused otherwise.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// flag to indicate if the pulumi operation is required for the stack-job
	IsRequired bool `protobuf:"varint,2,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// status of the pulumi operation
	Status pulumioperationstatustype.PulumiOperationStatusType `protobuf:"varint,3,opt,name=status,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType" json:"status,omitempty"`
	// timestamp for the start time for pulumi operation
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// timestamp for the end time for pulumi operation
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// list of errors reported during the operation execution.
	// this list is only populated when the operation fails or pulumi-engine emits diagnostic events of severity "error".
	Errors []string `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StackJobStatusPulumiOperationStatus) Reset() {
	*x = StackJobStatusPulumiOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobStatusPulumiOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobStatusPulumiOperationStatus) ProtoMessage() {}

func (x *StackJobStatusPulumiOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobStatusPulumiOperationStatus.ProtoReflect.Descriptor instead.
func (*StackJobStatusPulumiOperationStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{5}
}

func (x *StackJobStatusPulumiOperationStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StackJobStatusPulumiOperationStatus) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *StackJobStatusPulumiOperationStatus) GetStatus() pulumioperationstatustype.PulumiOperationStatusType {
	if x != nil {
		return x.Status
	}
	return pulumioperationstatustype.PulumiOperationStatusType(0)
}

func (x *StackJobStatusPulumiOperationStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StackJobStatusPulumiOperationStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *StackJobStatusPulumiOperationStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// stack-job-settings for api-resource
type StackJobSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to toggle stack-jobs
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// id of pulumi-backend-credential to be used to store state for api-resource's pulumi-stack state
	PulumiBackendCredentialId string `protobuf:"bytes,2,opt,name=pulumi_backend_credential_id,json=pulumiBackendCredentialId,proto3" json:"pulumi_backend_credential_id,omitempty"`
	// stack-job id-runner to be used to run stack-jobs
	StackJobRunnerId string `protobuf:"bytes,3,opt,name=stack_job_runner_id,json=stackJobRunnerId,proto3" json:"stack_job_runner_id,omitempty"`
	// key value pairs to configure custom-inputs for the stack-job which are not included in the api-resource spec
	CustomInputs map[string]string `protobuf:"bytes,4,rep,name=custom_inputs,json=customInputs,proto3" json:"custom_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// skip refresh for preview, apply and destroy steps.
	// defaults to false.
	// refresh is always executed for all stack-jobs unless disabled.
	SkipRefresh bool `protobuf:"varint,5,opt,name=skip_refresh,json=skipRefresh,proto3" json:"skip_refresh,omitempty"`
	// always run preview step for apply or destroy.
	// defaults to true.
	PreviewBeforeApplyOrDestroy bool `protobuf:"varint,6,opt,name=preview_before_apply_or_destroy,json=previewBeforeApplyOrDestroy,proto3" json:"preview_before_apply_or_destroy,omitempty"`
	// if the stack-job includes apply or destroy and if preview-before-apply-or-destroy is enabled,
	// pause after preview is execute but before apply/destroy is executed.
	// defaults to false.
	PauseBetweenPreviewAndApplyOrDestroy bool `protobuf:"varint,7,opt,name=pause_between_preview_and_apply_or_destroy,json=pauseBetweenPreviewAndApplyOrDestroy,proto3" json:"pause_between_preview_and_apply_or_destroy,omitempty"`
}

func (x *StackJobSettings) Reset() {
	*x = StackJobSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobSettings) ProtoMessage() {}

func (x *StackJobSettings) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobSettings.ProtoReflect.Descriptor instead.
func (*StackJobSettings) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP(), []int{6}
}

func (x *StackJobSettings) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *StackJobSettings) GetPulumiBackendCredentialId() string {
	if x != nil {
		return x.PulumiBackendCredentialId
	}
	return ""
}

func (x *StackJobSettings) GetStackJobRunnerId() string {
	if x != nil {
		return x.StackJobRunnerId
	}
	return ""
}

func (x *StackJobSettings) GetCustomInputs() map[string]string {
	if x != nil {
		return x.CustomInputs
	}
	return nil
}

func (x *StackJobSettings) GetSkipRefresh() bool {
	if x != nil {
		return x.SkipRefresh
	}
	return false
}

func (x *StackJobSettings) GetPreviewBeforeApplyOrDestroy() bool {
	if x != nil {
		return x.PreviewBeforeApplyOrDestroy
	}
	return false
}

func (x *StackJobSettings) GetPauseBetweenPreviewAndApplyOrDestroy() bool {
	if x != nil {
		return x.PauseBetweenPreviewAndApplyOrDestroy
	}
	return false
}

var File_cloud_planton_apis_iac_v1_stackjob_model_state_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x54, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x67, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x68, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd7, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x19, 0x88, 0xa6, 0x1d, 0x2a, 0x92, 0xa6, 0x1d, 0x11, 0x08, 0x28, 0x12, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xa0, 0x05, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x06, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x03, 0xd0, 0x01, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64,
	0x12, 0x7b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x03, 0xd0, 0x01, 0x01, 0xc8, 0xb8, 0x18, 0x01, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x55, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x11, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0,
	0xb8, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x14,
	0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x1d, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00,
	0xd0, 0xb8, 0x18, 0x01, 0x52, 0x19, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0xa9, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x60, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7b,
	0x0a, 0x11, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x1c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x77, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0xc9, 0x04, 0x0a, 0x24, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x72, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x76, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x63, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x67, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x22, 0xd7, 0x02, 0x0a, 0x23,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x98, 0x04, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x44, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x58, 0x0a, 0x2a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6e,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x1a,
	0x3f, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0xe8, 0x02, 0x0a, 0x36, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x49, 0x56, 0x53, 0x4d, 0xaa, 0x02, 0x28,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x69, 0x73, 0x2e, 0x49, 0x61, 0x63, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a,
	0x6f, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x28, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61,
	0x63, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0xe2, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x56, 0x31, 0x5c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69,
	0x73, 0x3a, 0x3a, 0x49, 0x61, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescData = file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDesc
)

func file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescData)
	})
	return file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDescData
}

var file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_goTypes = []interface{}{
	(*StackJob)(nil),                                           // 0: cloud.planton.apis.iac.v1.stackjob.model.StackJob
	(*StackJobSpec)(nil),                                       // 1: cloud.planton.apis.iac.v1.stackjob.model.StackJobSpec
	(*StackJobStatus)(nil),                                     // 2: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatus
	(*StackJobStatusProgressStatus)(nil),                       // 3: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusProgressStatus
	(*StackJobStatusPulumiOperationsStatus)(nil),               // 4: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus
	(*StackJobStatusPulumiOperationStatus)(nil),                // 5: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus
	(*StackJobSettings)(nil),                                   // 6: cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings
	nil,                                                        // 7: cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings.CustomInputsEntry
	(*model.ApiResourceMetadata)(nil),                          // 8: cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	(apiresourcekind.ApiResourceKind)(0),                       // 9: cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	(stackjoboperationtype.StackJobOperationType)(0),           // 10: cloud.planton.apis.iac.v1.stackjob.enums.stackjoboperationtype.StackJobOperationType
	(*model.ApiResourceLifecycle)(nil),                         // 11: cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle
	(*model.ApiResourceAudit)(nil),                             // 12: cloud.planton.apis.commons.apiresource.model.ApiResourceAudit
	(stackjobprogressstatustype.StackJobProgressStatusType)(0), // 13: cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressstatustype.StackJobProgressStatusType
	(*timestamppb.Timestamp)(nil),                              // 14: google.protobuf.Timestamp
	(pulumioperationstatustype.PulumiOperationStatusType)(0),   // 15: cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType
}
var file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_depIdxs = []int32{
	8,  // 0: cloud.planton.apis.iac.v1.stackjob.model.StackJob.metadata:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	1,  // 1: cloud.planton.apis.iac.v1.stackjob.model.StackJob.spec:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobSpec
	2,  // 2: cloud.planton.apis.iac.v1.stackjob.model.StackJob.status:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatus
	9,  // 3: cloud.planton.apis.iac.v1.stackjob.model.StackJobSpec.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	10, // 4: cloud.planton.apis.iac.v1.stackjob.model.StackJobSpec.operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.stackjoboperationtype.StackJobOperationType
	11, // 5: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatus.lifecycle:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle
	12, // 6: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatus.audit:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceAudit
	3,  // 7: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatus.progress:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusProgressStatus
	4,  // 8: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatus.pulumi_operations:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus
	13, // 9: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusProgressStatus.status:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressstatustype.StackJobProgressStatusType
	14, // 10: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusProgressStatus.start_time:type_name -> google.protobuf.Timestamp
	14, // 11: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusProgressStatus.end_time:type_name -> google.protobuf.Timestamp
	5,  // 12: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus.refresh:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus
	5,  // 13: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus.apply_preview:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus
	5,  // 14: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus.destroy_preview:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus
	5,  // 15: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus.apply:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus
	5,  // 16: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationsStatus.destroy:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus
	15, // 17: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus.status:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType
	14, // 18: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus.start_time:type_name -> google.protobuf.Timestamp
	14, // 19: cloud.planton.apis.iac.v1.stackjob.model.StackJobStatusPulumiOperationStatus.end_time:type_name -> google.protobuf.Timestamp
	7,  // 20: cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings.custom_inputs:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJobSettings.CustomInputsEntry
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_init() }
func file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_init() {
	if File_cloud_planton_apis_iac_v1_stackjob_model_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobStatusProgressStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobStatusPulumiOperationsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobStatusPulumiOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_iac_v1_stackjob_model_state_proto = out.File
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_rawDesc = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_goTypes = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_depIdxs = nil
}
