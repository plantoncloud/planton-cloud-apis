// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/iac/v1/stackjob/model/io.proto

package model

import (
	apiresourcekind "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	stackjobexecutionstatustype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjobexecutionstatustype"
	stackjoboperationtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wrapper for stack-job id
type StackJobId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StackJobId) Reset() {
	*x = StackJobId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobId) ProtoMessage() {}

func (x *StackJobId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobId.ProtoReflect.Descriptor instead.
func (*StackJobId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *StackJobId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list stack-jobs by resource type and id query input
type ListStackJobsByFiltersQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page info
	PageInfo *rpc.PageInfo `protobuf:"bytes,1,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// id of the company to filter the stack-jobs
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// id of the product to filter the stack-jobs
	ProductId string `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// id of the product env to filter the stack-jobs
	EnvironmentId string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// type of resource
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,5,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// id of the resource
	ResourceId string `protobuf:"bytes,6,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// stack operation type
	OperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,7,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// execution status of the stack-job
	ExecutionStatus stackjobexecutionstatustype.StackJobExecutionStatusType `protobuf:"varint,8,opt,name=execution_status,json=executionStatus,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.stackjobexecutionstatustype.StackJobExecutionStatusType" json:"execution_status,omitempty"`
}

func (x *ListStackJobsByFiltersQueryInput) Reset() {
	*x = ListStackJobsByFiltersQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStackJobsByFiltersQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStackJobsByFiltersQueryInput) ProtoMessage() {}

func (x *ListStackJobsByFiltersQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStackJobsByFiltersQueryInput.ProtoReflect.Descriptor instead.
func (*ListStackJobsByFiltersQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *ListStackJobsByFiltersQueryInput) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListStackJobsByFiltersQueryInput) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *ListStackJobsByFiltersQueryInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *ListStackJobsByFiltersQueryInput) GetExecutionStatus() stackjobexecutionstatustype.StackJobExecutionStatusType {
	if x != nil {
		return x.ExecutionStatus
	}
	return stackjobexecutionstatustype.StackJobExecutionStatusType(0)
}

// paginated list of stack-jobs
type StackJobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of pages
	TotalPages int32 `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// list of stack-jobs
	Entries []*StackJob `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *StackJobList) Reset() {
	*x = StackJobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobList) ProtoMessage() {}

func (x *StackJobList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobList.ProtoReflect.Descriptor instead.
func (*StackJobList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *StackJobList) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *StackJobList) GetEntries() []*StackJob {
	if x != nil {
		return x.Entries
	}
	return nil
}

// input for rpc to create a new stack job for any resource.
type CreateStackJobCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource for which the stack-job is to be created.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// operation-type to be used for creating the stack-job.
	StackJobOperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,2,opt,name=stack_job_operation_type,json=stackJobOperationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType" json:"stack_job_operation_type,omitempty"`
	// reason for creating the stack job
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateStackJobCommandInput) Reset() {
	*x = CreateStackJobCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStackJobCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStackJobCommandInput) ProtoMessage() {}

func (x *CreateStackJobCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStackJobCommandInput.ProtoReflect.Descriptor instead.
func (*CreateStackJobCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *CreateStackJobCommandInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CreateStackJobCommandInput) GetStackJobOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.StackJobOperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *CreateStackJobCommandInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GetStackJobMinutesByCompanyIdInput is intended for requests to retrieve the total minutes of stack job
// processing or usage associated with a given company. It focuses on identifying the company in question,
// facilitating the aggregation or reporting of stack job minutes at the company level.
type GetStackJobMinutesByCompanyIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// company_id uniquely identifies a company within the system. The field is formatted as a string.
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetStackJobMinutesByCompanyIdInput) Reset() {
	*x = GetStackJobMinutesByCompanyIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStackJobMinutesByCompanyIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStackJobMinutesByCompanyIdInput) ProtoMessage() {}

func (x *GetStackJobMinutesByCompanyIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStackJobMinutesByCompanyIdInput.ProtoReflect.Descriptor instead.
func (*GetStackJobMinutesByCompanyIdInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *GetStackJobMinutesByCompanyIdInput) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

// StackJobMinutesMTB represents the total minutes a stack job has been running. This message is typically
// used to communicate or store information regarding the duration of stack jobs, making it a crucial
// component in monitoring, billing, or reporting systems that track job execution times.
type StackJobMinutesMTD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// minutes indicates the total duration of the stack job execution in minutes. This field uses an int32 type to
	// accommodate a wide range of values, from short tasks to long-running operations.
	Minutes int32 `protobuf:"varint,1,opt,name=minutes,proto3" json:"minutes,omitempty"`
}

func (x *StackJobMinutesMTD) Reset() {
	*x = StackJobMinutesMTD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobMinutesMTD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobMinutesMTD) ProtoMessage() {}

func (x *StackJobMinutesMTD) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobMinutesMTD.ProtoReflect.Descriptor instead.
func (*StackJobMinutesMTD) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *StackJobMinutesMTD) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

// GetPulumiResourceCountByCompanyIdInput is used for making requests to obtain the count of Pulumi
// resources associated with a specified company. The inclusion of the company_id field allows for
// targeted queries to assess the scope of Pulumi resource utilization within a particular company,
// supporting resource management, auditing, and planning activities in cloud infrastructure and development operations.
type GetPulumiResourceCountByCompanyIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// company_id uniquely identifies a company within the system. The field is formatted as a string.
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetPulumiResourceCountByCompanyIdInput) Reset() {
	*x = GetPulumiResourceCountByCompanyIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPulumiResourceCountByCompanyIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPulumiResourceCountByCompanyIdInput) ProtoMessage() {}

func (x *GetPulumiResourceCountByCompanyIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPulumiResourceCountByCompanyIdInput.ProtoReflect.Descriptor instead.
func (*GetPulumiResourceCountByCompanyIdInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *GetPulumiResourceCountByCompanyIdInput) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

// TotalPulumiResourceCount represents the aggregate count of Pulumi resources, typically returned
// in response to queries assessing the volume of Pulumi-managed resources within a specific context,
// such as a company. This message is crucial for understanding the extent of Pulumi infrastructure
// deployment and utilization, aiding in resource management, planning, and optimization efforts
// for cloud infrastructure managed through Pulumi.
type TotalPulumiResourceCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// count is the total number of Pulumi resources.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TotalPulumiResourceCount) Reset() {
	*x = TotalPulumiResourceCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalPulumiResourceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalPulumiResourceCount) ProtoMessage() {}

func (x *TotalPulumiResourceCount) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalPulumiResourceCount.ProtoReflect.Descriptor instead.
func (*TotalPulumiResourceCount) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *TotalPulumiResourceCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_cloud_planton_apis_iac_v1_stackjob_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x54, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x67, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8c,
	0x01, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xe6, 0x01, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x86, 0x01, 0x0a,
	0x18, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f,
	0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4a, 0x6f, 0x62, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x54, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x18, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0xe5, 0x02, 0x0a, 0x36, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x49, 0x56, 0x53, 0x4d, 0xaa,
	0x02, 0x28, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x41, 0x70, 0x69, 0x73, 0x2e, 0x49, 0x61, 0x63, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x28, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c,
	0x49, 0x61, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x56,
	0x31, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41,
	0x70, 0x69, 0x73, 0x3a, 0x3a, 0x49, 0x61, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescData = file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDesc
)

func file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDescData
}

var file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_goTypes = []interface{}{
	(*StackJobId)(nil),                                           // 0: cloud.planton.apis.iac.v1.stackjob.model.StackJobId
	(*ListStackJobsByFiltersQueryInput)(nil),                     // 1: cloud.planton.apis.iac.v1.stackjob.model.ListStackJobsByFiltersQueryInput
	(*StackJobList)(nil),                                         // 2: cloud.planton.apis.iac.v1.stackjob.model.StackJobList
	(*CreateStackJobCommandInput)(nil),                           // 3: cloud.planton.apis.iac.v1.stackjob.model.CreateStackJobCommandInput
	(*GetStackJobMinutesByCompanyIdInput)(nil),                   // 4: cloud.planton.apis.iac.v1.stackjob.model.GetStackJobMinutesByCompanyIdInput
	(*StackJobMinutesMTD)(nil),                                   // 5: cloud.planton.apis.iac.v1.stackjob.model.StackJobMinutesMTD
	(*GetPulumiResourceCountByCompanyIdInput)(nil),               // 6: cloud.planton.apis.iac.v1.stackjob.model.GetPulumiResourceCountByCompanyIdInput
	(*TotalPulumiResourceCount)(nil),                             // 7: cloud.planton.apis.iac.v1.stackjob.model.TotalPulumiResourceCount
	(*rpc.PageInfo)(nil),                                         // 8: cloud.planton.apis.commons.rpc.PageInfo
	(apiresourcekind.ApiResourceKind)(0),                         // 9: cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	(stackjoboperationtype.StackJobOperationType)(0),             // 10: cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	(stackjobexecutionstatustype.StackJobExecutionStatusType)(0), // 11: cloud.planton.apis.iac.v1.stackjob.enums.stackjobexecutionstatustype.StackJobExecutionStatusType
	(*StackJob)(nil),                                             // 12: cloud.planton.apis.iac.v1.stackjob.model.StackJob
}
var file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_depIdxs = []int32{
	8,  // 0: cloud.planton.apis.iac.v1.stackjob.model.ListStackJobsByFiltersQueryInput.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	9,  // 1: cloud.planton.apis.iac.v1.stackjob.model.ListStackJobsByFiltersQueryInput.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	10, // 2: cloud.planton.apis.iac.v1.stackjob.model.ListStackJobsByFiltersQueryInput.operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	11, // 3: cloud.planton.apis.iac.v1.stackjob.model.ListStackJobsByFiltersQueryInput.execution_status:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.stackjobexecutionstatustype.StackJobExecutionStatusType
	12, // 4: cloud.planton.apis.iac.v1.stackjob.model.StackJobList.entries:type_name -> cloud.planton.apis.iac.v1.stackjob.model.StackJob
	10, // 5: cloud.planton.apis.iac.v1.stackjob.model.CreateStackJobCommandInput.stack_job_operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_init() }
func file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_init() {
	if File_cloud_planton_apis_iac_v1_stackjob_model_io_proto != nil {
		return
	}
	file_cloud_planton_apis_iac_v1_stackjob_model_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStackJobsByFiltersQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStackJobCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStackJobMinutesByCompanyIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobMinutesMTD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPulumiResourceCountByCompanyIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalPulumiResourceCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_iac_v1_stackjob_model_io_proto = out.File
	file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_goTypes = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_io_proto_depIdxs = nil
}
