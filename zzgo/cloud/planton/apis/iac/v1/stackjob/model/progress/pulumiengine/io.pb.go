// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/iac/v1/stackjob/model/progress/pulumiengine/io.proto

package pulumiengine

import (
	pulumiengineeventtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/pulumiengineeventtype"
	stackjoboperationtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogresseventtype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiffKind int32

const (
	DiffKind_DIFF_KIND_UNSPECIFIED DiffKind = 0
	DiffKind_DIFF_ADD              DiffKind = 1
	DiffKind_DIFF_ADD_REPLACE      DiffKind = 2
	DiffKind_DIFF_DELETE           DiffKind = 3
	DiffKind_DIFF_DELETE_REPLACE   DiffKind = 4
	DiffKind_DIFF_UPDATE           DiffKind = 5
	DiffKind_DIFF_UPDATE_REPLACE   DiffKind = 6
)

// Enum value maps for DiffKind.
var (
	DiffKind_name = map[int32]string{
		0: "DIFF_KIND_UNSPECIFIED",
		1: "DIFF_ADD",
		2: "DIFF_ADD_REPLACE",
		3: "DIFF_DELETE",
		4: "DIFF_DELETE_REPLACE",
		5: "DIFF_UPDATE",
		6: "DIFF_UPDATE_REPLACE",
	}
	DiffKind_value = map[string]int32{
		"DIFF_KIND_UNSPECIFIED": 0,
		"DIFF_ADD":              1,
		"DIFF_ADD_REPLACE":      2,
		"DIFF_DELETE":           3,
		"DIFF_DELETE_REPLACE":   4,
		"DIFF_UPDATE":           5,
		"DIFF_UPDATE_REPLACE":   6,
	}
)

func (x DiffKind) Enum() *DiffKind {
	p := new(DiffKind)
	*p = x
	return p
}

func (x DiffKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffKind) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_enumTypes[0].Descriptor()
}

func (DiffKind) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_enumTypes[0]
}

func (x DiffKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffKind.Descriptor instead.
func (DiffKind) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{0}
}

type OpType int32

const (
	// UNSPECIFIED as a default value
	OpType_OP_TYPE_UNSPECIFIED OpType = 0
	// OpSame indicates no change was made.
	OpType_OP_TYPE_SAME OpType = 1
	// OpCreate indicates a new resource was created.
	OpType_OP_TYPE_CREATE OpType = 2
	// OpUpdate indicates an existing resource was updated.
	OpType_OP_TYPE_UPDATE OpType = 3
	// OpDelete indicates an existing resource was deleted.
	OpType_OP_TYPE_DELETE OpType = 4
	// OpReplace indicates an existing resource was replaced with a new one.
	OpType_OP_TYPE_REPLACE OpType = 5
	// OpCreateReplacement indicates a new resource was created for a replacement.
	OpType_OP_TYPE_CREATE_REPLACEMENT OpType = 6
	// OpDeleteReplaced indicates an existing resource was deleted after replacement.
	OpType_OP_TYPE_DELETE_REPLACED OpType = 7
	// OpRead indicates reading an existing resource.
	OpType_OP_TYPE_READ OpType = 8
	// OpReadReplacement indicates reading an existing resource for a replacement.
	OpType_OP_TYPE_READ_REPLACEMENT OpType = 9
	// OpRefresh indicates refreshing an existing resource.
	OpType_OP_TYPE_REFRESH OpType = 10
	// OpReadDiscard indicates removing a resource that was read.
	OpType_OP_TYPE_READ_DISCARD OpType = 11
	// OpDiscardReplaced indicates discarding a read resource that was replaced.
	OpType_OP_TYPE_DISCARD_REPLACED OpType = 12
	// OpRemovePendingReplace indicates removing a pending replace resource.
	OpType_OP_TYPE_REMOVE_PENDING_REPLACE OpType = 13
	// OpImport indicates importing an existing resource.
	OpType_OP_TYPE_IMPORT OpType = 14
	// OpImportReplacement indicates replacement of an existing resource with an imported resource.
	OpType_OP_TYPE_IMPORT_REPLACEMENT OpType = 15
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0:  "OP_TYPE_UNSPECIFIED",
		1:  "OP_TYPE_SAME",
		2:  "OP_TYPE_CREATE",
		3:  "OP_TYPE_UPDATE",
		4:  "OP_TYPE_DELETE",
		5:  "OP_TYPE_REPLACE",
		6:  "OP_TYPE_CREATE_REPLACEMENT",
		7:  "OP_TYPE_DELETE_REPLACED",
		8:  "OP_TYPE_READ",
		9:  "OP_TYPE_READ_REPLACEMENT",
		10: "OP_TYPE_REFRESH",
		11: "OP_TYPE_READ_DISCARD",
		12: "OP_TYPE_DISCARD_REPLACED",
		13: "OP_TYPE_REMOVE_PENDING_REPLACE",
		14: "OP_TYPE_IMPORT",
		15: "OP_TYPE_IMPORT_REPLACEMENT",
	}
	OpType_value = map[string]int32{
		"OP_TYPE_UNSPECIFIED":            0,
		"OP_TYPE_SAME":                   1,
		"OP_TYPE_CREATE":                 2,
		"OP_TYPE_UPDATE":                 3,
		"OP_TYPE_DELETE":                 4,
		"OP_TYPE_REPLACE":                5,
		"OP_TYPE_CREATE_REPLACEMENT":     6,
		"OP_TYPE_DELETE_REPLACED":        7,
		"OP_TYPE_READ":                   8,
		"OP_TYPE_READ_REPLACEMENT":       9,
		"OP_TYPE_REFRESH":                10,
		"OP_TYPE_READ_DISCARD":           11,
		"OP_TYPE_DISCARD_REPLACED":       12,
		"OP_TYPE_REMOVE_PENDING_REPLACE": 13,
		"OP_TYPE_IMPORT":                 14,
		"OP_TYPE_IMPORT_REPLACEMENT":     15,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_enumTypes[1].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_enumTypes[1]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{1}
}

// pulumi-engine event payload created by planton-cloud's stack-job runner sdks
type PulumiEngineEventPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time when the progress event payload was created.
	PayloadTimestamp *timestamppb.Timestamp `protobuf:"bytes,99,opt,name=payload_timestamp,json=payloadTimestamp,proto3" json:"payload_timestamp,omitempty"`
	// stack-job operation for which the event is generated
	OperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,98,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// stack-job progress pulumi-engine event-type
	EventType pulumiengineeventtype.PulumiEngineEventType `protobuf:"varint,97,opt,name=event_type,json=eventType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.pulumiengineeventtype.PulumiEngineEventType" json:"event_type,omitempty"`
	// below part of the event payload is captured by planton-cloud stack-job runner sdks from pulumi engine
	// https://github.com/pulumi/pulumi/blob/96a9a77167b9dc1167e081c2669931cda63c1511/sdk/go/common/apitype/events.go#L201
	Sequence int32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// timestamp at which the event was created
	Timestamp int32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// diff rendered for the corresponding pulumi engine-event
	Diff                   string                  `protobuf:"bytes,3,opt,name=diff,proto3" json:"diff,omitempty"`
	CancelEvent            *CancelEvent            `protobuf:"bytes,4,opt,name=cancel_event,json=cancelEvent,proto3" json:"cancel_event,omitempty"`
	StdoutEvent            *StdoutEngineEvent      `protobuf:"bytes,5,opt,name=stdout_event,json=stdoutEvent,proto3" json:"stdout_event,omitempty"`
	DiagnosticEvent        *DiagnosticEvent        `protobuf:"bytes,6,opt,name=diagnostic_event,json=diagnosticEvent,proto3" json:"diagnostic_event,omitempty"`
	PreludeEvent           *PreludeEvent           `protobuf:"bytes,7,opt,name=prelude_event,json=preludeEvent,proto3" json:"prelude_event,omitempty"`
	SummaryEvent           *SummaryEvent           `protobuf:"bytes,8,opt,name=summary_event,json=summaryEvent,proto3" json:"summary_event,omitempty"`
	ResourcePreEvent       *ResourcePreEvent       `protobuf:"bytes,9,opt,name=resource_preEvent,json=resourcePreEvent,proto3" json:"resource_preEvent,omitempty"`
	ResOutputsEvent        *ResOutputsEvent        `protobuf:"bytes,10,opt,name=res_outputs_event,json=resOutputsEvent,proto3" json:"res_outputs_event,omitempty"`
	ResOpFailedEvent       *ResOpFailedEvent       `protobuf:"bytes,11,opt,name=res_op_failed_event,json=resOpFailedEvent,proto3" json:"res_op_failed_event,omitempty"`
	PolicyEvent            *PolicyEvent            `protobuf:"bytes,12,opt,name=policy_event,json=policyEvent,proto3" json:"policy_event,omitempty"`
	PolicyRemediationEvent *PolicyRemediationEvent `protobuf:"bytes,13,opt,name=policy_remediation_event,json=policyRemediationEvent,proto3" json:"policy_remediation_event,omitempty"`
}

func (x *PulumiEngineEventPayload) Reset() {
	*x = PulumiEngineEventPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiEngineEventPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiEngineEventPayload) ProtoMessage() {}

func (x *PulumiEngineEventPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiEngineEventPayload.ProtoReflect.Descriptor instead.
func (*PulumiEngineEventPayload) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{0}
}

func (x *PulumiEngineEventPayload) GetPayloadTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PayloadTimestamp
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *PulumiEngineEventPayload) GetEventType() pulumiengineeventtype.PulumiEngineEventType {
	if x != nil {
		return x.EventType
	}
	return pulumiengineeventtype.PulumiEngineEventType(0)
}

func (x *PulumiEngineEventPayload) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PulumiEngineEventPayload) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PulumiEngineEventPayload) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

func (x *PulumiEngineEventPayload) GetCancelEvent() *CancelEvent {
	if x != nil {
		return x.CancelEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetStdoutEvent() *StdoutEngineEvent {
	if x != nil {
		return x.StdoutEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetDiagnosticEvent() *DiagnosticEvent {
	if x != nil {
		return x.DiagnosticEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetPreludeEvent() *PreludeEvent {
	if x != nil {
		return x.PreludeEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetSummaryEvent() *SummaryEvent {
	if x != nil {
		return x.SummaryEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetResourcePreEvent() *ResourcePreEvent {
	if x != nil {
		return x.ResourcePreEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetResOutputsEvent() *ResOutputsEvent {
	if x != nil {
		return x.ResOutputsEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetResOpFailedEvent() *ResOpFailedEvent {
	if x != nil {
		return x.ResOpFailedEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetPolicyEvent() *PolicyEvent {
	if x != nil {
		return x.PolicyEvent
	}
	return nil
}

func (x *PulumiEngineEventPayload) GetPolicyRemediationEvent() *PolicyRemediationEvent {
	if x != nil {
		return x.PolicyRemediationEvent
	}
	return nil
}

// wrapper for list of pulumi engine-events
type EngineEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PulumiEngineEventPayload `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EngineEvents) Reset() {
	*x = EngineEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineEvents) ProtoMessage() {}

func (x *EngineEvents) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineEvents.ProtoReflect.Descriptor instead.
func (*EngineEvents) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{1}
}

func (x *EngineEvents) GetItems() []*PulumiEngineEventPayload {
	if x != nil {
		return x.Items
	}
	return nil
}

type CancelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelEvent) Reset() {
	*x = CancelEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelEvent) ProtoMessage() {}

func (x *CancelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelEvent.ProtoReflect.Descriptor instead.
func (*CancelEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{2}
}

type StdoutEngineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Color   string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *StdoutEngineEvent) Reset() {
	*x = StdoutEngineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StdoutEngineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StdoutEngineEvent) ProtoMessage() {}

func (x *StdoutEngineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StdoutEngineEvent.ProtoReflect.Descriptor instead.
func (*StdoutEngineEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{3}
}

func (x *StdoutEngineEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StdoutEngineEvent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type DiagnosticEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urn       string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Color     string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Severity  string `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	StreamID  int32  `protobuf:"varint,6,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Ephemeral bool   `protobuf:"varint,7,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
}

func (x *DiagnosticEvent) Reset() {
	*x = DiagnosticEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticEvent) ProtoMessage() {}

func (x *DiagnosticEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticEvent.ProtoReflect.Descriptor instead.
func (*DiagnosticEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{4}
}

func (x *DiagnosticEvent) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *DiagnosticEvent) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DiagnosticEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DiagnosticEvent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *DiagnosticEvent) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DiagnosticEvent) GetStreamID() int32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *DiagnosticEvent) GetEphemeral() bool {
	if x != nil {
		return x.Ephemeral
	}
	return false
}

type PolicyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceUrn          string `protobuf:"bytes,1,opt,name=resource_urn,json=resourceUrn,proto3" json:"resource_urn,omitempty"`
	Message              string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Color                string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	PolicyName           string `protobuf:"bytes,4,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyPackName       string `protobuf:"bytes,5,opt,name=policy_pack_name,json=policyPackName,proto3" json:"policy_pack_name,omitempty"`
	PolicyPackVersion    string `protobuf:"bytes,6,opt,name=policy_pack_version,json=policyPackVersion,proto3" json:"policy_pack_version,omitempty"`
	PolicyPackVersionTag string `protobuf:"bytes,7,opt,name=policy_pack_version_tag,json=policyPackVersionTag,proto3" json:"policy_pack_version_tag,omitempty"`
	EnforcementLevel     string `protobuf:"bytes,8,opt,name=enforcement_level,json=enforcementLevel,proto3" json:"enforcement_level,omitempty"`
}

func (x *PolicyEvent) Reset() {
	*x = PolicyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEvent) ProtoMessage() {}

func (x *PolicyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEvent.ProtoReflect.Descriptor instead.
func (*PolicyEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{5}
}

func (x *PolicyEvent) GetResourceUrn() string {
	if x != nil {
		return x.ResourceUrn
	}
	return ""
}

func (x *PolicyEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PolicyEvent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *PolicyEvent) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *PolicyEvent) GetPolicyPackName() string {
	if x != nil {
		return x.PolicyPackName
	}
	return ""
}

func (x *PolicyEvent) GetPolicyPackVersion() string {
	if x != nil {
		return x.PolicyPackVersion
	}
	return ""
}

func (x *PolicyEvent) GetPolicyPackVersionTag() string {
	if x != nil {
		return x.PolicyPackVersionTag
	}
	return ""
}

func (x *PolicyEvent) GetEnforcementLevel() string {
	if x != nil {
		return x.EnforcementLevel
	}
	return ""
}

type PolicyRemediationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceUrn          string            `protobuf:"bytes,1,opt,name=resource_urn,json=resourceUrn,proto3" json:"resource_urn,omitempty"`
	Color                string            `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	PolicyName           string            `protobuf:"bytes,3,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyPackName       string            `protobuf:"bytes,4,opt,name=policy_pack_name,json=policyPackName,proto3" json:"policy_pack_name,omitempty"`
	PolicyPackVersion    string            `protobuf:"bytes,5,opt,name=policy_pack_version,json=policyPackVersion,proto3" json:"policy_pack_version,omitempty"`
	PolicyPackVersionTag string            `protobuf:"bytes,6,opt,name=policy_pack_version_tag,json=policyPackVersionTag,proto3" json:"policy_pack_version_tag,omitempty"`
	Before               map[string]string `protobuf:"bytes,7,rep,name=before,proto3" json:"before,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	After                map[string]string `protobuf:"bytes,8,rep,name=after,proto3" json:"after,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyRemediationEvent) Reset() {
	*x = PolicyRemediationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRemediationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRemediationEvent) ProtoMessage() {}

func (x *PolicyRemediationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRemediationEvent.ProtoReflect.Descriptor instead.
func (*PolicyRemediationEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{6}
}

func (x *PolicyRemediationEvent) GetResourceUrn() string {
	if x != nil {
		return x.ResourceUrn
	}
	return ""
}

func (x *PolicyRemediationEvent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *PolicyRemediationEvent) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *PolicyRemediationEvent) GetPolicyPackName() string {
	if x != nil {
		return x.PolicyPackName
	}
	return ""
}

func (x *PolicyRemediationEvent) GetPolicyPackVersion() string {
	if x != nil {
		return x.PolicyPackVersion
	}
	return ""
}

func (x *PolicyRemediationEvent) GetPolicyPackVersionTag() string {
	if x != nil {
		return x.PolicyPackVersionTag
	}
	return ""
}

func (x *PolicyRemediationEvent) GetBefore() map[string]string {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *PolicyRemediationEvent) GetAfter() map[string]string {
	if x != nil {
		return x.After
	}
	return nil
}

type PreludeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreludeEvent) Reset() {
	*x = PreludeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreludeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreludeEvent) ProtoMessage() {}

func (x *PreludeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreludeEvent.ProtoReflect.Descriptor instead.
func (*PreludeEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{7}
}

func (x *PreludeEvent) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SummaryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaybeCorrupt    bool              `protobuf:"varint,1,opt,name=maybe_corrupt,json=maybeCorrupt,proto3" json:"maybe_corrupt,omitempty"`
	DurationSeconds int32             `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	ResourceChanges map[string]int32  `protobuf:"bytes,3,rep,name=resource_changes,json=resourceChanges,proto3" json:"resource_changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PolicyPacks     map[string]string `protobuf:"bytes,4,rep,name=policy_packs,json=policyPacks,proto3" json:"policy_packs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SummaryEvent) Reset() {
	*x = SummaryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryEvent) ProtoMessage() {}

func (x *SummaryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryEvent.ProtoReflect.Descriptor instead.
func (*SummaryEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{8}
}

func (x *SummaryEvent) GetMaybeCorrupt() bool {
	if x != nil {
		return x.MaybeCorrupt
	}
	return false
}

func (x *SummaryEvent) GetDurationSeconds() int32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *SummaryEvent) GetResourceChanges() map[string]int32 {
	if x != nil {
		return x.ResourceChanges
	}
	return nil
}

func (x *SummaryEvent) GetPolicyPacks() map[string]string {
	if x != nil {
		return x.PolicyPacks
	}
	return nil
}

type PropertyDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffKind  DiffKind `protobuf:"varint,1,opt,name=diff_kind,json=diffKind,proto3,enum=cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.DiffKind" json:"diff_kind,omitempty"`
	InputDiff bool     `protobuf:"varint,2,opt,name=input_diff,json=inputDiff,proto3" json:"input_diff,omitempty"`
}

func (x *PropertyDiff) Reset() {
	*x = PropertyDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyDiff) ProtoMessage() {}

func (x *PropertyDiff) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyDiff.ProtoReflect.Descriptor instead.
func (*PropertyDiff) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{9}
}

func (x *PropertyDiff) GetDiffKind() DiffKind {
	if x != nil {
		return x.DiffKind
	}
	return DiffKind_DIFF_KIND_UNSPECIFIED
}

func (x *PropertyDiff) GetInputDiff() bool {
	if x != nil {
		return x.InputDiff
	}
	return false
}

type StepEventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op           OpType                   `protobuf:"varint,1,opt,name=op,proto3,enum=cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.OpType" json:"op,omitempty"`
	Urn          string                   `protobuf:"bytes,2,opt,name=urn,proto3" json:"urn,omitempty"`
	Type         string                   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Old          *StepEventStateMetadata  `protobuf:"bytes,4,opt,name=old,proto3" json:"old,omitempty"`
	New          *StepEventStateMetadata  `protobuf:"bytes,5,opt,name=new,proto3" json:"new,omitempty"`
	Keys         []string                 `protobuf:"bytes,6,rep,name=keys,proto3" json:"keys,omitempty"`
	Diffs        []string                 `protobuf:"bytes,7,rep,name=diffs,proto3" json:"diffs,omitempty"`
	DetailedDiff map[string]*PropertyDiff `protobuf:"bytes,8,rep,name=detailed_diff,json=detailedDiff,proto3" json:"detailed_diff,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logical      bool                     `protobuf:"varint,9,opt,name=logical,proto3" json:"logical,omitempty"`
	Provider     string                   `protobuf:"bytes,10,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *StepEventMetadata) Reset() {
	*x = StepEventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepEventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepEventMetadata) ProtoMessage() {}

func (x *StepEventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepEventMetadata.ProtoReflect.Descriptor instead.
func (*StepEventMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{10}
}

func (x *StepEventMetadata) GetOp() OpType {
	if x != nil {
		return x.Op
	}
	return OpType_OP_TYPE_UNSPECIFIED
}

func (x *StepEventMetadata) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *StepEventMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StepEventMetadata) GetOld() *StepEventStateMetadata {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *StepEventMetadata) GetNew() *StepEventStateMetadata {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *StepEventMetadata) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *StepEventMetadata) GetDiffs() []string {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *StepEventMetadata) GetDetailedDiff() map[string]*PropertyDiff {
	if x != nil {
		return x.DetailedDiff
	}
	return nil
}

func (x *StepEventMetadata) GetLogical() bool {
	if x != nil {
		return x.Logical
	}
	return false
}

func (x *StepEventMetadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type StepEventStateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Urn            string            `protobuf:"bytes,2,opt,name=urn,proto3" json:"urn,omitempty"`
	Custom         bool              `protobuf:"varint,3,opt,name=custom,proto3" json:"custom,omitempty"`
	Delete         bool              `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"`
	Id             string            `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Parent         string            `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	Protect        bool              `protobuf:"varint,7,opt,name=protect,proto3" json:"protect,omitempty"`
	RetainOnDelete bool              `protobuf:"varint,8,opt,name=retain_on_delete,json=retainOnDelete,proto3" json:"retain_on_delete,omitempty"`
	Inputs         map[string]string `protobuf:"bytes,9,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs        map[string]string `protobuf:"bytes,10,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Provider       string            `protobuf:"bytes,11,opt,name=provider,proto3" json:"provider,omitempty"`
	InitErrors     []string          `protobuf:"bytes,12,rep,name=init_errors,json=initErrors,proto3" json:"init_errors,omitempty"`
}

func (x *StepEventStateMetadata) Reset() {
	*x = StepEventStateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepEventStateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepEventStateMetadata) ProtoMessage() {}

func (x *StepEventStateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepEventStateMetadata.ProtoReflect.Descriptor instead.
func (*StepEventStateMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{11}
}

func (x *StepEventStateMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StepEventStateMetadata) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *StepEventStateMetadata) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

func (x *StepEventStateMetadata) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *StepEventStateMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StepEventStateMetadata) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *StepEventStateMetadata) GetProtect() bool {
	if x != nil {
		return x.Protect
	}
	return false
}

func (x *StepEventStateMetadata) GetRetainOnDelete() bool {
	if x != nil {
		return x.RetainOnDelete
	}
	return false
}

func (x *StepEventStateMetadata) GetInputs() map[string]string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *StepEventStateMetadata) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *StepEventStateMetadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *StepEventStateMetadata) GetInitErrors() []string {
	if x != nil {
		return x.InitErrors
	}
	return nil
}

type ResourcePreEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *StepEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Planning bool               `protobuf:"varint,2,opt,name=planning,proto3" json:"planning,omitempty"`
}

func (x *ResourcePreEvent) Reset() {
	*x = ResourcePreEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePreEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePreEvent) ProtoMessage() {}

func (x *ResourcePreEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePreEvent.ProtoReflect.Descriptor instead.
func (*ResourcePreEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{12}
}

func (x *ResourcePreEvent) GetMetadata() *StepEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourcePreEvent) GetPlanning() bool {
	if x != nil {
		return x.Planning
	}
	return false
}

type ResOutputsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *StepEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Planning bool               `protobuf:"varint,2,opt,name=planning,proto3" json:"planning,omitempty"`
}

func (x *ResOutputsEvent) Reset() {
	*x = ResOutputsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResOutputsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResOutputsEvent) ProtoMessage() {}

func (x *ResOutputsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResOutputsEvent.ProtoReflect.Descriptor instead.
func (*ResOutputsEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{13}
}

func (x *ResOutputsEvent) GetMetadata() *StepEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResOutputsEvent) GetPlanning() bool {
	if x != nil {
		return x.Planning
	}
	return false
}

type ResOpFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *StepEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   int32              `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Steps    int32              `protobuf:"varint,3,opt,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ResOpFailedEvent) Reset() {
	*x = ResOpFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResOpFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResOpFailedEvent) ProtoMessage() {}

func (x *ResOpFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResOpFailedEvent.ProtoReflect.Descriptor instead.
func (*ResOpFailedEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{14}
}

func (x *ResOpFailedEvent) GetMetadata() *StepEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResOpFailedEvent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ResOpFailedEvent) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

// pulumi resources payload used in the stack-job response stream to send the list of pulumi-resources to the client
// after the completion of a stack-job.
type PulumiResourcesPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PulumiResources []*PulumiResource `protobuf:"bytes,1,rep,name=pulumi_resources,json=pulumiResources,proto3" json:"pulumi_resources,omitempty"`
}

func (x *PulumiResourcesPayload) Reset() {
	*x = PulumiResourcesPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiResourcesPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiResourcesPayload) ProtoMessage() {}

func (x *PulumiResourcesPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiResourcesPayload.ProtoReflect.Descriptor instead.
func (*PulumiResourcesPayload) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{15}
}

func (x *PulumiResourcesPayload) GetPulumiResources() []*PulumiResource {
	if x != nil {
		return x.PulumiResources
	}
	return nil
}

// list of pulumi resources
type PulumiResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*PulumiResource `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *PulumiResources) Reset() {
	*x = PulumiResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiResources) ProtoMessage() {}

func (x *PulumiResources) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiResources.ProtoReflect.Descriptor instead.
func (*PulumiResources) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{16}
}

func (x *PulumiResources) GetEntries() []*PulumiResource {
	if x != nil {
		return x.Entries
	}
	return nil
}

// pulumi_stack_outputs is only populated when event_type is "StackJobProgressEventType.pulumi_stack_outputs_event"
// also outputs if only sent if "apply" operation is executed by the runner.
type PulumiStackOutputsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stack-job operation for which the payload is generated
	OperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// raw map of pulumi stack outputs
	Outputs map[string]string `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PulumiStackOutputsPayload) Reset() {
	*x = PulumiStackOutputsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiStackOutputsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiStackOutputsPayload) ProtoMessage() {}

func (x *PulumiStackOutputsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiStackOutputsPayload.ProtoReflect.Descriptor instead.
func (*PulumiStackOutputsPayload) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP(), []int{17}
}

func (x *PulumiStackOutputsPayload) GetOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *PulumiStackOutputsPayload) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDesc = []byte{
	0x0a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x66, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x0c, 0x0a,
	0x18, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x74, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x6e, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x0c,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x10, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x71,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x71, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x7f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a,
	0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x4f, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x6e, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x7e, 0x0a, 0x0c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x22, 0xbf, 0x02, 0x0a,
	0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xed,
	0x04, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x7a, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x77, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb,
	0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x70, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x03, 0x0a,
	0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x1a,
	0x42, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x65, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x08, 0x64, 0x69, 0x66, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x66, 0x66, 0x22, 0xe0, 0x05, 0x0a, 0x11, 0x53,
	0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x56, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68,
	0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x68, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6e,
	0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x12, 0x88, 0x01, 0x0a,
	0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x44, 0x69, 0x66, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x8d, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x05,
	0x0a, 0x16, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x4f, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x79, 0x0a, 0x10, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x7b, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x02,
	0x0a, 0x19, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x74, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x9d, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x46, 0x46,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x49, 0x46, 0x46, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x46, 0x46, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x06,
	0x2a, 0x96, 0x03, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x42, 0xed, 0x03, 0x0a, 0x4c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0xa2, 0x02, 0x09, 0x43, 0x50, 0x41, 0x49, 0x56, 0x53, 0x4d, 0x50,
	0x50, 0xaa, 0x02, 0x3e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x49, 0x61, 0x63, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0xca, 0x02, 0x3e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0xe2, 0x02, 0x4a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x56, 0x31, 0x5c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x46, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x49, 0x61, 0x63, 0x3a, 0x3a, 0x56, 0x31,
	0x3a, 0x3a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x50, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescData = file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDesc
)

func file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDescData
}

var file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_goTypes = []interface{}{
	(DiffKind)(0),                     // 0: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.DiffKind
	(OpType)(0),                       // 1: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.OpType
	(*PulumiEngineEventPayload)(nil),  // 2: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload
	(*EngineEvents)(nil),              // 3: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.EngineEvents
	(*CancelEvent)(nil),               // 4: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.CancelEvent
	(*StdoutEngineEvent)(nil),         // 5: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StdoutEngineEvent
	(*DiagnosticEvent)(nil),           // 6: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.DiagnosticEvent
	(*PolicyEvent)(nil),               // 7: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyEvent
	(*PolicyRemediationEvent)(nil),    // 8: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent
	(*PreludeEvent)(nil),              // 9: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PreludeEvent
	(*SummaryEvent)(nil),              // 10: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent
	(*PropertyDiff)(nil),              // 11: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PropertyDiff
	(*StepEventMetadata)(nil),         // 12: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata
	(*StepEventStateMetadata)(nil),    // 13: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata
	(*ResourcePreEvent)(nil),          // 14: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResourcePreEvent
	(*ResOutputsEvent)(nil),           // 15: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResOutputsEvent
	(*ResOpFailedEvent)(nil),          // 16: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResOpFailedEvent
	(*PulumiResourcesPayload)(nil),    // 17: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResourcesPayload
	(*PulumiResources)(nil),           // 18: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResources
	(*PulumiStackOutputsPayload)(nil), // 19: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiStackOutputsPayload
	nil,                               // 20: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent.BeforeEntry
	nil,                               // 21: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent.AfterEntry
	nil,                               // 22: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PreludeEvent.ConfigEntry
	nil,                               // 23: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent.ResourceChangesEntry
	nil,                               // 24: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent.PolicyPacksEntry
	nil,                               // 25: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.DetailedDiffEntry
	nil,                               // 26: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata.InputsEntry
	nil,                               // 27: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata.OutputsEntry
	nil,                               // 28: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiStackOutputsPayload.OutputsEntry
	(*timestamppb.Timestamp)(nil),     // 29: google.protobuf.Timestamp
	(stackjoboperationtype.StackJobOperationType)(0), // 30: cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	(pulumiengineeventtype.PulumiEngineEventType)(0), // 31: cloud.planton.apis.iac.v1.stackjob.enums.pulumiengineeventtype.PulumiEngineEventType
	(*PulumiResource)(nil),                           // 32: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResource
}
var file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_depIdxs = []int32{
	29, // 0: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.payload_timestamp:type_name -> google.protobuf.Timestamp
	30, // 1: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	31, // 2: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.event_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.pulumiengineeventtype.PulumiEngineEventType
	4,  // 3: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.cancel_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.CancelEvent
	5,  // 4: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.stdout_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StdoutEngineEvent
	6,  // 5: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.diagnostic_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.DiagnosticEvent
	9,  // 6: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.prelude_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PreludeEvent
	10, // 7: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.summary_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent
	14, // 8: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.resource_preEvent:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResourcePreEvent
	15, // 9: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.res_outputs_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResOutputsEvent
	16, // 10: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.res_op_failed_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResOpFailedEvent
	7,  // 11: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.policy_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyEvent
	8,  // 12: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload.policy_remediation_event:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent
	2,  // 13: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.EngineEvents.items:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload
	20, // 14: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent.before:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent.BeforeEntry
	21, // 15: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent.after:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PolicyRemediationEvent.AfterEntry
	22, // 16: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PreludeEvent.config:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PreludeEvent.ConfigEntry
	23, // 17: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent.resource_changes:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent.ResourceChangesEntry
	24, // 18: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent.policy_packs:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.SummaryEvent.PolicyPacksEntry
	0,  // 19: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PropertyDiff.diff_kind:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.DiffKind
	1,  // 20: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.op:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.OpType
	13, // 21: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.old:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata
	13, // 22: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.new:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata
	25, // 23: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.detailed_diff:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.DetailedDiffEntry
	26, // 24: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata.inputs:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata.InputsEntry
	27, // 25: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata.outputs:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventStateMetadata.OutputsEntry
	12, // 26: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResourcePreEvent.metadata:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata
	12, // 27: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResOutputsEvent.metadata:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata
	12, // 28: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.ResOpFailedEvent.metadata:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata
	32, // 29: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResourcesPayload.pulumi_resources:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResource
	32, // 30: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResources.entries:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResource
	30, // 31: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiStackOutputsPayload.operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	28, // 32: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiStackOutputsPayload.outputs:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiStackOutputsPayload.OutputsEntry
	11, // 33: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.StepEventMetadata.DetailedDiffEntry.value:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PropertyDiff
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_init() }
func file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_init() {
	if File_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto != nil {
		return
	}
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiEngineEventPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StdoutEngineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRemediationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreludeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepEventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepEventStateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePreEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResOutputsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResOpFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiResourcesPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiStackOutputsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_depIdxs,
		EnumInfos:         file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_enumTypes,
		MessageInfos:      file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto = out.File
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_rawDesc = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_goTypes = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_pulumiengine_io_proto_depIdxs = nil
}
