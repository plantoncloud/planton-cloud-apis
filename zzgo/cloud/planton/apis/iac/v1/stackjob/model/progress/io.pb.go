// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/iac/v1/stackjob/model/progress/io.proto

package progress

import (
	pulumioperationstatustype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/pulumioperationstatustype"
	stackjoboperationtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype"
	stackjobprogresseventtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogresseventtype"
	stackjobprogressjobstatuschangedeventtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjobprogressjobstatuschangedeventtype"
	pulumiengine "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model/progress/pulumiengine"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// stack-job progress event
type StackJobProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the event created during the execution of a stack-job
	EventType stackjobprogresseventtype.StackJobProgressEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogresseventtype.StackJobProgressEventType" json:"event_type,omitempty"`
	// pulumi engine event is only populated when event_type is "StackJobProgressEventType.stack_job_status_changed_event"
	JobStatusChangedEventPayload *StackJobProgressJobStatusChangedPayload `protobuf:"bytes,2,opt,name=job_status_changed_event_payload,json=jobStatusChangedEventPayload,proto3" json:"job_status_changed_event_payload,omitempty"`
	// stack-job progress status is populated when event_type is "StackJobProgressEventType.pulumi_operation_status_event"
	PulumiOperationStatusPayload *StackJobProgressPulumiOperationStatusPayload `protobuf:"bytes,3,opt,name=pulumi_operation_status_payload,json=pulumiOperationStatusPayload,proto3" json:"pulumi_operation_status_payload,omitempty"`
	// pulumi engine event is only populated when event_type is "StackJobProgressEventType.pulumi_engine_event"
	PulumiEngineEventPayload *pulumiengine.PulumiEngineEventPayload `protobuf:"bytes,4,opt,name=pulumi_engine_event_payload,json=pulumiEngineEventPayload,proto3" json:"pulumi_engine_event_payload,omitempty"`
	// pulumi engine event is only populated when event_type is "StackJobProgressEventType.pulumi_resources_event"
	PulumiResourcesPayload *pulumiengine.PulumiResourcesPayload `protobuf:"bytes,5,opt,name=pulumi_resources_payload,json=pulumiResourcesPayload,proto3" json:"pulumi_resources_payload,omitempty"`
	// pulumi engine event is only populated when event_type is "StackJobProgressEventType.pulumi_operation_outputs_event"
	PulumiOperationOutputs map[string]string `protobuf:"bytes,6,rep,name=pulumi_operation_outputs,json=pulumiOperationOutputs,proto3" json:"pulumi_operation_outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StackJobProgressEvent) Reset() {
	*x = StackJobProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobProgressEvent) ProtoMessage() {}

func (x *StackJobProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobProgressEvent.ProtoReflect.Descriptor instead.
func (*StackJobProgressEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescGZIP(), []int{0}
}

func (x *StackJobProgressEvent) GetEventType() stackjobprogresseventtype.StackJobProgressEventType {
	if x != nil {
		return x.EventType
	}
	return stackjobprogresseventtype.StackJobProgressEventType(0)
}

func (x *StackJobProgressEvent) GetJobStatusChangedEventPayload() *StackJobProgressJobStatusChangedPayload {
	if x != nil {
		return x.JobStatusChangedEventPayload
	}
	return nil
}

func (x *StackJobProgressEvent) GetPulumiOperationStatusPayload() *StackJobProgressPulumiOperationStatusPayload {
	if x != nil {
		return x.PulumiOperationStatusPayload
	}
	return nil
}

func (x *StackJobProgressEvent) GetPulumiEngineEventPayload() *pulumiengine.PulumiEngineEventPayload {
	if x != nil {
		return x.PulumiEngineEventPayload
	}
	return nil
}

func (x *StackJobProgressEvent) GetPulumiResourcesPayload() *pulumiengine.PulumiResourcesPayload {
	if x != nil {
		return x.PulumiResourcesPayload
	}
	return nil
}

func (x *StackJobProgressEvent) GetPulumiOperationOutputs() map[string]string {
	if x != nil {
		return x.PulumiOperationOutputs
	}
	return nil
}

// stack-job progress pulumi-operation status payload
type StackJobProgressPulumiOperationStatusPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time when the progress event payload was created.
	PayloadTimestamp *timestamppb.Timestamp `protobuf:"bytes,99,opt,name=payload_timestamp,json=payloadTimestamp,proto3" json:"payload_timestamp,omitempty"`
	// stack-job operation for which the event is generated
	OperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,98,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// type of the stack-job progress status event
	Status pulumioperationstatustype.PulumiOperationStatusType `protobuf:"varint,1,opt,name=status,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType" json:"status,omitempty"`
	// errors is populated for failed event
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StackJobProgressPulumiOperationStatusPayload) Reset() {
	*x = StackJobProgressPulumiOperationStatusPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobProgressPulumiOperationStatusPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobProgressPulumiOperationStatusPayload) ProtoMessage() {}

func (x *StackJobProgressPulumiOperationStatusPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobProgressPulumiOperationStatusPayload.ProtoReflect.Descriptor instead.
func (*StackJobProgressPulumiOperationStatusPayload) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescGZIP(), []int{1}
}

func (x *StackJobProgressPulumiOperationStatusPayload) GetPayloadTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PayloadTimestamp
	}
	return nil
}

func (x *StackJobProgressPulumiOperationStatusPayload) GetOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *StackJobProgressPulumiOperationStatusPayload) GetStatus() pulumioperationstatustype.PulumiOperationStatusType {
	if x != nil {
		return x.Status
	}
	return pulumioperationstatustype.PulumiOperationStatusType(0)
}

func (x *StackJobProgressPulumiOperationStatusPayload) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// stack-job progress job-status changed payload
type StackJobProgressJobStatusChangedPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time when the progress event payload was created.
	PayloadTimestamp *timestamppb.Timestamp `protobuf:"bytes,99,opt,name=payload_timestamp,json=payloadTimestamp,proto3" json:"payload_timestamp,omitempty"`
	// type of the stack-job progress job-status changed event
	Status stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType `protobuf:"varint,1,opt,name=status,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType" json:"status,omitempty"`
	// flag to indicate if the job has failed if the status is completed.
	IsFailed bool `protobuf:"varint,2,opt,name=is_failed,json=isFailed,proto3" json:"is_failed,omitempty"`
	// reason for stack-job failure, if it is completed but failed.
	FailedReason string `protobuf:"bytes,3,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *StackJobProgressJobStatusChangedPayload) Reset() {
	*x = StackJobProgressJobStatusChangedPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobProgressJobStatusChangedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobProgressJobStatusChangedPayload) ProtoMessage() {}

func (x *StackJobProgressJobStatusChangedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobProgressJobStatusChangedPayload.ProtoReflect.Descriptor instead.
func (*StackJobProgressJobStatusChangedPayload) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescGZIP(), []int{2}
}

func (x *StackJobProgressJobStatusChangedPayload) GetPayloadTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PayloadTimestamp
	}
	return nil
}

func (x *StackJobProgressJobStatusChangedPayload) GetStatus() stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType {
	if x != nil {
		return x.Status
	}
	return stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType(0)
}

func (x *StackJobProgressJobStatusChangedPayload) GetIsFailed() bool {
	if x != nil {
		return x.IsFailed
	}
	return false
}

func (x *StackJobProgressJobStatusChangedPayload) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

var File_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x66, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x89, 0x01,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a,
	0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x61,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x07, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x20,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x1c, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0xa6, 0x01, 0x0a, 0x1f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x1c, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x1b, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x18, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x16,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x18, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x16, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x50, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfc, 0x02, 0x0a, 0x2c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x74, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x62,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0xcc, 0x02, 0x0a, 0x27, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a,
	0x11, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x9d, 0x03, 0x0a, 0x3f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x6a, 0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0xa2, 0x02, 0x08, 0x43, 0x50, 0x41, 0x49, 0x56, 0x53, 0x4d, 0x50, 0xaa, 0x02, 0x31,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x69, 0x73, 0x2e, 0x49, 0x61, 0x63, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a,
	0x6f, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0xca, 0x02, 0x31, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0xe2, 0x02, 0x3d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x56,
	0x31, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x5c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x38, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x49, 0x61,
	0x63, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x3a,
	0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescData = file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDesc
)

func file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDescData
}

var file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_goTypes = []interface{}{
	(*StackJobProgressEvent)(nil),                        // 0: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent
	(*StackJobProgressPulumiOperationStatusPayload)(nil), // 1: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressPulumiOperationStatusPayload
	(*StackJobProgressJobStatusChangedPayload)(nil),      // 2: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressJobStatusChangedPayload
	nil, // 3: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.PulumiOperationOutputsEntry
	(stackjobprogresseventtype.StackJobProgressEventType)(0),                                 // 4: cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogresseventtype.StackJobProgressEventType
	(*pulumiengine.PulumiEngineEventPayload)(nil),                                            // 5: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload
	(*pulumiengine.PulumiResourcesPayload)(nil),                                              // 6: cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResourcesPayload
	(*timestamppb.Timestamp)(nil),                                                            // 7: google.protobuf.Timestamp
	(stackjoboperationtype.StackJobOperationType)(0),                                         // 8: cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	(pulumioperationstatustype.PulumiOperationStatusType)(0),                                 // 9: cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType
	(stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType)(0), // 10: cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType
}
var file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_depIdxs = []int32{
	4,  // 0: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.event_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogresseventtype.StackJobProgressEventType
	2,  // 1: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.job_status_changed_event_payload:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressJobStatusChangedPayload
	1,  // 2: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.pulumi_operation_status_payload:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressPulumiOperationStatusPayload
	5,  // 3: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.pulumi_engine_event_payload:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiEngineEventPayload
	6,  // 4: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.pulumi_resources_payload:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.pulumiengine.PulumiResourcesPayload
	3,  // 5: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.pulumi_operation_outputs:type_name -> cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressEvent.PulumiOperationOutputsEntry
	7,  // 6: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressPulumiOperationStatusPayload.payload_timestamp:type_name -> google.protobuf.Timestamp
	8,  // 7: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressPulumiOperationStatusPayload.operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.operationtype.StackJobOperationType
	9,  // 8: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressPulumiOperationStatusPayload.status:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.pulumioperationstatustype.PulumiOperationStatusType
	7,  // 9: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressJobStatusChangedPayload.payload_timestamp:type_name -> google.protobuf.Timestamp
	10, // 10: cloud.planton.apis.iac.v1.stackjob.model.progress.StackJobProgressJobStatusChangedPayload.status:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.stackjobprogressjobstatuschangedeventtype.StackJobProgressJobStatusChangedEventType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_init() }
func file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_init() {
	if File_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobProgressPulumiOperationStatusPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobProgressJobStatusChangedPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto = out.File
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_rawDesc = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_goTypes = nil
	file_cloud_planton_apis_iac_v1_stackjob_model_progress_io_proto_depIdxs = nil
}
