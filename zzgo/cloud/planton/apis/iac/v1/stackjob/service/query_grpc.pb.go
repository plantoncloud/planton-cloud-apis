// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/iac/v1/stackjob/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model"
	progress "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model/progress"
	pulumiengine "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model/progress/pulumiengine"
	snapshot "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model/progress/snapshot"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StackJobQueryController_ListByFilters_FullMethodName                           = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/listByFilters"
	StackJobQueryController_GetById_FullMethodName                                 = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getById"
	StackJobQueryController_GetProgressEventStream_FullMethodName                  = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getProgressEventStream"
	StackJobQueryController_GetStackJobProgressSnapshotStream_FullMethodName       = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getStackJobProgressSnapshotStream"
	StackJobQueryController_GetStackJobMinutesMTDByCompanyId_FullMethodName        = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getStackJobMinutesMTDByCompanyId"
	StackJobQueryController_GetPulumiResourceCountByCompanyId_FullMethodName       = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getPulumiResourceCountByCompanyId"
	StackJobQueryController_FindPulumiResourcesByStackJobId_FullMethodName         = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/findPulumiResourcesByStackJobId"
	StackJobQueryController_GetPulumiResourceCountByContextSummary_FullMethodName  = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getPulumiResourceCountByContextSummary"
	StackJobQueryController_GetPulumiResourceCountByContextDetailed_FullMethodName = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getPulumiResourceCountByContextDetailed"
	StackJobQueryController_GetStackJobMinutesMTDByContext_FullMethodName          = "/cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController/getStackJobMinutesMTDByContext"
)

// StackJobQueryControllerClient is the client API for StackJobQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackJobQueryControllerClient interface {
	// list of stack-jobs
	// todo: need to add authorization
	ListByFilters(ctx context.Context, in *model.ListStackJobsByFiltersQueryInput, opts ...grpc.CallOption) (*model.StackJobList, error)
	// look up stack-job by stack-job-id
	// todo: need to add authorization
	GetById(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (*model.StackJob, error)
	// rpc to get stack-job progress event stream
	// this rpc is required to support pulumi progress or diff view in the cli client which is an interactive client.
	GetProgressEventStream(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (StackJobQueryController_GetProgressEventStreamClient, error)
	// rpc to get snapshot of stack-job log
	// response is optimized to display the stack-job log on non-interactive client-apps
	GetStackJobProgressSnapshotStream(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (StackJobQueryController_GetStackJobProgressSnapshotStreamClient, error)
	// getStackJobMinutesMTBByCompanyId retrieves the total running minutes of stack jobs associated with a specific company.
	// This call is essential for systems needing to monitor, report, or bill based on the duration of stack jobs executed
	// within the context of a company. It requires a GetStackJobMinutesByCompanyIdInput message containing the company_id
	// for which the stack job minutes are being queried and returns a StackJobMinutesMTB message containing the total minutes.
	GetStackJobMinutesMTDByCompanyId(ctx context.Context, in *model.GetStackJobMinutesByCompanyIdInput, opts ...grpc.CallOption) (*model.StackJobMinutesMTD, error)
	// getPulumiResourceCountByCompanyId is an RPC that queries the total count of Pulumi resources
	// associated with a specified company. This operation requires an input of type
	// GetPulumiResourceCountByCompanyIdInput, which includes the company_id to identify the target
	// company. It returns a TotalPulumiResourceCount message, encapsulating the aggregate count of
	// Pulumi resources managed under the given company's account. This service is essential for
	// organizations utilizing Pulumi for infrastructure as code (IaC) to monitor and manage their
	// cloud resource utilization, facilitating effective resource planning, auditing, and optimization.
	GetPulumiResourceCountByCompanyId(ctx context.Context, in *model.GetPulumiResourceCountByCompanyIdInput, opts ...grpc.CallOption) (*model.TotalPulumiResourceCount, error)
	// retrieve all pulumi resources in a pulumi stack for a given stack-job-id
	FindPulumiResourcesByStackJobId(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (*pulumiengine.PulumiResources, error)
	// The getPulumiResourceCountByContext RPC retrieves the total count of Pulumi resources
	// for a given context. This context is defined by the combination of parameters specified in the
	// GetPulumiResourceCountByContextInput message, such as company and product identifiers. This operation
	// is crucial for understanding the scale of Pulumi infrastructure managed by a company for a specific product.
	GetPulumiResourceCountByContextSummary(ctx context.Context, in *model.GetPulumiResourceCountByContextInput, opts ...grpc.CallOption) (*model.TotalPulumiResourceCount, error)
	// getPulumiResourceCountByContextDetailed retrieves detailed information about Pulumi resources
	// within a given context. This context is specified by the GetPulumiResourceCountByContextInput message,
	// which includes identifiers for the company, product, and potentially other criteria to narrow down the query.
	GetPulumiResourceCountByContextDetailed(ctx context.Context, in *model.GetPulumiResourceCountByContextInput, opts ...grpc.CallOption) (*model.PulumiResourceCountDetailedList, error)
	// getStackJobMinutesNTDByContextInput retrieves the total running minutes of stack jobs associated with a specific company/ product.
	// This call is essential for systems needing to monitor, report, or bill based on the duration of stack jobs executed
	// within the context of a company/ product. It requires a GetStackJobMinutesByContextInput message containing the company_id/ product_id
	// for which the stack job minutes are being queried and returns a StackJobMinutesMTB message containing the total minutes.
	GetStackJobMinutesMTDByContext(ctx context.Context, in *model.GetStackJobMinutesByContextInput, opts ...grpc.CallOption) (*model.StackJobMinutesMTD, error)
}

type stackJobQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStackJobQueryControllerClient(cc grpc.ClientConnInterface) StackJobQueryControllerClient {
	return &stackJobQueryControllerClient{cc}
}

func (c *stackJobQueryControllerClient) ListByFilters(ctx context.Context, in *model.ListStackJobsByFiltersQueryInput, opts ...grpc.CallOption) (*model.StackJobList, error) {
	out := new(model.StackJobList)
	err := c.cc.Invoke(ctx, StackJobQueryController_ListByFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) GetById(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (*model.StackJob, error) {
	out := new(model.StackJob)
	err := c.cc.Invoke(ctx, StackJobQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) GetProgressEventStream(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (StackJobQueryController_GetProgressEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackJobQueryController_ServiceDesc.Streams[0], StackJobQueryController_GetProgressEventStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackJobQueryControllerGetProgressEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackJobQueryController_GetProgressEventStreamClient interface {
	Recv() (*progress.StackJobProgressEvent, error)
	grpc.ClientStream
}

type stackJobQueryControllerGetProgressEventStreamClient struct {
	grpc.ClientStream
}

func (x *stackJobQueryControllerGetProgressEventStreamClient) Recv() (*progress.StackJobProgressEvent, error) {
	m := new(progress.StackJobProgressEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackJobQueryControllerClient) GetStackJobProgressSnapshotStream(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (StackJobQueryController_GetStackJobProgressSnapshotStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackJobQueryController_ServiceDesc.Streams[1], StackJobQueryController_GetStackJobProgressSnapshotStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackJobQueryControllerGetStackJobProgressSnapshotStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackJobQueryController_GetStackJobProgressSnapshotStreamClient interface {
	Recv() (*snapshot.StackJobProgressSnapshot, error)
	grpc.ClientStream
}

type stackJobQueryControllerGetStackJobProgressSnapshotStreamClient struct {
	grpc.ClientStream
}

func (x *stackJobQueryControllerGetStackJobProgressSnapshotStreamClient) Recv() (*snapshot.StackJobProgressSnapshot, error) {
	m := new(snapshot.StackJobProgressSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackJobQueryControllerClient) GetStackJobMinutesMTDByCompanyId(ctx context.Context, in *model.GetStackJobMinutesByCompanyIdInput, opts ...grpc.CallOption) (*model.StackJobMinutesMTD, error) {
	out := new(model.StackJobMinutesMTD)
	err := c.cc.Invoke(ctx, StackJobQueryController_GetStackJobMinutesMTDByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) GetPulumiResourceCountByCompanyId(ctx context.Context, in *model.GetPulumiResourceCountByCompanyIdInput, opts ...grpc.CallOption) (*model.TotalPulumiResourceCount, error) {
	out := new(model.TotalPulumiResourceCount)
	err := c.cc.Invoke(ctx, StackJobQueryController_GetPulumiResourceCountByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) FindPulumiResourcesByStackJobId(ctx context.Context, in *model.StackJobId, opts ...grpc.CallOption) (*pulumiengine.PulumiResources, error) {
	out := new(pulumiengine.PulumiResources)
	err := c.cc.Invoke(ctx, StackJobQueryController_FindPulumiResourcesByStackJobId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) GetPulumiResourceCountByContextSummary(ctx context.Context, in *model.GetPulumiResourceCountByContextInput, opts ...grpc.CallOption) (*model.TotalPulumiResourceCount, error) {
	out := new(model.TotalPulumiResourceCount)
	err := c.cc.Invoke(ctx, StackJobQueryController_GetPulumiResourceCountByContextSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) GetPulumiResourceCountByContextDetailed(ctx context.Context, in *model.GetPulumiResourceCountByContextInput, opts ...grpc.CallOption) (*model.PulumiResourceCountDetailedList, error) {
	out := new(model.PulumiResourceCountDetailedList)
	err := c.cc.Invoke(ctx, StackJobQueryController_GetPulumiResourceCountByContextDetailed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackJobQueryControllerClient) GetStackJobMinutesMTDByContext(ctx context.Context, in *model.GetStackJobMinutesByContextInput, opts ...grpc.CallOption) (*model.StackJobMinutesMTD, error) {
	out := new(model.StackJobMinutesMTD)
	err := c.cc.Invoke(ctx, StackJobQueryController_GetStackJobMinutesMTDByContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackJobQueryControllerServer is the server API for StackJobQueryController service.
// All implementations should embed UnimplementedStackJobQueryControllerServer
// for forward compatibility
type StackJobQueryControllerServer interface {
	// list of stack-jobs
	// todo: need to add authorization
	ListByFilters(context.Context, *model.ListStackJobsByFiltersQueryInput) (*model.StackJobList, error)
	// look up stack-job by stack-job-id
	// todo: need to add authorization
	GetById(context.Context, *model.StackJobId) (*model.StackJob, error)
	// rpc to get stack-job progress event stream
	// this rpc is required to support pulumi progress or diff view in the cli client which is an interactive client.
	GetProgressEventStream(*model.StackJobId, StackJobQueryController_GetProgressEventStreamServer) error
	// rpc to get snapshot of stack-job log
	// response is optimized to display the stack-job log on non-interactive client-apps
	GetStackJobProgressSnapshotStream(*model.StackJobId, StackJobQueryController_GetStackJobProgressSnapshotStreamServer) error
	// getStackJobMinutesMTBByCompanyId retrieves the total running minutes of stack jobs associated with a specific company.
	// This call is essential for systems needing to monitor, report, or bill based on the duration of stack jobs executed
	// within the context of a company. It requires a GetStackJobMinutesByCompanyIdInput message containing the company_id
	// for which the stack job minutes are being queried and returns a StackJobMinutesMTB message containing the total minutes.
	GetStackJobMinutesMTDByCompanyId(context.Context, *model.GetStackJobMinutesByCompanyIdInput) (*model.StackJobMinutesMTD, error)
	// getPulumiResourceCountByCompanyId is an RPC that queries the total count of Pulumi resources
	// associated with a specified company. This operation requires an input of type
	// GetPulumiResourceCountByCompanyIdInput, which includes the company_id to identify the target
	// company. It returns a TotalPulumiResourceCount message, encapsulating the aggregate count of
	// Pulumi resources managed under the given company's account. This service is essential for
	// organizations utilizing Pulumi for infrastructure as code (IaC) to monitor and manage their
	// cloud resource utilization, facilitating effective resource planning, auditing, and optimization.
	GetPulumiResourceCountByCompanyId(context.Context, *model.GetPulumiResourceCountByCompanyIdInput) (*model.TotalPulumiResourceCount, error)
	// retrieve all pulumi resources in a pulumi stack for a given stack-job-id
	FindPulumiResourcesByStackJobId(context.Context, *model.StackJobId) (*pulumiengine.PulumiResources, error)
	// The getPulumiResourceCountByContext RPC retrieves the total count of Pulumi resources
	// for a given context. This context is defined by the combination of parameters specified in the
	// GetPulumiResourceCountByContextInput message, such as company and product identifiers. This operation
	// is crucial for understanding the scale of Pulumi infrastructure managed by a company for a specific product.
	GetPulumiResourceCountByContextSummary(context.Context, *model.GetPulumiResourceCountByContextInput) (*model.TotalPulumiResourceCount, error)
	// getPulumiResourceCountByContextDetailed retrieves detailed information about Pulumi resources
	// within a given context. This context is specified by the GetPulumiResourceCountByContextInput message,
	// which includes identifiers for the company, product, and potentially other criteria to narrow down the query.
	GetPulumiResourceCountByContextDetailed(context.Context, *model.GetPulumiResourceCountByContextInput) (*model.PulumiResourceCountDetailedList, error)
	// getStackJobMinutesNTDByContextInput retrieves the total running minutes of stack jobs associated with a specific company/ product.
	// This call is essential for systems needing to monitor, report, or bill based on the duration of stack jobs executed
	// within the context of a company/ product. It requires a GetStackJobMinutesByContextInput message containing the company_id/ product_id
	// for which the stack job minutes are being queried and returns a StackJobMinutesMTB message containing the total minutes.
	GetStackJobMinutesMTDByContext(context.Context, *model.GetStackJobMinutesByContextInput) (*model.StackJobMinutesMTD, error)
}

// UnimplementedStackJobQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStackJobQueryControllerServer struct {
}

func (UnimplementedStackJobQueryControllerServer) ListByFilters(context.Context, *model.ListStackJobsByFiltersQueryInput) (*model.StackJobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByFilters not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetById(context.Context, *model.StackJobId) (*model.StackJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetProgressEventStream(*model.StackJobId, StackJobQueryController_GetProgressEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProgressEventStream not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetStackJobProgressSnapshotStream(*model.StackJobId, StackJobQueryController_GetStackJobProgressSnapshotStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStackJobProgressSnapshotStream not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetStackJobMinutesMTDByCompanyId(context.Context, *model.GetStackJobMinutesByCompanyIdInput) (*model.StackJobMinutesMTD, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStackJobMinutesMTDByCompanyId not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetPulumiResourceCountByCompanyId(context.Context, *model.GetPulumiResourceCountByCompanyIdInput) (*model.TotalPulumiResourceCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPulumiResourceCountByCompanyId not implemented")
}
func (UnimplementedStackJobQueryControllerServer) FindPulumiResourcesByStackJobId(context.Context, *model.StackJobId) (*pulumiengine.PulumiResources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPulumiResourcesByStackJobId not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetPulumiResourceCountByContextSummary(context.Context, *model.GetPulumiResourceCountByContextInput) (*model.TotalPulumiResourceCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPulumiResourceCountByContextSummary not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetPulumiResourceCountByContextDetailed(context.Context, *model.GetPulumiResourceCountByContextInput) (*model.PulumiResourceCountDetailedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPulumiResourceCountByContextDetailed not implemented")
}
func (UnimplementedStackJobQueryControllerServer) GetStackJobMinutesMTDByContext(context.Context, *model.GetStackJobMinutesByContextInput) (*model.StackJobMinutesMTD, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStackJobMinutesMTDByContext not implemented")
}

// UnsafeStackJobQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackJobQueryControllerServer will
// result in compilation errors.
type UnsafeStackJobQueryControllerServer interface {
	mustEmbedUnimplementedStackJobQueryControllerServer()
}

func RegisterStackJobQueryControllerServer(s grpc.ServiceRegistrar, srv StackJobQueryControllerServer) {
	s.RegisterService(&StackJobQueryController_ServiceDesc, srv)
}

func _StackJobQueryController_ListByFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ListStackJobsByFiltersQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).ListByFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_ListByFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).ListByFilters(ctx, req.(*model.ListStackJobsByFiltersQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.StackJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).GetById(ctx, req.(*model.StackJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_GetProgressEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StackJobId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackJobQueryControllerServer).GetProgressEventStream(m, &stackJobQueryControllerGetProgressEventStreamServer{stream})
}

type StackJobQueryController_GetProgressEventStreamServer interface {
	Send(*progress.StackJobProgressEvent) error
	grpc.ServerStream
}

type stackJobQueryControllerGetProgressEventStreamServer struct {
	grpc.ServerStream
}

func (x *stackJobQueryControllerGetProgressEventStreamServer) Send(m *progress.StackJobProgressEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _StackJobQueryController_GetStackJobProgressSnapshotStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StackJobId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackJobQueryControllerServer).GetStackJobProgressSnapshotStream(m, &stackJobQueryControllerGetStackJobProgressSnapshotStreamServer{stream})
}

type StackJobQueryController_GetStackJobProgressSnapshotStreamServer interface {
	Send(*snapshot.StackJobProgressSnapshot) error
	grpc.ServerStream
}

type stackJobQueryControllerGetStackJobProgressSnapshotStreamServer struct {
	grpc.ServerStream
}

func (x *stackJobQueryControllerGetStackJobProgressSnapshotStreamServer) Send(m *snapshot.StackJobProgressSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

func _StackJobQueryController_GetStackJobMinutesMTDByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetStackJobMinutesByCompanyIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).GetStackJobMinutesMTDByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_GetStackJobMinutesMTDByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).GetStackJobMinutesMTDByCompanyId(ctx, req.(*model.GetStackJobMinutesByCompanyIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_GetPulumiResourceCountByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPulumiResourceCountByCompanyIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).GetPulumiResourceCountByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_GetPulumiResourceCountByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).GetPulumiResourceCountByCompanyId(ctx, req.(*model.GetPulumiResourceCountByCompanyIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_FindPulumiResourcesByStackJobId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.StackJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).FindPulumiResourcesByStackJobId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_FindPulumiResourcesByStackJobId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).FindPulumiResourcesByStackJobId(ctx, req.(*model.StackJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_GetPulumiResourceCountByContextSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPulumiResourceCountByContextInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).GetPulumiResourceCountByContextSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_GetPulumiResourceCountByContextSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).GetPulumiResourceCountByContextSummary(ctx, req.(*model.GetPulumiResourceCountByContextInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_GetPulumiResourceCountByContextDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPulumiResourceCountByContextInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).GetPulumiResourceCountByContextDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_GetPulumiResourceCountByContextDetailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).GetPulumiResourceCountByContextDetailed(ctx, req.(*model.GetPulumiResourceCountByContextInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackJobQueryController_GetStackJobMinutesMTDByContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetStackJobMinutesByContextInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackJobQueryControllerServer).GetStackJobMinutesMTDByContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackJobQueryController_GetStackJobMinutesMTDByContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackJobQueryControllerServer).GetStackJobMinutesMTDByContext(ctx, req.(*model.GetStackJobMinutesByContextInput))
	}
	return interceptor(ctx, in, info, handler)
}

// StackJobQueryController_ServiceDesc is the grpc.ServiceDesc for StackJobQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackJobQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.iac.v1.stackjob.service.StackJobQueryController",
	HandlerType: (*StackJobQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listByFilters",
			Handler:    _StackJobQueryController_ListByFilters_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _StackJobQueryController_GetById_Handler,
		},
		{
			MethodName: "getStackJobMinutesMTDByCompanyId",
			Handler:    _StackJobQueryController_GetStackJobMinutesMTDByCompanyId_Handler,
		},
		{
			MethodName: "getPulumiResourceCountByCompanyId",
			Handler:    _StackJobQueryController_GetPulumiResourceCountByCompanyId_Handler,
		},
		{
			MethodName: "findPulumiResourcesByStackJobId",
			Handler:    _StackJobQueryController_FindPulumiResourcesByStackJobId_Handler,
		},
		{
			MethodName: "getPulumiResourceCountByContextSummary",
			Handler:    _StackJobQueryController_GetPulumiResourceCountByContextSummary_Handler,
		},
		{
			MethodName: "getPulumiResourceCountByContextDetailed",
			Handler:    _StackJobQueryController_GetPulumiResourceCountByContextDetailed_Handler,
		},
		{
			MethodName: "getStackJobMinutesMTDByContext",
			Handler:    _StackJobQueryController_GetStackJobMinutesMTDByContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getProgressEventStream",
			Handler:       _StackJobQueryController_GetProgressEventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getStackJobProgressSnapshotStream",
			Handler:       _StackJobQueryController_GetStackJobProgressSnapshotStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/iac/v1/stackjob/service/query.proto",
}
