// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/iac/v1/stackmoduledescriptor/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackmoduledescriptor/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StackModuleDescriptorQueryController_Get_FullMethodName = "/cloud.planton.apis.iac.v1.stackmoduledescriptor.service.StackModuleDescriptorQueryController/get"
)

// StackModuleDescriptorQueryControllerClient is the client API for StackModuleDescriptorQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackModuleDescriptorQueryControllerClient interface {
	// lookup stack-module-descriptor using stack-module-descriptor id
	Get(ctx context.Context, in *model.StackModuleDescriptorId, opts ...grpc.CallOption) (*model.StackModuleDescriptor, error)
}

type stackModuleDescriptorQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStackModuleDescriptorQueryControllerClient(cc grpc.ClientConnInterface) StackModuleDescriptorQueryControllerClient {
	return &stackModuleDescriptorQueryControllerClient{cc}
}

func (c *stackModuleDescriptorQueryControllerClient) Get(ctx context.Context, in *model.StackModuleDescriptorId, opts ...grpc.CallOption) (*model.StackModuleDescriptor, error) {
	out := new(model.StackModuleDescriptor)
	err := c.cc.Invoke(ctx, StackModuleDescriptorQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackModuleDescriptorQueryControllerServer is the server API for StackModuleDescriptorQueryController service.
// All implementations should embed UnimplementedStackModuleDescriptorQueryControllerServer
// for forward compatibility
type StackModuleDescriptorQueryControllerServer interface {
	// lookup stack-module-descriptor using stack-module-descriptor id
	Get(context.Context, *model.StackModuleDescriptorId) (*model.StackModuleDescriptor, error)
}

// UnimplementedStackModuleDescriptorQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStackModuleDescriptorQueryControllerServer struct {
}

func (UnimplementedStackModuleDescriptorQueryControllerServer) Get(context.Context, *model.StackModuleDescriptorId) (*model.StackModuleDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeStackModuleDescriptorQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackModuleDescriptorQueryControllerServer will
// result in compilation errors.
type UnsafeStackModuleDescriptorQueryControllerServer interface {
	mustEmbedUnimplementedStackModuleDescriptorQueryControllerServer()
}

func RegisterStackModuleDescriptorQueryControllerServer(s grpc.ServiceRegistrar, srv StackModuleDescriptorQueryControllerServer) {
	s.RegisterService(&StackModuleDescriptorQueryController_ServiceDesc, srv)
}

func _StackModuleDescriptorQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.StackModuleDescriptorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackModuleDescriptorQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackModuleDescriptorQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackModuleDescriptorQueryControllerServer).Get(ctx, req.(*model.StackModuleDescriptorId))
	}
	return interceptor(ctx, in, info, handler)
}

// StackModuleDescriptorQueryController_ServiceDesc is the grpc.ServiceDesc for StackModuleDescriptorQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackModuleDescriptorQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.iac.v1.stackmoduledescriptor.service.StackModuleDescriptorQueryController",
	HandlerType: (*StackModuleDescriptorQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _StackModuleDescriptorQueryController_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/iac/v1/stackmoduledescriptor/service/query.proto",
}
