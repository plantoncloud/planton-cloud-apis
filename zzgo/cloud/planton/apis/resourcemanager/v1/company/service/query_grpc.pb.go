// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/resourcemanager/v1/company/service/query.proto

package service

import (
	context "context"
	protobuf "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/protobuf"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/company/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyQueryController_List_FullMethodName          = "/cloud.planton.apis.resourcemanager.v1.company.service.CompanyQueryController/list"
	CompanyQueryController_GetById_FullMethodName       = "/cloud.planton.apis.resourcemanager.v1.company.service.CompanyQueryController/getById"
	CompanyQueryController_FindCompanies_FullMethodName = "/cloud.planton.apis.resourcemanager.v1.company.service.CompanyQueryController/findCompanies"
)

// CompanyQueryControllerClient is the client API for CompanyQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyQueryControllerClient interface {
	// list all the companies on planton cloud for the requested page. This is intended to be used on back-office portal.
	List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.CompanyList, error)
	// get a company using company id
	GetById(ctx context.Context, in *model.CompanyId, opts ...grpc.CallOption) (*model.Company, error)
	FindCompanies(ctx context.Context, in *protobuf.CustomEmpty, opts ...grpc.CallOption) (*model.Companies, error)
}

type companyQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyQueryControllerClient(cc grpc.ClientConnInterface) CompanyQueryControllerClient {
	return &companyQueryControllerClient{cc}
}

func (c *companyQueryControllerClient) List(ctx context.Context, in *rpc.PageInfo, opts ...grpc.CallOption) (*model.CompanyList, error) {
	out := new(model.CompanyList)
	err := c.cc.Invoke(ctx, CompanyQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyQueryControllerClient) GetById(ctx context.Context, in *model.CompanyId, opts ...grpc.CallOption) (*model.Company, error) {
	out := new(model.Company)
	err := c.cc.Invoke(ctx, CompanyQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyQueryControllerClient) FindCompanies(ctx context.Context, in *protobuf.CustomEmpty, opts ...grpc.CallOption) (*model.Companies, error) {
	out := new(model.Companies)
	err := c.cc.Invoke(ctx, CompanyQueryController_FindCompanies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyQueryControllerServer is the server API for CompanyQueryController service.
// All implementations should embed UnimplementedCompanyQueryControllerServer
// for forward compatibility
type CompanyQueryControllerServer interface {
	// list all the companies on planton cloud for the requested page. This is intended to be used on back-office portal.
	List(context.Context, *rpc.PageInfo) (*model.CompanyList, error)
	// get a company using company id
	GetById(context.Context, *model.CompanyId) (*model.Company, error)
	FindCompanies(context.Context, *protobuf.CustomEmpty) (*model.Companies, error)
}

// UnimplementedCompanyQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCompanyQueryControllerServer struct {
}

func (UnimplementedCompanyQueryControllerServer) List(context.Context, *rpc.PageInfo) (*model.CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCompanyQueryControllerServer) GetById(context.Context, *model.CompanyId) (*model.Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCompanyQueryControllerServer) FindCompanies(context.Context, *protobuf.CustomEmpty) (*model.Companies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanies not implemented")
}

// UnsafeCompanyQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyQueryControllerServer will
// result in compilation errors.
type UnsafeCompanyQueryControllerServer interface {
	mustEmbedUnimplementedCompanyQueryControllerServer()
}

func RegisterCompanyQueryControllerServer(s grpc.ServiceRegistrar, srv CompanyQueryControllerServer) {
	s.RegisterService(&CompanyQueryController_ServiceDesc, srv)
}

func _CompanyQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyQueryControllerServer).List(ctx, req.(*rpc.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyQueryControllerServer).GetById(ctx, req.(*model.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyQueryController_FindCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.CustomEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyQueryControllerServer).FindCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyQueryController_FindCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyQueryControllerServer).FindCompanies(ctx, req.(*protobuf.CustomEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyQueryController_ServiceDesc is the grpc.ServiceDesc for CompanyQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.resourcemanager.v1.company.service.CompanyQueryController",
	HandlerType: (*CompanyQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _CompanyQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _CompanyQueryController_GetById_Handler,
		},
		{
			MethodName: "findCompanies",
			Handler:    _CompanyQueryController_FindCompanies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/resourcemanager/v1/company/service/query.proto",
}
