// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/resourcemanager/v1/organization/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/resourcemanager/v1/organization/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationCommandController_Create_FullMethodName  = "/cloud.planton.apis.resourcemanager.v1.organization.service.OrganizationCommandController/create"
	OrganizationCommandController_Update_FullMethodName  = "/cloud.planton.apis.resourcemanager.v1.organization.service.OrganizationCommandController/update"
	OrganizationCommandController_Delete_FullMethodName  = "/cloud.planton.apis.resourcemanager.v1.organization.service.OrganizationCommandController/delete"
	OrganizationCommandController_Restore_FullMethodName = "/cloud.planton.apis.resourcemanager.v1.organization.service.OrganizationCommandController/restore"
)

// OrganizationCommandControllerClient is the client API for OrganizationCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationCommandControllerClient interface {
	// create a new organization on planton-cloud
	Create(ctx context.Context, in *model.Organization, opts ...grpc.CallOption) (*model.Organization, error)
	// update an existing organization on planton-cloud
	Update(ctx context.Context, in *model.Organization, opts ...grpc.CallOption) (*model.Organization, error)
	// delete an existing organization on planton-cloud using organization id
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.Organization, error)
	// restore a previously deleted organization.
	Restore(ctx context.Context, in *model.Organization, opts ...grpc.CallOption) (*model.Organization, error)
}

type organizationCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationCommandControllerClient(cc grpc.ClientConnInterface) OrganizationCommandControllerClient {
	return &organizationCommandControllerClient{cc}
}

func (c *organizationCommandControllerClient) Create(ctx context.Context, in *model.Organization, opts ...grpc.CallOption) (*model.Organization, error) {
	out := new(model.Organization)
	err := c.cc.Invoke(ctx, OrganizationCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationCommandControllerClient) Update(ctx context.Context, in *model.Organization, opts ...grpc.CallOption) (*model.Organization, error) {
	out := new(model.Organization)
	err := c.cc.Invoke(ctx, OrganizationCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.Organization, error) {
	out := new(model.Organization)
	err := c.cc.Invoke(ctx, OrganizationCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationCommandControllerClient) Restore(ctx context.Context, in *model.Organization, opts ...grpc.CallOption) (*model.Organization, error) {
	out := new(model.Organization)
	err := c.cc.Invoke(ctx, OrganizationCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationCommandControllerServer is the server API for OrganizationCommandController service.
// All implementations should embed UnimplementedOrganizationCommandControllerServer
// for forward compatibility
type OrganizationCommandControllerServer interface {
	// create a new organization on planton-cloud
	Create(context.Context, *model.Organization) (*model.Organization, error)
	// update an existing organization on planton-cloud
	Update(context.Context, *model.Organization) (*model.Organization, error)
	// delete an existing organization on planton-cloud using organization id
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.Organization, error)
	// restore a previously deleted organization.
	Restore(context.Context, *model.Organization) (*model.Organization, error)
}

// UnimplementedOrganizationCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedOrganizationCommandControllerServer struct {
}

func (UnimplementedOrganizationCommandControllerServer) Create(context.Context, *model.Organization) (*model.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationCommandControllerServer) Update(context.Context, *model.Organization) (*model.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationCommandControllerServer) Restore(context.Context, *model.Organization) (*model.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeOrganizationCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationCommandControllerServer will
// result in compilation errors.
type UnsafeOrganizationCommandControllerServer interface {
	mustEmbedUnimplementedOrganizationCommandControllerServer()
}

func RegisterOrganizationCommandControllerServer(s grpc.ServiceRegistrar, srv OrganizationCommandControllerServer) {
	s.RegisterService(&OrganizationCommandController_ServiceDesc, srv)
}

func _OrganizationCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationCommandControllerServer).Create(ctx, req.(*model.Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationCommandControllerServer).Update(ctx, req.(*model.Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationCommandControllerServer).Restore(ctx, req.(*model.Organization))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationCommandController_ServiceDesc is the grpc.ServiceDesc for OrganizationCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.resourcemanager.v1.organization.service.OrganizationCommandController",
	HandlerType: (*OrganizationCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _OrganizationCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _OrganizationCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _OrganizationCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _OrganizationCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/resourcemanager/v1/organization/service/command.proto",
}
