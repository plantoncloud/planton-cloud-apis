// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/commons/english/enums/englishword/english_word.proto

package englishword

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnglishWord_EnglishWordEnum int32

const (
	EnglishWord_word_unspecified EnglishWord_EnglishWordEnum = 0
	EnglishWord_app              EnglishWord_EnglishWordEnum = 1
	EnglishWord_application      EnglishWord_EnglishWordEnum = 2
	EnglishWord_aws              EnglishWord_EnglishWordEnum = 3
	EnglishWord_azure            EnglishWord_EnglishWordEnum = 4
	EnglishWord_bill             EnglishWord_EnglishWordEnum = 5
	EnglishWord_company          EnglishWord_EnglishWordEnum = 6
	EnglishWord_config           EnglishWord_EnglishWordEnum = 7
	EnglishWord_cpu              EnglishWord_EnglishWordEnum = 8
	EnglishWord_debug            EnglishWord_EnglishWordEnum = 9
	EnglishWord_docker           EnglishWord_EnglishWordEnum = 10
	EnglishWord_domain           EnglishWord_EnglishWordEnum = 11
	EnglishWord_email            EnglishWord_EnglishWordEnum = 12
	EnglishWord_endpoint         EnglishWord_EnglishWordEnum = 13
	EnglishWord_external         EnglishWord_EnglishWordEnum = 14
	EnglishWord_file             EnglishWord_EnglishWordEnum = 15
	EnglishWord_gcp              EnglishWord_EnglishWordEnum = 16
	EnglishWord_google           EnglishWord_EnglishWordEnum = 17
	EnglishWord_hosting          EnglishWord_EnglishWordEnum = 18
	EnglishWord_hostname         EnglishWord_EnglishWordEnum = 19
	EnglishWord_id               EnglishWord_EnglishWordEnum = 20
	EnglishWord_ingress          EnglishWord_EnglishWordEnum = 21
	EnglishWord_instances        EnglishWord_EnglishWordEnum = 22
	EnglishWord_internal         EnglishWord_EnglishWordEnum = 23
	EnglishWord_ip               EnglishWord_EnglishWordEnum = 24
	EnglishWord_key              EnglishWord_EnglishWordEnum = 25
	EnglishWord_kubeconfig       EnglishWord_EnglishWordEnum = 26
	EnglishWord_kubernetes       EnglishWord_EnglishWordEnum = 27
	EnglishWord_localhost        EnglishWord_EnglishWordEnum = 28
	EnglishWord_machine          EnglishWord_EnglishWordEnum = 29
	EnglishWord_main             EnglishWord_EnglishWordEnum = 30
	EnglishWord_maven            EnglishWord_EnglishWordEnum = 31
	EnglishWord_memory           EnglishWord_EnglishWordEnum = 32
	EnglishWord_microservice     EnglishWord_EnglishWordEnum = 33
	EnglishWord_name             EnglishWord_EnglishWordEnum = 34
	EnglishWord_nameservers      EnglishWord_EnglishWordEnum = 35
	EnglishWord_namespace        EnglishWord_EnglishWordEnum = 36
	EnglishWord_network          EnglishWord_EnglishWordEnum = 37
	EnglishWord_npm              EnglishWord_EnglishWordEnum = 38
	EnglishWord_number           EnglishWord_EnglishWordEnum = 39
	EnglishWord_org              EnglishWord_EnglishWordEnum = 40
	EnglishWord_parent           EnglishWord_EnglishWordEnum = 41
	EnglishWord_postgres         EnglishWord_EnglishWordEnum = 42
	EnglishWord_product          EnglishWord_EnglishWordEnum = 43
	EnglishWord_project          EnglishWord_EnglishWordEnum = 44
	EnglishWord_python           EnglishWord_EnglishWordEnum = 45
	EnglishWord_repo             EnglishWord_EnglishWordEnum = 46
	EnglishWord_review           EnglishWord_EnglishWordEnum = 47
	EnglishWord_server           EnglishWord_EnglishWordEnum = 48
	EnglishWord_servers          EnglishWord_EnglishWordEnum = 49
	EnglishWord_share            EnglishWord_EnglishWordEnum = 50
	EnglishWord_shared_services  EnglishWord_EnglishWordEnum = 51
	EnglishWord_spilo            EnglishWord_EnglishWordEnum = 52
	EnglishWord_spot             EnglishWord_EnglishWordEnum = 53
	EnglishWord_stunnel          EnglishWord_EnglishWordEnum = 54
	EnglishWord_team             EnglishWord_EnglishWordEnum = 55
	EnglishWord_type             EnglishWord_EnglishWordEnum = 56
	EnglishWord_username         EnglishWord_EnglishWordEnum = 57
	EnglishWord_util             EnglishWord_EnglishWordEnum = 58
	EnglishWord_version          EnglishWord_EnglishWordEnum = 59
	EnglishWord_workload         EnglishWord_EnglishWordEnum = 60
	EnglishWord_url              EnglishWord_EnglishWordEnum = 61
	EnglishWord_env              EnglishWord_EnglishWordEnum = 62
	EnglishWord_kafka            EnglishWord_EnglishWordEnum = 63
	EnglishWord_unknown          EnglishWord_EnglishWordEnum = 64
	EnglishWord_resource         EnglishWord_EnglishWordEnum = 65
	EnglishWord_resource_id      EnglishWord_EnglishWordEnum = 66
	EnglishWord_resource_kind    EnglishWord_EnglishWordEnum = 67
	EnglishWord_environment      EnglishWord_EnglishWordEnum = 68
)

// Enum value maps for EnglishWord_EnglishWordEnum.
var (
	EnglishWord_EnglishWordEnum_name = map[int32]string{
		0:  "word_unspecified",
		1:  "app",
		2:  "application",
		3:  "aws",
		4:  "azure",
		5:  "bill",
		6:  "company",
		7:  "config",
		8:  "cpu",
		9:  "debug",
		10: "docker",
		11: "domain",
		12: "email",
		13: "endpoint",
		14: "external",
		15: "file",
		16: "gcp",
		17: "google",
		18: "hosting",
		19: "hostname",
		20: "id",
		21: "ingress",
		22: "instances",
		23: "internal",
		24: "ip",
		25: "key",
		26: "kubeconfig",
		27: "kubernetes",
		28: "localhost",
		29: "machine",
		30: "main",
		31: "maven",
		32: "memory",
		33: "microservice",
		34: "name",
		35: "nameservers",
		36: "namespace",
		37: "network",
		38: "npm",
		39: "number",
		40: "org",
		41: "parent",
		42: "postgres",
		43: "product",
		44: "project",
		45: "python",
		46: "repo",
		47: "review",
		48: "server",
		49: "servers",
		50: "share",
		51: "shared_services",
		52: "spilo",
		53: "spot",
		54: "stunnel",
		55: "team",
		56: "type",
		57: "username",
		58: "util",
		59: "version",
		60: "workload",
		61: "url",
		62: "env",
		63: "kafka",
		64: "unknown",
		65: "resource",
		66: "resource_id",
		67: "resource_kind",
		68: "environment",
	}
	EnglishWord_EnglishWordEnum_value = map[string]int32{
		"word_unspecified": 0,
		"app":              1,
		"application":      2,
		"aws":              3,
		"azure":            4,
		"bill":             5,
		"company":          6,
		"config":           7,
		"cpu":              8,
		"debug":            9,
		"docker":           10,
		"domain":           11,
		"email":            12,
		"endpoint":         13,
		"external":         14,
		"file":             15,
		"gcp":              16,
		"google":           17,
		"hosting":          18,
		"hostname":         19,
		"id":               20,
		"ingress":          21,
		"instances":        22,
		"internal":         23,
		"ip":               24,
		"key":              25,
		"kubeconfig":       26,
		"kubernetes":       27,
		"localhost":        28,
		"machine":          29,
		"main":             30,
		"maven":            31,
		"memory":           32,
		"microservice":     33,
		"name":             34,
		"nameservers":      35,
		"namespace":        36,
		"network":          37,
		"npm":              38,
		"number":           39,
		"org":              40,
		"parent":           41,
		"postgres":         42,
		"product":          43,
		"project":          44,
		"python":           45,
		"repo":             46,
		"review":           47,
		"server":           48,
		"servers":          49,
		"share":            50,
		"shared_services":  51,
		"spilo":            52,
		"spot":             53,
		"stunnel":          54,
		"team":             55,
		"type":             56,
		"username":         57,
		"util":             58,
		"version":          59,
		"workload":         60,
		"url":              61,
		"env":              62,
		"kafka":            63,
		"unknown":          64,
		"resource":         65,
		"resource_id":      66,
		"resource_kind":    67,
		"environment":      68,
	}
)

func (x EnglishWord_EnglishWordEnum) Enum() *EnglishWord_EnglishWordEnum {
	p := new(EnglishWord_EnglishWordEnum)
	*p = x
	return p
}

func (x EnglishWord_EnglishWordEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnglishWord_EnglishWordEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_enumTypes[0].Descriptor()
}

func (EnglishWord_EnglishWordEnum) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_enumTypes[0]
}

func (x EnglishWord_EnglishWordEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnglishWord_EnglishWordEnum.Descriptor instead.
func (EnglishWord_EnglishWordEnum) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescGZIP(), []int{0, 0}
}

// english word enums added to avoid typing mistakes for the commonly used words for naming things
// this enum is encapsulated inside a message as a few entries like "name" (a reserved word in few languages) can only be added to the enum if it is inside a message.
// the recommended best practice to prefix the entry with enum name has been intentionally ignored to as the values of the entries are intended to be used to name resources.
type EnglishWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnglishWord) Reset() {
	*x = EnglishWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnglishWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnglishWord) ProtoMessage() {}

func (x *EnglishWord) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnglishWord.ProtoReflect.Descriptor instead.
func (*EnglishWord) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescGZIP(), []int{0}
}

var File_cloud_planton_apis_commons_english_enums_englishword_english_word_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDesc = []byte{
	0x0a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x67,
	0x6c, 0x69, 0x73, 0x68, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x69,
	0x73, 0x68, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x77,
	0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x81, 0x07, 0x0a, 0x0b, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x22,
	0xf1, 0x06, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x69, 0x6c, 0x6c, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x0d, 0x12,
	0x0c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x0e, 0x12, 0x08, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x10, 0x10,
	0x12, 0x0a, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x13, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x64, 0x10, 0x14, 0x12,
	0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x17, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x70, 0x10,
	0x18, 0x12, 0x07, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x10, 0x1d, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x1e,
	0x12, 0x09, 0x0a, 0x05, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x21, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x10, 0x24, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x25,
	0x12, 0x07, 0x0a, 0x03, 0x6e, 0x70, 0x6d, 0x10, 0x26, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x10, 0x28, 0x12, 0x0a,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0x2c, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x10, 0x2d, 0x12, 0x08,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x30,
	0x12, 0x0b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x10, 0x31, 0x12, 0x09, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x10, 0x33, 0x12, 0x09, 0x0a,
	0x05, 0x73, 0x70, 0x69, 0x6c, 0x6f, 0x10, 0x34, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74,
	0x10, 0x35, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x36, 0x12,
	0x08, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x10, 0x37, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x10, 0x38, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10,
	0x39, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x74, 0x69, 0x6c, 0x10, 0x3a, 0x12, 0x0b, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x3b, 0x12, 0x0c, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x10, 0x3d, 0x12,
	0x07, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x10, 0x3e, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x10, 0x3f, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x40,
	0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x41, 0x12, 0x0f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x10, 0x42, 0x12,
	0x11, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x10, 0x43, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x44, 0x42, 0xb6, 0x03, 0x0a, 0x42, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x65,
	0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x10, 0x45, 0x6e, 0x67, 0x6c,
	0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x64,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x69,
	0x73, 0x68, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x77, 0x6f, 0x72, 0x64, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x43, 0x45, 0x45, 0x45, 0xaa, 0x02,
	0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x67, 0x6c,
	0x69, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x77, 0x6f, 0x72, 0x64, 0xca, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x5c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0x5c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x6f, 0x72, 0x64, 0xe2, 0x02, 0x40, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69,
	0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x77,
	0x6f, 0x72, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a,
	0x3a, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x3a,
	0x3a, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x6f, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescData = file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDesc
)

func file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescData)
	})
	return file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDescData
}

var file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_goTypes = []interface{}{
	(EnglishWord_EnglishWordEnum)(0), // 0: cloud.planton.apis.commons.english.enums.englishword.EnglishWord.EnglishWordEnum
	(*EnglishWord)(nil),              // 1: cloud.planton.apis.commons.english.enums.englishword.EnglishWord
}
var file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_init() }
func file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_init() {
	if File_cloud_planton_apis_commons_english_enums_englishword_english_word_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnglishWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_depIdxs,
		EnumInfos:         file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_enumTypes,
		MessageInfos:      file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_commons_english_enums_englishword_english_word_proto = out.File
	file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_rawDesc = nil
	file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_goTypes = nil
	file_cloud_planton_apis_commons_english_enums_englishword_english_word_proto_depIdxs = nil
}
