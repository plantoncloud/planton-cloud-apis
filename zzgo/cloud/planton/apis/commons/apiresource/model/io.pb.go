// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/commons/apiresource/model/io.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	apiresourcekind "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	apiresourcelookupfilter "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcelookupfilter"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc"
	stackjoboperationtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/enums/stackjoboperationtype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wrapper for api-resource-id
type ApiResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ApiResourceId) Reset() {
	*x = ApiResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceId) ProtoMessage() {}

func (x *ApiResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceId.ProtoReflect.Descriptor instead.
func (*ApiResourceId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{0}
}

func (x *ApiResourceId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// input for rpc to delete or previewing delete for any api resource
type ApiResourceDeleteInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// A descriptive message explaining the reason for deleting the resource. This is used for audit purposes.
	// For example, "Deleting as it is no longer needed".
	VersionMessage string `protobuf:"bytes,2,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *ApiResourceDeleteInput) Reset() {
	*x = ApiResourceDeleteInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceDeleteInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceDeleteInput) ProtoMessage() {}

func (x *ApiResourceDeleteInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceDeleteInput.ProtoReflect.Descriptor instead.
func (*ApiResourceDeleteInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{1}
}

func (x *ApiResourceDeleteInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ApiResourceDeleteInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// input for rpc to pause or previewing pause for any api resource
type ApiResourcePauseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// A descriptive message explaining the reason for pausing the resource. This is used for audit purposes.
	// For example, "pause as it is temporarily not needed".
	VersionMessage string `protobuf:"bytes,2,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *ApiResourcePauseInput) Reset() {
	*x = ApiResourcePauseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourcePauseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourcePauseInput) ProtoMessage() {}

func (x *ApiResourcePauseInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourcePauseInput.ProtoReflect.Descriptor instead.
func (*ApiResourcePauseInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{2}
}

func (x *ApiResourcePauseInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ApiResourcePauseInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// input for rpc to un pause or previewing un pause for any api resource
type ApiResourceUnPauseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// A descriptive message explaining the reason for un pausing the resource. This is used for audit purposes.
	// For example, "un pause as the resource is now required again".
	VersionMessage string `protobuf:"bytes,2,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *ApiResourceUnPauseInput) Reset() {
	*x = ApiResourceUnPauseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceUnPauseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceUnPauseInput) ProtoMessage() {}

func (x *ApiResourceUnPauseInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceUnPauseInput.ProtoReflect.Descriptor instead.
func (*ApiResourceUnPauseInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{3}
}

func (x *ApiResourceUnPauseInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ApiResourceUnPauseInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// input for rpc to refresh or previewing refresh for any api resource
type ApiResourceRefreshInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// A descriptive message explaining the reason for refreshing the resource. This is used for audit purposes.
	// For example, "refreshing the state to update computed fields".
	VersionMessage string `protobuf:"bytes,2,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *ApiResourceRefreshInput) Reset() {
	*x = ApiResourceRefreshInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceRefreshInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceRefreshInput) ProtoMessage() {}

func (x *ApiResourceRefreshInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceRefreshInput.ProtoReflect.Descriptor instead.
func (*ApiResourceRefreshInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{4}
}

func (x *ApiResourceRefreshInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ApiResourceRefreshInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// Record is a message type that represents a single record object in list view.
// Record object has all fields that are required to show in list view
// It contains identifying and contextual information about the resource,
// such as its id, name, type, and the associated organization and
// environment identifiers.
type ApiResourceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource audit info
	SpecAudit *ApiResourceAuditInfo `protobuf:"bytes,98,opt,name=spec_audit,json=specAudit,proto3" json:"spec_audit,omitempty"`
	// Unique identifier for the resource.
	// example for resource in planton-cloud could be postgres_cluster/ kafka_cluster/ microservice_instance etc.;
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human-readable name for the resource.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the resource.
	Kind apiresourcekind.ApiResourceKind `protobuf:"varint,3,opt,name=kind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"kind,omitempty"`
	// Unique identifier for the organization associated with this resource.
	OrgId string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Unique identifier for the environment
	EnvId string `protobuf:"bytes,5,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	// flag to indicate if the resource is deleted.
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// flag to indicate if the resource is paused
	IsPaused bool `protobuf:"varint,7,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (x *ApiResourceRecord) Reset() {
	*x = ApiResourceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceRecord) ProtoMessage() {}

func (x *ApiResourceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceRecord.ProtoReflect.Descriptor instead.
func (*ApiResourceRecord) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{5}
}

func (x *ApiResourceRecord) GetSpecAudit() *ApiResourceAuditInfo {
	if x != nil {
		return x.SpecAudit
	}
	return nil
}

func (x *ApiResourceRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiResourceRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiResourceRecord) GetKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.Kind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *ApiResourceRecord) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ApiResourceRecord) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *ApiResourceRecord) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ApiResourceRecord) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

// ResourceList is a message type that represents a paginated list of Record objects.
// It contains information about the total number of pages in the list and an array of Record entries.
type ApiResourceRecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of pages in the paginated list of Record objects.
	TotalPages int32 `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// An array of Record objects contained in the current page of the paginated list.
	Entries []*ApiResourceRecord `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ApiResourceRecordList) Reset() {
	*x = ApiResourceRecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceRecordList) ProtoMessage() {}

func (x *ApiResourceRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceRecordList.ProtoReflect.Descriptor instead.
func (*ApiResourceRecordList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{6}
}

func (x *ApiResourceRecordList) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ApiResourceRecordList) GetEntries() []*ApiResourceRecord {
	if x != nil {
		return x.Entries
	}
	return nil
}

// The GetByApiResourceKindInput message represents the input parameters required for
// executing a search operation based on a specified resource type within a given
// organization's environment.
type GetByApiResourceKindInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the unique identifier for the organization
	// associated with the get query. The get operation will only consider resources
	// associated with this organization.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// This is the unique identifier for the environment
	// associated with the get query. The get operation will only consider resources
	// that are linked with this environment.
	EnvId string `protobuf:"bytes,2,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	// This field indicates the type of resource that the search operation will be focusing on.
	// The possible resource types are defined by the ApiResourceKind enum.
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,3,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// This field contains the pagination information used for retrieving specific paginated
	// data. It enables the client to specify the number of records per page and the page number.
	PageInfo *rpc.PageInfo `protobuf:"bytes,4,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// this field is an enumeration used to dictate the active status of the resources
	// included in the search results.
	LookupFilter apiresourcelookupfilter.ApiResourceLookupFilter `protobuf:"varint,5,opt,name=lookup_filter,json=lookupFilter,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter" json:"lookup_filter,omitempty"`
}

func (x *GetByApiResourceKindInput) Reset() {
	*x = GetByApiResourceKindInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByApiResourceKindInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByApiResourceKindInput) ProtoMessage() {}

func (x *GetByApiResourceKindInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByApiResourceKindInput.ProtoReflect.Descriptor instead.
func (*GetByApiResourceKindInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{7}
}

func (x *GetByApiResourceKindInput) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetByApiResourceKindInput) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *GetByApiResourceKindInput) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *GetByApiResourceKindInput) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetByApiResourceKindInput) GetLookupFilter() apiresourcelookupfilter.ApiResourceLookupFilter {
	if x != nil {
		return x.LookupFilter
	}
	return apiresourcelookupfilter.ApiResourceLookupFilter(0)
}

// input required for generating a new java package for a new planton-cloud api-resource
type GenerateNewApiResourceJavaPackageCliInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a list of source and destination directories
	// source directory to be used to get the files to work upon.
	// destination directory in which modified files will be finally located.
	Directories []*SourceDestinationDirectoryPair `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
	// replacements to be made to generate the package for the new api-resource
	// these replacements will be applied for every file inside each directory and its
	// sub-directories specified in the "directories".
	Replacements *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements `protobuf:"bytes,2,opt,name=replacements,proto3" json:"replacements,omitempty"`
}

func (x *GenerateNewApiResourceJavaPackageCliInput) Reset() {
	*x = GenerateNewApiResourceJavaPackageCliInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNewApiResourceJavaPackageCliInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNewApiResourceJavaPackageCliInput) ProtoMessage() {}

func (x *GenerateNewApiResourceJavaPackageCliInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNewApiResourceJavaPackageCliInput.ProtoReflect.Descriptor instead.
func (*GenerateNewApiResourceJavaPackageCliInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateNewApiResourceJavaPackageCliInput) GetDirectories() []*SourceDestinationDirectoryPair {
	if x != nil {
		return x.Directories
	}
	return nil
}

func (x *GenerateNewApiResourceJavaPackageCliInput) GetReplacements() *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements {
	if x != nil {
		return x.Replacements
	}
	return nil
}

// replacement inputs for file & directory names along with file content replacements.
type GenerateNewApiResourceJavaPackageCliInputOrderedReplacements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a map of strings used for renaming files and directories.
	// all the keys will be matched in the source files/directories and replaced with the corresponding values.
	// usage of a repeated object instead of a map is an intentional design choice as the order of replacements is important.
	// maps by default are sorted by key name and that is not desirable.
	FileAndDirName []*FindReplaceStringPair `protobuf:"bytes,1,rep,name=file_and_dir_name,json=fileAndDirName,proto3" json:"file_and_dir_name,omitempty"`
	// a map of strings used for replacing file contents.
	// all the keys will be matched in the source package and replaced with the corresponding values.
	// usage of a repeated object instead of a map is an intentional design choice as the order of replacements is important.
	// maps by default are sorted by key name and that is not desirable.
	FileContent []*FindReplaceStringPair `protobuf:"bytes,2,rep,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) Reset() {
	*x = GenerateNewApiResourceJavaPackageCliInputOrderedReplacements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) ProtoMessage() {}

func (x *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNewApiResourceJavaPackageCliInputOrderedReplacements.ProtoReflect.Descriptor instead.
func (*GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) GetFileAndDirName() []*FindReplaceStringPair {
	if x != nil {
		return x.FileAndDirName
	}
	return nil
}

func (x *GenerateNewApiResourceJavaPackageCliInputOrderedReplacements) GetFileContent() []*FindReplaceStringPair {
	if x != nil {
		return x.FileContent
	}
	return nil
}

// string key value pair to find and replace for file names and content inside files
type FindReplaceStringPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string to find
	FindString string `protobuf:"bytes,1,opt,name=find_string,json=findString,proto3" json:"find_string,omitempty"`
	// string to replace
	ReplaceString string `protobuf:"bytes,2,opt,name=replace_string,json=replaceString,proto3" json:"replace_string,omitempty"`
}

func (x *FindReplaceStringPair) Reset() {
	*x = FindReplaceStringPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindReplaceStringPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReplaceStringPair) ProtoMessage() {}

func (x *FindReplaceStringPair) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReplaceStringPair.ProtoReflect.Descriptor instead.
func (*FindReplaceStringPair) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{10}
}

func (x *FindReplaceStringPair) GetFindString() string {
	if x != nil {
		return x.FindString
	}
	return ""
}

func (x *FindReplaceStringPair) GetReplaceString() string {
	if x != nil {
		return x.ReplaceString
	}
	return ""
}

// source and destination directory pair
type SourceDestinationDirectoryPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source directory path
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// destination directory path
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *SourceDestinationDirectoryPair) Reset() {
	*x = SourceDestinationDirectoryPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDestinationDirectoryPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDestinationDirectoryPair) ProtoMessage() {}

func (x *SourceDestinationDirectoryPair) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDestinationDirectoryPair.ProtoReflect.Descriptor instead.
func (*SourceDestinationDirectoryPair) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{11}
}

func (x *SourceDestinationDirectoryPair) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SourceDestinationDirectoryPair) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

// The ListByResourceKindWithoutContext message represents the input parameters required for
// executing a search operation based on a specified resource type
type ListByResourceKindWithoutContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field indicates the type of resource that the search operation will be focusing on.
	// The possible resource types are defined by the ApiResourceKind enum.
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,1,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// This field contains the pagination information used for retrieving specific paginated
	// data. It enables the client to specify the number of records per page and the page number.
	PageInfo *rpc.PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *ListByResourceKindWithoutContext) Reset() {
	*x = ListByResourceKindWithoutContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListByResourceKindWithoutContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListByResourceKindWithoutContext) ProtoMessage() {}

func (x *ListByResourceKindWithoutContext) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListByResourceKindWithoutContext.ProtoReflect.Descriptor instead.
func (*ListByResourceKindWithoutContext) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{12}
}

func (x *ListByResourceKindWithoutContext) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *ListByResourceKindWithoutContext) GetPageInfo() *rpc.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

// input for rpc to create a new stack job for any resource.
type CreateStackJobInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,1,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// id of the resource for which the stack-job is to be created.
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// operation-type to be used for creating the stack-job.
	StackJobOperationType stackjoboperationtype.StackJobOperationType `protobuf:"varint,3,opt,name=stack_job_operation_type,json=stackJobOperationType,proto3,enum=cloud.planton.apis.iac.v1.stackjob.enums.stackjoboperationtype.StackJobOperationType" json:"stack_job_operation_type,omitempty"`
	// reason for creating the stack job
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateStackJobInput) Reset() {
	*x = CreateStackJobInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStackJobInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStackJobInput) ProtoMessage() {}

func (x *CreateStackJobInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStackJobInput.ProtoReflect.Descriptor instead.
func (*CreateStackJobInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{13}
}

func (x *CreateStackJobInput) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *CreateStackJobInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CreateStackJobInput) GetStackJobOperationType() stackjoboperationtype.StackJobOperationType {
	if x != nil {
		return x.StackJobOperationType
	}
	return stackjoboperationtype.StackJobOperationType(0)
}

func (x *CreateStackJobInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// wrapper for planton-cloud api-resource-kind and api-resource-id
type ApiResourceKindApiResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Planton Cloud API Resource Kind
	ResourceKind apiresourcekind.ApiResourceKind `protobuf:"varint,1,opt,name=resource_kind,json=resourceKind,proto3,enum=cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind" json:"resource_kind,omitempty"`
	// id of the api resource on Planton Cloud
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *ApiResourceKindApiResourceId) Reset() {
	*x = ApiResourceKindApiResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceKindApiResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceKindApiResourceId) ProtoMessage() {}

func (x *ApiResourceKindApiResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceKindApiResourceId.ProtoReflect.Descriptor instead.
func (*ApiResourceKindApiResourceId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP(), []int{14}
}

func (x *ApiResourceKindApiResourceId) GetResourceKind() apiresourcekind.ApiResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return apiresourcekind.ApiResourceKind(0)
}

func (x *ApiResourceKindApiResourceId) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

var File_cloud_planton_apis_commons_apiresource_model_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x54, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b,
	0x69, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x65, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f,
	0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6a, 0x6f, 0x62,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x62, 0x0a, 0x16, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x17,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xe5, 0x02, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x61, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x89, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e,
	0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x45, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xac, 0x02, 0x0a, 0x29,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x61, 0x76, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x61, 0x76, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x3c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x61, 0x76, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x1e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xdd, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x72, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xf5, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x7a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x96, 0x01,
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x55, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6a, 0x6f, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x15, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0xfb,
	0x02, 0x0a, 0x3a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x07, 0x49,
	0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x06, 0x43, 0x50, 0x41, 0x43, 0x41, 0x4d, 0xaa,
	0x02, 0x2c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02,
	0x2c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41,
	0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x38,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70,
	0x69, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x31, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a,
	0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescData = file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDesc
)

func file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDescData
}

var file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_cloud_planton_apis_commons_apiresource_model_io_proto_goTypes = []interface{}{
	(*ApiResourceId)(nil),                                                // 0: cloud.planton.apis.commons.apiresource.model.ApiResourceId
	(*ApiResourceDeleteInput)(nil),                                       // 1: cloud.planton.apis.commons.apiresource.model.ApiResourceDeleteInput
	(*ApiResourcePauseInput)(nil),                                        // 2: cloud.planton.apis.commons.apiresource.model.ApiResourcePauseInput
	(*ApiResourceUnPauseInput)(nil),                                      // 3: cloud.planton.apis.commons.apiresource.model.ApiResourceUnPauseInput
	(*ApiResourceRefreshInput)(nil),                                      // 4: cloud.planton.apis.commons.apiresource.model.ApiResourceRefreshInput
	(*ApiResourceRecord)(nil),                                            // 5: cloud.planton.apis.commons.apiresource.model.ApiResourceRecord
	(*ApiResourceRecordList)(nil),                                        // 6: cloud.planton.apis.commons.apiresource.model.ApiResourceRecordList
	(*GetByApiResourceKindInput)(nil),                                    // 7: cloud.planton.apis.commons.apiresource.model.GetByApiResourceKindInput
	(*GenerateNewApiResourceJavaPackageCliInput)(nil),                    // 8: cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInput
	(*GenerateNewApiResourceJavaPackageCliInputOrderedReplacements)(nil), // 9: cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInputOrderedReplacements
	(*FindReplaceStringPair)(nil),                                        // 10: cloud.planton.apis.commons.apiresource.model.FindReplaceStringPair
	(*SourceDestinationDirectoryPair)(nil),                               // 11: cloud.planton.apis.commons.apiresource.model.SourceDestinationDirectoryPair
	(*ListByResourceKindWithoutContext)(nil),                             // 12: cloud.planton.apis.commons.apiresource.model.ListByResourceKindWithoutContext
	(*CreateStackJobInput)(nil),                                          // 13: cloud.planton.apis.commons.apiresource.model.CreateStackJobInput
	(*ApiResourceKindApiResourceId)(nil),                                 // 14: cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId
	(*ApiResourceAuditInfo)(nil),                                         // 15: cloud.planton.apis.commons.apiresource.model.ApiResourceAuditInfo
	(apiresourcekind.ApiResourceKind)(0),                                 // 16: cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	(*rpc.PageInfo)(nil),                                                 // 17: cloud.planton.apis.commons.rpc.PageInfo
	(apiresourcelookupfilter.ApiResourceLookupFilter)(0),                 // 18: cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter
	(stackjoboperationtype.StackJobOperationType)(0),                     // 19: cloud.planton.apis.iac.v1.stackjob.enums.stackjoboperationtype.StackJobOperationType
}
var file_cloud_planton_apis_commons_apiresource_model_io_proto_depIdxs = []int32{
	15, // 0: cloud.planton.apis.commons.apiresource.model.ApiResourceRecord.spec_audit:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceAuditInfo
	16, // 1: cloud.planton.apis.commons.apiresource.model.ApiResourceRecord.kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	5,  // 2: cloud.planton.apis.commons.apiresource.model.ApiResourceRecordList.entries:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceRecord
	16, // 3: cloud.planton.apis.commons.apiresource.model.GetByApiResourceKindInput.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	17, // 4: cloud.planton.apis.commons.apiresource.model.GetByApiResourceKindInput.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	18, // 5: cloud.planton.apis.commons.apiresource.model.GetByApiResourceKindInput.lookup_filter:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcelookupfilter.ApiResourceLookupFilter
	11, // 6: cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInput.directories:type_name -> cloud.planton.apis.commons.apiresource.model.SourceDestinationDirectoryPair
	9,  // 7: cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInput.replacements:type_name -> cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInputOrderedReplacements
	10, // 8: cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInputOrderedReplacements.file_and_dir_name:type_name -> cloud.planton.apis.commons.apiresource.model.FindReplaceStringPair
	10, // 9: cloud.planton.apis.commons.apiresource.model.GenerateNewApiResourceJavaPackageCliInputOrderedReplacements.file_content:type_name -> cloud.planton.apis.commons.apiresource.model.FindReplaceStringPair
	16, // 10: cloud.planton.apis.commons.apiresource.model.ListByResourceKindWithoutContext.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	17, // 11: cloud.planton.apis.commons.apiresource.model.ListByResourceKindWithoutContext.page_info:type_name -> cloud.planton.apis.commons.rpc.PageInfo
	16, // 12: cloud.planton.apis.commons.apiresource.model.CreateStackJobInput.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	19, // 13: cloud.planton.apis.commons.apiresource.model.CreateStackJobInput.stack_job_operation_type:type_name -> cloud.planton.apis.iac.v1.stackjob.enums.stackjoboperationtype.StackJobOperationType
	16, // 14: cloud.planton.apis.commons.apiresource.model.ApiResourceKindApiResourceId.resource_kind:type_name -> cloud.planton.apis.commons.apiresource.enums.apiresourcekind.ApiResourceKind
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_commons_apiresource_model_io_proto_init() }
func file_cloud_planton_apis_commons_apiresource_model_io_proto_init() {
	if File_cloud_planton_apis_commons_apiresource_model_io_proto != nil {
		return
	}
	file_cloud_planton_apis_commons_apiresource_model_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceDeleteInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourcePauseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceUnPauseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceRefreshInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceRecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByApiResourceKindInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNewApiResourceJavaPackageCliInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNewApiResourceJavaPackageCliInputOrderedReplacements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindReplaceStringPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceDestinationDirectoryPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListByResourceKindWithoutContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStackJobInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiResourceKindApiResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_commons_apiresource_model_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_commons_apiresource_model_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_commons_apiresource_model_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_commons_apiresource_model_io_proto = out.File
	file_cloud_planton_apis_commons_apiresource_model_io_proto_rawDesc = nil
	file_cloud_planton_apis_commons_apiresource_model_io_proto_goTypes = nil
	file_cloud_planton_apis_commons_apiresource_model_io_proto_depIdxs = nil
}
