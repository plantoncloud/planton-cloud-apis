// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/commons/apiresource/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiResourceStackJobCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.commons.apiresource.service.ApiResourceStackJobCommandController/createStackJob"
)

// ApiResourceStackJobCommandControllerClient is the client API for ApiResourceStackJobCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiResourceStackJobCommandControllerClient interface {
	// create-stack-job for any api resource
	CreateStackJob(ctx context.Context, in *model.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model1.StackJobId, error)
}

type apiResourceStackJobCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewApiResourceStackJobCommandControllerClient(cc grpc.ClientConnInterface) ApiResourceStackJobCommandControllerClient {
	return &apiResourceStackJobCommandControllerClient{cc}
}

func (c *apiResourceStackJobCommandControllerClient) CreateStackJob(ctx context.Context, in *model.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model1.StackJobId, error) {
	out := new(model1.StackJobId)
	err := c.cc.Invoke(ctx, ApiResourceStackJobCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiResourceStackJobCommandControllerServer is the server API for ApiResourceStackJobCommandController service.
// All implementations should embed UnimplementedApiResourceStackJobCommandControllerServer
// for forward compatibility
type ApiResourceStackJobCommandControllerServer interface {
	// create-stack-job for any api resource
	CreateStackJob(context.Context, *model.CreateStackJobCommandInput) (*model1.StackJobId, error)
}

// UnimplementedApiResourceStackJobCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedApiResourceStackJobCommandControllerServer struct {
}

func (UnimplementedApiResourceStackJobCommandControllerServer) CreateStackJob(context.Context, *model.CreateStackJobCommandInput) (*model1.StackJobId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}

// UnsafeApiResourceStackJobCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiResourceStackJobCommandControllerServer will
// result in compilation errors.
type UnsafeApiResourceStackJobCommandControllerServer interface {
	mustEmbedUnimplementedApiResourceStackJobCommandControllerServer()
}

func RegisterApiResourceStackJobCommandControllerServer(s grpc.ServiceRegistrar, srv ApiResourceStackJobCommandControllerServer) {
	s.RegisterService(&ApiResourceStackJobCommandController_ServiceDesc, srv)
}

func _ApiResourceStackJobCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiResourceStackJobCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiResourceStackJobCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiResourceStackJobCommandControllerServer).CreateStackJob(ctx, req.(*model.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiResourceStackJobCommandController_ServiceDesc is the grpc.ServiceDesc for ApiResourceStackJobCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiResourceStackJobCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.commons.apiresource.service.ApiResourceStackJobCommandController",
	HandlerType: (*ApiResourceStackJobCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createStackJob",
			Handler:    _ApiResourceStackJobCommandController_CreateStackJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/commons/apiresource/service/command.proto",
}
