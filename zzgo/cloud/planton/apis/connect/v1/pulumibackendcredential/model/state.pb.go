// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/connect/v1/pulumibackendcredential/model/state.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions"
	pulumistatebackendprovidertype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/connect/v1/pulumibackendcredential/enums/pulumistatebackendprovidertype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// pulumi-backend-credential
type PulumiBackendCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource api-version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// resource metadata
	Metadata *model.ApiResourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// resource spec
	Spec *PulumiBackendCredentialSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// resource status
	Status *PulumiBackendCredentialStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PulumiBackendCredential) Reset() {
	*x = PulumiBackendCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredential) ProtoMessage() {}

func (x *PulumiBackendCredential) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredential.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredential) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{0}
}

func (x *PulumiBackendCredential) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PulumiBackendCredential) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PulumiBackendCredential) GetMetadata() *model.ApiResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PulumiBackendCredential) GetSpec() *PulumiBackendCredentialSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PulumiBackendCredential) GetStatus() *PulumiBackendCredentialStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// pulumi-backend-credential spec
type PulumiBackendCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the organization to which the pulumi-backend-credential belongs to.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// provider for pulumi-backend-credential
	// https://www.pulumi.com/docs/concepts/state
	Provider pulumistatebackendprovidertype.PulumiBackendCredentialProviderType `protobuf:"varint,2,opt,name=provider,proto3,enum=cloud.planton.apis.connect.v1.pulumibackendcredential.enums.pulumistatebackendprovidertype.PulumiBackendCredentialProviderType" json:"provider,omitempty"`
	// pulumi-cloud backend provider spec
	PulumiCloud *PulumiBackendCredentialPulumiCloudSpec `protobuf:"bytes,3,opt,name=pulumi_cloud,json=pulumiCloud,proto3" json:"pulumi_cloud,omitempty"`
	// aws s3 backend provider spec
	AwsS3 *PulumiBackendCredentialAwsS3Spec `protobuf:"bytes,4,opt,name=aws_s3,json=awsS3,proto3" json:"aws_s3,omitempty"`
	// google cloud storage backend provider spec
	GoogleCloudStorage *PulumiBackendCredentialGoogleCloudStorageSpec `protobuf:"bytes,5,opt,name=google_cloud_storage,json=googleCloudStorage,proto3" json:"google_cloud_storage,omitempty"`
	// azure blob storage backend provider spec
	AzureBlobStorage *PulumiBackendCredentialAzureBlobStorageSpec `protobuf:"bytes,6,opt,name=azure_blob_storage,json=azureBlobStorage,proto3" json:"azure_blob_storage,omitempty"`
}

func (x *PulumiBackendCredentialSpec) Reset() {
	*x = PulumiBackendCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{1}
}

func (x *PulumiBackendCredentialSpec) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PulumiBackendCredentialSpec) GetProvider() pulumistatebackendprovidertype.PulumiBackendCredentialProviderType {
	if x != nil {
		return x.Provider
	}
	return pulumistatebackendprovidertype.PulumiBackendCredentialProviderType(0)
}

func (x *PulumiBackendCredentialSpec) GetPulumiCloud() *PulumiBackendCredentialPulumiCloudSpec {
	if x != nil {
		return x.PulumiCloud
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetAwsS3() *PulumiBackendCredentialAwsS3Spec {
	if x != nil {
		return x.AwsS3
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetGoogleCloudStorage() *PulumiBackendCredentialGoogleCloudStorageSpec {
	if x != nil {
		return x.GoogleCloudStorage
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetAzureBlobStorage() *PulumiBackendCredentialAzureBlobStorageSpec {
	if x != nil {
		return x.AzureBlobStorage
	}
	return nil
}

// pulumi-cloud pulumi-backend-credential spec
type PulumiBackendCredentialPulumiCloudSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the pulumi organization
	PulumiOrganization string `protobuf:"bytes,1,opt,name=pulumi_organization,json=pulumiOrganization,proto3" json:"pulumi_organization,omitempty"`
	// access token to be used for authorization
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *PulumiBackendCredentialPulumiCloudSpec) Reset() {
	*x = PulumiBackendCredentialPulumiCloudSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialPulumiCloudSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialPulumiCloudSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialPulumiCloudSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialPulumiCloudSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialPulumiCloudSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{2}
}

func (x *PulumiBackendCredentialPulumiCloudSpec) GetPulumiOrganization() string {
	if x != nil {
		return x.PulumiOrganization
	}
	return ""
}

func (x *PulumiBackendCredentialPulumiCloudSpec) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// aws s3 pulumi-backend-credential spec
type PulumiBackendCredentialAwsS3Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// aws-credential-id to be used for authorization
	AwsCredentialId string `protobuf:"bytes,1,opt,name=aws_credential_id,json=awsCredentialId,proto3" json:"aws_credential_id,omitempty"`
	// name of s3-bucket
	S3Bucket string `protobuf:"bytes,2,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	// aws region
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *PulumiBackendCredentialAwsS3Spec) Reset() {
	*x = PulumiBackendCredentialAwsS3Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialAwsS3Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialAwsS3Spec) ProtoMessage() {}

func (x *PulumiBackendCredentialAwsS3Spec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialAwsS3Spec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialAwsS3Spec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{3}
}

func (x *PulumiBackendCredentialAwsS3Spec) GetAwsCredentialId() string {
	if x != nil {
		return x.AwsCredentialId
	}
	return ""
}

func (x *PulumiBackendCredentialAwsS3Spec) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *PulumiBackendCredentialAwsS3Spec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// google-cloud-storage pulumi-backend-credential spec
type PulumiBackendCredentialGoogleCloudStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gcp-credential-id to be used for authorization
	GcpCredentialId string `protobuf:"bytes,1,opt,name=gcp_credential_id,json=gcpCredentialId,proto3" json:"gcp_credential_id,omitempty"`
	// name of gcs-bucket
	GcsBucket string `protobuf:"bytes,2,opt,name=gcs_bucket,json=gcsBucket,proto3" json:"gcs_bucket,omitempty"`
}

func (x *PulumiBackendCredentialGoogleCloudStorageSpec) Reset() {
	*x = PulumiBackendCredentialGoogleCloudStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialGoogleCloudStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialGoogleCloudStorageSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialGoogleCloudStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialGoogleCloudStorageSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialGoogleCloudStorageSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{4}
}

func (x *PulumiBackendCredentialGoogleCloudStorageSpec) GetGcpCredentialId() string {
	if x != nil {
		return x.GcpCredentialId
	}
	return ""
}

func (x *PulumiBackendCredentialGoogleCloudStorageSpec) GetGcsBucket() string {
	if x != nil {
		return x.GcsBucket
	}
	return ""
}

// azure-blob-storage pulumi-backend-credential spec
type PulumiBackendCredentialAzureBlobStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// azure-credential-id to be used for authorization
	AzureCredentialId string `protobuf:"bytes,1,opt,name=azure_credential_id,json=azureCredentialId,proto3" json:"azure_credential_id,omitempty"`
	// azure blob storage container name
	BlobStorageContainer string `protobuf:"bytes,2,opt,name=blob_storage_container,json=blobStorageContainer,proto3" json:"blob_storage_container,omitempty"`
}

func (x *PulumiBackendCredentialAzureBlobStorageSpec) Reset() {
	*x = PulumiBackendCredentialAzureBlobStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialAzureBlobStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialAzureBlobStorageSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialAzureBlobStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialAzureBlobStorageSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialAzureBlobStorageSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{5}
}

func (x *PulumiBackendCredentialAzureBlobStorageSpec) GetAzureCredentialId() string {
	if x != nil {
		return x.AzureCredentialId
	}
	return ""
}

func (x *PulumiBackendCredentialAzureBlobStorageSpec) GetBlobStorageContainer() string {
	if x != nil {
		return x.BlobStorageContainer
	}
	return ""
}

// pulumi-backend-credential status
type PulumiBackendCredentialStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource lifecycle
	Lifecycle *model.ApiResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// resource audit info
	Audit *model.ApiResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
}

func (x *PulumiBackendCredentialStatus) Reset() {
	*x = PulumiBackendCredentialStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialStatus) ProtoMessage() {}

func (x *PulumiBackendCredentialStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialStatus.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{6}
}

func (x *PulumiBackendCredentialStatus) GetLifecycle() *model.ApiResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *PulumiBackendCredentialStatus) GetAudit() *model.ApiResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

var File_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc = []byte{
	0x0a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x54, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x67, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x83, 0x01, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x03,
	0x0a, 0x17, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x72, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x1b, 0x90, 0xb5, 0x18, 0x01, 0x88, 0xa6, 0x1d, 0x23, 0x92, 0xa6, 0x1d, 0x0f, 0x08, 0x1f, 0x12,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x95, 0x06, 0x0a,
	0x1b, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x9b, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x7f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x86, 0x01,
	0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x74, 0x0a, 0x06, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77, 0x73, 0x53,
	0x33, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x61, 0x77, 0x73, 0x53, 0x33, 0x12, 0x9c, 0x01, 0x0a,
	0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x12,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x26, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77,
	0x73, 0x53, 0x33, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x2d, 0x50, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x63, 0x70,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x63, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x63, 0x73, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x2b, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x1d, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x54,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x42, 0xda, 0x03, 0x0a, 0x49, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x6b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67,
	0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x07,
	0x43, 0x50, 0x41, 0x43, 0x56, 0x50, 0x4d, 0xaa, 0x02, 0x3b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x3b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0xe2, 0x02, 0x47, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5c, 0x56, 0x31, 0x5c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x41,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a,
	0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x56,
	0x31, 0x3a, 0x3a, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData = file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc
)

func file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData)
	})
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData
}

var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_goTypes = []interface{}{
	(*PulumiBackendCredential)(nil),                                         // 0: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential
	(*PulumiBackendCredentialSpec)(nil),                                     // 1: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec
	(*PulumiBackendCredentialPulumiCloudSpec)(nil),                          // 2: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialPulumiCloudSpec
	(*PulumiBackendCredentialAwsS3Spec)(nil),                                // 3: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAwsS3Spec
	(*PulumiBackendCredentialGoogleCloudStorageSpec)(nil),                   // 4: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialGoogleCloudStorageSpec
	(*PulumiBackendCredentialAzureBlobStorageSpec)(nil),                     // 5: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAzureBlobStorageSpec
	(*PulumiBackendCredentialStatus)(nil),                                   // 6: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialStatus
	(*model.ApiResourceMetadata)(nil),                                       // 7: cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	(pulumistatebackendprovidertype.PulumiBackendCredentialProviderType)(0), // 8: cloud.planton.apis.connect.v1.pulumibackendcredential.enums.pulumistatebackendprovidertype.PulumiBackendCredentialProviderType
	(*model.ApiResourceLifecycle)(nil),                                      // 9: cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle
	(*model.ApiResourceAudit)(nil),                                          // 10: cloud.planton.apis.commons.apiresource.model.ApiResourceAudit
}
var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_depIdxs = []int32{
	7,  // 0: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential.metadata:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	1,  // 1: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential.spec:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec
	6,  // 2: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential.status:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialStatus
	8,  // 3: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.provider:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.enums.pulumistatebackendprovidertype.PulumiBackendCredentialProviderType
	2,  // 4: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.pulumi_cloud:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialPulumiCloudSpec
	3,  // 5: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.aws_s3:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAwsS3Spec
	4,  // 6: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.google_cloud_storage:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialGoogleCloudStorageSpec
	5,  // 7: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.azure_blob_storage:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAzureBlobStorageSpec
	9,  // 8: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialStatus.lifecycle:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycle
	10, // 9: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialStatus.audit:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceAudit
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_init() }
func file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_init() {
	if File_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialPulumiCloudSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialAwsS3Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialGoogleCloudStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialAzureBlobStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto = out.File
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc = nil
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_goTypes = nil
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_depIdxs = nil
}
