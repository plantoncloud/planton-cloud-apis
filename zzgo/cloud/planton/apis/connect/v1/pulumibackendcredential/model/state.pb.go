// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/connect/v1/pulumibackendcredential/model/state.proto

package model

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/enums/apiresourcekind"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcefieldoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemessageoptions"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/options/apiresourcemetadatamessageoptions"
	pulumibackendtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/connect/v1/pulumibackendcredential/enums/pulumibackendtype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// pulumi-backend-credential
type PulumiBackendCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api-version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource-kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// metadata
	// id format "<id-prefix>-<org-id>-<normalized-resource-name>"
	Metadata *model.ApiResourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	Spec *PulumiBackendCredentialSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *model.ApiResourceLifecycleAndAuditStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PulumiBackendCredential) Reset() {
	*x = PulumiBackendCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredential) ProtoMessage() {}

func (x *PulumiBackendCredential) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredential.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredential) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{0}
}

func (x *PulumiBackendCredential) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PulumiBackendCredential) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PulumiBackendCredential) GetMetadata() *model.ApiResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PulumiBackendCredential) GetSpec() *PulumiBackendCredentialSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PulumiBackendCredential) GetStatus() *model.ApiResourceLifecycleAndAuditStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// pulumi-backend-credential spec
type PulumiBackendCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the organization to which the pulumi-backend-credential belongs to.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// name of the pulumi organization
	PulumiOrganization string `protobuf:"bytes,2,opt,name=pulumi_organization,json=pulumiOrganization,proto3" json:"pulumi_organization,omitempty"`
	// provider for pulumi-backend-credential
	// https://www.pulumi.com/docs/concepts/state
	PulumiBackendType pulumibackendtype.PulumiBackendType `protobuf:"varint,3,opt,name=pulumi_backend_type,json=pulumiBackendType,proto3,enum=cloud.planton.apis.connect.v1.pulumibackendcredential.enums.pulumibackendtype.PulumiBackendType" json:"pulumi_backend_type,omitempty"`
	// local-file-system backend spec
	LocalFileSystemBackend *PulumiBackendCredentialLocalFileSystemBackendSpec `protobuf:"bytes,4,opt,name=local_file_system_backend,json=localFileSystemBackend,proto3" json:"local_file_system_backend,omitempty"`
	// http backend spec
	HttpBackend *PulumiBackendCredentialHttpBackendSpec `protobuf:"bytes,5,opt,name=http_backend,json=httpBackend,proto3" json:"http_backend,omitempty"`
	// aws-s3 backend spec
	AwsS3Backend *PulumiBackendCredentialAwsS3BackendSpec `protobuf:"bytes,6,opt,name=aws_s3_backend,json=awsS3Backend,proto3" json:"aws_s3_backend,omitempty"`
	// google-cloud-storage backend spec
	GoogleCloudStorageBackend *PulumiBackendCredentialGcsBucketBackendSpec `protobuf:"bytes,7,opt,name=google_cloud_storage_backend,json=googleCloudStorageBackend,proto3" json:"google_cloud_storage_backend,omitempty"`
	// azure-blob-storage backend spec
	AzureBlobStorageBackend *PulumiBackendCredentialAzureBlobStorageBackendSpec `protobuf:"bytes,8,opt,name=azure_blob_storage_backend,json=azureBlobStorageBackend,proto3" json:"azure_blob_storage_backend,omitempty"`
}

func (x *PulumiBackendCredentialSpec) Reset() {
	*x = PulumiBackendCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{1}
}

func (x *PulumiBackendCredentialSpec) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PulumiBackendCredentialSpec) GetPulumiOrganization() string {
	if x != nil {
		return x.PulumiOrganization
	}
	return ""
}

func (x *PulumiBackendCredentialSpec) GetPulumiBackendType() pulumibackendtype.PulumiBackendType {
	if x != nil {
		return x.PulumiBackendType
	}
	return pulumibackendtype.PulumiBackendType(0)
}

func (x *PulumiBackendCredentialSpec) GetLocalFileSystemBackend() *PulumiBackendCredentialLocalFileSystemBackendSpec {
	if x != nil {
		return x.LocalFileSystemBackend
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetHttpBackend() *PulumiBackendCredentialHttpBackendSpec {
	if x != nil {
		return x.HttpBackend
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetAwsS3Backend() *PulumiBackendCredentialAwsS3BackendSpec {
	if x != nil {
		return x.AwsS3Backend
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetGoogleCloudStorageBackend() *PulumiBackendCredentialGcsBucketBackendSpec {
	if x != nil {
		return x.GoogleCloudStorageBackend
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetAzureBlobStorageBackend() *PulumiBackendCredentialAzureBlobStorageBackendSpec {
	if x != nil {
		return x.AzureBlobStorageBackend
	}
	return nil
}

// pulumi-backend-credential spec for local-file-system backend
// https://www.pulumi.com/docs/concepts/state/#local-filesystem
type PulumiBackendCredentialLocalFileSystemBackendSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state-file path
	StateFilePath string `protobuf:"bytes,1,opt,name=state_file_path,json=stateFilePath,proto3" json:"state_file_path,omitempty"`
}

func (x *PulumiBackendCredentialLocalFileSystemBackendSpec) Reset() {
	*x = PulumiBackendCredentialLocalFileSystemBackendSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialLocalFileSystemBackendSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialLocalFileSystemBackendSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialLocalFileSystemBackendSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialLocalFileSystemBackendSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialLocalFileSystemBackendSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{2}
}

func (x *PulumiBackendCredentialLocalFileSystemBackendSpec) GetStateFilePath() string {
	if x != nil {
		return x.StateFilePath
	}
	return ""
}

// pulumi-backend-credential spec for http backend
// hosted http backend provided by Pulumi Inc is is https://pulumi.cloud
type PulumiBackendCredentialHttpBackendSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api base url
	// this will be https://api.pulumi.com for Hosted Pulumi Cloud
	ApiBaseUrl string `protobuf:"bytes,1,opt,name=api_base_url,json=apiBaseUrl,proto3" json:"api_base_url,omitempty"`
	// access token to be used for authorization
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *PulumiBackendCredentialHttpBackendSpec) Reset() {
	*x = PulumiBackendCredentialHttpBackendSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialHttpBackendSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialHttpBackendSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialHttpBackendSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialHttpBackendSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialHttpBackendSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{3}
}

func (x *PulumiBackendCredentialHttpBackendSpec) GetApiBaseUrl() string {
	if x != nil {
		return x.ApiBaseUrl
	}
	return ""
}

func (x *PulumiBackendCredentialHttpBackendSpec) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// pulumi-backend-credential spec for aws-s3 backend
// https://www.pulumi.com/docs/concepts/state/#aws-s3
type PulumiBackendCredentialAwsS3BackendSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// aws-credential-id to be used for authorization
	AwsCredentialId string `protobuf:"bytes,1,opt,name=aws_credential_id,json=awsCredentialId,proto3" json:"aws_credential_id,omitempty"`
	// name of s3-bucket
	S3Bucket string `protobuf:"bytes,2,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	// aws region
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *PulumiBackendCredentialAwsS3BackendSpec) Reset() {
	*x = PulumiBackendCredentialAwsS3BackendSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialAwsS3BackendSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialAwsS3BackendSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialAwsS3BackendSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialAwsS3BackendSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialAwsS3BackendSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{4}
}

func (x *PulumiBackendCredentialAwsS3BackendSpec) GetAwsCredentialId() string {
	if x != nil {
		return x.AwsCredentialId
	}
	return ""
}

func (x *PulumiBackendCredentialAwsS3BackendSpec) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *PulumiBackendCredentialAwsS3BackendSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// pulumi-backend-credential spec for google-cloud-storage backend
// https://www.pulumi.com/docs/concepts/state/#google-cloud-storage
type PulumiBackendCredentialGcsBucketBackendSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gcp-credential-id to be used for authorization
	GcpCredentialId string `protobuf:"bytes,1,opt,name=gcp_credential_id,json=gcpCredentialId,proto3" json:"gcp_credential_id,omitempty"`
	// name of gcs-bucket
	GcsBucket string `protobuf:"bytes,2,opt,name=gcs_bucket,json=gcsBucket,proto3" json:"gcs_bucket,omitempty"`
}

func (x *PulumiBackendCredentialGcsBucketBackendSpec) Reset() {
	*x = PulumiBackendCredentialGcsBucketBackendSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialGcsBucketBackendSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialGcsBucketBackendSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialGcsBucketBackendSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialGcsBucketBackendSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialGcsBucketBackendSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{5}
}

func (x *PulumiBackendCredentialGcsBucketBackendSpec) GetGcpCredentialId() string {
	if x != nil {
		return x.GcpCredentialId
	}
	return ""
}

func (x *PulumiBackendCredentialGcsBucketBackendSpec) GetGcsBucket() string {
	if x != nil {
		return x.GcsBucket
	}
	return ""
}

// pulumi-backend-credential spec for azure-blob-storage backend
// https://www.pulumi.com/docs/concepts/state/#azure-blob-storage
type PulumiBackendCredentialAzureBlobStorageBackendSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// azure-credential-id to be used for authorization
	AzureCredentialId string `protobuf:"bytes,1,opt,name=azure_credential_id,json=azureCredentialId,proto3" json:"azure_credential_id,omitempty"`
	// azure blob storage container name
	BlobStorageContainer string `protobuf:"bytes,2,opt,name=blob_storage_container,json=blobStorageContainer,proto3" json:"blob_storage_container,omitempty"`
}

func (x *PulumiBackendCredentialAzureBlobStorageBackendSpec) Reset() {
	*x = PulumiBackendCredentialAzureBlobStorageBackendSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialAzureBlobStorageBackendSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialAzureBlobStorageBackendSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialAzureBlobStorageBackendSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialAzureBlobStorageBackendSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialAzureBlobStorageBackendSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP(), []int{6}
}

func (x *PulumiBackendCredentialAzureBlobStorageBackendSpec) GetAzureCredentialId() string {
	if x != nil {
		return x.AzureCredentialId
	}
	return ""
}

func (x *PulumiBackendCredentialAzureBlobStorageBackendSpec) GetBlobStorageContainer() string {
	if x != nil {
		return x.BlobStorageContainer
	}
	return ""
}

var File_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc = []byte{
	0x0a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x54, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x6e,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x67, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x67, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9e, 0x03, 0x0a, 0x17, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x6c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x68,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x17, 0x88, 0xa6, 0x1d, 0x25, 0x92, 0xa6,
	0x1d, 0x0f, 0x08, 0x21, 0x12, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x22, 0xa9, 0x08, 0x0a, 0x1b, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01,
	0x0a, 0x13, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xa9, 0x01, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x86, 0x01, 0x0a,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x47,
	0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0xac,
	0x01, 0x0a, 0x1a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x17, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x5b, 0x0a,
	0x31, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6d, 0x0a, 0x26, 0x50, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x27, 0x50, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x2b, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x47, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x67, 0x63, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x9a, 0x01, 0x0a, 0x32, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0xda, 0x03,
	0x0a, 0x49, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x43, 0x56, 0x50, 0x4d,
	0xaa, 0x02, 0x3b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x31,
	0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02,
	0x3b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41,
	0x70, 0x69, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x47, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69,
	0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x50, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x41, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x50, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData = file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc
)

func file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData)
	})
	return file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDescData
}

var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_goTypes = []interface{}{
	(*PulumiBackendCredential)(nil),                            // 0: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential
	(*PulumiBackendCredentialSpec)(nil),                        // 1: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec
	(*PulumiBackendCredentialLocalFileSystemBackendSpec)(nil),  // 2: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialLocalFileSystemBackendSpec
	(*PulumiBackendCredentialHttpBackendSpec)(nil),             // 3: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialHttpBackendSpec
	(*PulumiBackendCredentialAwsS3BackendSpec)(nil),            // 4: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAwsS3BackendSpec
	(*PulumiBackendCredentialGcsBucketBackendSpec)(nil),        // 5: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialGcsBucketBackendSpec
	(*PulumiBackendCredentialAzureBlobStorageBackendSpec)(nil), // 6: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAzureBlobStorageBackendSpec
	(*model.ApiResourceMetadata)(nil),                          // 7: cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	(*model.ApiResourceLifecycleAndAuditStatus)(nil),           // 8: cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycleAndAuditStatus
	(pulumibackendtype.PulumiBackendType)(0),                   // 9: cloud.planton.apis.connect.v1.pulumibackendcredential.enums.pulumibackendtype.PulumiBackendType
}
var file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_depIdxs = []int32{
	7, // 0: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential.metadata:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceMetadata
	1, // 1: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential.spec:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec
	8, // 2: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredential.status:type_name -> cloud.planton.apis.commons.apiresource.model.ApiResourceLifecycleAndAuditStatus
	9, // 3: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.pulumi_backend_type:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.enums.pulumibackendtype.PulumiBackendType
	2, // 4: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.local_file_system_backend:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialLocalFileSystemBackendSpec
	3, // 5: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.http_backend:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialHttpBackendSpec
	4, // 6: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.aws_s3_backend:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAwsS3BackendSpec
	5, // 7: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.google_cloud_storage_backend:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialGcsBucketBackendSpec
	6, // 8: cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialSpec.azure_blob_storage_backend:type_name -> cloud.planton.apis.connect.v1.pulumibackendcredential.model.PulumiBackendCredentialAzureBlobStorageBackendSpec
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_init() }
func file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_init() {
	if File_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialLocalFileSystemBackendSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialHttpBackendSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialAwsS3BackendSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialGcsBucketBackendSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiBackendCredentialAzureBlobStorageBackendSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto = out.File
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_rawDesc = nil
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_goTypes = nil
	file_cloud_planton_apis_connect_v1_pulumibackendcredential_model_state_proto_depIdxs = nil
}
