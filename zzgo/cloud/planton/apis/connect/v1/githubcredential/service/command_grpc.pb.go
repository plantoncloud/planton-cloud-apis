// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/connect/v1/githubcredential/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/connect/v1/githubcredential/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GithubCredentialCommandController_Create_FullMethodName  = "/cloud.planton.apis.connect.v1.githubcredential.service.GithubCredentialCommandController/create"
	GithubCredentialCommandController_Update_FullMethodName  = "/cloud.planton.apis.connect.v1.githubcredential.service.GithubCredentialCommandController/update"
	GithubCredentialCommandController_Delete_FullMethodName  = "/cloud.planton.apis.connect.v1.githubcredential.service.GithubCredentialCommandController/delete"
	GithubCredentialCommandController_Restore_FullMethodName = "/cloud.planton.apis.connect.v1.githubcredential.service.GithubCredentialCommandController/restore"
)

// GithubCredentialCommandControllerClient is the client API for GithubCredentialCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubCredentialCommandControllerClient interface {
	// create a github-credential resource
	Create(ctx context.Context, in *model.GithubCredential, opts ...grpc.CallOption) (*model.GithubCredential, error)
	// update an existing github-credential
	Update(ctx context.Context, in *model.GithubCredential, opts ...grpc.CallOption) (*model.GithubCredential, error)
	// delete a github-credential that was previously created
	Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GithubCredential, error)
	// restore a deleted github-credential.
	Restore(ctx context.Context, in *model.GithubCredential, opts ...grpc.CallOption) (*model.GithubCredential, error)
}

type githubCredentialCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubCredentialCommandControllerClient(cc grpc.ClientConnInterface) GithubCredentialCommandControllerClient {
	return &githubCredentialCommandControllerClient{cc}
}

func (c *githubCredentialCommandControllerClient) Create(ctx context.Context, in *model.GithubCredential, opts ...grpc.CallOption) (*model.GithubCredential, error) {
	out := new(model.GithubCredential)
	err := c.cc.Invoke(ctx, GithubCredentialCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubCredentialCommandControllerClient) Update(ctx context.Context, in *model.GithubCredential, opts ...grpc.CallOption) (*model.GithubCredential, error) {
	out := new(model.GithubCredential)
	err := c.cc.Invoke(ctx, GithubCredentialCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubCredentialCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteInput, opts ...grpc.CallOption) (*model.GithubCredential, error) {
	out := new(model.GithubCredential)
	err := c.cc.Invoke(ctx, GithubCredentialCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubCredentialCommandControllerClient) Restore(ctx context.Context, in *model.GithubCredential, opts ...grpc.CallOption) (*model.GithubCredential, error) {
	out := new(model.GithubCredential)
	err := c.cc.Invoke(ctx, GithubCredentialCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubCredentialCommandControllerServer is the server API for GithubCredentialCommandController service.
// All implementations should embed UnimplementedGithubCredentialCommandControllerServer
// for forward compatibility
type GithubCredentialCommandControllerServer interface {
	// create a github-credential resource
	Create(context.Context, *model.GithubCredential) (*model.GithubCredential, error)
	// update an existing github-credential
	Update(context.Context, *model.GithubCredential) (*model.GithubCredential, error)
	// delete a github-credential that was previously created
	Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GithubCredential, error)
	// restore a deleted github-credential.
	Restore(context.Context, *model.GithubCredential) (*model.GithubCredential, error)
}

// UnimplementedGithubCredentialCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGithubCredentialCommandControllerServer struct {
}

func (UnimplementedGithubCredentialCommandControllerServer) Create(context.Context, *model.GithubCredential) (*model.GithubCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGithubCredentialCommandControllerServer) Update(context.Context, *model.GithubCredential) (*model.GithubCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGithubCredentialCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteInput) (*model.GithubCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGithubCredentialCommandControllerServer) Restore(context.Context, *model.GithubCredential) (*model.GithubCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeGithubCredentialCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubCredentialCommandControllerServer will
// result in compilation errors.
type UnsafeGithubCredentialCommandControllerServer interface {
	mustEmbedUnimplementedGithubCredentialCommandControllerServer()
}

func RegisterGithubCredentialCommandControllerServer(s grpc.ServiceRegistrar, srv GithubCredentialCommandControllerServer) {
	s.RegisterService(&GithubCredentialCommandController_ServiceDesc, srv)
}

func _GithubCredentialCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GithubCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubCredentialCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubCredentialCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubCredentialCommandControllerServer).Create(ctx, req.(*model.GithubCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubCredentialCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GithubCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubCredentialCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubCredentialCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubCredentialCommandControllerServer).Update(ctx, req.(*model.GithubCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubCredentialCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubCredentialCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubCredentialCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubCredentialCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubCredentialCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GithubCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubCredentialCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubCredentialCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubCredentialCommandControllerServer).Restore(ctx, req.(*model.GithubCredential))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubCredentialCommandController_ServiceDesc is the grpc.ServiceDesc for GithubCredentialCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubCredentialCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.connect.v1.githubcredential.service.GithubCredentialCommandController",
	HandlerType: (*GithubCredentialCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _GithubCredentialCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GithubCredentialCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GithubCredentialCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _GithubCredentialCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/connect/v1/githubcredential/service/command.proto",
}
