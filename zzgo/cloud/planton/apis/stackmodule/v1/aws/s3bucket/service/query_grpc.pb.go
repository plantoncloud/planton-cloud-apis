// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/stackmodule/v1/aws/s3bucket/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/stackmodule/v1/aws/s3bucket/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	S3BucketQueryController_Get_FullMethodName = "/cloud.planton.apis.stackmodule.v1.aws.s3bucket.service.S3BucketQueryController/get"
)

// S3BucketQueryControllerClient is the client API for S3BucketQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3BucketQueryControllerClient interface {
	// look up a s3-bucket using s3-bucket id
	Get(ctx context.Context, in *model.S3BucketId, opts ...grpc.CallOption) (*model.S3Bucket, error)
}

type s3BucketQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewS3BucketQueryControllerClient(cc grpc.ClientConnInterface) S3BucketQueryControllerClient {
	return &s3BucketQueryControllerClient{cc}
}

func (c *s3BucketQueryControllerClient) Get(ctx context.Context, in *model.S3BucketId, opts ...grpc.CallOption) (*model.S3Bucket, error) {
	out := new(model.S3Bucket)
	err := c.cc.Invoke(ctx, S3BucketQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3BucketQueryControllerServer is the server API for S3BucketQueryController service.
// All implementations should embed UnimplementedS3BucketQueryControllerServer
// for forward compatibility
type S3BucketQueryControllerServer interface {
	// look up a s3-bucket using s3-bucket id
	Get(context.Context, *model.S3BucketId) (*model.S3Bucket, error)
}

// UnimplementedS3BucketQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedS3BucketQueryControllerServer struct {
}

func (UnimplementedS3BucketQueryControllerServer) Get(context.Context, *model.S3BucketId) (*model.S3Bucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeS3BucketQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3BucketQueryControllerServer will
// result in compilation errors.
type UnsafeS3BucketQueryControllerServer interface {
	mustEmbedUnimplementedS3BucketQueryControllerServer()
}

func RegisterS3BucketQueryControllerServer(s grpc.ServiceRegistrar, srv S3BucketQueryControllerServer) {
	s.RegisterService(&S3BucketQueryController_ServiceDesc, srv)
}

func _S3BucketQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.S3BucketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3BucketQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3BucketQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3BucketQueryControllerServer).Get(ctx, req.(*model.S3BucketId))
	}
	return interceptor(ctx, in, info, handler)
}

// S3BucketQueryController_ServiceDesc is the grpc.ServiceDesc for S3BucketQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3BucketQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.aws.s3bucket.service.S3BucketQueryController",
	HandlerType: (*S3BucketQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _S3BucketQueryController_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/aws/s3bucket/service/query.proto",
}
