// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/stackmodule/v1/kubernetes/prometheuskubernetes/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/stackmodule/v1/kubernetes/prometheuskubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrometheusKubernetesQueryController_Get_FullMethodName         = "/cloud.planton.apis.stackmodule.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesQueryController/get"
	PrometheusKubernetesQueryController_GetPassword_FullMethodName = "/cloud.planton.apis.stackmodule.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesQueryController/getPassword"
)

// PrometheusKubernetesQueryControllerClient is the client API for PrometheusKubernetesQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusKubernetesQueryControllerClient interface {
	// look up prometheus-kubernetes using prometheus-kubernetes id
	Get(ctx context.Context, in *model.PrometheusKubernetesId, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error)
	// look up prometheus-kubernetes sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model.PrometheusKubernetesId, opts ...grpc.CallOption) (*model.PrometheusKubernetesPassword, error)
}

type prometheusKubernetesQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusKubernetesQueryControllerClient(cc grpc.ClientConnInterface) PrometheusKubernetesQueryControllerClient {
	return &prometheusKubernetesQueryControllerClient{cc}
}

func (c *prometheusKubernetesQueryControllerClient) Get(ctx context.Context, in *model.PrometheusKubernetesId, opts ...grpc.CallOption) (*model.PrometheusKubernetes, error) {
	out := new(model.PrometheusKubernetes)
	err := c.cc.Invoke(ctx, PrometheusKubernetesQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusKubernetesQueryControllerClient) GetPassword(ctx context.Context, in *model.PrometheusKubernetesId, opts ...grpc.CallOption) (*model.PrometheusKubernetesPassword, error) {
	out := new(model.PrometheusKubernetesPassword)
	err := c.cc.Invoke(ctx, PrometheusKubernetesQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrometheusKubernetesQueryControllerServer is the server API for PrometheusKubernetesQueryController service.
// All implementations should embed UnimplementedPrometheusKubernetesQueryControllerServer
// for forward compatibility
type PrometheusKubernetesQueryControllerServer interface {
	// look up prometheus-kubernetes using prometheus-kubernetes id
	Get(context.Context, *model.PrometheusKubernetesId) (*model.PrometheusKubernetes, error)
	// look up prometheus-kubernetes sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model.PrometheusKubernetesId) (*model.PrometheusKubernetesPassword, error)
}

// UnimplementedPrometheusKubernetesQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedPrometheusKubernetesQueryControllerServer struct {
}

func (UnimplementedPrometheusKubernetesQueryControllerServer) Get(context.Context, *model.PrometheusKubernetesId) (*model.PrometheusKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPrometheusKubernetesQueryControllerServer) GetPassword(context.Context, *model.PrometheusKubernetesId) (*model.PrometheusKubernetesPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}

// UnsafePrometheusKubernetesQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusKubernetesQueryControllerServer will
// result in compilation errors.
type UnsafePrometheusKubernetesQueryControllerServer interface {
	mustEmbedUnimplementedPrometheusKubernetesQueryControllerServer()
}

func RegisterPrometheusKubernetesQueryControllerServer(s grpc.ServiceRegistrar, srv PrometheusKubernetesQueryControllerServer) {
	s.RegisterService(&PrometheusKubernetesQueryController_ServiceDesc, srv)
}

func _PrometheusKubernetesQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesQueryControllerServer).Get(ctx, req.(*model.PrometheusKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusKubernetesQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrometheusKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusKubernetesQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusKubernetesQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusKubernetesQueryControllerServer).GetPassword(ctx, req.(*model.PrometheusKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

// PrometheusKubernetesQueryController_ServiceDesc is the grpc.ServiceDesc for PrometheusKubernetesQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrometheusKubernetesQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.kubernetes.prometheuskubernetes.service.PrometheusKubernetesQueryController",
	HandlerType: (*PrometheusKubernetesQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _PrometheusKubernetesQueryController_Get_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _PrometheusKubernetesQueryController_GetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/kubernetes/prometheuskubernetes/service/query.proto",
}
