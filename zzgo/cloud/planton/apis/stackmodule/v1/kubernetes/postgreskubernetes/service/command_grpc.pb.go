// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/stackmodule/v1/kubernetes/postgreskubernetes/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/apiresource/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/stackmodule/v1/kubernetes/postgreskubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostgresKubernetesCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/previewCreate"
	PostgresKubernetesCommandController_Create_FullMethodName         = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/create"
	PostgresKubernetesCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/previewUpdate"
	PostgresKubernetesCommandController_Update_FullMethodName         = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/update"
	PostgresKubernetesCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/previewDelete"
	PostgresKubernetesCommandController_Delete_FullMethodName         = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/delete"
	PostgresKubernetesCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/previewRestore"
	PostgresKubernetesCommandController_Restore_FullMethodName        = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/restore"
	PostgresKubernetesCommandController_Restart_FullMethodName        = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/restart"
	PostgresKubernetesCommandController_Pause_FullMethodName          = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/pause"
	PostgresKubernetesCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/unpause"
	PostgresKubernetesCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/previewRefresh"
	PostgresKubernetesCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController/refresh"
)

// PostgresKubernetesCommandControllerClient is the client API for PostgresKubernetesCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresKubernetesCommandControllerClient interface {
	// preview create postgres-kubernetes
	PreviewCreate(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// create postgres-kubernetes
	Create(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// preview updating an existing postgres-kubernetes
	PreviewUpdate(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// update an existing postgres-kubernetes
	Update(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// preview deleting an existing postgres-kubernetes
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// delete an existing postgres-kubernetes
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// preview restoring a deleted postgres-kubernetes in a environment
	PreviewRestore(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// restore a deleted postgres-kubernetes in a environment
	Restore(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// restart a postgres-kubernetes running in a environment.
	// postgres-kubernetes is restarted by deleting running pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *model.PostgresKubernetesId, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// pause a postgres-kubernetes running in a environment.
	// postgres-kubernetes is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// unpause a previously paused postgres-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the postgres-kubernetes.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// preview refresh a postgres-kubernetes that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
	// refresh a postgres-kubernetes that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error)
}

type postgresKubernetesCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresKubernetesCommandControllerClient(cc grpc.ClientConnInterface) PostgresKubernetesCommandControllerClient {
	return &postgresKubernetesCommandControllerClient{cc}
}

func (c *postgresKubernetesCommandControllerClient) PreviewCreate(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Create(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Update(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) PreviewRestore(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Restore(ctx context.Context, in *model.PostgresKubernetes, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Restart(ctx context.Context, in *model.PostgresKubernetesId, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresKubernetesCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.PostgresKubernetes, error) {
	out := new(model.PostgresKubernetes)
	err := c.cc.Invoke(ctx, PostgresKubernetesCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresKubernetesCommandControllerServer is the server API for PostgresKubernetesCommandController service.
// All implementations should embed UnimplementedPostgresKubernetesCommandControllerServer
// for forward compatibility
type PostgresKubernetesCommandControllerServer interface {
	// preview create postgres-kubernetes
	PreviewCreate(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error)
	// create postgres-kubernetes
	Create(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error)
	// preview updating an existing postgres-kubernetes
	PreviewUpdate(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error)
	// update an existing postgres-kubernetes
	Update(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error)
	// preview deleting an existing postgres-kubernetes
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.PostgresKubernetes, error)
	// delete an existing postgres-kubernetes
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.PostgresKubernetes, error)
	// preview restoring a deleted postgres-kubernetes in a environment
	PreviewRestore(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error)
	// restore a deleted postgres-kubernetes in a environment
	Restore(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error)
	// restart a postgres-kubernetes running in a environment.
	// postgres-kubernetes is restarted by deleting running pods which will be automatically recreated by kubernetes
	Restart(context.Context, *model.PostgresKubernetesId) (*model.PostgresKubernetes, error)
	// pause a postgres-kubernetes running in a environment.
	// postgres-kubernetes is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.PostgresKubernetes, error)
	// unpause a previously paused postgres-kubernetes running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the postgres-kubernetes.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.PostgresKubernetes, error)
	// preview refresh a postgres-kubernetes that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.PostgresKubernetes, error)
	// refresh a postgres-kubernetes that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.PostgresKubernetes, error)
}

// UnimplementedPostgresKubernetesCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedPostgresKubernetesCommandControllerServer struct {
}

func (UnimplementedPostgresKubernetesCommandControllerServer) PreviewCreate(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Create(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) PreviewUpdate(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Update(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) PreviewRestore(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Restore(context.Context, *model.PostgresKubernetes) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Restart(context.Context, *model.PostgresKubernetesId) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedPostgresKubernetesCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.PostgresKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafePostgresKubernetesCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresKubernetesCommandControllerServer will
// result in compilation errors.
type UnsafePostgresKubernetesCommandControllerServer interface {
	mustEmbedUnimplementedPostgresKubernetesCommandControllerServer()
}

func RegisterPostgresKubernetesCommandControllerServer(s grpc.ServiceRegistrar, srv PostgresKubernetesCommandControllerServer) {
	s.RegisterService(&PostgresKubernetesCommandController_ServiceDesc, srv)
}

func _PostgresKubernetesCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewCreate(ctx, req.(*model.PostgresKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Create(ctx, req.(*model.PostgresKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewUpdate(ctx, req.(*model.PostgresKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Update(ctx, req.(*model.PostgresKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewRestore(ctx, req.(*model.PostgresKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Restore(ctx, req.(*model.PostgresKubernetes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostgresKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Restart(ctx, req.(*model.PostgresKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresKubernetesCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresKubernetesCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostgresKubernetesCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresKubernetesCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PostgresKubernetesCommandController_ServiceDesc is the grpc.ServiceDesc for PostgresKubernetesCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostgresKubernetesCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.kubernetes.postgreskubernetes.service.PostgresKubernetesCommandController",
	HandlerType: (*PostgresKubernetesCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _PostgresKubernetesCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _PostgresKubernetesCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _PostgresKubernetesCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PostgresKubernetesCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _PostgresKubernetesCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PostgresKubernetesCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _PostgresKubernetesCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _PostgresKubernetesCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _PostgresKubernetesCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _PostgresKubernetesCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _PostgresKubernetesCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _PostgresKubernetesCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _PostgresKubernetesCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/kubernetes/postgreskubernetes/service/command.proto",
}
