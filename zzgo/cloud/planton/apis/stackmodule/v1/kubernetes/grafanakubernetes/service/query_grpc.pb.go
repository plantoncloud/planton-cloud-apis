// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/stackmodule/v1/kubernetes/grafanakubernetes/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/stackmodule/v1/kubernetes/grafanakubernetes/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrafanaKubernetesQueryController_Get_FullMethodName = "/cloud.planton.apis.stackmodule.v1.kubernetes.grafanakubernetes.service.GrafanaKubernetesQueryController/get"
)

// GrafanaKubernetesQueryControllerClient is the client API for GrafanaKubernetesQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrafanaKubernetesQueryControllerClient interface {
	// look up grafana-kubernetes using grafana-kubernetes id
	Get(ctx context.Context, in *model.GrafanaKubernetesId, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error)
}

type grafanaKubernetesQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrafanaKubernetesQueryControllerClient(cc grpc.ClientConnInterface) GrafanaKubernetesQueryControllerClient {
	return &grafanaKubernetesQueryControllerClient{cc}
}

func (c *grafanaKubernetesQueryControllerClient) Get(ctx context.Context, in *model.GrafanaKubernetesId, opts ...grpc.CallOption) (*model.GrafanaKubernetes, error) {
	out := new(model.GrafanaKubernetes)
	err := c.cc.Invoke(ctx, GrafanaKubernetesQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafanaKubernetesQueryControllerServer is the server API for GrafanaKubernetesQueryController service.
// All implementations should embed UnimplementedGrafanaKubernetesQueryControllerServer
// for forward compatibility
type GrafanaKubernetesQueryControllerServer interface {
	// look up grafana-kubernetes using grafana-kubernetes id
	Get(context.Context, *model.GrafanaKubernetesId) (*model.GrafanaKubernetes, error)
}

// UnimplementedGrafanaKubernetesQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGrafanaKubernetesQueryControllerServer struct {
}

func (UnimplementedGrafanaKubernetesQueryControllerServer) Get(context.Context, *model.GrafanaKubernetesId) (*model.GrafanaKubernetes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeGrafanaKubernetesQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrafanaKubernetesQueryControllerServer will
// result in compilation errors.
type UnsafeGrafanaKubernetesQueryControllerServer interface {
	mustEmbedUnimplementedGrafanaKubernetesQueryControllerServer()
}

func RegisterGrafanaKubernetesQueryControllerServer(s grpc.ServiceRegistrar, srv GrafanaKubernetesQueryControllerServer) {
	s.RegisterService(&GrafanaKubernetesQueryController_ServiceDesc, srv)
}

func _GrafanaKubernetesQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GrafanaKubernetesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaKubernetesQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrafanaKubernetesQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaKubernetesQueryControllerServer).Get(ctx, req.(*model.GrafanaKubernetesId))
	}
	return interceptor(ctx, in, info, handler)
}

// GrafanaKubernetesQueryController_ServiceDesc is the grpc.ServiceDesc for GrafanaKubernetesQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrafanaKubernetesQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.kubernetes.grafanakubernetes.service.GrafanaKubernetesQueryController",
	HandlerType: (*GrafanaKubernetesQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _GrafanaKubernetesQueryController_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/kubernetes/grafanakubernetes/service/query.proto",
}
