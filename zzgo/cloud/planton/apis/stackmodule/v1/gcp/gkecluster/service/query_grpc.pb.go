// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/stackmodule/v1/gcp/gkecluster/service/query.proto

package service

import (
	context "context"
	protobuf "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/protobuf"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/stackmodule/v1/gcp/gkecluster/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GkeClusterQueryController_Get_FullMethodName = "/cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GkeClusterQueryController/get"
)

// GkeClusterQueryControllerClient is the client API for GkeClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GkeClusterQueryControllerClient interface {
	// lookup gke-cluster using gke-cluster id
	Get(ctx context.Context, in *model.GkeClusterId, opts ...grpc.CallOption) (*model.GkeCluster, error)
}

type gkeClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGkeClusterQueryControllerClient(cc grpc.ClientConnInterface) GkeClusterQueryControllerClient {
	return &gkeClusterQueryControllerClient{cc}
}

func (c *gkeClusterQueryControllerClient) Get(ctx context.Context, in *model.GkeClusterId, opts ...grpc.CallOption) (*model.GkeCluster, error) {
	out := new(model.GkeCluster)
	err := c.cc.Invoke(ctx, GkeClusterQueryController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GkeClusterQueryControllerServer is the server API for GkeClusterQueryController service.
// All implementations should embed UnimplementedGkeClusterQueryControllerServer
// for forward compatibility
type GkeClusterQueryControllerServer interface {
	// lookup gke-cluster using gke-cluster id
	Get(context.Context, *model.GkeClusterId) (*model.GkeCluster, error)
}

// UnimplementedGkeClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGkeClusterQueryControllerServer struct {
}

func (UnimplementedGkeClusterQueryControllerServer) Get(context.Context, *model.GkeClusterId) (*model.GkeCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeGkeClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GkeClusterQueryControllerServer will
// result in compilation errors.
type UnsafeGkeClusterQueryControllerServer interface {
	mustEmbedUnimplementedGkeClusterQueryControllerServer()
}

func RegisterGkeClusterQueryControllerServer(s grpc.ServiceRegistrar, srv GkeClusterQueryControllerServer) {
	s.RegisterService(&GkeClusterQueryController_ServiceDesc, srv)
}

func _GkeClusterQueryController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GkeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterQueryControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterQueryController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterQueryControllerServer).Get(ctx, req.(*model.GkeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// GkeClusterQueryController_ServiceDesc is the grpc.ServiceDesc for GkeClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GkeClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GkeClusterQueryController",
	HandlerType: (*GkeClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _GkeClusterQueryController_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/gcp/gkecluster/service/query.proto",
}

const (
	GkeClusterNodePoolQueryController_GetByGcpContainerNodePoolId_FullMethodName = "/cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GkeClusterNodePoolQueryController/getByGcpContainerNodePoolId"
)

// GkeClusterNodePoolQueryControllerClient is the client API for GkeClusterNodePoolQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GkeClusterNodePoolQueryControllerClient interface {
	// lookup gcp container node pool env using container-nodepool-id
	GetByGcpContainerNodePoolId(ctx context.Context, in *model.GetByGkeClusterNodePoolIdInput, opts ...grpc.CallOption) (*model.GkeClusterNodePool, error)
}

type gkeClusterNodePoolQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGkeClusterNodePoolQueryControllerClient(cc grpc.ClientConnInterface) GkeClusterNodePoolQueryControllerClient {
	return &gkeClusterNodePoolQueryControllerClient{cc}
}

func (c *gkeClusterNodePoolQueryControllerClient) GetByGcpContainerNodePoolId(ctx context.Context, in *model.GetByGkeClusterNodePoolIdInput, opts ...grpc.CallOption) (*model.GkeClusterNodePool, error) {
	out := new(model.GkeClusterNodePool)
	err := c.cc.Invoke(ctx, GkeClusterNodePoolQueryController_GetByGcpContainerNodePoolId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GkeClusterNodePoolQueryControllerServer is the server API for GkeClusterNodePoolQueryController service.
// All implementations should embed UnimplementedGkeClusterNodePoolQueryControllerServer
// for forward compatibility
type GkeClusterNodePoolQueryControllerServer interface {
	// lookup gcp container node pool env using container-nodepool-id
	GetByGcpContainerNodePoolId(context.Context, *model.GetByGkeClusterNodePoolIdInput) (*model.GkeClusterNodePool, error)
}

// UnimplementedGkeClusterNodePoolQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGkeClusterNodePoolQueryControllerServer struct {
}

func (UnimplementedGkeClusterNodePoolQueryControllerServer) GetByGcpContainerNodePoolId(context.Context, *model.GetByGkeClusterNodePoolIdInput) (*model.GkeClusterNodePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGcpContainerNodePoolId not implemented")
}

// UnsafeGkeClusterNodePoolQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GkeClusterNodePoolQueryControllerServer will
// result in compilation errors.
type UnsafeGkeClusterNodePoolQueryControllerServer interface {
	mustEmbedUnimplementedGkeClusterNodePoolQueryControllerServer()
}

func RegisterGkeClusterNodePoolQueryControllerServer(s grpc.ServiceRegistrar, srv GkeClusterNodePoolQueryControllerServer) {
	s.RegisterService(&GkeClusterNodePoolQueryController_ServiceDesc, srv)
}

func _GkeClusterNodePoolQueryController_GetByGcpContainerNodePoolId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetByGkeClusterNodePoolIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GkeClusterNodePoolQueryControllerServer).GetByGcpContainerNodePoolId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GkeClusterNodePoolQueryController_GetByGcpContainerNodePoolId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GkeClusterNodePoolQueryControllerServer).GetByGcpContainerNodePoolId(ctx, req.(*model.GetByGkeClusterNodePoolIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GkeClusterNodePoolQueryController_ServiceDesc is the grpc.ServiceDesc for GkeClusterNodePoolQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GkeClusterNodePoolQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GkeClusterNodePoolQueryController",
	HandlerType: (*GkeClusterNodePoolQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getByGcpContainerNodePoolId",
			Handler:    _GkeClusterNodePoolQueryController_GetByGcpContainerNodePoolId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/gcp/gkecluster/service/query.proto",
}

const (
	GcpQueryController_FindRegions_FullMethodName                 = "/cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GcpQueryController/findRegions"
	GcpQueryController_FindZonesByRegionIdentifier_FullMethodName = "/cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GcpQueryController/findZonesByRegionIdentifier"
)

// GcpQueryControllerClient is the client API for GcpQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcpQueryControllerClient interface {
	// list all gcp regions
	FindRegions(ctx context.Context, in *protobuf.CustomEmpty, opts ...grpc.CallOption) (*model.GcpRegionList, error)
	// list all zones in a gcp region
	FindZonesByRegionIdentifier(ctx context.Context, in *model.GcpRegionIdentifier, opts ...grpc.CallOption) (*model.GcpZoneList, error)
}

type gcpQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGcpQueryControllerClient(cc grpc.ClientConnInterface) GcpQueryControllerClient {
	return &gcpQueryControllerClient{cc}
}

func (c *gcpQueryControllerClient) FindRegions(ctx context.Context, in *protobuf.CustomEmpty, opts ...grpc.CallOption) (*model.GcpRegionList, error) {
	out := new(model.GcpRegionList)
	err := c.cc.Invoke(ctx, GcpQueryController_FindRegions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpQueryControllerClient) FindZonesByRegionIdentifier(ctx context.Context, in *model.GcpRegionIdentifier, opts ...grpc.CallOption) (*model.GcpZoneList, error) {
	out := new(model.GcpZoneList)
	err := c.cc.Invoke(ctx, GcpQueryController_FindZonesByRegionIdentifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcpQueryControllerServer is the server API for GcpQueryController service.
// All implementations should embed UnimplementedGcpQueryControllerServer
// for forward compatibility
type GcpQueryControllerServer interface {
	// list all gcp regions
	FindRegions(context.Context, *protobuf.CustomEmpty) (*model.GcpRegionList, error)
	// list all zones in a gcp region
	FindZonesByRegionIdentifier(context.Context, *model.GcpRegionIdentifier) (*model.GcpZoneList, error)
}

// UnimplementedGcpQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedGcpQueryControllerServer struct {
}

func (UnimplementedGcpQueryControllerServer) FindRegions(context.Context, *protobuf.CustomEmpty) (*model.GcpRegionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRegions not implemented")
}
func (UnimplementedGcpQueryControllerServer) FindZonesByRegionIdentifier(context.Context, *model.GcpRegionIdentifier) (*model.GcpZoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindZonesByRegionIdentifier not implemented")
}

// UnsafeGcpQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcpQueryControllerServer will
// result in compilation errors.
type UnsafeGcpQueryControllerServer interface {
	mustEmbedUnimplementedGcpQueryControllerServer()
}

func RegisterGcpQueryControllerServer(s grpc.ServiceRegistrar, srv GcpQueryControllerServer) {
	s.RegisterService(&GcpQueryController_ServiceDesc, srv)
}

func _GcpQueryController_FindRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.CustomEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpQueryControllerServer).FindRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpQueryController_FindRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpQueryControllerServer).FindRegions(ctx, req.(*protobuf.CustomEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpQueryController_FindZonesByRegionIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GcpRegionIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpQueryControllerServer).FindZonesByRegionIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GcpQueryController_FindZonesByRegionIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpQueryControllerServer).FindZonesByRegionIdentifier(ctx, req.(*model.GcpRegionIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

// GcpQueryController_ServiceDesc is the grpc.ServiceDesc for GcpQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcpQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.stackmodule.v1.gcp.gkecluster.service.GcpQueryController",
	HandlerType: (*GcpQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findRegions",
			Handler:    _GcpQueryController_FindRegions_Handler,
		},
		{
			MethodName: "findZonesByRegionIdentifier",
			Handler:    _GcpQueryController_FindZonesByRegionIdentifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/stackmodule/v1/gcp/gkecluster/service/query.proto",
}
