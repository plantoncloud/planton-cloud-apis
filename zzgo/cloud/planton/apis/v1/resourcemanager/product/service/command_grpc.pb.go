// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/resourcemanager/product/service/command.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/resource/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.resourcemanager.product.service.ProductCommandController/create"
	ProductCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.resourcemanager.product.service.ProductCommandController/update"
	ProductCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.resourcemanager.product.service.ProductCommandController/delete"
	ProductCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.resourcemanager.product.service.ProductCommandController/restore"
)

// ProductCommandControllerClient is the client API for ProductCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCommandControllerClient interface {
	// add a new product to a company
	Create(ctx context.Context, in *model.Product, opts ...grpc.CallOption) (*model.Product, error)
	// update an existing product
	Update(ctx context.Context, in *model.Product, opts ...grpc.CallOption) (*model.Product, error)
	// delete an existing product
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.Product, error)
	// restore a previously deleted product
	Restore(ctx context.Context, in *model.Product, opts ...grpc.CallOption) (*model.Product, error)
}

type productCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCommandControllerClient(cc grpc.ClientConnInterface) ProductCommandControllerClient {
	return &productCommandControllerClient{cc}
}

func (c *productCommandControllerClient) Create(ctx context.Context, in *model.Product, opts ...grpc.CallOption) (*model.Product, error) {
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCommandControllerClient) Update(ctx context.Context, in *model.Product, opts ...grpc.CallOption) (*model.Product, error) {
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.Product, error) {
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCommandControllerClient) Restore(ctx context.Context, in *model.Product, opts ...grpc.CallOption) (*model.Product, error) {
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCommandControllerServer is the server API for ProductCommandController service.
// All implementations should embed UnimplementedProductCommandControllerServer
// for forward compatibility
type ProductCommandControllerServer interface {
	// add a new product to a company
	Create(context.Context, *model.Product) (*model.Product, error)
	// update an existing product
	Update(context.Context, *model.Product) (*model.Product, error)
	// delete an existing product
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.Product, error)
	// restore a previously deleted product
	Restore(context.Context, *model.Product) (*model.Product, error)
}

// UnimplementedProductCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedProductCommandControllerServer struct {
}

func (UnimplementedProductCommandControllerServer) Create(context.Context, *model.Product) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductCommandControllerServer) Update(context.Context, *model.Product) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductCommandControllerServer) Restore(context.Context, *model.Product) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeProductCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCommandControllerServer will
// result in compilation errors.
type UnsafeProductCommandControllerServer interface {
	mustEmbedUnimplementedProductCommandControllerServer()
}

func RegisterProductCommandControllerServer(s grpc.ServiceRegistrar, srv ProductCommandControllerServer) {
	s.RegisterService(&ProductCommandController_ServiceDesc, srv)
}

func _ProductCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandControllerServer).Create(ctx, req.(*model.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandControllerServer).Update(ctx, req.(*model.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandControllerServer).Restore(ctx, req.(*model.Product))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCommandController_ServiceDesc is the grpc.ServiceDesc for ProductCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.resourcemanager.product.service.ProductCommandController",
	HandlerType: (*ProductCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ProductCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ProductCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ProductCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _ProductCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/resourcemanager/product/service/command.proto",
}
