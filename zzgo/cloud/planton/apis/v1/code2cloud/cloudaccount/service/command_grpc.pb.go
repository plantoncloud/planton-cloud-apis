// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/cloudaccount/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudAccountCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/previewCreate"
	CloudAccountCommandController_Create_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/create"
	CloudAccountCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/previewUpdate"
	CloudAccountCommandController_Update_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/update"
	CloudAccountCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/previewDelete"
	CloudAccountCommandController_Delete_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/delete"
	CloudAccountCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/previewRestore"
	CloudAccountCommandController_Restore_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/restore"
	CloudAccountCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/createStackJob"
	CloudAccountCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/previewRefresh"
	CloudAccountCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController/refresh"
)

// CloudAccountCommandControllerClient is the client API for CloudAccountCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountCommandControllerClient interface {
	// preview create cloud-account resource
	PreviewCreate(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// create a cloud-account resource
	Create(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// preview update on existing cloud-account
	PreviewUpdate(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// update an existing cloud-account
	Update(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// preview delete a cloud-account that was previously created
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// delete a cloud-account that was previously created
	// warning: deleting a cloud-account from planton cloud destroys the resources created by planton cloud in the account
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// preview restoring a deleted cloud-account.
	PreviewRestore(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// restore a deleted cloud-account.
	Restore(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// create-stack-job for cloud-account
	CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// preview refresh a cloud-account that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error)
	// refresh a cloud-account that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error)
}

type cloudAccountCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountCommandControllerClient(cc grpc.ClientConnInterface) CloudAccountCommandControllerClient {
	return &cloudAccountCommandControllerClient{cc}
}

func (c *cloudAccountCommandControllerClient) PreviewCreate(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Create(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Update(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) PreviewRestore(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Restore(ctx context.Context, in *model.CloudAccount, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CloudAccount, error) {
	out := new(model.CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountCommandControllerServer is the server API for CloudAccountCommandController service.
// All implementations should embed UnimplementedCloudAccountCommandControllerServer
// for forward compatibility
type CloudAccountCommandControllerServer interface {
	// preview create cloud-account resource
	PreviewCreate(context.Context, *model.CloudAccount) (*model.CloudAccount, error)
	// create a cloud-account resource
	Create(context.Context, *model.CloudAccount) (*model.CloudAccount, error)
	// preview update on existing cloud-account
	PreviewUpdate(context.Context, *model.CloudAccount) (*model.CloudAccount, error)
	// update an existing cloud-account
	Update(context.Context, *model.CloudAccount) (*model.CloudAccount, error)
	// preview delete a cloud-account that was previously created
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CloudAccount, error)
	// delete a cloud-account that was previously created
	// warning: deleting a cloud-account from planton cloud destroys the resources created by planton cloud in the account
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CloudAccount, error)
	// preview restoring a deleted cloud-account.
	PreviewRestore(context.Context, *model.CloudAccount) (*model.CloudAccount, error)
	// restore a deleted cloud-account.
	Restore(context.Context, *model.CloudAccount) (*model.CloudAccount, error)
	// create-stack-job for cloud-account
	CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.CloudAccount, error)
	// preview refresh a cloud-account that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CloudAccount, error)
	// refresh a cloud-account that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CloudAccount, error)
}

// UnimplementedCloudAccountCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCloudAccountCommandControllerServer struct {
}

func (UnimplementedCloudAccountCommandControllerServer) PreviewCreate(context.Context, *model.CloudAccount) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Create(context.Context, *model.CloudAccount) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) PreviewUpdate(context.Context, *model.CloudAccount) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Update(context.Context, *model.CloudAccount) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) PreviewRestore(context.Context, *model.CloudAccount) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Restore(context.Context, *model.CloudAccount) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeCloudAccountCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountCommandControllerServer will
// result in compilation errors.
type UnsafeCloudAccountCommandControllerServer interface {
	mustEmbedUnimplementedCloudAccountCommandControllerServer()
}

func RegisterCloudAccountCommandControllerServer(s grpc.ServiceRegistrar, srv CloudAccountCommandControllerServer) {
	s.RegisterService(&CloudAccountCommandController_ServiceDesc, srv)
}

func _CloudAccountCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).PreviewCreate(ctx, req.(*model.CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Create(ctx, req.(*model.CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).PreviewUpdate(ctx, req.(*model.CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Update(ctx, req.(*model.CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).PreviewRestore(ctx, req.(*model.CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Restore(ctx, req.(*model.CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).CreateStackJob(ctx, req.(*model2.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountCommandController_ServiceDesc is the grpc.ServiceDesc for CloudAccountCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.cloudaccount.service.CloudAccountCommandController",
	HandlerType: (*CloudAccountCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _CloudAccountCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _CloudAccountCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _CloudAccountCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CloudAccountCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _CloudAccountCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CloudAccountCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _CloudAccountCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _CloudAccountCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _CloudAccountCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _CloudAccountCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _CloudAccountCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/cloudaccount/service/command.proto",
}
