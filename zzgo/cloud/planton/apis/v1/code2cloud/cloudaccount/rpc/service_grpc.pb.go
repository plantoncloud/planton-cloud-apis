// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/cloudaccount/rpc/service.proto

package rpc

import (
	context "context"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/company/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudAccountCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/create"
	CloudAccountCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/update"
	CloudAccountCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/delete"
	CloudAccountCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController/restore"
)

// CloudAccountCommandControllerClient is the client API for CloudAccountCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountCommandControllerClient interface {
	// create a cloud account resource
	Create(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error)
	// update an existing cloud account
	Update(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error)
	// delete a cloud account that was previously created
	// warning: deleting a cloud account from planton cloud destroys the resources created by planton cloud in the account
	Delete(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error)
	// restore a deleted cloud account.
	Restore(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error)
}

type cloudAccountCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountCommandControllerClient(cc grpc.ClientConnInterface) CloudAccountCommandControllerClient {
	return &cloudAccountCommandControllerClient{cc}
}

func (c *cloudAccountCommandControllerClient) Create(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Update(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Delete(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountCommandControllerClient) Restore(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountCommandControllerServer is the server API for CloudAccountCommandController service.
// All implementations should embed UnimplementedCloudAccountCommandControllerServer
// for forward compatibility
type CloudAccountCommandControllerServer interface {
	// create a cloud account resource
	Create(context.Context, *CloudAccount) (*CloudAccount, error)
	// update an existing cloud account
	Update(context.Context, *CloudAccount) (*CloudAccount, error)
	// delete a cloud account that was previously created
	// warning: deleting a cloud account from planton cloud destroys the resources created by planton cloud in the account
	Delete(context.Context, *CloudAccountId) (*CloudAccount, error)
	// restore a deleted cloud account.
	Restore(context.Context, *CloudAccount) (*CloudAccount, error)
}

// UnimplementedCloudAccountCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCloudAccountCommandControllerServer struct {
}

func (UnimplementedCloudAccountCommandControllerServer) Create(context.Context, *CloudAccount) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Update(context.Context, *CloudAccount) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Delete(context.Context, *CloudAccountId) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudAccountCommandControllerServer) Restore(context.Context, *CloudAccount) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeCloudAccountCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountCommandControllerServer will
// result in compilation errors.
type UnsafeCloudAccountCommandControllerServer interface {
	mustEmbedUnimplementedCloudAccountCommandControllerServer()
}

func RegisterCloudAccountCommandControllerServer(s grpc.ServiceRegistrar, srv CloudAccountCommandControllerServer) {
	s.RegisterService(&CloudAccountCommandController_ServiceDesc, srv)
}

func _CloudAccountCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Create(ctx, req.(*CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Update(ctx, req.(*CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Delete(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountCommandControllerServer).Restore(ctx, req.(*CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountCommandController_ServiceDesc is the grpc.ServiceDesc for CloudAccountCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountCommandController",
	HandlerType: (*CloudAccountCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CloudAccountCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CloudAccountCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CloudAccountCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _CloudAccountCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/cloudaccount/rpc/service.proto",
}

const (
	CloudAccountQueryController_GetById_FullMethodName                              = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/getById"
	CloudAccountQueryController_FindByCompanyId_FullMethodName                      = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findByCompanyId"
	CloudAccountQueryController_List_FullMethodName                                 = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/list"
	CloudAccountQueryController_FindArtifactStoreCreateCloudAccounts_FullMethodName = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findArtifactStoreCreateCloudAccounts"
	CloudAccountQueryController_FindKubeClusterCreateCloudAccounts_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findKubeClusterCreateCloudAccounts"
	CloudAccountQueryController_FindDnsZoneCreateCloudAccounts_FullMethodName       = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController/findDnsZoneCreateCloudAccounts"
)

// CloudAccountQueryControllerClient is the client API for CloudAccountQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountQueryControllerClient interface {
	// look up a cloud account by id
	GetById(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error)
	// todo: add authorization
	// find cloud accounts by company id.
	// the response should only include cloud accounts in a company that the authenticated user account has viewer access to.
	FindByCompanyId(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error)
	// todo: add authorization
	// list all specifications for cloud-accounts  for the requested page. This is intended to be used on back-office portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*CloudAccountList, error)
	// todo: add authorization
	// find cloud accounts by company id to create artifact store.
	// this will be used to populate drop down of cloud accounts in create artifact store form.
	// the response should only include cloud accounts that a company is authorised to create artifact stores.
	// the authorization is verified by looking up cloud accounts with `company-artifact-creator` relation for the company id provided in input.
	// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
	FindArtifactStoreCreateCloudAccounts(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error)
	// todo: add authorization
	// find cloud accounts by company id to create kube-cluster.
	// this will be used to populate drop down of cloud accounts in create kube-cluster form.
	// the response should only include cloud accounts that a company is authorised to create kube-cluster.
	// the authorization is verified by looking up cloud accounts with `company-kube-cluster-creator` relation for the company id provided in input.
	// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
	FindKubeClusterCreateCloudAccounts(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error)
	// todo: add authorization
	// find cloud accounts by company id to create dns managed zone.
	// this will be used to populate drop down of cloud accounts in create dns managed zone form.
	// the response should only include cloud accounts that a company is authorised to create dns managed zone.
	// the authorization is verified by looking up cloud accounts with `company-dns-managed-zone-creator` relation for the company id provided in input.
	// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
	FindDnsZoneCreateCloudAccounts(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error)
}

type cloudAccountQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountQueryControllerClient(cc grpc.ClientConnInterface) CloudAccountQueryControllerClient {
	return &cloudAccountQueryControllerClient{cc}
}

func (c *cloudAccountQueryControllerClient) GetById(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountQueryControllerClient) FindByCompanyId(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error) {
	out := new(CloudAccounts)
	err := c.cc.Invoke(ctx, CloudAccountQueryController_FindByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*CloudAccountList, error) {
	out := new(CloudAccountList)
	err := c.cc.Invoke(ctx, CloudAccountQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountQueryControllerClient) FindArtifactStoreCreateCloudAccounts(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error) {
	out := new(CloudAccounts)
	err := c.cc.Invoke(ctx, CloudAccountQueryController_FindArtifactStoreCreateCloudAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountQueryControllerClient) FindKubeClusterCreateCloudAccounts(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error) {
	out := new(CloudAccounts)
	err := c.cc.Invoke(ctx, CloudAccountQueryController_FindKubeClusterCreateCloudAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountQueryControllerClient) FindDnsZoneCreateCloudAccounts(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*CloudAccounts, error) {
	out := new(CloudAccounts)
	err := c.cc.Invoke(ctx, CloudAccountQueryController_FindDnsZoneCreateCloudAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountQueryControllerServer is the server API for CloudAccountQueryController service.
// All implementations should embed UnimplementedCloudAccountQueryControllerServer
// for forward compatibility
type CloudAccountQueryControllerServer interface {
	// look up a cloud account by id
	GetById(context.Context, *CloudAccountId) (*CloudAccount, error)
	// todo: add authorization
	// find cloud accounts by company id.
	// the response should only include cloud accounts in a company that the authenticated user account has viewer access to.
	FindByCompanyId(context.Context, *rpc.CompanyId) (*CloudAccounts, error)
	// todo: add authorization
	// list all specifications for cloud-accounts  for the requested page. This is intended to be used on back-office portal.
	List(context.Context, *pagination.PageInfo) (*CloudAccountList, error)
	// todo: add authorization
	// find cloud accounts by company id to create artifact store.
	// this will be used to populate drop down of cloud accounts in create artifact store form.
	// the response should only include cloud accounts that a company is authorised to create artifact stores.
	// the authorization is verified by looking up cloud accounts with `company-artifact-creator` relation for the company id provided in input.
	// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
	FindArtifactStoreCreateCloudAccounts(context.Context, *rpc.CompanyId) (*CloudAccounts, error)
	// todo: add authorization
	// find cloud accounts by company id to create kube-cluster.
	// this will be used to populate drop down of cloud accounts in create kube-cluster form.
	// the response should only include cloud accounts that a company is authorised to create kube-cluster.
	// the authorization is verified by looking up cloud accounts with `company-kube-cluster-creator` relation for the company id provided in input.
	// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
	FindKubeClusterCreateCloudAccounts(context.Context, *rpc.CompanyId) (*CloudAccounts, error)
	// todo: add authorization
	// find cloud accounts by company id to create dns managed zone.
	// this will be used to populate drop down of cloud accounts in create dns managed zone form.
	// the response should only include cloud accounts that a company is authorised to create dns managed zone.
	// the authorization is verified by looking up cloud accounts with `company-dns-managed-zone-creator` relation for the company id provided in input.
	// the response should only include public attributes of a cloud account. all non-public attributes should be excluded from the response.
	FindDnsZoneCreateCloudAccounts(context.Context, *rpc.CompanyId) (*CloudAccounts, error)
}

// UnimplementedCloudAccountQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCloudAccountQueryControllerServer struct {
}

func (UnimplementedCloudAccountQueryControllerServer) GetById(context.Context, *CloudAccountId) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCloudAccountQueryControllerServer) FindByCompanyId(context.Context, *rpc.CompanyId) (*CloudAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCompanyId not implemented")
}
func (UnimplementedCloudAccountQueryControllerServer) List(context.Context, *pagination.PageInfo) (*CloudAccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCloudAccountQueryControllerServer) FindArtifactStoreCreateCloudAccounts(context.Context, *rpc.CompanyId) (*CloudAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArtifactStoreCreateCloudAccounts not implemented")
}
func (UnimplementedCloudAccountQueryControllerServer) FindKubeClusterCreateCloudAccounts(context.Context, *rpc.CompanyId) (*CloudAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindKubeClusterCreateCloudAccounts not implemented")
}
func (UnimplementedCloudAccountQueryControllerServer) FindDnsZoneCreateCloudAccounts(context.Context, *rpc.CompanyId) (*CloudAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDnsZoneCreateCloudAccounts not implemented")
}

// UnsafeCloudAccountQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountQueryControllerServer will
// result in compilation errors.
type UnsafeCloudAccountQueryControllerServer interface {
	mustEmbedUnimplementedCloudAccountQueryControllerServer()
}

func RegisterCloudAccountQueryControllerServer(s grpc.ServiceRegistrar, srv CloudAccountQueryControllerServer) {
	s.RegisterService(&CloudAccountQueryController_ServiceDesc, srv)
}

func _CloudAccountQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountQueryControllerServer).GetById(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountQueryController_FindByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountQueryControllerServer).FindByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountQueryController_FindByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountQueryControllerServer).FindByCompanyId(ctx, req.(*rpc.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountQueryController_FindArtifactStoreCreateCloudAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountQueryControllerServer).FindArtifactStoreCreateCloudAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountQueryController_FindArtifactStoreCreateCloudAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountQueryControllerServer).FindArtifactStoreCreateCloudAccounts(ctx, req.(*rpc.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountQueryController_FindKubeClusterCreateCloudAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountQueryControllerServer).FindKubeClusterCreateCloudAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountQueryController_FindKubeClusterCreateCloudAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountQueryControllerServer).FindKubeClusterCreateCloudAccounts(ctx, req.(*rpc.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountQueryController_FindDnsZoneCreateCloudAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountQueryControllerServer).FindDnsZoneCreateCloudAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountQueryController_FindDnsZoneCreateCloudAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountQueryControllerServer).FindDnsZoneCreateCloudAccounts(ctx, req.(*rpc.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountQueryController_ServiceDesc is the grpc.ServiceDesc for CloudAccountQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountQueryController",
	HandlerType: (*CloudAccountQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _CloudAccountQueryController_GetById_Handler,
		},
		{
			MethodName: "findByCompanyId",
			Handler:    _CloudAccountQueryController_FindByCompanyId_Handler,
		},
		{
			MethodName: "list",
			Handler:    _CloudAccountQueryController_List_Handler,
		},
		{
			MethodName: "findArtifactStoreCreateCloudAccounts",
			Handler:    _CloudAccountQueryController_FindArtifactStoreCreateCloudAccounts_Handler,
		},
		{
			MethodName: "findKubeClusterCreateCloudAccounts",
			Handler:    _CloudAccountQueryController_FindKubeClusterCreateCloudAccounts_Handler,
		},
		{
			MethodName: "findDnsZoneCreateCloudAccounts",
			Handler:    _CloudAccountQueryController_FindDnsZoneCreateCloudAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/cloudaccount/rpc/service.proto",
}

const (
	CloudAccountStackController_Preview_FullMethodName = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController/preview"
	CloudAccountStackController_Apply_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController/apply"
)

// CloudAccountStackControllerClient is the client API for CloudAccountStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAccountStackControllerClient interface {
	// preview stack-job for cloud-account spec
	Preview(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error)
	// apply stack for a cloud-account
	Apply(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error)
}

type cloudAccountStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAccountStackControllerClient(cc grpc.ClientConnInterface) CloudAccountStackControllerClient {
	return &cloudAccountStackControllerClient{cc}
}

func (c *cloudAccountStackControllerClient) Preview(ctx context.Context, in *CloudAccount, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountStackController_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAccountStackControllerClient) Apply(ctx context.Context, in *CloudAccountId, opts ...grpc.CallOption) (*CloudAccount, error) {
	out := new(CloudAccount)
	err := c.cc.Invoke(ctx, CloudAccountStackController_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAccountStackControllerServer is the server API for CloudAccountStackController service.
// All implementations should embed UnimplementedCloudAccountStackControllerServer
// for forward compatibility
type CloudAccountStackControllerServer interface {
	// preview stack-job for cloud-account spec
	Preview(context.Context, *CloudAccount) (*CloudAccount, error)
	// apply stack for a cloud-account
	Apply(context.Context, *CloudAccountId) (*CloudAccount, error)
}

// UnimplementedCloudAccountStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCloudAccountStackControllerServer struct {
}

func (UnimplementedCloudAccountStackControllerServer) Preview(context.Context, *CloudAccount) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedCloudAccountStackControllerServer) Apply(context.Context, *CloudAccountId) (*CloudAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeCloudAccountStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAccountStackControllerServer will
// result in compilation errors.
type UnsafeCloudAccountStackControllerServer interface {
	mustEmbedUnimplementedCloudAccountStackControllerServer()
}

func RegisterCloudAccountStackControllerServer(s grpc.ServiceRegistrar, srv CloudAccountStackControllerServer) {
	s.RegisterService(&CloudAccountStackController_ServiceDesc, srv)
}

func _CloudAccountStackController_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountStackControllerServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountStackController_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountStackControllerServer).Preview(ctx, req.(*CloudAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAccountStackController_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAccountStackControllerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudAccountStackController_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAccountStackControllerServer).Apply(ctx, req.(*CloudAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAccountStackController_ServiceDesc is the grpc.ServiceDesc for CloudAccountStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAccountStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.cloudaccount.rpc.CloudAccountStackController",
	HandlerType: (*CloudAccountStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preview",
			Handler:    _CloudAccountStackController_Preview_Handler,
		},
		{
			MethodName: "apply",
			Handler:    _CloudAccountStackController_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/cloudaccount/rpc/service.proto",
}
