// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/solr/service/query.proto

package service

import (
	context "context"
	model4 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/solr/model"
	model3 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination/model"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SolrCloudQueryController_List_FullMethodName                = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/list"
	SolrCloudQueryController_GetById_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/getById"
	SolrCloudQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/findByProductId"
	SolrCloudQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/findByEnvironmentId"
	SolrCloudQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/findByKubeClusterId"
	SolrCloudQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/getPassword"
	SolrCloudQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController/findPods"
)

// SolrCloudQueryControllerClient is the client API for SolrCloudQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolrCloudQueryControllerClient interface {
	// list all solr-clouds on planton cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.SolrCloudList, error)
	// look up solr-cloud using solr-cloud id
	GetById(ctx context.Context, in *model1.SolrCloudId, opts ...grpc.CallOption) (*model1.SolrCloud, error)
	// find solr-clouds by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *model2.ProductId, opts ...grpc.CallOption) (*model1.SolrClouds, error)
	// find solr-clouds by environment
	FindByEnvironmentId(ctx context.Context, in *model3.EnvironmentId, opts ...grpc.CallOption) (*model1.SolrClouds, error)
	// find solr-clouds by kubernetes cloud
	FindByKubeClusterId(ctx context.Context, in *model4.KubeClusterId, opts ...grpc.CallOption) (*model1.SolrClouds, error)
	// look up solr-cloud sasl password
	// password is retrieved from the kubernetes cloud.
	GetPassword(ctx context.Context, in *model1.SolrCloudId, opts ...grpc.CallOption) (*model1.SolrCloudPassword, error)
	// lookup pods of a solr-cloud deployed to a environment
	FindPods(ctx context.Context, in *model1.SolrCloudId, opts ...grpc.CallOption) (*resource.Pods, error)
}

type solrCloudQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSolrCloudQueryControllerClient(cc grpc.ClientConnInterface) SolrCloudQueryControllerClient {
	return &solrCloudQueryControllerClient{cc}
}

func (c *solrCloudQueryControllerClient) List(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.SolrCloudList, error) {
	out := new(model1.SolrCloudList)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) GetById(ctx context.Context, in *model1.SolrCloudId, opts ...grpc.CallOption) (*model1.SolrCloud, error) {
	out := new(model1.SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindByProductId(ctx context.Context, in *model2.ProductId, opts ...grpc.CallOption) (*model1.SolrClouds, error) {
	out := new(model1.SolrClouds)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *model3.EnvironmentId, opts ...grpc.CallOption) (*model1.SolrClouds, error) {
	out := new(model1.SolrClouds)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *model4.KubeClusterId, opts ...grpc.CallOption) (*model1.SolrClouds, error) {
	out := new(model1.SolrClouds)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) GetPassword(ctx context.Context, in *model1.SolrCloudId, opts ...grpc.CallOption) (*model1.SolrCloudPassword, error) {
	out := new(model1.SolrCloudPassword)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindPods(ctx context.Context, in *model1.SolrCloudId, opts ...grpc.CallOption) (*resource.Pods, error) {
	out := new(resource.Pods)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolrCloudQueryControllerServer is the server API for SolrCloudQueryController service.
// All implementations should embed UnimplementedSolrCloudQueryControllerServer
// for forward compatibility
type SolrCloudQueryControllerServer interface {
	// list all solr-clouds on planton cloud for the requested page. This is intended for use on portal.
	List(context.Context, *model.PageInfo) (*model1.SolrCloudList, error)
	// look up solr-cloud using solr-cloud id
	GetById(context.Context, *model1.SolrCloudId) (*model1.SolrCloud, error)
	// find solr-clouds by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *model2.ProductId) (*model1.SolrClouds, error)
	// find solr-clouds by environment
	FindByEnvironmentId(context.Context, *model3.EnvironmentId) (*model1.SolrClouds, error)
	// find solr-clouds by kubernetes cloud
	FindByKubeClusterId(context.Context, *model4.KubeClusterId) (*model1.SolrClouds, error)
	// look up solr-cloud sasl password
	// password is retrieved from the kubernetes cloud.
	GetPassword(context.Context, *model1.SolrCloudId) (*model1.SolrCloudPassword, error)
	// lookup pods of a solr-cloud deployed to a environment
	FindPods(context.Context, *model1.SolrCloudId) (*resource.Pods, error)
}

// UnimplementedSolrCloudQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSolrCloudQueryControllerServer struct {
}

func (UnimplementedSolrCloudQueryControllerServer) List(context.Context, *model.PageInfo) (*model1.SolrCloudList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) GetById(context.Context, *model1.SolrCloudId) (*model1.SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindByProductId(context.Context, *model2.ProductId) (*model1.SolrClouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindByEnvironmentId(context.Context, *model3.EnvironmentId) (*model1.SolrClouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindByKubeClusterId(context.Context, *model4.KubeClusterId) (*model1.SolrClouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) GetPassword(context.Context, *model1.SolrCloudId) (*model1.SolrCloudPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindPods(context.Context, *model1.SolrCloudId) (*resource.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeSolrCloudQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolrCloudQueryControllerServer will
// result in compilation errors.
type UnsafeSolrCloudQueryControllerServer interface {
	mustEmbedUnimplementedSolrCloudQueryControllerServer()
}

func RegisterSolrCloudQueryControllerServer(s grpc.ServiceRegistrar, srv SolrCloudQueryControllerServer) {
	s.RegisterService(&SolrCloudQueryController_ServiceDesc, srv)
}

func _SolrCloudQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).List(ctx, req.(*model.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).GetById(ctx, req.(*model1.SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindByProductId(ctx, req.(*model2.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model3.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindByEnvironmentId(ctx, req.(*model3.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model4.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindByKubeClusterId(ctx, req.(*model4.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).GetPassword(ctx, req.(*model1.SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindPods(ctx, req.(*model1.SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

// SolrCloudQueryController_ServiceDesc is the grpc.ServiceDesc for SolrCloudQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolrCloudQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.solr.service.SolrCloudQueryController",
	HandlerType: (*SolrCloudQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _SolrCloudQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _SolrCloudQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _SolrCloudQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _SolrCloudQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _SolrCloudQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _SolrCloudQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _SolrCloudQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/solr/service/query.proto",
}
