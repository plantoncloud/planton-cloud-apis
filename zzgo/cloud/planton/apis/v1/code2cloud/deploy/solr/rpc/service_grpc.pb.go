// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/solr/rpc/service.proto

package rpc

import (
	context "context"
	rpc2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster/rpc"
	rpc1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment/rpc"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SolrCloudCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/create"
	SolrCloudCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/update"
	SolrCloudCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/delete"
	SolrCloudCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/restore"
	SolrCloudCommandController_Restart_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/restart"
	SolrCloudCommandController_Pause_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/pause"
	SolrCloudCommandController_Unpause_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController/unpause"
)

// SolrCloudCommandControllerClient is the client API for SolrCloudCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolrCloudCommandControllerClient interface {
	// create solr-cloud
	Create(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error)
	// update an existing solr-cloud
	Update(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error)
	// delete an existing solr-cloud
	Delete(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error)
	// restore a deleted solr-cloud
	Restore(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error)
	// restart a solr-cloud running in a environment.
	// solr-cloud is restarted by deleting running "solr" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error)
	// pause a solr-cloud running in a environment.
	// solr-cloud is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error)
	// unpause a previously paused solr-cloud running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the solr-cloud.
	Unpause(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error)
}

type solrCloudCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSolrCloudCommandControllerClient(cc grpc.ClientConnInterface) SolrCloudCommandControllerClient {
	return &solrCloudCommandControllerClient{cc}
}

func (c *solrCloudCommandControllerClient) Create(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudCommandControllerClient) Update(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudCommandControllerClient) Delete(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudCommandControllerClient) Restore(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudCommandControllerClient) Restart(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudCommandControllerClient) Pause(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudCommandControllerClient) Unpause(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolrCloudCommandControllerServer is the server API for SolrCloudCommandController service.
// All implementations should embed UnimplementedSolrCloudCommandControllerServer
// for forward compatibility
type SolrCloudCommandControllerServer interface {
	// create solr-cloud
	Create(context.Context, *SolrCloud) (*SolrCloud, error)
	// update an existing solr-cloud
	Update(context.Context, *SolrCloud) (*SolrCloud, error)
	// delete an existing solr-cloud
	Delete(context.Context, *SolrCloudId) (*SolrCloud, error)
	// restore a deleted solr-cloud
	Restore(context.Context, *SolrCloud) (*SolrCloud, error)
	// restart a solr-cloud running in a environment.
	// solr-cloud is restarted by deleting running "solr" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *SolrCloudId) (*SolrCloud, error)
	// pause a solr-cloud running in a environment.
	// solr-cloud is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(context.Context, *SolrCloudId) (*SolrCloud, error)
	// unpause a previously paused solr-cloud running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the solr-cloud.
	Unpause(context.Context, *SolrCloudId) (*SolrCloud, error)
}

// UnimplementedSolrCloudCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSolrCloudCommandControllerServer struct {
}

func (UnimplementedSolrCloudCommandControllerServer) Create(context.Context, *SolrCloud) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSolrCloudCommandControllerServer) Update(context.Context, *SolrCloud) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSolrCloudCommandControllerServer) Delete(context.Context, *SolrCloudId) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSolrCloudCommandControllerServer) Restore(context.Context, *SolrCloud) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedSolrCloudCommandControllerServer) Restart(context.Context, *SolrCloudId) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedSolrCloudCommandControllerServer) Pause(context.Context, *SolrCloudId) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedSolrCloudCommandControllerServer) Unpause(context.Context, *SolrCloudId) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}

// UnsafeSolrCloudCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolrCloudCommandControllerServer will
// result in compilation errors.
type UnsafeSolrCloudCommandControllerServer interface {
	mustEmbedUnimplementedSolrCloudCommandControllerServer()
}

func RegisterSolrCloudCommandControllerServer(s grpc.ServiceRegistrar, srv SolrCloudCommandControllerServer) {
	s.RegisterService(&SolrCloudCommandController_ServiceDesc, srv)
}

func _SolrCloudCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Create(ctx, req.(*SolrCloud))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Update(ctx, req.(*SolrCloud))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Delete(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Restore(ctx, req.(*SolrCloud))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Restart(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Pause(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudCommandControllerServer).Unpause(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

// SolrCloudCommandController_ServiceDesc is the grpc.ServiceDesc for SolrCloudCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolrCloudCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudCommandController",
	HandlerType: (*SolrCloudCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _SolrCloudCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _SolrCloudCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _SolrCloudCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _SolrCloudCommandController_Restore_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _SolrCloudCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _SolrCloudCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _SolrCloudCommandController_Unpause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/solr/rpc/service.proto",
}

const (
	SolrCloudQueryController_List_FullMethodName                = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/list"
	SolrCloudQueryController_GetById_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/getById"
	SolrCloudQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findByProductId"
	SolrCloudQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findByEnvironmentId"
	SolrCloudQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findByKubeClusterId"
	SolrCloudQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/getPassword"
	SolrCloudQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController/findPods"
)

// SolrCloudQueryControllerClient is the client API for SolrCloudQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolrCloudQueryControllerClient interface {
	// list all solr-clouds on planton cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*SolrCloudList, error)
	// look up solr-cloud using solr-cloud id
	GetById(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error)
	// find solr-clouds by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*SolrClouds, error)
	// find solr-clouds by environment
	FindByEnvironmentId(ctx context.Context, in *rpc1.EnvironmentId, opts ...grpc.CallOption) (*SolrClouds, error)
	// find solr-clouds by kubernetes cloud
	FindByKubeClusterId(ctx context.Context, in *rpc2.KubeClusterId, opts ...grpc.CallOption) (*SolrClouds, error)
	// look up solr-cloud sasl password
	// password is retrieved from the kubernetes cloud.
	GetPassword(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloudPassword, error)
	// lookup pods of a solr-cloud deployed to a environment
	FindPods(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*resource.Pods, error)
}

type solrCloudQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSolrCloudQueryControllerClient(cc grpc.ClientConnInterface) SolrCloudQueryControllerClient {
	return &solrCloudQueryControllerClient{cc}
}

func (c *solrCloudQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*SolrCloudList, error) {
	out := new(SolrCloudList)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) GetById(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*SolrClouds, error) {
	out := new(SolrClouds)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *rpc1.EnvironmentId, opts ...grpc.CallOption) (*SolrClouds, error) {
	out := new(SolrClouds)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *rpc2.KubeClusterId, opts ...grpc.CallOption) (*SolrClouds, error) {
	out := new(SolrClouds)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) GetPassword(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloudPassword, error) {
	out := new(SolrCloudPassword)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudQueryControllerClient) FindPods(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*resource.Pods, error) {
	out := new(resource.Pods)
	err := c.cc.Invoke(ctx, SolrCloudQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolrCloudQueryControllerServer is the server API for SolrCloudQueryController service.
// All implementations should embed UnimplementedSolrCloudQueryControllerServer
// for forward compatibility
type SolrCloudQueryControllerServer interface {
	// list all solr-clouds on planton cloud for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*SolrCloudList, error)
	// look up solr-cloud using solr-cloud id
	GetById(context.Context, *SolrCloudId) (*SolrCloud, error)
	// find solr-clouds by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *rpc.ProductId) (*SolrClouds, error)
	// find solr-clouds by environment
	FindByEnvironmentId(context.Context, *rpc1.EnvironmentId) (*SolrClouds, error)
	// find solr-clouds by kubernetes cloud
	FindByKubeClusterId(context.Context, *rpc2.KubeClusterId) (*SolrClouds, error)
	// look up solr-cloud sasl password
	// password is retrieved from the kubernetes cloud.
	GetPassword(context.Context, *SolrCloudId) (*SolrCloudPassword, error)
	// lookup pods of a solr-cloud deployed to a environment
	FindPods(context.Context, *SolrCloudId) (*resource.Pods, error)
}

// UnimplementedSolrCloudQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSolrCloudQueryControllerServer struct {
}

func (UnimplementedSolrCloudQueryControllerServer) List(context.Context, *pagination.PageInfo) (*SolrCloudList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) GetById(context.Context, *SolrCloudId) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindByProductId(context.Context, *rpc.ProductId) (*SolrClouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindByEnvironmentId(context.Context, *rpc1.EnvironmentId) (*SolrClouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindByKubeClusterId(context.Context, *rpc2.KubeClusterId) (*SolrClouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) GetPassword(context.Context, *SolrCloudId) (*SolrCloudPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedSolrCloudQueryControllerServer) FindPods(context.Context, *SolrCloudId) (*resource.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeSolrCloudQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolrCloudQueryControllerServer will
// result in compilation errors.
type UnsafeSolrCloudQueryControllerServer interface {
	mustEmbedUnimplementedSolrCloudQueryControllerServer()
}

func RegisterSolrCloudQueryControllerServer(s grpc.ServiceRegistrar, srv SolrCloudQueryControllerServer) {
	s.RegisterService(&SolrCloudQueryController_ServiceDesc, srv)
}

func _SolrCloudQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).GetById(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindByProductId(ctx, req.(*rpc.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc1.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindByEnvironmentId(ctx, req.(*rpc1.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc2.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindByKubeClusterId(ctx, req.(*rpc2.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).GetPassword(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudQueryControllerServer).FindPods(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

// SolrCloudQueryController_ServiceDesc is the grpc.ServiceDesc for SolrCloudQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolrCloudQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudQueryController",
	HandlerType: (*SolrCloudQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _SolrCloudQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _SolrCloudQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _SolrCloudQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _SolrCloudQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _SolrCloudQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _SolrCloudQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _SolrCloudQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/solr/rpc/service.proto",
}

const (
	SolrCloudStackController_Preview_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController/preview"
	SolrCloudStackController_Apply_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController/apply"
)

// SolrCloudStackControllerClient is the client API for SolrCloudStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolrCloudStackControllerClient interface {
	// preview solr-cloud stack
	Preview(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error)
	// apply solr-cloud stack
	Apply(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error)
}

type solrCloudStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSolrCloudStackControllerClient(cc grpc.ClientConnInterface) SolrCloudStackControllerClient {
	return &solrCloudStackControllerClient{cc}
}

func (c *solrCloudStackControllerClient) Preview(ctx context.Context, in *SolrCloud, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudStackController_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solrCloudStackControllerClient) Apply(ctx context.Context, in *SolrCloudId, opts ...grpc.CallOption) (*SolrCloud, error) {
	out := new(SolrCloud)
	err := c.cc.Invoke(ctx, SolrCloudStackController_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolrCloudStackControllerServer is the server API for SolrCloudStackController service.
// All implementations should embed UnimplementedSolrCloudStackControllerServer
// for forward compatibility
type SolrCloudStackControllerServer interface {
	// preview solr-cloud stack
	Preview(context.Context, *SolrCloud) (*SolrCloud, error)
	// apply solr-cloud stack
	Apply(context.Context, *SolrCloudId) (*SolrCloud, error)
}

// UnimplementedSolrCloudStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedSolrCloudStackControllerServer struct {
}

func (UnimplementedSolrCloudStackControllerServer) Preview(context.Context, *SolrCloud) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedSolrCloudStackControllerServer) Apply(context.Context, *SolrCloudId) (*SolrCloud, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeSolrCloudStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolrCloudStackControllerServer will
// result in compilation errors.
type UnsafeSolrCloudStackControllerServer interface {
	mustEmbedUnimplementedSolrCloudStackControllerServer()
}

func RegisterSolrCloudStackControllerServer(s grpc.ServiceRegistrar, srv SolrCloudStackControllerServer) {
	s.RegisterService(&SolrCloudStackController_ServiceDesc, srv)
}

func _SolrCloudStackController_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudStackControllerServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudStackController_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudStackControllerServer).Preview(ctx, req.(*SolrCloud))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolrCloudStackController_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolrCloudId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolrCloudStackControllerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolrCloudStackController_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolrCloudStackControllerServer).Apply(ctx, req.(*SolrCloudId))
	}
	return interceptor(ctx, in, info, handler)
}

// SolrCloudStackController_ServiceDesc is the grpc.ServiceDesc for SolrCloudStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolrCloudStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.solr.rpc.SolrCloudStackController",
	HandlerType: (*SolrCloudStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preview",
			Handler:    _SolrCloudStackController_Preview_Handler,
		},
		{
			MethodName: "apply",
			Handler:    _SolrCloudStackController_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/solr/rpc/service.proto",
}
