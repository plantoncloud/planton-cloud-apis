// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/kubecluster/stack/gcp/model.proto

package gcp

import (
	cloudaccount "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount"
	folder "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount/provider/gcp/resource/folder"
	project "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount/provider/gcp/resource/project"
	kubecluster "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster"
	podservicesecondaryrangecidrsetnum "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster/provider/gcpgke/enums/podservicesecondaryrangecidrsetnum"
	operation "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/pulumi/operation"
	job "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job"
	progress "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/progress"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubeClusterGcpStackInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stack job
	StackJob *job.StackJob `protobuf:"bytes,1,opt,name=stack_job,json=stackJob,proto3" json:"stack_job,omitempty"`
	// pulumi stack credentials
	CredentialsInput *KubeClusterGcpStackCredentialsInput `protobuf:"bytes,2,opt,name=credentials_input,json=credentialsInput,proto3" json:"credentials_input,omitempty"`
	// inputs used for creating stack resources
	ResourceInput *KubeClusterGcpStackResourceInput `protobuf:"bytes,3,opt,name=resource_input,json=resourceInput,proto3" json:"resource_input,omitempty"`
}

func (x *KubeClusterGcpStackInput) Reset() {
	*x = KubeClusterGcpStackInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackInput) ProtoMessage() {}

func (x *KubeClusterGcpStackInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{0}
}

func (x *KubeClusterGcpStackInput) GetStackJob() *job.StackJob {
	if x != nil {
		return x.StackJob
	}
	return nil
}

func (x *KubeClusterGcpStackInput) GetCredentialsInput() *KubeClusterGcpStackCredentialsInput {
	if x != nil {
		return x.CredentialsInput
	}
	return nil
}

func (x *KubeClusterGcpStackInput) GetResourceInput() *KubeClusterGcpStackResourceInput {
	if x != nil {
		return x.ResourceInput
	}
	return nil
}

// stack credentials input
type KubeClusterGcpStackCredentialsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// google provider credential input
	Google *operation.GoogleProviderCredential `protobuf:"bytes,1,opt,name=google,proto3" json:"google,omitempty"`
}

func (x *KubeClusterGcpStackCredentialsInput) Reset() {
	*x = KubeClusterGcpStackCredentialsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackCredentialsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackCredentialsInput) ProtoMessage() {}

func (x *KubeClusterGcpStackCredentialsInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackCredentialsInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackCredentialsInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{1}
}

func (x *KubeClusterGcpStackCredentialsInput) GetGoogle() *operation.GoogleProviderCredential {
	if x != nil {
		return x.Google
	}
	return nil
}

// stack resource input
type KubeClusterGcpStackResourceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloud-account in which the kube-cluster resources are to be created.
	CloudAccount *cloudaccount.CloudAccount `protobuf:"bytes,1,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"`
	// details of the kube-cluster
	KubeCluster *kubecluster.KubeCluster `protobuf:"bytes,2,opt,name=kube_cluster,json=kubeCluster,proto3" json:"kube_cluster,omitempty"`
	// input required to configure kube-clusters.
	Container *KubeClusterGcpStackContainerInput `protobuf:"bytes,7,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *KubeClusterGcpStackResourceInput) Reset() {
	*x = KubeClusterGcpStackResourceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackResourceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackResourceInput) ProtoMessage() {}

func (x *KubeClusterGcpStackResourceInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackResourceInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackResourceInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{2}
}

func (x *KubeClusterGcpStackResourceInput) GetCloudAccount() *cloudaccount.CloudAccount {
	if x != nil {
		return x.CloudAccount
	}
	return nil
}

func (x *KubeClusterGcpStackResourceInput) GetKubeCluster() *kubecluster.KubeCluster {
	if x != nil {
		return x.KubeCluster
	}
	return nil
}

func (x *KubeClusterGcpStackResourceInput) GetContainer() *KubeClusterGcpStackContainerInput {
	if x != nil {
		return x.Container
	}
	return nil
}

type KubePodServiceSecondaryRangeCidr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod     string `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *KubePodServiceSecondaryRangeCidr) Reset() {
	*x = KubePodServiceSecondaryRangeCidr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubePodServiceSecondaryRangeCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePodServiceSecondaryRangeCidr) ProtoMessage() {}

func (x *KubePodServiceSecondaryRangeCidr) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePodServiceSecondaryRangeCidr.ProtoReflect.Descriptor instead.
func (*KubePodServiceSecondaryRangeCidr) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{3}
}

func (x *KubePodServiceSecondaryRangeCidr) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *KubePodServiceSecondaryRangeCidr) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// ingress ip address
type IngressIpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal ip address to configure the internal load balancer
	Internal string `protobuf:"bytes,1,opt,name=internal,proto3" json:"internal,omitempty"`
	// external ip address to configure the external load balancer
	External string `protobuf:"bytes,2,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *IngressIpAddress) Reset() {
	*x = IngressIpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressIpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressIpAddress) ProtoMessage() {}

func (x *IngressIpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressIpAddress.ProtoReflect.Descriptor instead.
func (*IngressIpAddress) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{4}
}

func (x *IngressIpAddress) GetInternal() string {
	if x != nil {
		return x.Internal
	}
	return ""
}

func (x *IngressIpAddress) GetExternal() string {
	if x != nil {
		return x.External
	}
	return ""
}

// kube-cluster gcp stack iam resource input
type KubeClusterGcpStackIamInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the gcp project created for kube-cluster
	ContainerClusterGcpProjectId string `protobuf:"bytes,1,opt,name=container_cluster_gcp_project_id,json=containerClusterGcpProjectId,proto3" json:"container_cluster_gcp_project_id,omitempty"`
}

func (x *KubeClusterGcpStackIamInput) Reset() {
	*x = KubeClusterGcpStackIamInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackIamInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackIamInput) ProtoMessage() {}

func (x *KubeClusterGcpStackIamInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackIamInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackIamInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{5}
}

func (x *KubeClusterGcpStackIamInput) GetContainerClusterGcpProjectId() string {
	if x != nil {
		return x.ContainerClusterGcpProjectId
	}
	return ""
}

// container stack cluster module input
type KubeClusterGcpStackContainerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *KubeClusterGcpStackContainerClusterInput `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Addon   *Addons                                   `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *KubeClusterGcpStackContainerInput) Reset() {
	*x = KubeClusterGcpStackContainerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackContainerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackContainerInput) ProtoMessage() {}

func (x *KubeClusterGcpStackContainerInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackContainerInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackContainerInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{6}
}

func (x *KubeClusterGcpStackContainerInput) GetCluster() *KubeClusterGcpStackContainerClusterInput {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *KubeClusterGcpStackContainerInput) GetAddon() *Addons {
	if x != nil {
		return x.Addon
	}
	return nil
}

// kube-cluster gcp stack kube-cluster module input
type KubeClusterGcpStackContainerClusterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster name
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// kube-cluster config parameters
	ContainerClusterConfig *ClusterConfig `protobuf:"bytes,3,opt,name=container_cluster_config,json=containerClusterConfig,proto3" json:"container_cluster_config,omitempty"`
}

func (x *KubeClusterGcpStackContainerClusterInput) Reset() {
	*x = KubeClusterGcpStackContainerClusterInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackContainerClusterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackContainerClusterInput) ProtoMessage() {}

func (x *KubeClusterGcpStackContainerClusterInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackContainerClusterInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackContainerClusterInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{7}
}

func (x *KubeClusterGcpStackContainerClusterInput) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *KubeClusterGcpStackContainerClusterInput) GetContainerClusterConfig() *ClusterConfig {
	if x != nil {
		return x.ContainerClusterConfig
	}
	return nil
}

// cluster config
type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api server ip cidr should be cut from the cidr block whitelisted in the vpc network to allow webhook calls.
	// when creating multiple kube-clusters, specifying an overlapping cidr would result in error.
	ApiServerIpCidr string `protobuf:"bytes,1,opt,name=api_server_ip_cidr,json=apiServerIpCidr,proto3" json:"api_server_ip_cidr,omitempty"`
	// secondary range set number to select for cora/dora kube-cluster.
	// one set can be used only by one cluster.
	// this value should be different for each kube-cluster in a gcp project.
	KubePodSecondaryRangeCidrSetNum podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum `protobuf:"varint,2,opt,name=kube_pod_secondary_range_cidr_set_num,json=kubePodSecondaryRangeCidrSetNum,proto3,enum=cloud.planton.apis.v1.code2cloud.deploy.kubecluster.provider.gcpgke.enums.podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum" json:"kube_pod_secondary_range_cidr_set_num,omitempty"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterConfig) GetApiServerIpCidr() string {
	if x != nil {
		return x.ApiServerIpCidr
	}
	return ""
}

func (x *ClusterConfig) GetKubePodSecondaryRangeCidrSetNum() podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum {
	if x != nil {
		return x.KubePodSecondaryRangeCidrSetNum
	}
	return podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum(0)
}

type Addons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inputs for istio addon
	Istio *AddonsIstio `protobuf:"bytes,1,opt,name=istio,proto3" json:"istio,omitempty"`
	// inputs for traefik addon
	Traefik *AddonsTraefik `protobuf:"bytes,2,opt,name=traefik,proto3" json:"traefik,omitempty"`
	// inputs for ingress-nginx addon
	IngressNginx *AddonsIngressNginx `protobuf:"bytes,3,opt,name=ingress_nginx,json=ingressNginx,proto3" json:"ingress_nginx,omitempty"`
	// inputs for linkerd addon
	Linkerd *AddonsLinkerd `protobuf:"bytes,4,opt,name=linkerd,proto3" json:"linkerd,omitempty"`
	// inputs for cert-manager addon
	CertManager *AddonsCertManager `protobuf:"bytes,5,opt,name=cert_manager,json=certManager,proto3" json:"cert_manager,omitempty"`
	// inputs for external-secrets addon
	ExternalSecrets *AddonsExternalSecrets `protobuf:"bytes,6,opt,name=external_secrets,json=externalSecrets,proto3" json:"external_secrets,omitempty"`
	// inputs for strimzi addon
	Strimzi *AddonsStrimzi `protobuf:"bytes,7,opt,name=strimzi,proto3" json:"strimzi,omitempty"`
	// inputs for reflector addon
	Reflector *AddonsReflector `protobuf:"bytes,8,opt,name=reflector,proto3" json:"reflector,omitempty"`
	// inputs for postgres-operator addon
	PostgresOperator *AddonsPostgresOperator `protobuf:"bytes,9,opt,name=postgres_operator,json=postgresOperator,proto3" json:"postgres_operator,omitempty"`
	// inputs for open-cost addon
	// https://www.opencost.io/
	OpenCost *AddonsOpenCost `protobuf:"bytes,10,opt,name=open_cost,json=openCost,proto3" json:"open_cost,omitempty"`
	// inputs for planton-cloud-kube-agent addon
	PlantonCloudKubeAgent *AddonsPlantonCloudKubeAgent `protobuf:"bytes,11,opt,name=planton_cloud_kube_agent,json=plantonCloudKubeAgent,proto3" json:"planton_cloud_kube_agent,omitempty"`
	// inputs for kube-cost addon
	// https://www.kubecost.com/
	KubeCost *AddonsKubeCost `protobuf:"bytes,12,opt,name=kube_cost,json=kubeCost,proto3" json:"kube_cost,omitempty"`
	// inputs for solr-operator addon
	// https://github.com/apache/solr-operator
	SolrOperator *AddonsSolrOperator `protobuf:"bytes,13,opt,name=solr_operator,json=solrOperator,proto3" json:"solr_operator,omitempty"`
	// inputs for cert-manager addon
	ExternalDns *AddonsExternalDns `protobuf:"bytes,14,opt,name=external_dns,json=externalDns,proto3" json:"external_dns,omitempty"`
}

func (x *Addons) Reset() {
	*x = Addons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addons) ProtoMessage() {}

func (x *Addons) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addons.ProtoReflect.Descriptor instead.
func (*Addons) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{9}
}

func (x *Addons) GetIstio() *AddonsIstio {
	if x != nil {
		return x.Istio
	}
	return nil
}

func (x *Addons) GetTraefik() *AddonsTraefik {
	if x != nil {
		return x.Traefik
	}
	return nil
}

func (x *Addons) GetIngressNginx() *AddonsIngressNginx {
	if x != nil {
		return x.IngressNginx
	}
	return nil
}

func (x *Addons) GetLinkerd() *AddonsLinkerd {
	if x != nil {
		return x.Linkerd
	}
	return nil
}

func (x *Addons) GetCertManager() *AddonsCertManager {
	if x != nil {
		return x.CertManager
	}
	return nil
}

func (x *Addons) GetExternalSecrets() *AddonsExternalSecrets {
	if x != nil {
		return x.ExternalSecrets
	}
	return nil
}

func (x *Addons) GetStrimzi() *AddonsStrimzi {
	if x != nil {
		return x.Strimzi
	}
	return nil
}

func (x *Addons) GetReflector() *AddonsReflector {
	if x != nil {
		return x.Reflector
	}
	return nil
}

func (x *Addons) GetPostgresOperator() *AddonsPostgresOperator {
	if x != nil {
		return x.PostgresOperator
	}
	return nil
}

func (x *Addons) GetOpenCost() *AddonsOpenCost {
	if x != nil {
		return x.OpenCost
	}
	return nil
}

func (x *Addons) GetPlantonCloudKubeAgent() *AddonsPlantonCloudKubeAgent {
	if x != nil {
		return x.PlantonCloudKubeAgent
	}
	return nil
}

func (x *Addons) GetKubeCost() *AddonsKubeCost {
	if x != nil {
		return x.KubeCost
	}
	return nil
}

func (x *Addons) GetSolrOperator() *AddonsSolrOperator {
	if x != nil {
		return x.SolrOperator
	}
	return nil
}

func (x *Addons) GetExternalDns() *AddonsExternalDns {
	if x != nil {
		return x.ExternalDns
	}
	return nil
}

type AddonsIstio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy istio service mesh
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// virtual service
	// create gateway while deploying istio. gateway is referenced in virtual service
	// istio-base config
	Base *AddonsIstioBase `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// istio-daemon config
	Daemon *AddonsIstioDaemon `protobuf:"bytes,3,opt,name=daemon,proto3" json:"daemon,omitempty"`
	// istio-ingress config
	Ingress *AddonsIstioIngress `protobuf:"bytes,4,opt,name=ingress,proto3" json:"ingress,omitempty"`
}

func (x *AddonsIstio) Reset() {
	*x = AddonsIstio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsIstio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsIstio) ProtoMessage() {}

func (x *AddonsIstio) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsIstio.ProtoReflect.Descriptor instead.
func (*AddonsIstio) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{10}
}

func (x *AddonsIstio) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AddonsIstio) GetBase() *AddonsIstioBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AddonsIstio) GetDaemon() *AddonsIstioDaemon {
	if x != nil {
		return x.Daemon
	}
	return nil
}

func (x *AddonsIstio) GetIngress() *AddonsIstioIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

// istio-base config
type AddonsIstioBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddonsIstioBase) Reset() {
	*x = AddonsIstioBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsIstioBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsIstioBase) ProtoMessage() {}

func (x *AddonsIstioBase) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsIstioBase.ProtoReflect.Descriptor instead.
func (*AddonsIstioBase) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{11}
}

// istio-daemon config
type AddonsIstioDaemon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddonsIstioDaemon) Reset() {
	*x = AddonsIstioDaemon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsIstioDaemon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsIstioDaemon) ProtoMessage() {}

func (x *AddonsIstioDaemon) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsIstioDaemon.ProtoReflect.Descriptor instead.
func (*AddonsIstioDaemon) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{12}
}

// istio-ingress config
type AddonsIstioIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy istio ingress controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsIstioIngress) Reset() {
	*x = AddonsIstioIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsIstioIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsIstioIngress) ProtoMessage() {}

func (x *AddonsIstioIngress) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsIstioIngress.ProtoReflect.Descriptor instead.
func (*AddonsIstioIngress) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{13}
}

func (x *AddonsIstioIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddonsTraefik struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy traefik ingress controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsTraefik) Reset() {
	*x = AddonsTraefik{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsTraefik) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsTraefik) ProtoMessage() {}

func (x *AddonsTraefik) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsTraefik.ProtoReflect.Descriptor instead.
func (*AddonsTraefik) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{14}
}

func (x *AddonsTraefik) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddonsIngressNginx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy ingress-nginx controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsIngressNginx) Reset() {
	*x = AddonsIngressNginx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsIngressNginx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsIngressNginx) ProtoMessage() {}

func (x *AddonsIngressNginx) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsIngressNginx.ProtoReflect.Descriptor instead.
func (*AddonsIngressNginx) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{15}
}

func (x *AddonsIngressNginx) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddonsLinkerd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy linkerd mesh
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsLinkerd) Reset() {
	*x = AddonsLinkerd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsLinkerd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsLinkerd) ProtoMessage() {}

func (x *AddonsLinkerd) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsLinkerd.ProtoReflect.Descriptor instead.
func (*AddonsLinkerd) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{16}
}

func (x *AddonsLinkerd) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddonsCertManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy cert-manager controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsCertManager) Reset() {
	*x = AddonsCertManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsCertManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsCertManager) ProtoMessage() {}

func (x *AddonsCertManager) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsCertManager.ProtoReflect.Descriptor instead.
func (*AddonsCertManager) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{17}
}

func (x *AddonsCertManager) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddonsExternalSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy external-secrets controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsExternalSecrets) Reset() {
	*x = AddonsExternalSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsExternalSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsExternalSecrets) ProtoMessage() {}

func (x *AddonsExternalSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsExternalSecrets.ProtoReflect.Descriptor instead.
func (*AddonsExternalSecrets) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{18}
}

func (x *AddonsExternalSecrets) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddonsStrimzi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy strimzi controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsStrimzi) Reset() {
	*x = AddonsStrimzi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsStrimzi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsStrimzi) ProtoMessage() {}

func (x *AddonsStrimzi) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsStrimzi.ProtoReflect.Descriptor instead.
func (*AddonsStrimzi) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{19}
}

func (x *AddonsStrimzi) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// https://github.com/emberstack/kubernetes-reflector
type AddonsReflector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy reflector controller
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsReflector) Reset() {
	*x = AddonsReflector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsReflector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsReflector) ProtoMessage() {}

func (x *AddonsReflector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsReflector.ProtoReflect.Descriptor instead.
func (*AddonsReflector) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{20}
}

func (x *AddonsReflector) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// configuration for postgres-operator addon
// https://postgres-operator.readthedocs.io
type AddonsPostgresOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy postgres-operator
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsPostgresOperator) Reset() {
	*x = AddonsPostgresOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsPostgresOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsPostgresOperator) ProtoMessage() {}

func (x *AddonsPostgresOperator) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsPostgresOperator.ProtoReflect.Descriptor instead.
func (*AddonsPostgresOperator) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{21}
}

func (x *AddonsPostgresOperator) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// configuration for open-cost addon
// https://www.opencost.io/
type AddonsOpenCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy open-cost
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// size of the disk for prometheus data used for storing open-cost data
	PrometheusDataDiskSizeGb string `protobuf:"bytes,2,opt,name=prometheus_data_disk_size_gb,json=prometheusDataDiskSizeGb,proto3" json:"prometheus_data_disk_size_gb,omitempty"`
}

func (x *AddonsOpenCost) Reset() {
	*x = AddonsOpenCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsOpenCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsOpenCost) ProtoMessage() {}

func (x *AddonsOpenCost) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsOpenCost.ProtoReflect.Descriptor instead.
func (*AddonsOpenCost) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{22}
}

func (x *AddonsOpenCost) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AddonsOpenCost) GetPrometheusDataDiskSizeGb() string {
	if x != nil {
		return x.PrometheusDataDiskSizeGb
	}
	return ""
}

// configuration for planton-cloud-kube-agent
type AddonsPlantonCloudKubeAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy planton-cloud-kube-agent
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// id of the company on planton-cloud
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// id of the kube-cluster on planton-cloud
	KubeClusterId string `protobuf:"bytes,3,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// client-id of the machine-account with permissions to post data to planton-cloud
	MachineAccountEmail string `protobuf:"bytes,4,opt,name=machine_account_email,json=machineAccountEmail,proto3" json:"machine_account_email,omitempty"`
	// client-secret of the machine-account with permissions to post data to planton-cloud
	ClientSecret string `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// docker image for planton-cloud-kube-agent
	// https://github.com/plantoncloud-inc/planton-cloud-kube-agent
	DockerImage string `protobuf:"bytes,6,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	// grpc api endpoint for planton-cloud-service
	PlantonCloudServiceApiEndpoint string `protobuf:"bytes,7,opt,name=planton_cloud_service_api_endpoint,json=plantonCloudServiceApiEndpoint,proto3" json:"planton_cloud_service_api_endpoint,omitempty"`
	// rest api endpoint for open-cost or kube-cost cost-analyzer
	OpenCostApiEndpoint string `protobuf:"bytes,8,opt,name=open_cost_api_endpoint,json=openCostApiEndpoint,proto3" json:"open_cost_api_endpoint,omitempty"`
	// polling intervalue in seconds
	OpenCostPollingIntervalSeconds int32 `protobuf:"varint,9,opt,name=open_cost_polling_interval_seconds,json=openCostPollingIntervalSeconds,proto3" json:"open_cost_polling_interval_seconds,omitempty"`
	// number of buffer minutes before the machine account token is rotated in a running deployment of planton-cloud-kube-agent.
	TokenExpirationBufferMinutes int32 `protobuf:"varint,10,opt,name=token_expiration_buffer_minutes,json=tokenExpirationBufferMinutes,proto3" json:"token_expiration_buffer_minutes,omitempty"`
	// polling intervalue to check for the expiration of the machine account token in a running deployment of planton-cloud-kube-agent.
	TokenExpirationCheckIntervalSeconds int32 `protobuf:"varint,11,opt,name=token_expiration_check_interval_seconds,json=tokenExpirationCheckIntervalSeconds,proto3" json:"token_expiration_check_interval_seconds,omitempty"`
}

func (x *AddonsPlantonCloudKubeAgent) Reset() {
	*x = AddonsPlantonCloudKubeAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsPlantonCloudKubeAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsPlantonCloudKubeAgent) ProtoMessage() {}

func (x *AddonsPlantonCloudKubeAgent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsPlantonCloudKubeAgent.ProtoReflect.Descriptor instead.
func (*AddonsPlantonCloudKubeAgent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{23}
}

func (x *AddonsPlantonCloudKubeAgent) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AddonsPlantonCloudKubeAgent) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetMachineAccountEmail() string {
	if x != nil {
		return x.MachineAccountEmail
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetPlantonCloudServiceApiEndpoint() string {
	if x != nil {
		return x.PlantonCloudServiceApiEndpoint
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetOpenCostApiEndpoint() string {
	if x != nil {
		return x.OpenCostApiEndpoint
	}
	return ""
}

func (x *AddonsPlantonCloudKubeAgent) GetOpenCostPollingIntervalSeconds() int32 {
	if x != nil {
		return x.OpenCostPollingIntervalSeconds
	}
	return 0
}

func (x *AddonsPlantonCloudKubeAgent) GetTokenExpirationBufferMinutes() int32 {
	if x != nil {
		return x.TokenExpirationBufferMinutes
	}
	return 0
}

func (x *AddonsPlantonCloudKubeAgent) GetTokenExpirationCheckIntervalSeconds() int32 {
	if x != nil {
		return x.TokenExpirationCheckIntervalSeconds
	}
	return 0
}

// configuration for kube-cost addon
// https://www.kubecost.com/
type AddonsKubeCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy kube-cost
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsKubeCost) Reset() {
	*x = AddonsKubeCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsKubeCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsKubeCost) ProtoMessage() {}

func (x *AddonsKubeCost) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsKubeCost.ProtoReflect.Descriptor instead.
func (*AddonsKubeCost) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{24}
}

func (x *AddonsKubeCost) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// configuration for solr-operator addon
// https://github.com/apache/solr-operator
type AddonsSolrOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy solr-operator
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsSolrOperator) Reset() {
	*x = AddonsSolrOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsSolrOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsSolrOperator) ProtoMessage() {}

func (x *AddonsSolrOperator) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsSolrOperator.ProtoReflect.Descriptor instead.
func (*AddonsSolrOperator) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{25}
}

func (x *AddonsSolrOperator) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// configuration for extnernal-dns addon
// https://github.com/kubernetes-sigs/external-dns
type AddonsExternalDns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to deploy external-dns
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AddonsExternalDns) Reset() {
	*x = AddonsExternalDns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsExternalDns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsExternalDns) ProtoMessage() {}

func (x *AddonsExternalDns) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsExternalDns.ProtoReflect.Descriptor instead.
func (*AddonsExternalDns) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{26}
}

func (x *AddonsExternalDns) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// kube-cluster gcp stack outputs
type KubeClusterGcpStackOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects  *KubeClusterGcpStackProjectsOutputs `protobuf:"bytes,1,opt,name=projects,proto3" json:"projects,omitempty"`
	Network   *KubeClusterGcpStackNetworkOutputs  `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Iam       *KubeClusterGcpStackIamOutputs      `protobuf:"bytes,3,opt,name=iam,proto3" json:"iam,omitempty"`
	Container *ClusterOutputs                     `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *KubeClusterGcpStackOutputs) Reset() {
	*x = KubeClusterGcpStackOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackOutputs) ProtoMessage() {}

func (x *KubeClusterGcpStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackOutputs.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackOutputs) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{27}
}

func (x *KubeClusterGcpStackOutputs) GetProjects() *KubeClusterGcpStackProjectsOutputs {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *KubeClusterGcpStackOutputs) GetNetwork() *KubeClusterGcpStackNetworkOutputs {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *KubeClusterGcpStackOutputs) GetIam() *KubeClusterGcpStackIamOutputs {
	if x != nil {
		return x.Iam
	}
	return nil
}

func (x *KubeClusterGcpStackOutputs) GetContainer() *ClusterOutputs {
	if x != nil {
		return x.Container
	}
	return nil
}

type ClusterOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster endpoint
	ClusterEndpoint string `protobuf:"bytes,1,opt,name=cluster_endpoint,json=clusterEndpoint,proto3" json:"cluster_endpoint,omitempty"`
	// base64 encoded cluster cert-authority-data
	ClusterCaData string `protobuf:"bytes,2,opt,name=cluster_ca_data,json=clusterCaData,proto3" json:"cluster_ca_data,omitempty"`
}

func (x *ClusterOutputs) Reset() {
	*x = ClusterOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOutputs) ProtoMessage() {}

func (x *ClusterOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOutputs.ProtoReflect.Descriptor instead.
func (*ClusterOutputs) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{28}
}

func (x *ClusterOutputs) GetClusterEndpoint() string {
	if x != nil {
		return x.ClusterEndpoint
	}
	return ""
}

func (x *ClusterOutputs) GetClusterCaData() string {
	if x != nil {
		return x.ClusterCaData
	}
	return ""
}

// kube-cluster gcp stack projects outputs
type KubeClusterGcpStackProjectsOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcpFolder               *folder.GcpFolder   `protobuf:"bytes,1,opt,name=gcp_folder,json=gcpFolder,proto3" json:"gcp_folder,omitempty"`
	ContainerClusterProject *project.GcpProject `protobuf:"bytes,2,opt,name=container_cluster_project,json=containerClusterProject,proto3" json:"container_cluster_project,omitempty"`
	VpcNetworkProject       *project.GcpProject `protobuf:"bytes,3,opt,name=vpc_network_project,json=vpcNetworkProject,proto3" json:"vpc_network_project,omitempty"`
}

func (x *KubeClusterGcpStackProjectsOutputs) Reset() {
	*x = KubeClusterGcpStackProjectsOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackProjectsOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackProjectsOutputs) ProtoMessage() {}

func (x *KubeClusterGcpStackProjectsOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackProjectsOutputs.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackProjectsOutputs) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{29}
}

func (x *KubeClusterGcpStackProjectsOutputs) GetGcpFolder() *folder.GcpFolder {
	if x != nil {
		return x.GcpFolder
	}
	return nil
}

func (x *KubeClusterGcpStackProjectsOutputs) GetContainerClusterProject() *project.GcpProject {
	if x != nil {
		return x.ContainerClusterProject
	}
	return nil
}

func (x *KubeClusterGcpStackProjectsOutputs) GetVpcNetworkProject() *project.GcpProject {
	if x != nil {
		return x.VpcNetworkProject
	}
	return nil
}

// kube-cluster gcp stack network outputs
type KubeClusterGcpStackNetworkOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nat ip address
	ExternalNatIpAddress string `protobuf:"bytes,1,opt,name=external_nat_ip_address,json=externalNatIpAddress,proto3" json:"external_nat_ip_address,omitempty"`
	// ingress ip addresses created for workloads
	IngressIpAddress *IngressIpAddress `protobuf:"bytes,2,opt,name=ingress_ip_address,json=ingressIpAddress,proto3" json:"ingress_ip_address,omitempty"`
}

func (x *KubeClusterGcpStackNetworkOutputs) Reset() {
	*x = KubeClusterGcpStackNetworkOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackNetworkOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackNetworkOutputs) ProtoMessage() {}

func (x *KubeClusterGcpStackNetworkOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackNetworkOutputs.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackNetworkOutputs) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{30}
}

func (x *KubeClusterGcpStackNetworkOutputs) GetExternalNatIpAddress() string {
	if x != nil {
		return x.ExternalNatIpAddress
	}
	return ""
}

func (x *KubeClusterGcpStackNetworkOutputs) GetIngressIpAddress() *IngressIpAddress {
	if x != nil {
		return x.IngressIpAddress
	}
	return nil
}

// kube-cluster gcp stack iam outputs
type KubeClusterGcpStackIamOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email of the google service account created for cert-manager addon to setup workload identity
	CertManagerGsaEmail string `protobuf:"bytes,1,opt,name=cert_manager_gsa_email,json=certManagerGsaEmail,proto3" json:"cert_manager_gsa_email,omitempty"`
	// email of the google service account created for external-secrets addon to setup workload identity
	ExternalSecretsGsaEmail string `protobuf:"bytes,2,opt,name=external_secrets_gsa_email,json=externalSecretsGsaEmail,proto3" json:"external_secrets_gsa_email,omitempty"`
	// email of the google service account created for external-dns addon to setup workload identity
	ExternalDnsGsaEmail string `protobuf:"bytes,3,opt,name=external_dns_gsa_email,json=externalDnsGsaEmail,proto3" json:"external_dns_gsa_email,omitempty"`
	// email of the google service account created for deploying workloads to kube-cluster
	WorkloadDeployerGsaEmail string `protobuf:"bytes,4,opt,name=workload_deployer_gsa_email,json=workloadDeployerGsaEmail,proto3" json:"workload_deployer_gsa_email,omitempty"`
	// base64 encoded key of workload deployer google service account
	WorkloadDeployerGsaKeyBase64 string `protobuf:"bytes,5,opt,name=workload_deployer_gsa_key_base64,json=workloadDeployerGsaKeyBase64,proto3" json:"workload_deployer_gsa_key_base64,omitempty"`
}

func (x *KubeClusterGcpStackIamOutputs) Reset() {
	*x = KubeClusterGcpStackIamOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackIamOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackIamOutputs) ProtoMessage() {}

func (x *KubeClusterGcpStackIamOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackIamOutputs.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackIamOutputs) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{31}
}

func (x *KubeClusterGcpStackIamOutputs) GetCertManagerGsaEmail() string {
	if x != nil {
		return x.CertManagerGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStackIamOutputs) GetExternalSecretsGsaEmail() string {
	if x != nil {
		return x.ExternalSecretsGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStackIamOutputs) GetExternalDnsGsaEmail() string {
	if x != nil {
		return x.ExternalDnsGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStackIamOutputs) GetWorkloadDeployerGsaEmail() string {
	if x != nil {
		return x.WorkloadDeployerGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStackIamOutputs) GetWorkloadDeployerGsaKeyBase64() string {
	if x != nil {
		return x.WorkloadDeployerGsaKeyBase64
	}
	return ""
}

// stack response
type KubeClusterGcpStackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stack-job progress event
	ProgressEvent *progress.StackJobProgressEvent `protobuf:"bytes,1,opt,name=progress_event,json=progressEvent,proto3" json:"progress_event,omitempty"`
	// stack outputs
	Outputs *KubeClusterGcpStackOutputs `protobuf:"bytes,3,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *KubeClusterGcpStackResponse) Reset() {
	*x = KubeClusterGcpStackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStackResponse) ProtoMessage() {}

func (x *KubeClusterGcpStackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStackResponse.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStackResponse) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP(), []int{32}
}

func (x *KubeClusterGcpStackResponse) GetProgressEvent() *progress.StackJobProgressEvent {
	if x != nil {
		return x.ProgressEvent
	}
	return nil
}

func (x *KubeClusterGcpStackResponse) GetOutputs() *KubeClusterGcpStackOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDesc = []byte{
	0x0a, 0x49, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x67, 0x63, 0x70, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x1a, 0x56, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x9b, 0x01, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x67, 0x6b, 0x65, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x69, 0x64, 0x72, 0x73,
	0x65, 0x74, 0x6e, 0x75, 0x6d, 0x2f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a,
	0x6f, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a, 0x6f, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x02, 0x0a, 0x18, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x23, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x60, 0x0a, 0x06,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0xe9,
	0x02, 0x0a, 0x20, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63,
	0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x20, 0x4b, 0x75,
	0x62, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x69, 0x64, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x1b, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x61, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x84, 0x02,
	0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x28, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa7, 0x02,
	0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2b, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0xe8, 0x01, 0x0a,
	0x25, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x97, 0x01, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70,
	0x67, 0x6b, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x63, 0x69, 0x64, 0x72, 0x73, 0x65, 0x74, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x6b, 0x65,
	0x4b, 0x75, 0x62, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x69, 0x64, 0x72,
	0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x1f, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x6f, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x69, 0x64,
	0x72, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0xde, 0x0c, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x05, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0x12, 0x66, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x65, 0x66, 0x69, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x65,
	0x66, 0x69, 0x6b, 0x52, 0x07, 0x74, 0x72, 0x61, 0x65, 0x66, 0x69, 0x6b, 0x12, 0x76, 0x0a, 0x0d,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x67, 0x69, 0x6e, 0x78, 0x12, 0x66, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x64, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x12, 0x73, 0x0a, 0x0c,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x7f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x7a, 0x69, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6d, 0x7a,
	0x69, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x7a, 0x69, 0x12, 0x6c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6a, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b,
	0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x6a, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x0d, 0x73,
	0x6f, 0x6c, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x62, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x12, 0x6b, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x11, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x42, 0x61, 0x73, 0x65,
	0x22, 0x13, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x54,
	0x72, 0x61, 0x65, 0x66, 0x69, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x2e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x29, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x29, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6d, 0x7a, 0x69, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6a, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x47, 0x62, 0x22, 0xe4, 0x04, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x45, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xf4, 0x03, 0x0a, 0x1a, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x6e, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x03, 0x69, 0x61,
	0x6d, 0x12, 0x6b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x67, 0x63, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x63,
	0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xba, 0x03, 0x0a, 0x22, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x67, 0x63,
	0x70, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x09, 0x67, 0x63, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x93, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x76, 0x70, 0x63, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x76,
	0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0xd9, 0x01, 0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4e, 0x61, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7d, 0x0a,
	0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcd, 0x02, 0x0a,
	0x1d, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x67,
	0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x73, 0x61, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6e, 0x73,
	0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x47, 0x73, 0x61,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x47, 0x73, 0x61, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72,
	0x47, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0xfa, 0x01, 0x0a,
	0x1b, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x42, 0xea, 0x03, 0x0a, 0x4b, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x63, 0x70, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2f, 0x67, 0x63, 0x70, 0xa2, 0x02, 0x09, 0x43, 0x50, 0x41, 0x56, 0x43, 0x44, 0x4b,
	0x53, 0x47, 0xaa, 0x02, 0x3d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x47,
	0x63, 0x70, 0xca, 0x02, 0x3d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5c, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x47,
	0x63, 0x70, 0xe2, 0x02, 0x49, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5c, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x47,
	0x63, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a,
	0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x3a, 0x3a, 0x4b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x3a, 0x3a, 0x47, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_goTypes = []interface{}{
	(*KubeClusterGcpStackInput)(nil),                 // 0: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackInput
	(*KubeClusterGcpStackCredentialsInput)(nil),      // 1: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackCredentialsInput
	(*KubeClusterGcpStackResourceInput)(nil),         // 2: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResourceInput
	(*KubePodServiceSecondaryRangeCidr)(nil),         // 3: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubePodServiceSecondaryRangeCidr
	(*IngressIpAddress)(nil),                         // 4: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.IngressIpAddress
	(*KubeClusterGcpStackIamInput)(nil),              // 5: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackIamInput
	(*KubeClusterGcpStackContainerInput)(nil),        // 6: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerInput
	(*KubeClusterGcpStackContainerClusterInput)(nil), // 7: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerClusterInput
	(*ClusterConfig)(nil),                            // 8: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.ClusterConfig
	(*Addons)(nil),                                   // 9: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons
	(*AddonsIstio)(nil),                              // 10: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstio
	(*AddonsIstioBase)(nil),                          // 11: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstioBase
	(*AddonsIstioDaemon)(nil),                        // 12: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstioDaemon
	(*AddonsIstioIngress)(nil),                       // 13: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstioIngress
	(*AddonsTraefik)(nil),                            // 14: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsTraefik
	(*AddonsIngressNginx)(nil),                       // 15: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIngressNginx
	(*AddonsLinkerd)(nil),                            // 16: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsLinkerd
	(*AddonsCertManager)(nil),                        // 17: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsCertManager
	(*AddonsExternalSecrets)(nil),                    // 18: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsExternalSecrets
	(*AddonsStrimzi)(nil),                            // 19: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsStrimzi
	(*AddonsReflector)(nil),                          // 20: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsReflector
	(*AddonsPostgresOperator)(nil),                   // 21: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsPostgresOperator
	(*AddonsOpenCost)(nil),                           // 22: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsOpenCost
	(*AddonsPlantonCloudKubeAgent)(nil),              // 23: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsPlantonCloudKubeAgent
	(*AddonsKubeCost)(nil),                           // 24: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsKubeCost
	(*AddonsSolrOperator)(nil),                       // 25: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsSolrOperator
	(*AddonsExternalDns)(nil),                        // 26: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsExternalDns
	(*KubeClusterGcpStackOutputs)(nil),               // 27: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackOutputs
	(*ClusterOutputs)(nil),                           // 28: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.ClusterOutputs
	(*KubeClusterGcpStackProjectsOutputs)(nil),       // 29: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackProjectsOutputs
	(*KubeClusterGcpStackNetworkOutputs)(nil),        // 30: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackNetworkOutputs
	(*KubeClusterGcpStackIamOutputs)(nil),            // 31: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackIamOutputs
	(*KubeClusterGcpStackResponse)(nil),              // 32: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResponse
	(*job.StackJob)(nil),                             // 33: cloud.planton.apis.v1.stack.job.StackJob
	(*operation.GoogleProviderCredential)(nil),       // 34: cloud.planton.apis.v1.commons.pulumi.operation.GoogleProviderCredential
	(*cloudaccount.CloudAccount)(nil),                // 35: cloud.planton.apis.v1.code2cloud.cloudaccount.CloudAccount
	(*kubecluster.KubeCluster)(nil),                  // 36: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster
	(podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum)(0), // 37: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.provider.gcpgke.enums.podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum
	(*folder.GcpFolder)(nil),               // 38: cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.folder.GcpFolder
	(*project.GcpProject)(nil),             // 39: cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject
	(*progress.StackJobProgressEvent)(nil), // 40: cloud.planton.apis.v1.stack.job.progress.StackJobProgressEvent
}
var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_depIdxs = []int32{
	33, // 0: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackInput.stack_job:type_name -> cloud.planton.apis.v1.stack.job.StackJob
	1,  // 1: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackInput.credentials_input:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackCredentialsInput
	2,  // 2: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackInput.resource_input:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResourceInput
	34, // 3: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackCredentialsInput.google:type_name -> cloud.planton.apis.v1.commons.pulumi.operation.GoogleProviderCredential
	35, // 4: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResourceInput.cloud_account:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.CloudAccount
	36, // 5: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResourceInput.kube_cluster:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster
	6,  // 6: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResourceInput.container:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerInput
	7,  // 7: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerInput.cluster:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerClusterInput
	9,  // 8: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerInput.addon:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons
	8,  // 9: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackContainerClusterInput.container_cluster_config:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.ClusterConfig
	37, // 10: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.ClusterConfig.kube_pod_secondary_range_cidr_set_num:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.provider.gcpgke.enums.podservicesecondaryrangecidrsetnum.GkeKubePodServiceSecondaryRangeCidrSetNum
	10, // 11: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.istio:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstio
	14, // 12: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.traefik:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsTraefik
	15, // 13: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.ingress_nginx:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIngressNginx
	16, // 14: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.linkerd:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsLinkerd
	17, // 15: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.cert_manager:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsCertManager
	18, // 16: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.external_secrets:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsExternalSecrets
	19, // 17: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.strimzi:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsStrimzi
	20, // 18: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.reflector:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsReflector
	21, // 19: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.postgres_operator:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsPostgresOperator
	22, // 20: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.open_cost:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsOpenCost
	23, // 21: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.planton_cloud_kube_agent:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsPlantonCloudKubeAgent
	24, // 22: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.kube_cost:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsKubeCost
	25, // 23: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.solr_operator:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsSolrOperator
	26, // 24: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.Addons.external_dns:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsExternalDns
	11, // 25: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstio.base:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstioBase
	12, // 26: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstio.daemon:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstioDaemon
	13, // 27: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstio.ingress:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.AddonsIstioIngress
	29, // 28: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackOutputs.projects:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackProjectsOutputs
	30, // 29: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackOutputs.network:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackNetworkOutputs
	31, // 30: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackOutputs.iam:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackIamOutputs
	28, // 31: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackOutputs.container:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.ClusterOutputs
	38, // 32: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackProjectsOutputs.gcp_folder:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.folder.GcpFolder
	39, // 33: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackProjectsOutputs.container_cluster_project:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject
	39, // 34: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackProjectsOutputs.vpc_network_project:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject
	4,  // 35: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackNetworkOutputs.ingress_ip_address:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.IngressIpAddress
	40, // 36: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResponse.progress_event:type_name -> cloud.planton.apis.v1.stack.job.progress.StackJobProgressEvent
	27, // 37: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackResponse.outputs:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.stack.gcp.KubeClusterGcpStackOutputs
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_init() }
func file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackCredentialsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackResourceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubePodServiceSecondaryRangeCidr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressIpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackIamInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackContainerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackContainerClusterInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsIstio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsIstioBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsIstioDaemon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsIstioIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsTraefik); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsIngressNginx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsLinkerd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsCertManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsExternalSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsStrimzi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsReflector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsPostgresOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsOpenCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsPlantonCloudKubeAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsKubeCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsSolrOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsExternalDns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackProjectsOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackNetworkOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackIamOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_stack_gcp_model_proto_depIdxs = nil
}
