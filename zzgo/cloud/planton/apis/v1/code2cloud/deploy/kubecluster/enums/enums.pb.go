// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/kubecluster/enums/enums.proto

package enums

import (
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/state/enums/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubeClusterEventType int32

const (
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_UNSPECIFIED                 KubeClusterEventType = 0
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STATE_CREATED               KubeClusterEventType = 1
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STATE_UPDATED               KubeClusterEventType = 2
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STATE_DELETED               KubeClusterEventType = 3
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STATE_RESTORED              KubeClusterEventType = 4
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_PROGRESS_UPDATED  KubeClusterEventType = 5
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_PREVIEW_REQUESTED KubeClusterEventType = 6
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_APPLY_REQUESTED   KubeClusterEventType = 7
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_APPLY_COMPLETED   KubeClusterEventType = 8
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_DESTROY_REQUESTED KubeClusterEventType = 9
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_DESTROY_COMPLETED KubeClusterEventType = 10
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STATE_PAUSED                KubeClusterEventType = 11
	KubeClusterEventType_KUBE_CLUSTER_EVENT_TYPE_STATE_UNPAUSED              KubeClusterEventType = 12
)

// Enum value maps for KubeClusterEventType.
var (
	KubeClusterEventType_name = map[int32]string{
		0:  "KUBE_CLUSTER_EVENT_TYPE_UNSPECIFIED",
		1:  "KUBE_CLUSTER_EVENT_TYPE_STATE_CREATED",
		2:  "KUBE_CLUSTER_EVENT_TYPE_STATE_UPDATED",
		3:  "KUBE_CLUSTER_EVENT_TYPE_STATE_DELETED",
		4:  "KUBE_CLUSTER_EVENT_TYPE_STATE_RESTORED",
		5:  "KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_PROGRESS_UPDATED",
		6:  "KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_PREVIEW_REQUESTED",
		7:  "KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_APPLY_REQUESTED",
		8:  "KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_APPLY_COMPLETED",
		9:  "KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_DESTROY_REQUESTED",
		10: "KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_DESTROY_COMPLETED",
		11: "KUBE_CLUSTER_EVENT_TYPE_STATE_PAUSED",
		12: "KUBE_CLUSTER_EVENT_TYPE_STATE_UNPAUSED",
	}
	KubeClusterEventType_value = map[string]int32{
		"KUBE_CLUSTER_EVENT_TYPE_UNSPECIFIED":                 0,
		"KUBE_CLUSTER_EVENT_TYPE_STATE_CREATED":               1,
		"KUBE_CLUSTER_EVENT_TYPE_STATE_UPDATED":               2,
		"KUBE_CLUSTER_EVENT_TYPE_STATE_DELETED":               3,
		"KUBE_CLUSTER_EVENT_TYPE_STATE_RESTORED":              4,
		"KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_PROGRESS_UPDATED":  5,
		"KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_PREVIEW_REQUESTED": 6,
		"KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_APPLY_REQUESTED":   7,
		"KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_APPLY_COMPLETED":   8,
		"KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_DESTROY_REQUESTED": 9,
		"KUBE_CLUSTER_EVENT_TYPE_STACK_JOB_DESTROY_COMPLETED": 10,
		"KUBE_CLUSTER_EVENT_TYPE_STATE_PAUSED":                11,
		"KUBE_CLUSTER_EVENT_TYPE_STATE_UNPAUSED":              12,
	}
)

func (x KubeClusterEventType) Enum() *KubeClusterEventType {
	p := new(KubeClusterEventType)
	*p = x
	return p
}

func (x KubeClusterEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeClusterEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[0].Descriptor()
}

func (KubeClusterEventType) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[0]
}

func (x KubeClusterEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeClusterEventType.Descriptor instead.
func (KubeClusterEventType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescGZIP(), []int{0}
}

// provider for kubernetes
type KubernetesProvider int32

const (
	KubernetesProvider_KUBERNETES_PROVIDER_UNSPECIFIED KubernetesProvider = 0
	// https://cloud.google.com/kubernetes-engine
	KubernetesProvider_GCP_GKE KubernetesProvider = 1
	// https://aws.amazon.com/eks/
	KubernetesProvider_AWS_EKS KubernetesProvider = 2
	// https://azure.microsoft.com/en-us/products/kubernetes-service
	KubernetesProvider_AZURE_AKS KubernetesProvider = 3
	// https://docs.digitalocean.com/products/kubernetes/
	KubernetesProvider_DIGITAL_OCEAN_DOKS KubernetesProvider = 4
)

// Enum value maps for KubernetesProvider.
var (
	KubernetesProvider_name = map[int32]string{
		0: "KUBERNETES_PROVIDER_UNSPECIFIED",
		1: "GCP_GKE",
		2: "AWS_EKS",
		3: "AZURE_AKS",
		4: "DIGITAL_OCEAN_DOKS",
	}
	KubernetesProvider_value = map[string]int32{
		"KUBERNETES_PROVIDER_UNSPECIFIED": 0,
		"GCP_GKE":                         1,
		"AWS_EKS":                         2,
		"AZURE_AKS":                       3,
		"DIGITAL_OCEAN_DOKS":              4,
	}
)

func (x KubernetesProvider) Enum() *KubernetesProvider {
	p := new(KubernetesProvider)
	*p = x
	return p
}

func (x KubernetesProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[1].Descriptor()
}

func (KubernetesProvider) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[1]
}

func (x KubernetesProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesProvider.Descriptor instead.
func (KubernetesProvider) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescGZIP(), []int{1}
}

// the recommended best practice to use uppercase entry names and prefix the entry with enum name have been intentionally ignored to as the values of the entries are intended to be used to name the gke release channel.
type GkeReleaseChannel int32

const (
	GkeReleaseChannel_GKE_RELEASE_CHANNEL_UNSPECIFIED GkeReleaseChannel = 0
	GkeReleaseChannel_REGULAR                         GkeReleaseChannel = 1
	GkeReleaseChannel_STABLE                          GkeReleaseChannel = 2
	GkeReleaseChannel_RAPID                           GkeReleaseChannel = 3
)

// Enum value maps for GkeReleaseChannel.
var (
	GkeReleaseChannel_name = map[int32]string{
		0: "GKE_RELEASE_CHANNEL_UNSPECIFIED",
		1: "REGULAR",
		2: "STABLE",
		3: "RAPID",
	}
	GkeReleaseChannel_value = map[string]int32{
		"GKE_RELEASE_CHANNEL_UNSPECIFIED": 0,
		"REGULAR":                         1,
		"STABLE":                          2,
		"RAPID":                           3,
	}
)

func (x GkeReleaseChannel) Enum() *GkeReleaseChannel {
	p := new(GkeReleaseChannel)
	*p = x
	return p
}

func (x GkeReleaseChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GkeReleaseChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[2].Descriptor()
}

func (GkeReleaseChannel) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[2]
}

func (x GkeReleaseChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GkeReleaseChannel.Descriptor instead.
func (GkeReleaseChannel) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescGZIP(), []int{2}
}

// a pair of cidr blocks is considered as a secondary range set
// a given range set can only be used for creating one cluster
// a maximum of 15 clusters can be created in each environment with this allocation
// 15 clusters should meet all the near term requirements.
// more enums can be added later using the left out cidr blocks from 10.0.0.0/15 chunk
type GkeKubePodServiceSecondaryRangeCidrSetNum int32

const (
	GkeKubePodServiceSecondaryRangeCidrSetNum_GKE_KUBE_POD_SERVICE_SECONDARY_RANGE_CIDR_SET_NUM_UNSPECIFIED GkeKubePodServiceSecondaryRangeCidrSetNum = 0
	GkeKubePodServiceSecondaryRangeCidrSetNum_ONE                                                           GkeKubePodServiceSecondaryRangeCidrSetNum = 1
	GkeKubePodServiceSecondaryRangeCidrSetNum_TWO                                                           GkeKubePodServiceSecondaryRangeCidrSetNum = 2
	GkeKubePodServiceSecondaryRangeCidrSetNum_THREE                                                         GkeKubePodServiceSecondaryRangeCidrSetNum = 3
	GkeKubePodServiceSecondaryRangeCidrSetNum_FOUR                                                          GkeKubePodServiceSecondaryRangeCidrSetNum = 4
	GkeKubePodServiceSecondaryRangeCidrSetNum_FIVE                                                          GkeKubePodServiceSecondaryRangeCidrSetNum = 5
	GkeKubePodServiceSecondaryRangeCidrSetNum_SIX                                                           GkeKubePodServiceSecondaryRangeCidrSetNum = 6
	GkeKubePodServiceSecondaryRangeCidrSetNum_SEVEN                                                         GkeKubePodServiceSecondaryRangeCidrSetNum = 7
)

// Enum value maps for GkeKubePodServiceSecondaryRangeCidrSetNum.
var (
	GkeKubePodServiceSecondaryRangeCidrSetNum_name = map[int32]string{
		0: "GKE_KUBE_POD_SERVICE_SECONDARY_RANGE_CIDR_SET_NUM_UNSPECIFIED",
		1: "ONE",
		2: "TWO",
		3: "THREE",
		4: "FOUR",
		5: "FIVE",
		6: "SIX",
		7: "SEVEN",
	}
	GkeKubePodServiceSecondaryRangeCidrSetNum_value = map[string]int32{
		"GKE_KUBE_POD_SERVICE_SECONDARY_RANGE_CIDR_SET_NUM_UNSPECIFIED": 0,
		"ONE":   1,
		"TWO":   2,
		"THREE": 3,
		"FOUR":  4,
		"FIVE":  5,
		"SIX":   6,
		"SEVEN": 7,
	}
)

func (x GkeKubePodServiceSecondaryRangeCidrSetNum) Enum() *GkeKubePodServiceSecondaryRangeCidrSetNum {
	p := new(GkeKubePodServiceSecondaryRangeCidrSetNum)
	*p = x
	return p
}

func (x GkeKubePodServiceSecondaryRangeCidrSetNum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GkeKubePodServiceSecondaryRangeCidrSetNum) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[3].Descriptor()
}

func (GkeKubePodServiceSecondaryRangeCidrSetNum) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[3]
}

func (x GkeKubePodServiceSecondaryRangeCidrSetNum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GkeKubePodServiceSecondaryRangeCidrSetNum.Descriptor instead.
func (GkeKubePodServiceSecondaryRangeCidrSetNum) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescGZIP(), []int{3}
}

type AwsEksWorkersManagementMode int32

const (
	AwsEksWorkersManagementMode_AWS_EKA_WORKERS_MANAGEMENT_MODE_UNSPECIFIED AwsEksWorkersManagementMode = 0
	AwsEksWorkersManagementMode_EC2                                         AwsEksWorkersManagementMode = 1
	AwsEksWorkersManagementMode_FARGATE                                     AwsEksWorkersManagementMode = 2
	AwsEksWorkersManagementMode_MANAGED_NODE_GROUPS                         AwsEksWorkersManagementMode = 3
)

// Enum value maps for AwsEksWorkersManagementMode.
var (
	AwsEksWorkersManagementMode_name = map[int32]string{
		0: "AWS_EKA_WORKERS_MANAGEMENT_MODE_UNSPECIFIED",
		1: "EC2",
		2: "FARGATE",
		3: "MANAGED_NODE_GROUPS",
	}
	AwsEksWorkersManagementMode_value = map[string]int32{
		"AWS_EKA_WORKERS_MANAGEMENT_MODE_UNSPECIFIED": 0,
		"EC2":                 1,
		"FARGATE":             2,
		"MANAGED_NODE_GROUPS": 3,
	}
)

func (x AwsEksWorkersManagementMode) Enum() *AwsEksWorkersManagementMode {
	p := new(AwsEksWorkersManagementMode)
	*p = x
	return p
}

func (x AwsEksWorkersManagementMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsEksWorkersManagementMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[4].Descriptor()
}

func (AwsEksWorkersManagementMode) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes[4]
}

func (x AwsEksWorkersManagementMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsEksWorkersManagementMode.Descriptor instead.
func (AwsEksWorkersManagementMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescGZIP(), []int{4}
}

var File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x45, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x1a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2a, 0xbb, 0x06, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x55,
	0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x25, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x18,
	0x80, 0xf9, 0x2b, 0x01, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b, 0x01,
	0xa0, 0xf9, 0x2b, 0x03, 0xa8, 0xf9, 0x2b, 0x01, 0x12, 0x3f, 0x0a, 0x25, 0x4b, 0x55, 0x42, 0x45,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x1a, 0x14, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b,
	0x01, 0xa0, 0xf9, 0x2b, 0x03, 0xa8, 0xf9, 0x2b, 0x01, 0x12, 0x3b, 0x0a, 0x25, 0x4b, 0x55, 0x42,
	0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x1a, 0x10, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x98, 0xf9,
	0x2b, 0x01, 0xa0, 0xf9, 0x2b, 0x04, 0x12, 0x3c, 0x0a, 0x26, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44,
	0x10, 0x04, 0x1a, 0x10, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b, 0x01,
	0xa0, 0xf9, 0x2b, 0x03, 0x12, 0x3c, 0x0a, 0x32, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x04, 0x88, 0xf9,
	0x2b, 0x01, 0x12, 0x41, 0x0a, 0x33, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x08, 0x98, 0xf9, 0x2b,
	0x01, 0xa0, 0xf9, 0x2b, 0x02, 0x12, 0x43, 0x0a, 0x31, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x07, 0x1a, 0x0c, 0x88, 0xf9,
	0x2b, 0x01, 0x98, 0xf9, 0x2b, 0x01, 0xa0, 0xf9, 0x2b, 0x03, 0x12, 0x3b, 0x0a, 0x31, 0x4b, 0x55,
	0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x08, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x12, 0x45, 0x0a, 0x33, 0x4b, 0x55, 0x42, 0x45, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x09,
	0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b, 0x01, 0xa0, 0xf9, 0x2b, 0x04, 0x12, 0x3d,
	0x0a, 0x33, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x12, 0x36, 0x0a,
	0x24, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b,
	0x01, 0xa0, 0xf9, 0x2b, 0x03, 0x12, 0x38, 0x0a, 0x26, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x0c, 0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b, 0x01, 0xa0, 0xf9, 0x2b, 0x03, 0x2a,
	0x7a, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x43,
	0x50, 0x5f, 0x47, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x57, 0x53, 0x5f, 0x45,
	0x4b, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4b,
	0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x4f,
	0x43, 0x45, 0x41, 0x4e, 0x5f, 0x44, 0x4f, 0x4b, 0x53, 0x10, 0x04, 0x2a, 0x5c, 0x0a, 0x11, 0x47,
	0x6b, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x1f, 0x47, 0x4b, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x41, 0x50, 0x49, 0x44, 0x10, 0x03, 0x2a, 0xb3, 0x01, 0x0a, 0x29, 0x47, 0x6b,
	0x65, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x69, 0x64,
	0x72, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x3d, 0x47, 0x4b, 0x45, 0x5f, 0x4b,
	0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x43, 0x49, 0x44, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x55, 0x52, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x49, 0x58, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x07, 0x2a,
	0x7d, 0x0a, 0x1b, 0x41, 0x77, 0x73, 0x45, 0x6b, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x2b, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x4b, 0x41, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52,
	0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x43, 0x32, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x52, 0x47,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x03, 0x42, 0xd0,
	0x03, 0x0a, 0x47, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x69, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0xa2, 0x02, 0x08, 0x43, 0x50, 0x41, 0x56, 0x43, 0x44, 0x4b, 0x45, 0xaa, 0x02,
	0x39, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02, 0x39, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5c, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x40, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a,
	0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x3a, 0x3a, 0x4b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_goTypes = []interface{}{
	(KubeClusterEventType)(0),                      // 0: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.enums.KubeClusterEventType
	(KubernetesProvider)(0),                        // 1: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.enums.KubernetesProvider
	(GkeReleaseChannel)(0),                         // 2: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.enums.GkeReleaseChannel
	(GkeKubePodServiceSecondaryRangeCidrSetNum)(0), // 3: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.enums.GkeKubePodServiceSecondaryRangeCidrSetNum
	(AwsEksWorkersManagementMode)(0),               // 4: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.enums.AwsEksWorkersManagementMode
}
var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_init() }
func file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_depIdxs,
		EnumInfos:         file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_enumTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_enums_enums_proto_depIdxs = nil
}
