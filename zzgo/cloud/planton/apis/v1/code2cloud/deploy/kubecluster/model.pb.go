// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model.proto

package kubecluster

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetesprovider "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount/provider/enums/kubernetesprovider"
	folder "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount/provider/gcp/resource/folder"
	project "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/cloudaccount/provider/gcp/resource/project"
	workersmanagementmode "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster/provider/awsaks/enums/workersmanagementmode"
	audit "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/audit"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/field/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/metadata/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/options"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// kube-cluster
type KubeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource api-version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// resource metadata
	Metadata *resource.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// resource spec
	Spec *KubeClusterSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// resource status
	Status *KubeClusterStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KubeCluster) Reset() {
	*x = KubeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeCluster) ProtoMessage() {}

func (x *KubeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeCluster.ProtoReflect.Descriptor instead.
func (*KubeCluster) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{0}
}

func (x *KubeCluster) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *KubeCluster) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KubeCluster) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KubeCluster) GetSpec() *KubeClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *KubeCluster) GetStatus() *KubeClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// KubeClusterSpec is a message type that defines the specifications for a kube-cluster on Planton Cloud.
type KubeClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// company_id is a required, immutable field that uniquely identifies the company associated with the kube-cluster.
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// endpoint_domains is a list of valid DNS domain names for the endpoints hosted in the environment.
	// Each endpoint domain name must already exist and be associated with the company on Planton Cloud.
	EndpointDomains []string `protobuf:"bytes,2,rep,name=endpoint_domains,json=endpointDomains,proto3" json:"endpoint_domains,omitempty"`
	// kube-cluster kubernetes addons spec
	KubernetesAddons *KubeClusterAddonsSpec `protobuf:"bytes,3,opt,name=kubernetes_addons,json=kubernetesAddons,proto3" json:"kubernetes_addons,omitempty"`
	// kubernetes_provider is an enumeration field that represents the kubernetes provider for the kube-cluster.
	KubernetesProvider kubernetesprovider.KubernetesProvider `protobuf:"varint,4,opt,name=kubernetes_provider,json=kubernetesProvider,proto3,enum=cloud.planton.apis.v1.code2cloud.cloudaccount.provider.enums.kubernetesprovider.KubernetesProvider" json:"kubernetes_provider,omitempty"`
	// gcp is a field for GCP-specific kube-cluster specifications.
	// This field is only set if the kubernetes-provider is GCP GKE.
	Gcp *KubeClusterGcpSpec `protobuf:"bytes,5,opt,name=gcp,proto3" json:"gcp,omitempty"`
	// aws is a field for AWS-specific kube-cluster specifications.
	// This field is only set if the kubernetes-provider is AWS EKS.
	Aws *KubeClusterAwsSpec `protobuf:"bytes,6,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *KubeClusterSpec) Reset() {
	*x = KubeClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterSpec) ProtoMessage() {}

func (x *KubeClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterSpec.ProtoReflect.Descriptor instead.
func (*KubeClusterSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{1}
}

func (x *KubeClusterSpec) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *KubeClusterSpec) GetEndpointDomains() []string {
	if x != nil {
		return x.EndpointDomains
	}
	return nil
}

func (x *KubeClusterSpec) GetKubernetesAddons() *KubeClusterAddonsSpec {
	if x != nil {
		return x.KubernetesAddons
	}
	return nil
}

func (x *KubeClusterSpec) GetKubernetesProvider() kubernetesprovider.KubernetesProvider {
	if x != nil {
		return x.KubernetesProvider
	}
	return kubernetesprovider.KubernetesProvider(0)
}

func (x *KubeClusterSpec) GetGcp() *KubeClusterGcpSpec {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *KubeClusterSpec) GetAws() *KubeClusterAwsSpec {
	if x != nil {
		return x.Aws
	}
	return nil
}

// kube-cluster kubernetes addons
type KubeClusterAddonsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to control postgres-operator installation
	IsInstallPostgresOperator bool `protobuf:"varint,1,opt,name=is_install_postgres_operator,json=isInstallPostgresOperator,proto3" json:"is_install_postgres_operator,omitempty"`
	// flag to control kafka-operator installation
	IsInstallKafkaOperator bool `protobuf:"varint,2,opt,name=is_install_kafka_operator,json=isInstallKafkaOperator,proto3" json:"is_install_kafka_operator,omitempty"`
	// flag to control solr-operator installation
	IsInstallSolrOperator bool `protobuf:"varint,3,opt,name=is_install_solr_operator,json=isInstallSolrOperator,proto3" json:"is_install_solr_operator,omitempty"`
	// flag to control kubecost
	IsInstallKubecost bool `protobuf:"varint,4,opt,name=is_install_kubecost,json=isInstallKubecost,proto3" json:"is_install_kubecost,omitempty"`
	// planton-cloud-kube-agent addon spec
	PlantonCloudKubeAgent *KubeClusterAddonsPlantonCloudKubeAgentSpec `protobuf:"bytes,5,opt,name=planton_cloud_kube_agent,json=plantonCloudKubeAgent,proto3" json:"planton_cloud_kube_agent,omitempty"`
	// flag to control ingress-nginx
	IsInstallIngressNginx bool `protobuf:"varint,6,opt,name=is_install_ingress_nginx,json=isInstallIngressNginx,proto3" json:"is_install_ingress_nginx,omitempty"`
	// flag to control istio
	IsInstallIstio bool `protobuf:"varint,7,opt,name=is_install_istio,json=isInstallIstio,proto3" json:"is_install_istio,omitempty"`
	// flag to control cert-manager
	IsInstallCertManager bool `protobuf:"varint,8,opt,name=is_install_cert_manager,json=isInstallCertManager,proto3" json:"is_install_cert_manager,omitempty"`
	// flag to control external-dns
	IsInstallExternalDns bool `protobuf:"varint,9,opt,name=is_install_external_dns,json=isInstallExternalDns,proto3" json:"is_install_external_dns,omitempty"`
	// flag to control external-secrets
	IsInstallExternalSecrets bool `protobuf:"varint,10,opt,name=is_install_external_secrets,json=isInstallExternalSecrets,proto3" json:"is_install_external_secrets,omitempty"`
}

func (x *KubeClusterAddonsSpec) Reset() {
	*x = KubeClusterAddonsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterAddonsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterAddonsSpec) ProtoMessage() {}

func (x *KubeClusterAddonsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterAddonsSpec.ProtoReflect.Descriptor instead.
func (*KubeClusterAddonsSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{2}
}

func (x *KubeClusterAddonsSpec) GetIsInstallPostgresOperator() bool {
	if x != nil {
		return x.IsInstallPostgresOperator
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallKafkaOperator() bool {
	if x != nil {
		return x.IsInstallKafkaOperator
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallSolrOperator() bool {
	if x != nil {
		return x.IsInstallSolrOperator
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallKubecost() bool {
	if x != nil {
		return x.IsInstallKubecost
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetPlantonCloudKubeAgent() *KubeClusterAddonsPlantonCloudKubeAgentSpec {
	if x != nil {
		return x.PlantonCloudKubeAgent
	}
	return nil
}

func (x *KubeClusterAddonsSpec) GetIsInstallIngressNginx() bool {
	if x != nil {
		return x.IsInstallIngressNginx
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallIstio() bool {
	if x != nil {
		return x.IsInstallIstio
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallCertManager() bool {
	if x != nil {
		return x.IsInstallCertManager
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallExternalDns() bool {
	if x != nil {
		return x.IsInstallExternalDns
	}
	return false
}

func (x *KubeClusterAddonsSpec) GetIsInstallExternalSecrets() bool {
	if x != nil {
		return x.IsInstallExternalSecrets
	}
	return false
}

// planton-cloud-kube-agent addon spec
type KubeClusterAddonsPlantonCloudKubeAgentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to control planton-cloud-kube-agent installation
	IsInstall bool `protobuf:"varint,1,opt,name=is_install,json=isInstall,proto3" json:"is_install,omitempty"`
	// machine_account_email is the email of the machine-account to be used by planton-cloud-kube-agent.
	// this is only created if the is_install is true.
	MachineAccountEmail string `protobuf:"bytes,2,opt,name=machine_account_email,json=machineAccountEmail,proto3" json:"machine_account_email,omitempty"`
}

func (x *KubeClusterAddonsPlantonCloudKubeAgentSpec) Reset() {
	*x = KubeClusterAddonsPlantonCloudKubeAgentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterAddonsPlantonCloudKubeAgentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterAddonsPlantonCloudKubeAgentSpec) ProtoMessage() {}

func (x *KubeClusterAddonsPlantonCloudKubeAgentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterAddonsPlantonCloudKubeAgentSpec.ProtoReflect.Descriptor instead.
func (*KubeClusterAddonsPlantonCloudKubeAgentSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{3}
}

func (x *KubeClusterAddonsPlantonCloudKubeAgentSpec) GetIsInstall() bool {
	if x != nil {
		return x.IsInstall
	}
	return false
}

func (x *KubeClusterAddonsPlantonCloudKubeAgentSpec) GetMachineAccountEmail() string {
	if x != nil {
		return x.MachineAccountEmail
	}
	return ""
}

// kube-cluster status
type KubeClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource lifecycle
	Lifecycle *resource.RunnableResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// resource audit info
	Audit *audit.ResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
	// id of the stack-job
	StackJobId string `protobuf:"bytes,97,opt,name=stack_job_id,json=stackJobId,proto3" json:"stack_job_id,omitempty"`
	// status of the kube-cluster in gcp
	Gcp *KubeClusterGcpStatus `protobuf:"bytes,1,opt,name=gcp,proto3" json:"gcp,omitempty"`
	// status of the kube-cluster in aws
	Aws *KubeClusterAwsStatus `protobuf:"bytes,2,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *KubeClusterStatus) Reset() {
	*x = KubeClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterStatus) ProtoMessage() {}

func (x *KubeClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterStatus.ProtoReflect.Descriptor instead.
func (*KubeClusterStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{4}
}

func (x *KubeClusterStatus) GetLifecycle() *resource.RunnableResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *KubeClusterStatus) GetAudit() *audit.ResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *KubeClusterStatus) GetStackJobId() string {
	if x != nil {
		return x.StackJobId
	}
	return ""
}

func (x *KubeClusterStatus) GetGcp() *KubeClusterGcpStatus {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *KubeClusterStatus) GetAws() *KubeClusterAwsStatus {
	if x != nil {
		return x.Aws
	}
	return nil
}

// specification for kube-cluster in google cloud
type KubeClusterGcpSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the gcp cloud account to be used for creating kube-cluster resources.
	GcpCloudAccountId string `protobuf:"bytes,1,opt,name=gcp_cloud_account_id,json=gcpCloudAccountId,proto3" json:"gcp_cloud_account_id,omitempty"`
	// gcp billing account id required to link kube-cluster projects.
	// planton cloud creates one/two gcp projects per kube-cluster.
	// these projects will be linked to this billing account.
	BillingAccountId string `protobuf:"bytes,2,opt,name=billing_account_id,json=billingAccountId,proto3" json:"billing_account_id,omitempty"`
	// valid gcp region in which to create the kube-cluster.
	// warning: kube-cluster will recreated if this value is updated.
	// https://cloud.google.com/compute/docs/regions-zones
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// valid gcp zone in which to create the kube-cluster.
	// https://cloud.google.com/compute/docs/regions-zones
	Zone string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	// flag to indicate that the cluster should be created in a shared vpc network.
	// warning: kube-cluster will be recreated if this is updated.
	// note: vpc network is created in a separate project when this is enabled.
	IsCreateSharedVpc bool `protobuf:"varint,5,opt,name=is_create_shared_vpc,json=isCreateSharedVpc,proto3" json:"is_create_shared_vpc,omitempty"`
	// flag to toggle workload logs for kube-cluster environment.
	// when workload logs is enabled, the logs from kubernetes pods would be sent to google cloud logging.
	// warning: enabling log forwarding increases cloud bills depending on the log volume.
	IsWorkloadLogsEnabled bool `protobuf:"varint,6,opt,name=is_workload_logs_enabled,json=isWorkloadLogsEnabled,proto3" json:"is_workload_logs_enabled,omitempty"`
	// cluster autoscaling configuration
	ClusterAutoscalingConfig *KubeClusterGcpClusterAutoscalingConfigSpec `protobuf:"bytes,7,opt,name=cluster_autoscaling_config,json=clusterAutoscalingConfig,proto3" json:"cluster_autoscaling_config,omitempty"`
	// kube-cluster node pools
	NodePools []*KubeClusterNodePoolGcp `protobuf:"bytes,8,rep,name=node_pools,json=nodePools,proto3" json:"node_pools,omitempty"`
}

func (x *KubeClusterGcpSpec) Reset() {
	*x = KubeClusterGcpSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpSpec) ProtoMessage() {}

func (x *KubeClusterGcpSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpSpec.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{5}
}

func (x *KubeClusterGcpSpec) GetGcpCloudAccountId() string {
	if x != nil {
		return x.GcpCloudAccountId
	}
	return ""
}

func (x *KubeClusterGcpSpec) GetBillingAccountId() string {
	if x != nil {
		return x.BillingAccountId
	}
	return ""
}

func (x *KubeClusterGcpSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KubeClusterGcpSpec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *KubeClusterGcpSpec) GetIsCreateSharedVpc() bool {
	if x != nil {
		return x.IsCreateSharedVpc
	}
	return false
}

func (x *KubeClusterGcpSpec) GetIsWorkloadLogsEnabled() bool {
	if x != nil {
		return x.IsWorkloadLogsEnabled
	}
	return false
}

func (x *KubeClusterGcpSpec) GetClusterAutoscalingConfig() *KubeClusterGcpClusterAutoscalingConfigSpec {
	if x != nil {
		return x.ClusterAutoscalingConfig
	}
	return nil
}

func (x *KubeClusterGcpSpec) GetNodePools() []*KubeClusterNodePoolGcp {
	if x != nil {
		return x.NodePools
	}
	return nil
}

// cluster autoscaling configuration for gke clusters.
// https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
type KubeClusterGcpClusterAutoscalingConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag to control autoscaling of kubernetes worker nodes.
	// When set to true, the cluster will automatically scale up or down based on the resource requirements.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The minimum number of CPU cores that the cluster can down up to when autoscaling is enabled.
	// The number of CPU cores is a sum across all nodes in the cluster.
	CpuMinCores int64 `protobuf:"varint,2,opt,name=cpu_min_cores,json=cpuMinCores,proto3" json:"cpu_min_cores,omitempty"`
	// The maximum number of CPU cores that the cluster can scale up to when autoscaling is enabled.
	// The number of CPU cores is a sum across all nodes in the cluster.
	CpuMaxCores int64 `protobuf:"varint,3,opt,name=cpu_max_cores,json=cpuMaxCores,proto3" json:"cpu_max_cores,omitempty"`
	// The minimum amount of memory in gigabytes (GB) that the cluster can scale down to when autoscaling is enabled.
	// The memory size is a sum across all nodes in the cluster.
	MemoryMinGb int64 `protobuf:"varint,4,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`
	// The maximum amount of memory in gigabytes (GB) that the cluster can scale up to when autoscaling is enabled.
	// The memory size is a sum across all nodes in the cluster.
	MemoryMaxGb int64 `protobuf:"varint,5,opt,name=memory_max_gb,json=memoryMaxGb,proto3" json:"memory_max_gb,omitempty"`
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) Reset() {
	*x = KubeClusterGcpClusterAutoscalingConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpClusterAutoscalingConfigSpec) ProtoMessage() {}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpClusterAutoscalingConfigSpec.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpClusterAutoscalingConfigSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{6}
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) GetCpuMinCores() int64 {
	if x != nil {
		return x.CpuMinCores
	}
	return 0
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) GetCpuMaxCores() int64 {
	if x != nil {
		return x.CpuMaxCores
	}
	return 0
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) GetMemoryMinGb() int64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *KubeClusterGcpClusterAutoscalingConfigSpec) GetMemoryMaxGb() int64 {
	if x != nil {
		return x.MemoryMaxGb
	}
	return 0
}

// status of the kube-cluster in gcp
type KubeClusterGcpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a folder is created with the cloud account folder as parent for the kube-cluster.
	// resources created for kube-cluster are linked to this folder as the parent.
	// children for a cloud account are the gcp projects in the kube-cluster.
	Folder *folder.GcpFolder `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder,omitempty"`
	// projects created on google cloud for this kube-cluster
	// this value is updated upon successful kube-cluster creation stack-job.
	// gcp project info for the kube-cluster project
	ContainerClusterProject *project.GcpProject `protobuf:"bytes,2,opt,name=container_cluster_project,json=containerClusterProject,proto3" json:"container_cluster_project,omitempty"`
	// gcp project info for vpc-network project
	// note: a separate project is only created when the kube-cluster is configured to use shared-vpc.
	// if the kube-cluster is not configured to use a shared-vpc, this project info will be same as
	// kube-cluster project details as the vpc-network is created in the same project as the kube-cluster.
	VpcNetworkProject *project.GcpProject `protobuf:"bytes,3,opt,name=vpc_network_project,json=vpcNetworkProject,proto3" json:"vpc_network_project,omitempty"`
	// kube-cluster endpoint.
	ClusterEndpoint string `protobuf:"bytes,4,opt,name=cluster_endpoint,json=clusterEndpoint,proto3" json:"cluster_endpoint,omitempty"`
	// kube-cluster certificate-authority-data.
	// this value is updated upon successful kube-cluster creation stack-job.
	ClusterCaData string `protobuf:"bytes,5,opt,name=cluster_ca_data,json=clusterCaData,proto3" json:"cluster_ca_data,omitempty"`
	// ip address of the NAT for egress traffic.
	// this is the ip addresses attached to all network requests originating from the kube-cluster.
	// if server receiving requires the exact ip of the microservice to add it the firewall rules, this is the one.
	// this value is updated upon successful kube-cluster creation stack-job.
	ExternalNatIp string `protobuf:"bytes,6,opt,name=external_nat_ip,json=externalNatIp,proto3" json:"external_nat_ip,omitempty"`
	// internal ingress ip.
	InternalIngressIp string `protobuf:"bytes,7,opt,name=internal_ingress_ip,json=internalIngressIp,proto3" json:"internal_ingress_ip,omitempty"`
	// internal ingress ip.
	ExternalIngressIp string `protobuf:"bytes,8,opt,name=external_ingress_ip,json=externalIngressIp,proto3" json:"external_ingress_ip,omitempty"`
	// google service account email created for cert-manager addon workload identity.
	// this is the service account that is used by cert-manager component to update dns records
	// to issue ssl certificates from letsencrypt provided for product endpoints.
	// this service account is configured with permissions required to manage dns entries for issuing certs.
	CertManagerGsaEmail string `protobuf:"bytes,9,opt,name=cert_manager_gsa_email,json=certManagerGsaEmail,proto3" json:"cert_manager_gsa_email,omitempty"`
	// google service account email created for external-secrets addon workload identity.
	// this is the service account that is used by external-secrets component to fetch secrets from the
	// secrets-manager on the cloud provider and make them available to the microservices.
	ExternalSecretsGsaEmail string `protobuf:"bytes,10,opt,name=external_secrets_gsa_email,json=externalSecretsGsaEmail,proto3" json:"external_secrets_gsa_email,omitempty"`
	// google service account email created for external-secrets addon workload identity.
	// this key for this service account is used for deploying workloads like microservices,
	// postgres clusters, kafka clusters onto the kube-cluster kube-cluster/s.
	WorkloadDeployerGsaEmail string `protobuf:"bytes,11,opt,name=workload_deployer_gsa_email,json=workloadDeployerGsaEmail,proto3" json:"workload_deployer_gsa_email,omitempty"`
	// base64 encoded workload deployer google service account key.
	// this service account key is used as a credential for deploying workloads like microservices,
	// postgres clusters, kafka clusters onto the kube-cluster kube-cluster/s.
	WorkloadDeployerGsaKeyBase64 string `protobuf:"bytes,12,opt,name=workload_deployer_gsa_key_base64,json=workloadDeployerGsaKeyBase64,proto3" json:"workload_deployer_gsa_key_base64,omitempty"`
	// google service account email created for external-dns addon workload identity.
	// this is the service account that is used by external-dns component to insert dns records in
	// google cloud dns when selected services or ingress resources are created on the GKE cluster.
	ExternalDnsGsaEmail string `protobuf:"bytes,13,opt,name=external_dns_gsa_email,json=externalDnsGsaEmail,proto3" json:"external_dns_gsa_email,omitempty"`
}

func (x *KubeClusterGcpStatus) Reset() {
	*x = KubeClusterGcpStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpStatus) ProtoMessage() {}

func (x *KubeClusterGcpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpStatus.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{7}
}

func (x *KubeClusterGcpStatus) GetFolder() *folder.GcpFolder {
	if x != nil {
		return x.Folder
	}
	return nil
}

func (x *KubeClusterGcpStatus) GetContainerClusterProject() *project.GcpProject {
	if x != nil {
		return x.ContainerClusterProject
	}
	return nil
}

func (x *KubeClusterGcpStatus) GetVpcNetworkProject() *project.GcpProject {
	if x != nil {
		return x.VpcNetworkProject
	}
	return nil
}

func (x *KubeClusterGcpStatus) GetClusterEndpoint() string {
	if x != nil {
		return x.ClusterEndpoint
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetClusterCaData() string {
	if x != nil {
		return x.ClusterCaData
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetExternalNatIp() string {
	if x != nil {
		return x.ExternalNatIp
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetInternalIngressIp() string {
	if x != nil {
		return x.InternalIngressIp
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetExternalIngressIp() string {
	if x != nil {
		return x.ExternalIngressIp
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetCertManagerGsaEmail() string {
	if x != nil {
		return x.CertManagerGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetExternalSecretsGsaEmail() string {
	if x != nil {
		return x.ExternalSecretsGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetWorkloadDeployerGsaEmail() string {
	if x != nil {
		return x.WorkloadDeployerGsaEmail
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetWorkloadDeployerGsaKeyBase64() string {
	if x != nil {
		return x.WorkloadDeployerGsaKeyBase64
	}
	return ""
}

func (x *KubeClusterGcpStatus) GetExternalDnsGsaEmail() string {
	if x != nil {
		return x.ExternalDnsGsaEmail
	}
	return ""
}

// gcp kube-cluster node pool
type KubeClusterNodePoolGcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node pool. The name is added as a label to the node pool that can be used to schedule workloads.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Unique ID of the node pool. Convention for the node-pool-id is 'np-<kube-cluster-id>-<node-pool-name>'.
	// Planton Cloud ignores the input value and assigns the ID as per the convention.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Type of machine for the node pool. For example, 'n2-custom-8-16234'.
	MachineType string `protobuf:"bytes,3,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Minimum number of nodes in the node pool. Defaults to 1.
	MinNodeCount int32 `protobuf:"varint,4,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// Maximum number of nodes in the node pool. Defaults to 1.
	MaxNodeCount int32 `protobuf:"varint,5,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// Flag to enable spot instances on the node pool. Defaults to false.
	IsSpotEnabled bool `protobuf:"varint,6,opt,name=is_spot_enabled,json=isSpotEnabled,proto3" json:"is_spot_enabled,omitempty"`
}

func (x *KubeClusterNodePoolGcp) Reset() {
	*x = KubeClusterNodePoolGcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterNodePoolGcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterNodePoolGcp) ProtoMessage() {}

func (x *KubeClusterNodePoolGcp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterNodePoolGcp.ProtoReflect.Descriptor instead.
func (*KubeClusterNodePoolGcp) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{8}
}

func (x *KubeClusterNodePoolGcp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeClusterNodePoolGcp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubeClusterNodePoolGcp) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *KubeClusterNodePoolGcp) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *KubeClusterNodePoolGcp) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *KubeClusterNodePoolGcp) GetIsSpotEnabled() bool {
	if x != nil {
		return x.IsSpotEnabled
	}
	return false
}

// specification for kube-cluster in aws
type KubeClusterAwsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the aws cloud account to be used for creating kube-cluster resources.
	AwsCloudAccountId string `protobuf:"bytes,1,opt,name=aws_cloud_account_id,json=awsCloudAccountId,proto3" json:"aws_cloud_account_id,omitempty"`
	// valid aws region in which to create the kube-cluster.
	// warning: kube-cluster will recreated if this value is updated.
	// https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// (optional) id of the vpc to be used for creating kube-cluster.
	// if an id is not provided, a new vpc will be created.
	// warning: kube-cluster will be recreated if this is updated.
	VpcId string `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// aws eks worker node-groups management mode
	WorkersManagementMode workersmanagementmode.AwsEksWorkersManagementMode `protobuf:"varint,4,opt,name=workers_management_mode,json=workersManagementMode,proto3,enum=cloud.planton.apis.v1.code2cloud.deploy.kubecluster.provider.awsaks.enums.workersmanagementmode.AwsEksWorkersManagementMode" json:"workers_management_mode,omitempty"`
}

func (x *KubeClusterAwsSpec) Reset() {
	*x = KubeClusterAwsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterAwsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterAwsSpec) ProtoMessage() {}

func (x *KubeClusterAwsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterAwsSpec.ProtoReflect.Descriptor instead.
func (*KubeClusterAwsSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{9}
}

func (x *KubeClusterAwsSpec) GetAwsCloudAccountId() string {
	if x != nil {
		return x.AwsCloudAccountId
	}
	return ""
}

func (x *KubeClusterAwsSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KubeClusterAwsSpec) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *KubeClusterAwsSpec) GetWorkersManagementMode() workersmanagementmode.AwsEksWorkersManagementMode {
	if x != nil {
		return x.WorkersManagementMode
	}
	return workersmanagementmode.AwsEksWorkersManagementMode(0)
}

// status of the kube-cluster in aws
type KubeClusterAwsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the vpc in which the kube-cluster is created
	ClusterVpcId string `protobuf:"bytes,1,opt,name=cluster_vpc_id,json=clusterVpcId,proto3" json:"cluster_vpc_id,omitempty"`
	// kube-cluster endpoint.
	ClusterEndpoint string `protobuf:"bytes,2,opt,name=cluster_endpoint,json=clusterEndpoint,proto3" json:"cluster_endpoint,omitempty"`
	// kube-cluster certificate-authority-data.
	// this value is updated upon successful kube-cluster creation stack-job.
	ClusterCaData string `protobuf:"bytes,3,opt,name=cluster_ca_data,json=clusterCaData,proto3" json:"cluster_ca_data,omitempty"`
}

func (x *KubeClusterAwsStatus) Reset() {
	*x = KubeClusterAwsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterAwsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterAwsStatus) ProtoMessage() {}

func (x *KubeClusterAwsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterAwsStatus.ProtoReflect.Descriptor instead.
func (*KubeClusterAwsStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{10}
}

func (x *KubeClusterAwsStatus) GetClusterVpcId() string {
	if x != nil {
		return x.ClusterVpcId
	}
	return ""
}

func (x *KubeClusterAwsStatus) GetClusterEndpoint() string {
	if x != nil {
		return x.ClusterEndpoint
	}
	return ""
}

func (x *KubeClusterAwsStatus) GetClusterCaData() string {
	if x != nil {
		return x.ClusterCaData
	}
	return ""
}

// wrapper for kube-cluster id
type KubeClusterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KubeClusterId) Reset() {
	*x = KubeClusterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterId) ProtoMessage() {}

func (x *KubeClusterId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterId.ProtoReflect.Descriptor instead.
func (*KubeClusterId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{11}
}

func (x *KubeClusterId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list of kube-clusters
type KubeClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*KubeCluster `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *KubeClusters) Reset() {
	*x = KubeClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusters) ProtoMessage() {}

func (x *KubeClusters) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusters.ProtoReflect.Descriptor instead.
func (*KubeClusters) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{12}
}

func (x *KubeClusters) GetEntries() []*KubeCluster {
	if x != nil {
		return x.Entries
	}
	return nil
}

// response for paginated query to list kube-clusters
type KubeClusterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPages int32          `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Entries    []*KubeCluster `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *KubeClusterList) Reset() {
	*x = KubeClusterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterList) ProtoMessage() {}

func (x *KubeClusterList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterList.ProtoReflect.Descriptor instead.
func (*KubeClusterList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{13}
}

func (x *KubeClusterList) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *KubeClusterList) GetEntries() []*KubeCluster {
	if x != nil {
		return x.Entries
	}
	return nil
}

// list of kube-cluster ids
type KubeClusterIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []string `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *KubeClusterIds) Reset() {
	*x = KubeClusterIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterIds) ProtoMessage() {}

func (x *KubeClusterIds) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterIds.ProtoReflect.Descriptor instead.
func (*KubeClusterIds) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{14}
}

func (x *KubeClusterIds) GetEntries() []string {
	if x != nil {
		return x.Entries
	}
	return nil
}

// input for paginated rpc requests with kube-cluster-id filter
type ListByKubeClusterIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page info
	PageInfo *pagination.PageInfo `protobuf:"bytes,1,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// kube-cluster id
	KubeClusterId string `protobuf:"bytes,2,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
}

func (x *ListByKubeClusterIdInput) Reset() {
	*x = ListByKubeClusterIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListByKubeClusterIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListByKubeClusterIdInput) ProtoMessage() {}

func (x *ListByKubeClusterIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListByKubeClusterIdInput.ProtoReflect.Descriptor instead.
func (*ListByKubeClusterIdInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{15}
}

func (x *ListByKubeClusterIdInput) GetPageInfo() *pagination.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListByKubeClusterIdInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

// google cloud region
type GcpRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier for the region ex: us-central1
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// description for the region ex: US Ohio
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GcpRegion) Reset() {
	*x = GcpRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpRegion) ProtoMessage() {}

func (x *GcpRegion) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpRegion.ProtoReflect.Descriptor instead.
func (*GcpRegion) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{16}
}

func (x *GcpRegion) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *GcpRegion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// list of gcp regions
type GcpRegions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GcpRegion `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GcpRegions) Reset() {
	*x = GcpRegions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpRegions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpRegions) ProtoMessage() {}

func (x *GcpRegions) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpRegions.ProtoReflect.Descriptor instead.
func (*GcpRegions) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{17}
}

func (x *GcpRegions) GetEntries() []*GcpRegion {
	if x != nil {
		return x.Entries
	}
	return nil
}

// wrapper for google region identifier
type GcpRegionIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GcpRegionIdentifier) Reset() {
	*x = GcpRegionIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpRegionIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpRegionIdentifier) ProtoMessage() {}

func (x *GcpRegionIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpRegionIdentifier.ProtoReflect.Descriptor instead.
func (*GcpRegionIdentifier) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{18}
}

func (x *GcpRegionIdentifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// google cloud zone
type GcpZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier to which the zone belongs to
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// identifier for the zone ex: us-central1-1
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// description for the region ex: US Ohio AZ 1
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GcpZone) Reset() {
	*x = GcpZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpZone) ProtoMessage() {}

func (x *GcpZone) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpZone.ProtoReflect.Descriptor instead.
func (*GcpZone) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{19}
}

func (x *GcpZone) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpZone) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *GcpZone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// wrapper for gcp zones
type GcpZones struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GcpZone `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GcpZones) Reset() {
	*x = GcpZones{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpZones) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpZones) ProtoMessage() {}

func (x *GcpZones) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpZones.ProtoReflect.Descriptor instead.
func (*GcpZones) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{20}
}

func (x *GcpZones) GetEntries() []*GcpZone {
	if x != nil {
		return x.Entries
	}
	return nil
}

type KubeClusterGcpNodePoolCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeClusterId string                  `protobuf:"bytes,1,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	GcpNodePool   *KubeClusterNodePoolGcp `protobuf:"bytes,2,opt,name=gcp_node_pool,json=gcpNodePool,proto3" json:"gcp_node_pool,omitempty"`
}

func (x *KubeClusterGcpNodePoolCommandInput) Reset() {
	*x = KubeClusterGcpNodePoolCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterGcpNodePoolCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterGcpNodePoolCommandInput) ProtoMessage() {}

func (x *KubeClusterGcpNodePoolCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterGcpNodePoolCommandInput.ProtoReflect.Descriptor instead.
func (*KubeClusterGcpNodePoolCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{21}
}

func (x *KubeClusterGcpNodePoolCommandInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *KubeClusterGcpNodePoolCommandInput) GetGcpNodePool() *KubeClusterNodePoolGcp {
	if x != nil {
		return x.GcpNodePool
	}
	return nil
}

// AddOrUpdateKubeClusterNodePoolGcpCommandInput is a protobuf message designed to add or update or restore a GCP Node Pool in a specific Kube Cluster.
type AddOrUpdateKubeClusterNodePoolGcpCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kube_cluster_id uniquely identifies the Kube Cluster to which the operation applies.
	KubeClusterId string `protobuf:"bytes,1,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// gcp_node_pool encapsulates the details about the Node Pool to be added or updated in the specified Kube Cluster.
	GcpNodePool *KubeClusterNodePoolGcp `protobuf:"bytes,2,opt,name=gcp_node_pool,json=gcpNodePool,proto3" json:"gcp_node_pool,omitempty"`
	// A descriptive message explaining the reason for the change or operation.
	// This is used for history logging purposes.
	VersionMessage string `protobuf:"bytes,3,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *AddOrUpdateKubeClusterNodePoolGcpCommandInput) Reset() {
	*x = AddOrUpdateKubeClusterNodePoolGcpCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateKubeClusterNodePoolGcpCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateKubeClusterNodePoolGcpCommandInput) ProtoMessage() {}

func (x *AddOrUpdateKubeClusterNodePoolGcpCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateKubeClusterNodePoolGcpCommandInput.ProtoReflect.Descriptor instead.
func (*AddOrUpdateKubeClusterNodePoolGcpCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{22}
}

func (x *AddOrUpdateKubeClusterNodePoolGcpCommandInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *AddOrUpdateKubeClusterNodePoolGcpCommandInput) GetGcpNodePool() *KubeClusterNodePoolGcp {
	if x != nil {
		return x.GcpNodePool
	}
	return nil
}

func (x *AddOrUpdateKubeClusterNodePoolGcpCommandInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// DeleteOrRestoreKubeClusterNodePoolGcpCommandInput is a protobuf message designed for operations that either
// soft delete (i.e., set an 'inactive' flag) or restore a GCP Node Pool in a specific Kube Cluster.
// Soft deleting is typically used as a safer alternative to permanent deletion, providing an option for recovery.
type DeleteKubeClusterNodePoolGcpCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kube_cluster_id is the unique identifier of the Kube Cluster that contains the Node Pool
	// which is targeted for deletion or restoration. This ID helps the server locate the specific Kube Cluster.
	KubeClusterId string `protobuf:"bytes,1,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// node_pool_id is the unique identifier of the Node Pool within the specified Kube Cluster
	// that needs to be deleted or restored. The server uses this ID to pinpoint the Node Pool for the operation.
	NodePoolId string `protobuf:"bytes,2,opt,name=node_pool_id,json=nodePoolId,proto3" json:"node_pool_id,omitempty"`
	// A descriptive message explaining the reason for the change or operation.
	// This is used for history logging purposes.
	VersionMessage string `protobuf:"bytes,3,opt,name=version_message,json=versionMessage,proto3" json:"version_message,omitempty"`
}

func (x *DeleteKubeClusterNodePoolGcpCommandInput) Reset() {
	*x = DeleteKubeClusterNodePoolGcpCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKubeClusterNodePoolGcpCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKubeClusterNodePoolGcpCommandInput) ProtoMessage() {}

func (x *DeleteKubeClusterNodePoolGcpCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKubeClusterNodePoolGcpCommandInput.ProtoReflect.Descriptor instead.
func (*DeleteKubeClusterNodePoolGcpCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteKubeClusterNodePoolGcpCommandInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *DeleteKubeClusterNodePoolGcpCommandInput) GetNodePoolId() string {
	if x != nil {
		return x.NodePoolId
	}
	return ""
}

func (x *DeleteKubeClusterNodePoolGcpCommandInput) GetVersionMessage() string {
	if x != nil {
		return x.VersionMessage
	}
	return ""
}

// GetByKubeClusterNodePoolGcpIdInput is a protobuf message used to retrieve a specific GCP Node Pool within a particular Kube Cluster.
// This message requires a Kube Cluster identifier and a Node Pool identifier to execute the retrieve value operation successfully.
type GetByKubeClusterNodePoolGcpIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kube_cluster_id is a unique identifier of the Kube Cluster. This ID is used by the server to identify
	// and locate the specific Kube Cluster that contains the Node Pool of interest.
	KubeClusterId string `protobuf:"bytes,1,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// node_pool_id is the unique identifier of the GCP Node Pool within the specified Kube Cluster.
	// The server uses this ID to locate the specific Node Pool to be retrieved.
	NodePoolId string `protobuf:"bytes,2,opt,name=node_pool_id,json=nodePoolId,proto3" json:"node_pool_id,omitempty"`
}

func (x *GetByKubeClusterNodePoolGcpIdInput) Reset() {
	*x = GetByKubeClusterNodePoolGcpIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByKubeClusterNodePoolGcpIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByKubeClusterNodePoolGcpIdInput) ProtoMessage() {}

func (x *GetByKubeClusterNodePoolGcpIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByKubeClusterNodePoolGcpIdInput.ProtoReflect.Descriptor instead.
func (*GetByKubeClusterNodePoolGcpIdInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{24}
}

func (x *GetByKubeClusterNodePoolGcpIdInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *GetByKubeClusterNodePoolGcpIdInput) GetNodePoolId() string {
	if x != nil {
		return x.NodePoolId
	}
	return ""
}

// kubernetes-cluster components
type KubeClusterComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kube-system
	KubeSystem *KubeSystem `protobuf:"bytes,1,opt,name=kube_system,json=kubeSystem,proto3" json:"kube_system,omitempty"`
	// istio-system and istio-ingress
	// https://github.com/istio/istio
	Istio *Istio `protobuf:"bytes,2,opt,name=istio,proto3" json:"istio,omitempty"`
	// cert-manager https://github.com/cert-manager/cert-manager
	CertManager *CertManager `protobuf:"bytes,3,opt,name=cert_manager,json=certManager,proto3" json:"cert_manager,omitempty"`
	// external-secrets https://github.com/external-secrets/external-secrets
	ExternalSecrets *ExternalSecrets `protobuf:"bytes,4,opt,name=external_secrets,json=externalSecrets,proto3" json:"external_secrets,omitempty"`
	// kafka-operator https://github.com/strimzi/strimzi-kafka-operator
	KafkaOperator *KafkaOperator `protobuf:"bytes,5,opt,name=kafka_operator,json=kafkaOperator,proto3" json:"kafka_operator,omitempty"`
	// postgres-operator https://github.com/zalando/postgres-operator
	PostgresOperator *PostgresOperator `protobuf:"bytes,6,opt,name=postgres_operator,json=postgresOperator,proto3" json:"postgres_operator,omitempty"`
	// prometheus https://github.com/prometheus/prometheus
	Prometheus *Prometheus `protobuf:"bytes,7,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	// open-cost https://github.com/opencost/opencost
	OpenCost *OpenCost `protobuf:"bytes,8,opt,name=open_cost,json=openCost,proto3" json:"open_cost,omitempty"`
	// planton-cloud-kube-agent https://github.com/plantoncloud-inc/planton-cloud-kube-agent
	PlantonCloudKubeAgent *PlantonCloudKubeAgent `protobuf:"bytes,9,opt,name=planton_cloud_kube_agent,json=plantonCloudKubeAgent,proto3" json:"planton_cloud_kube_agent,omitempty"`
	// kube-cost https://www.kubecost.com/
	KubeCost *KubeCost `protobuf:"bytes,10,opt,name=kube_cost,json=kubeCost,proto3" json:"kube_cost,omitempty"`
	// solr-operator https://github.com/apache/solr-operator
	SolrOperator *SolrOperator `protobuf:"bytes,11,opt,name=solr_operator,json=solrOperator,proto3" json:"solr_operator,omitempty"`
}

func (x *KubeClusterComponents) Reset() {
	*x = KubeClusterComponents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeClusterComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeClusterComponents) ProtoMessage() {}

func (x *KubeClusterComponents) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeClusterComponents.ProtoReflect.Descriptor instead.
func (*KubeClusterComponents) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{25}
}

func (x *KubeClusterComponents) GetKubeSystem() *KubeSystem {
	if x != nil {
		return x.KubeSystem
	}
	return nil
}

func (x *KubeClusterComponents) GetIstio() *Istio {
	if x != nil {
		return x.Istio
	}
	return nil
}

func (x *KubeClusterComponents) GetCertManager() *CertManager {
	if x != nil {
		return x.CertManager
	}
	return nil
}

func (x *KubeClusterComponents) GetExternalSecrets() *ExternalSecrets {
	if x != nil {
		return x.ExternalSecrets
	}
	return nil
}

func (x *KubeClusterComponents) GetKafkaOperator() *KafkaOperator {
	if x != nil {
		return x.KafkaOperator
	}
	return nil
}

func (x *KubeClusterComponents) GetPostgresOperator() *PostgresOperator {
	if x != nil {
		return x.PostgresOperator
	}
	return nil
}

func (x *KubeClusterComponents) GetPrometheus() *Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *KubeClusterComponents) GetOpenCost() *OpenCost {
	if x != nil {
		return x.OpenCost
	}
	return nil
}

func (x *KubeClusterComponents) GetPlantonCloudKubeAgent() *PlantonCloudKubeAgent {
	if x != nil {
		return x.PlantonCloudKubeAgent
	}
	return nil
}

func (x *KubeClusterComponents) GetKubeCost() *KubeCost {
	if x != nil {
		return x.KubeCost
	}
	return nil
}

func (x *KubeClusterComponents) GetSolrOperator() *SolrOperator {
	if x != nil {
		return x.SolrOperator
	}
	return nil
}

// kube-system components
type KubeSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *KubeSystem) Reset() {
	*x = KubeSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeSystem) ProtoMessage() {}

func (x *KubeSystem) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeSystem.ProtoReflect.Descriptor instead.
func (*KubeSystem) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{26}
}

func (x *KubeSystem) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// istio https://github.com/istio/istio
type Istio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *Istio) Reset() {
	*x = Istio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Istio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Istio) ProtoMessage() {}

func (x *Istio) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Istio.ProtoReflect.Descriptor instead.
func (*Istio) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{27}
}

func (x *Istio) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// cert-manager https://github.com/cert-manager/cert-manager
type CertManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *CertManager) Reset() {
	*x = CertManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertManager) ProtoMessage() {}

func (x *CertManager) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertManager.ProtoReflect.Descriptor instead.
func (*CertManager) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{28}
}

func (x *CertManager) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// external-secrets https://github.com/external-secrets/external-secrets
type ExternalSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *ExternalSecrets) Reset() {
	*x = ExternalSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSecrets) ProtoMessage() {}

func (x *ExternalSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSecrets.ProtoReflect.Descriptor instead.
func (*ExternalSecrets) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{29}
}

func (x *ExternalSecrets) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// kafka-operator https://github.com/strimzi/strimzi-kafka-operator
type KafkaOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *KafkaOperator) Reset() {
	*x = KafkaOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaOperator) ProtoMessage() {}

func (x *KafkaOperator) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaOperator.ProtoReflect.Descriptor instead.
func (*KafkaOperator) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{30}
}

func (x *KafkaOperator) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// postgres-operator https://github.com/zalando/postgres-operator
type PostgresOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *PostgresOperator) Reset() {
	*x = PostgresOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresOperator) ProtoMessage() {}

func (x *PostgresOperator) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresOperator.ProtoReflect.Descriptor instead.
func (*PostgresOperator) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{31}
}

func (x *PostgresOperator) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// prometheus https://github.com/prometheus/prometheus
type Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *Prometheus) Reset() {
	*x = Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus) ProtoMessage() {}

func (x *Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus.ProtoReflect.Descriptor instead.
func (*Prometheus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{32}
}

func (x *Prometheus) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// open-cost https://github.com/opencost/opencost
type OpenCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *OpenCost) Reset() {
	*x = OpenCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCost) ProtoMessage() {}

func (x *OpenCost) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCost.ProtoReflect.Descriptor instead.
func (*OpenCost) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{33}
}

func (x *OpenCost) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// planton-cloud-kube-agent https://github.com/plantoncloud-inc/planton-cloud-kube-agent
type PlantonCloudKubeAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *PlantonCloudKubeAgent) Reset() {
	*x = PlantonCloudKubeAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantonCloudKubeAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantonCloudKubeAgent) ProtoMessage() {}

func (x *PlantonCloudKubeAgent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantonCloudKubeAgent.ProtoReflect.Descriptor instead.
func (*PlantonCloudKubeAgent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{34}
}

func (x *PlantonCloudKubeAgent) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// kube-cost https://www.kubecost.com/
type KubeCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *KubeCost) Reset() {
	*x = KubeCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeCost) ProtoMessage() {}

func (x *KubeCost) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeCost.ProtoReflect.Descriptor instead.
func (*KubeCost) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{35}
}

func (x *KubeCost) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// solr-operator https://github.com/apache/solr-operator
type SolrOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*resource1.Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *SolrOperator) Reset() {
	*x = SolrOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolrOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolrOperator) ProtoMessage() {}

func (x *SolrOperator) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolrOperator.ProtoReflect.Descriptor instead.
func (*SolrOperator) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{36}
}

func (x *SolrOperator) GetPods() []*resource1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// input for rpc requests that require kubernetes-cluster id, namespace and pod id
type ByKubeClusterByNamespaceByPodInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the kubernetes-cluster
	KubeClusterId string `protobuf:"bytes,1,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// name of the kubernetes namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// id of the kubernetes pod
	PodId string `protobuf:"bytes,3,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
}

func (x *ByKubeClusterByNamespaceByPodInput) Reset() {
	*x = ByKubeClusterByNamespaceByPodInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByKubeClusterByNamespaceByPodInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByKubeClusterByNamespaceByPodInput) ProtoMessage() {}

func (x *ByKubeClusterByNamespaceByPodInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByKubeClusterByNamespaceByPodInput.ProtoReflect.Descriptor instead.
func (*ByKubeClusterByNamespaceByPodInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{37}
}

func (x *ByKubeClusterByNamespaceByPodInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *ByKubeClusterByNamespaceByPodInput) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ByKubeClusterByNamespaceByPodInput) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

// input for rpc requests that require kubernetes-cluster id, namespace
type ByKubeClusterByNamespaceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the kubernetes-cluster
	KubeClusterId string `protobuf:"bytes,1,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// name of the kubernetes namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ByKubeClusterByNamespaceInput) Reset() {
	*x = ByKubeClusterByNamespaceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByKubeClusterByNamespaceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByKubeClusterByNamespaceInput) ProtoMessage() {}

func (x *ByKubeClusterByNamespaceInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByKubeClusterByNamespaceInput.ProtoReflect.Descriptor instead.
func (*ByKubeClusterByNamespaceInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP(), []int{38}
}

func (x *ByKubeClusterByNamespaceInput) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *ByKubeClusterByNamespaceInput) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

var File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x33, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x69, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x56,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67,
	0x63, 0x70, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x7d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77,
	0x73, 0x61, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x51, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x45, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a,
	0x6f, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f,
	0x05, 0x0a, 0x0b, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0xe8, 0x02, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x99, 0x02, 0xba, 0x48, 0x95, 0x02, 0xba, 0x01, 0x6c, 0x0a, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x4f,
	0x6e, 0x6c, 0x79, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x53, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x4d, 0x75,
	0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x1a, 0x1e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x2e, 0x2a, 0x24, 0x27, 0x29,
	0xba, 0x01, 0x47, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x1a,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29, 0x72, 0x04, 0x10, 0x01, 0x18, 0x0f,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x2a, 0x8a, 0xb5, 0x18, 0x03, 0x6b, 0x38, 0x63, 0x98, 0xb5, 0x18,
	0x01, 0x88, 0xa6, 0x1d, 0x10, 0x90, 0xa6, 0x1d, 0x01, 0x9a, 0xa6, 0x1d, 0x13, 0x08, 0x06, 0x12,
	0x0f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x22, 0xb1, 0x04, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8, 0x18, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x9e, 0x01,
	0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x08, 0xc0, 0xb8, 0x18, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x59,
	0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x59, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x77, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x03, 0x61, 0x77, 0x73, 0x22, 0xa7, 0x05, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f,
	0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69,
	0x6f, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x2a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x15,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8, 0x18,
	0x01, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x9a, 0x03, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x48, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x03, 0x67, 0x63, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x5b, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03,
	0x61, 0x77, 0x73, 0x22, 0xe8, 0x06, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x14, 0x67, 0x63,
	0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xc0, 0xb8, 0x18, 0x01, 0xd0, 0xb8,
	0x18, 0x01, 0x52, 0x11, 0x67, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0xe8, 0x02, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xb9, 0x02, 0xba, 0x48, 0xb5, 0x02, 0xba, 0x01, 0x83, 0x01, 0x0a, 0x1b, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x4f, 0x6e, 0x6c, 0x79,
	0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28, 0x41, 0x2d, 0x5a, 0x2c, 0x61, 0x2d,
	0x7a, 0x2c, 0x20, 0x30, 0x2d, 0x39, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x79, 0x70, 0x68,
	0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a,
	0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0x27, 0x29,
	0xba, 0x01, 0x55, 0x0a, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x1c, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x18,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b,
	0x5e, 0x2d, 0x5d, 0x2e, 0x2a, 0x24, 0x27, 0x29, 0xba, 0x01, 0x50, 0x0a, 0x1b, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29, 0xd0, 0x01, 0x01, 0x52, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8,
	0x18, 0x01, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x70, 0x63, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6a, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x47, 0x63, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xdb,
	0x01, 0x0a, 0x2a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63,
	0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x70, 0x75, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x47, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x47, 0x62, 0x22, 0xae, 0x07, 0x0a,
	0x14, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x76,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x11, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x49, 0x70, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12,
	0x33, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x73, 0x61, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x46, 0x0a, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x47, 0x73, 0x61, 0x4b,
	0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x67, 0x73, 0x61, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x6e, 0x73, 0x47, 0x73, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x8f, 0x04,
	0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x63, 0x70, 0x12, 0xb5, 0x02, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa0, 0x02, 0xba, 0x48, 0x9c, 0x02, 0xba, 0x01,
	0x7a, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x28, 0x41, 0x2d, 0x5a, 0x2c, 0x61, 0x2d, 0x7a, 0x2c, 0x20, 0x30, 0x2d,
	0x39, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x4c, 0x0a, 0x12,
	0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x1a, 0x18, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5e, 0x5b, 0x5e, 0x2d, 0x5d, 0x2e, 0x2a, 0x24, 0x27, 0x29, 0xba, 0x01, 0x47, 0x0a, 0x12, 0x67,
	0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x15, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d,
	0x5d, 0x24, 0x27, 0x29, 0x72, 0x04, 0x10, 0x01, 0x18, 0x19, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xb8,
	0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8,
	0x18, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb9, 0x18, 0x01, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb9, 0x18, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xc7, 0x02, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x77, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x14, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xc0, 0xb8, 0x18, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x11,
	0x61, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xc0, 0xb8, 0x18, 0x00, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0xba, 0x01, 0x0a,
	0x17, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77,
	0x73, 0x61, 0x6b, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x2e, 0x41, 0x77, 0x73, 0x45, 0x6b, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0xc0, 0xb8,
	0x18, 0x01, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0d, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6a, 0x0a, 0x0c, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8e,
	0x01, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x2a, 0x0a, 0x0e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x09, 0x47, 0x63, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x66, 0x0a, 0x0a, 0x47, 0x63, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x63, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x07, 0x47, 0x63, 0x70, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x08, 0x47, 0x63,
	0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x63,
	0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbd,
	0x01, 0x0a, 0x22, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6f, 0x0a,
	0x0d, 0x67, 0x63, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x63,
	0x70, 0x52, 0x0b, 0x67, 0x63, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xf1,
	0x01, 0x0a, 0x2d, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x47, 0x63, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x0d, 0x67, 0x63, 0x70, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x63, 0x70, 0x52, 0x0b, 0x67, 0x63,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x47, 0x63, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x63,
	0x70, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x22, 0x87, 0x09, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x50,
	0x0a, 0x05, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x12, 0x63, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x0e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x72, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b,
	0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c,
	0x73, 0x6f, 0x6c, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x0a,
	0x4b, 0x75, 0x62, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x05, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70,
	0x6f, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x22, 0x61, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52,
	0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64,
	0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50,
	0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a,
	0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x5a, 0x0a,
	0x08, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x6f, 0x6c,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x6f, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x22, 0x42, 0x79,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x79, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x65, 0x0a,
	0x1d, 0x42, 0x79, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0xaa, 0x03, 0x0a, 0x41, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xa2, 0x02, 0x07,
	0x43, 0x50, 0x41, 0x56, 0x43, 0x44, 0x4b, 0xaa, 0x02, 0x33, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xca, 0x02, 0x33,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70,
	0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0xe2, 0x02, 0x3f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5c, 0x4b, 0x75,
	0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x39, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_goTypes = []interface{}{
	(*KubeCluster)(nil),                                    // 0: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster
	(*KubeClusterSpec)(nil),                                // 1: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterSpec
	(*KubeClusterAddonsSpec)(nil),                          // 2: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAddonsSpec
	(*KubeClusterAddonsPlantonCloudKubeAgentSpec)(nil),     // 3: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAddonsPlantonCloudKubeAgentSpec
	(*KubeClusterStatus)(nil),                              // 4: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterStatus
	(*KubeClusterGcpSpec)(nil),                             // 5: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpSpec
	(*KubeClusterGcpClusterAutoscalingConfigSpec)(nil),     // 6: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpClusterAutoscalingConfigSpec
	(*KubeClusterGcpStatus)(nil),                           // 7: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpStatus
	(*KubeClusterNodePoolGcp)(nil),                         // 8: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterNodePoolGcp
	(*KubeClusterAwsSpec)(nil),                             // 9: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAwsSpec
	(*KubeClusterAwsStatus)(nil),                           // 10: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAwsStatus
	(*KubeClusterId)(nil),                                  // 11: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterId
	(*KubeClusters)(nil),                                   // 12: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusters
	(*KubeClusterList)(nil),                                // 13: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterList
	(*KubeClusterIds)(nil),                                 // 14: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterIds
	(*ListByKubeClusterIdInput)(nil),                       // 15: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ListByKubeClusterIdInput
	(*GcpRegion)(nil),                                      // 16: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpRegion
	(*GcpRegions)(nil),                                     // 17: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpRegions
	(*GcpRegionIdentifier)(nil),                            // 18: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpRegionIdentifier
	(*GcpZone)(nil),                                        // 19: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpZone
	(*GcpZones)(nil),                                       // 20: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpZones
	(*KubeClusterGcpNodePoolCommandInput)(nil),             // 21: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpNodePoolCommandInput
	(*AddOrUpdateKubeClusterNodePoolGcpCommandInput)(nil),  // 22: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.AddOrUpdateKubeClusterNodePoolGcpCommandInput
	(*DeleteKubeClusterNodePoolGcpCommandInput)(nil),       // 23: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.DeleteKubeClusterNodePoolGcpCommandInput
	(*GetByKubeClusterNodePoolGcpIdInput)(nil),             // 24: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GetByKubeClusterNodePoolGcpIdInput
	(*KubeClusterComponents)(nil),                          // 25: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents
	(*KubeSystem)(nil),                                     // 26: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeSystem
	(*Istio)(nil),                                          // 27: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.Istio
	(*CertManager)(nil),                                    // 28: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.CertManager
	(*ExternalSecrets)(nil),                                // 29: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ExternalSecrets
	(*KafkaOperator)(nil),                                  // 30: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KafkaOperator
	(*PostgresOperator)(nil),                               // 31: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.PostgresOperator
	(*Prometheus)(nil),                                     // 32: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.Prometheus
	(*OpenCost)(nil),                                       // 33: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.OpenCost
	(*PlantonCloudKubeAgent)(nil),                          // 34: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.PlantonCloudKubeAgent
	(*KubeCost)(nil),                                       // 35: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCost
	(*SolrOperator)(nil),                                   // 36: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.SolrOperator
	(*ByKubeClusterByNamespaceByPodInput)(nil),             // 37: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ByKubeClusterByNamespaceByPodInput
	(*ByKubeClusterByNamespaceInput)(nil),                  // 38: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ByKubeClusterByNamespaceInput
	(*resource.Metadata)(nil),                              // 39: cloud.planton.apis.v1.commons.resource.Metadata
	(kubernetesprovider.KubernetesProvider)(0),             // 40: cloud.planton.apis.v1.code2cloud.cloudaccount.provider.enums.kubernetesprovider.KubernetesProvider
	(*resource.RunnableResourceLifecycle)(nil),             // 41: cloud.planton.apis.v1.commons.resource.RunnableResourceLifecycle
	(*audit.ResourceAudit)(nil),                            // 42: cloud.planton.apis.v1.commons.audit.ResourceAudit
	(*folder.GcpFolder)(nil),                               // 43: cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.folder.GcpFolder
	(*project.GcpProject)(nil),                             // 44: cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject
	(workersmanagementmode.AwsEksWorkersManagementMode)(0), // 45: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.provider.awsaks.enums.workersmanagementmode.AwsEksWorkersManagementMode
	(*pagination.PageInfo)(nil),                            // 46: cloud.planton.apis.v1.commons.pagination.PageInfo
	(*resource1.Pod)(nil),                                  // 47: cloud.planton.apis.v1.integration.kubernetes.resource.Pod
}
var file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_depIdxs = []int32{
	39, // 0: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	1,  // 1: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster.spec:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterSpec
	4,  // 2: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster.status:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterStatus
	2,  // 3: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterSpec.kubernetes_addons:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAddonsSpec
	40, // 4: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterSpec.kubernetes_provider:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.enums.kubernetesprovider.KubernetesProvider
	5,  // 5: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterSpec.gcp:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpSpec
	9,  // 6: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterSpec.aws:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAwsSpec
	3,  // 7: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAddonsSpec.planton_cloud_kube_agent:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAddonsPlantonCloudKubeAgentSpec
	41, // 8: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterStatus.lifecycle:type_name -> cloud.planton.apis.v1.commons.resource.RunnableResourceLifecycle
	42, // 9: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterStatus.audit:type_name -> cloud.planton.apis.v1.commons.audit.ResourceAudit
	7,  // 10: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterStatus.gcp:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpStatus
	10, // 11: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterStatus.aws:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAwsStatus
	6,  // 12: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpSpec.cluster_autoscaling_config:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpClusterAutoscalingConfigSpec
	8,  // 13: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpSpec.node_pools:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterNodePoolGcp
	43, // 14: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpStatus.folder:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.folder.GcpFolder
	44, // 15: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpStatus.container_cluster_project:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject
	44, // 16: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpStatus.vpc_network_project:type_name -> cloud.planton.apis.v1.code2cloud.cloudaccount.provider.gcp.resource.project.GcpProject
	45, // 17: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterAwsSpec.workers_management_mode:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.provider.awsaks.enums.workersmanagementmode.AwsEksWorkersManagementMode
	0,  // 18: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusters.entries:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster
	0,  // 19: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterList.entries:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCluster
	46, // 20: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ListByKubeClusterIdInput.page_info:type_name -> cloud.planton.apis.v1.commons.pagination.PageInfo
	16, // 21: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpRegions.entries:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpRegion
	19, // 22: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpZones.entries:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.GcpZone
	8,  // 23: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterGcpNodePoolCommandInput.gcp_node_pool:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterNodePoolGcp
	8,  // 24: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.AddOrUpdateKubeClusterNodePoolGcpCommandInput.gcp_node_pool:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterNodePoolGcp
	26, // 25: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.kube_system:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeSystem
	27, // 26: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.istio:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.Istio
	28, // 27: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.cert_manager:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.CertManager
	29, // 28: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.external_secrets:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ExternalSecrets
	30, // 29: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.kafka_operator:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KafkaOperator
	31, // 30: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.postgres_operator:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.PostgresOperator
	32, // 31: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.prometheus:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.Prometheus
	33, // 32: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.open_cost:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.OpenCost
	34, // 33: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.planton_cloud_kube_agent:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.PlantonCloudKubeAgent
	35, // 34: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.kube_cost:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCost
	36, // 35: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeClusterComponents.solr_operator:type_name -> cloud.planton.apis.v1.code2cloud.deploy.kubecluster.SolrOperator
	47, // 36: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeSystem.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 37: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.Istio.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 38: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.CertManager.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 39: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.ExternalSecrets.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 40: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KafkaOperator.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 41: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.PostgresOperator.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 42: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.Prometheus.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 43: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.OpenCost.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 44: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.PlantonCloudKubeAgent.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 45: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.KubeCost.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // 46: cloud.planton.apis.v1.code2cloud.deploy.kubecluster.SolrOperator.pods:type_name -> cloud.planton.apis.v1.integration.kubernetes.resource.Pod
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_init() }
func file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterAddonsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterAddonsPlantonCloudKubeAgentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpClusterAutoscalingConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterNodePoolGcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterAwsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterAwsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListByKubeClusterIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpRegions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpRegionIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpZones); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterGcpNodePoolCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateKubeClusterNodePoolGcpCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKubeClusterNodePoolGcpCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByKubeClusterNodePoolGcpIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeClusterComponents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Istio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantonCloudKubeAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolrOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByKubeClusterByNamespaceByPodInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByKubeClusterByNamespaceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_deploy_kubecluster_model_proto_depIdxs = nil
}
