// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/customendpoint/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/customendpoint/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/resource/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/iac/v1/stackjob/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomEndpointCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/previewCreate"
	CustomEndpointCommandController_Create_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/create"
	CustomEndpointCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/previewUpdate"
	CustomEndpointCommandController_Update_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/update"
	CustomEndpointCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/previewDelete"
	CustomEndpointCommandController_Delete_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/delete"
	CustomEndpointCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/previewRestore"
	CustomEndpointCommandController_Restore_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/restore"
	CustomEndpointCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/createStackJob"
	CustomEndpointCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/previewRefresh"
	CustomEndpointCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController/refresh"
)

// CustomEndpointCommandControllerClient is the client API for CustomEndpointCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEndpointCommandControllerClient interface {
	// preview create custom-endpoint
	PreviewCreate(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// create custom-endpoint
	Create(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// preview update an existing custom-endpoint
	PreviewUpdate(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// update an existing custom-endpoint
	Update(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// preview delete custom-endpoint
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// delete custom-endpoint
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// preview restoring a deleted custom-endpoint
	PreviewRestore(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// restore a deleted custom-endpoint
	Restore(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// create-stack-job for custom-endpoint
	CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// preview refresh a custom-endpoint that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// refresh a custom-endpoint that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
}

type customEndpointCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEndpointCommandControllerClient(cc grpc.ClientConnInterface) CustomEndpointCommandControllerClient {
	return &customEndpointCommandControllerClient{cc}
}

func (c *customEndpointCommandControllerClient) PreviewCreate(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Create(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Update(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) PreviewRestore(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Restore(ctx context.Context, in *model.CustomEndpoint, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEndpointCommandControllerServer is the server API for CustomEndpointCommandController service.
// All implementations should embed UnimplementedCustomEndpointCommandControllerServer
// for forward compatibility
type CustomEndpointCommandControllerServer interface {
	// preview create custom-endpoint
	PreviewCreate(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error)
	// create custom-endpoint
	Create(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error)
	// preview update an existing custom-endpoint
	PreviewUpdate(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error)
	// update an existing custom-endpoint
	Update(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error)
	// preview delete custom-endpoint
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CustomEndpoint, error)
	// delete custom-endpoint
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CustomEndpoint, error)
	// preview restoring a deleted custom-endpoint
	PreviewRestore(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error)
	// restore a deleted custom-endpoint
	Restore(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error)
	// create-stack-job for custom-endpoint
	CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.CustomEndpoint, error)
	// preview refresh a custom-endpoint that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CustomEndpoint, error)
	// refresh a custom-endpoint that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CustomEndpoint, error)
}

// UnimplementedCustomEndpointCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCustomEndpointCommandControllerServer struct {
}

func (UnimplementedCustomEndpointCommandControllerServer) PreviewCreate(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Create(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) PreviewUpdate(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Update(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) PreviewRestore(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Restore(context.Context, *model.CustomEndpoint) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeCustomEndpointCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEndpointCommandControllerServer will
// result in compilation errors.
type UnsafeCustomEndpointCommandControllerServer interface {
	mustEmbedUnimplementedCustomEndpointCommandControllerServer()
}

func RegisterCustomEndpointCommandControllerServer(s grpc.ServiceRegistrar, srv CustomEndpointCommandControllerServer) {
	s.RegisterService(&CustomEndpointCommandController_ServiceDesc, srv)
}

func _CustomEndpointCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).PreviewCreate(ctx, req.(*model.CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Create(ctx, req.(*model.CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).PreviewUpdate(ctx, req.(*model.CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Update(ctx, req.(*model.CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).PreviewRestore(ctx, req.(*model.CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Restore(ctx, req.(*model.CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).CreateStackJob(ctx, req.(*model2.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEndpointCommandController_ServiceDesc is the grpc.ServiceDesc for CustomEndpointCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEndpointCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointCommandController",
	HandlerType: (*CustomEndpointCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _CustomEndpointCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _CustomEndpointCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _CustomEndpointCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CustomEndpointCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _CustomEndpointCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CustomEndpointCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _CustomEndpointCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _CustomEndpointCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _CustomEndpointCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _CustomEndpointCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _CustomEndpointCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/customendpoint/service/command.proto",
}

const (
	CustomEndpointRouteCommandController_Add_FullMethodName    = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointRouteCommandController/add"
	CustomEndpointRouteCommandController_Update_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointRouteCommandController/update"
	CustomEndpointRouteCommandController_Delete_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointRouteCommandController/delete"
)

// CustomEndpointRouteCommandControllerClient is the client API for CustomEndpointRouteCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEndpointRouteCommandControllerClient interface {
	// add a route to a custom-endpoint
	Add(ctx context.Context, in *model.AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// update an existing route of a custom-endpoint
	Update(ctx context.Context, in *model.AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
	// delete a route for a custom-endpoint.
	Delete(ctx context.Context, in *model.DeleteOrRestoreCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error)
}

type customEndpointRouteCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEndpointRouteCommandControllerClient(cc grpc.ClientConnInterface) CustomEndpointRouteCommandControllerClient {
	return &customEndpointRouteCommandControllerClient{cc}
}

func (c *customEndpointRouteCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointRouteCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointRouteCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointRouteCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointRouteCommandControllerClient) Delete(ctx context.Context, in *model.DeleteOrRestoreCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*model.CustomEndpoint, error) {
	out := new(model.CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointRouteCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEndpointRouteCommandControllerServer is the server API for CustomEndpointRouteCommandController service.
// All implementations should embed UnimplementedCustomEndpointRouteCommandControllerServer
// for forward compatibility
type CustomEndpointRouteCommandControllerServer interface {
	// add a route to a custom-endpoint
	Add(context.Context, *model.AddOrUpdateCustomEndpointRouteCommandInput) (*model.CustomEndpoint, error)
	// update an existing route of a custom-endpoint
	Update(context.Context, *model.AddOrUpdateCustomEndpointRouteCommandInput) (*model.CustomEndpoint, error)
	// delete a route for a custom-endpoint.
	Delete(context.Context, *model.DeleteOrRestoreCustomEndpointRouteCommandInput) (*model.CustomEndpoint, error)
}

// UnimplementedCustomEndpointRouteCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCustomEndpointRouteCommandControllerServer struct {
}

func (UnimplementedCustomEndpointRouteCommandControllerServer) Add(context.Context, *model.AddOrUpdateCustomEndpointRouteCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCustomEndpointRouteCommandControllerServer) Update(context.Context, *model.AddOrUpdateCustomEndpointRouteCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomEndpointRouteCommandControllerServer) Delete(context.Context, *model.DeleteOrRestoreCustomEndpointRouteCommandInput) (*model.CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeCustomEndpointRouteCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEndpointRouteCommandControllerServer will
// result in compilation errors.
type UnsafeCustomEndpointRouteCommandControllerServer interface {
	mustEmbedUnimplementedCustomEndpointRouteCommandControllerServer()
}

func RegisterCustomEndpointRouteCommandControllerServer(s grpc.ServiceRegistrar, srv CustomEndpointRouteCommandControllerServer) {
	s.RegisterService(&CustomEndpointRouteCommandController_ServiceDesc, srv)
}

func _CustomEndpointRouteCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateCustomEndpointRouteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointRouteCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointRouteCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointRouteCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateCustomEndpointRouteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointRouteCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateCustomEndpointRouteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointRouteCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointRouteCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointRouteCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateCustomEndpointRouteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointRouteCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteOrRestoreCustomEndpointRouteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointRouteCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointRouteCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointRouteCommandControllerServer).Delete(ctx, req.(*model.DeleteOrRestoreCustomEndpointRouteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEndpointRouteCommandController_ServiceDesc is the grpc.ServiceDesc for CustomEndpointRouteCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEndpointRouteCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.customendpoint.service.CustomEndpointRouteCommandController",
	HandlerType: (*CustomEndpointRouteCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _CustomEndpointRouteCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CustomEndpointRouteCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CustomEndpointRouteCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/customendpoint/service/command.proto",
}
