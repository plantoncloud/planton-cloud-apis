// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/storagebucket/rpc/service.proto

package rpc

import (
	context "context"
	rpc1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment/rpc"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageBucketCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/create"
	StorageBucketCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/update"
	StorageBucketCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/delete"
	StorageBucketCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController/restore"
)

// StorageBucketCommandControllerClient is the client API for StorageBucketCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageBucketCommandControllerClient interface {
	// create storage-bucket
	Create(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error)
	// update an existing storage-bucket
	Update(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error)
	// delete an existing storage-bucket
	Delete(ctx context.Context, in *StorageBucketId, opts ...grpc.CallOption) (*StorageBucket, error)
	// restore a deleted storage-bucket
	Restore(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error)
}

type storageBucketCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBucketCommandControllerClient(cc grpc.ClientConnInterface) StorageBucketCommandControllerClient {
	return &storageBucketCommandControllerClient{cc}
}

func (c *storageBucketCommandControllerClient) Create(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketCommandControllerClient) Update(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketCommandControllerClient) Delete(ctx context.Context, in *StorageBucketId, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketCommandControllerClient) Restore(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageBucketCommandControllerServer is the server API for StorageBucketCommandController service.
// All implementations should embed UnimplementedStorageBucketCommandControllerServer
// for forward compatibility
type StorageBucketCommandControllerServer interface {
	// create storage-bucket
	Create(context.Context, *StorageBucket) (*StorageBucket, error)
	// update an existing storage-bucket
	Update(context.Context, *StorageBucket) (*StorageBucket, error)
	// delete an existing storage-bucket
	Delete(context.Context, *StorageBucketId) (*StorageBucket, error)
	// restore a deleted storage-bucket
	Restore(context.Context, *StorageBucket) (*StorageBucket, error)
}

// UnimplementedStorageBucketCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStorageBucketCommandControllerServer struct {
}

func (UnimplementedStorageBucketCommandControllerServer) Create(context.Context, *StorageBucket) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStorageBucketCommandControllerServer) Update(context.Context, *StorageBucket) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStorageBucketCommandControllerServer) Delete(context.Context, *StorageBucketId) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStorageBucketCommandControllerServer) Restore(context.Context, *StorageBucket) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeStorageBucketCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageBucketCommandControllerServer will
// result in compilation errors.
type UnsafeStorageBucketCommandControllerServer interface {
	mustEmbedUnimplementedStorageBucketCommandControllerServer()
}

func RegisterStorageBucketCommandControllerServer(s grpc.ServiceRegistrar, srv StorageBucketCommandControllerServer) {
	s.RegisterService(&StorageBucketCommandController_ServiceDesc, srv)
}

func _StorageBucketCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketCommandControllerServer).Create(ctx, req.(*StorageBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketCommandControllerServer).Update(ctx, req.(*StorageBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketCommandControllerServer).Delete(ctx, req.(*StorageBucketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketCommandControllerServer).Restore(ctx, req.(*StorageBucket))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageBucketCommandController_ServiceDesc is the grpc.ServiceDesc for StorageBucketCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageBucketCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketCommandController",
	HandlerType: (*StorageBucketCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _StorageBucketCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _StorageBucketCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _StorageBucketCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _StorageBucketCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/rpc/service.proto",
}

const (
	StorageBucketQueryController_List_FullMethodName                = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/list"
	StorageBucketQueryController_GetById_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/getById"
	StorageBucketQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/findByProductId"
	StorageBucketQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController/findByEnvironmentId"
)

// StorageBucketQueryControllerClient is the client API for StorageBucketQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageBucketQueryControllerClient interface {
	// list all storage-buckets on planton-cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*StorageBucketList, error)
	// look up a storage-bucket using storage-bucket id
	GetById(ctx context.Context, in *StorageBucketId, opts ...grpc.CallOption) (*StorageBucket, error)
	// find storage-buckets by product id.
	// response contains only objects that the authenticated user account id has viewer access to.
	FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*StorageBuckets, error)
	// find storage-buckets by environment id.
	// response contains only objects that the authenticated user account id has viewer access to.
	FindByEnvironmentId(ctx context.Context, in *rpc1.EnvironmentId, opts ...grpc.CallOption) (*StorageBuckets, error)
}

type storageBucketQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBucketQueryControllerClient(cc grpc.ClientConnInterface) StorageBucketQueryControllerClient {
	return &storageBucketQueryControllerClient{cc}
}

func (c *storageBucketQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*StorageBucketList, error) {
	out := new(StorageBucketList)
	err := c.cc.Invoke(ctx, StorageBucketQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketQueryControllerClient) GetById(ctx context.Context, in *StorageBucketId, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketQueryControllerClient) FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*StorageBuckets, error) {
	out := new(StorageBuckets)
	err := c.cc.Invoke(ctx, StorageBucketQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *rpc1.EnvironmentId, opts ...grpc.CallOption) (*StorageBuckets, error) {
	out := new(StorageBuckets)
	err := c.cc.Invoke(ctx, StorageBucketQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageBucketQueryControllerServer is the server API for StorageBucketQueryController service.
// All implementations should embed UnimplementedStorageBucketQueryControllerServer
// for forward compatibility
type StorageBucketQueryControllerServer interface {
	// list all storage-buckets on planton-cloud for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*StorageBucketList, error)
	// look up a storage-bucket using storage-bucket id
	GetById(context.Context, *StorageBucketId) (*StorageBucket, error)
	// find storage-buckets by product id.
	// response contains only objects that the authenticated user account id has viewer access to.
	FindByProductId(context.Context, *rpc.ProductId) (*StorageBuckets, error)
	// find storage-buckets by environment id.
	// response contains only objects that the authenticated user account id has viewer access to.
	FindByEnvironmentId(context.Context, *rpc1.EnvironmentId) (*StorageBuckets, error)
}

// UnimplementedStorageBucketQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStorageBucketQueryControllerServer struct {
}

func (UnimplementedStorageBucketQueryControllerServer) List(context.Context, *pagination.PageInfo) (*StorageBucketList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStorageBucketQueryControllerServer) GetById(context.Context, *StorageBucketId) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedStorageBucketQueryControllerServer) FindByProductId(context.Context, *rpc.ProductId) (*StorageBuckets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedStorageBucketQueryControllerServer) FindByEnvironmentId(context.Context, *rpc1.EnvironmentId) (*StorageBuckets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}

// UnsafeStorageBucketQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageBucketQueryControllerServer will
// result in compilation errors.
type UnsafeStorageBucketQueryControllerServer interface {
	mustEmbedUnimplementedStorageBucketQueryControllerServer()
}

func RegisterStorageBucketQueryControllerServer(s grpc.ServiceRegistrar, srv StorageBucketQueryControllerServer) {
	s.RegisterService(&StorageBucketQueryController_ServiceDesc, srv)
}

func _StorageBucketQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketQueryControllerServer).GetById(ctx, req.(*StorageBucketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketQueryControllerServer).FindByProductId(ctx, req.(*rpc.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc1.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketQueryControllerServer).FindByEnvironmentId(ctx, req.(*rpc1.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageBucketQueryController_ServiceDesc is the grpc.ServiceDesc for StorageBucketQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageBucketQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketQueryController",
	HandlerType: (*StorageBucketQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _StorageBucketQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _StorageBucketQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _StorageBucketQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _StorageBucketQueryController_FindByEnvironmentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/rpc/service.proto",
}

const (
	StorageBucketStackController_Preview_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController/preview"
	StorageBucketStackController_Apply_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController/apply"
)

// StorageBucketStackControllerClient is the client API for StorageBucketStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageBucketStackControllerClient interface {
	// preview storage-bucket stack
	Preview(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error)
	// apply storage-bucket stack
	Apply(ctx context.Context, in *StorageBucketId, opts ...grpc.CallOption) (*StorageBucket, error)
}

type storageBucketStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBucketStackControllerClient(cc grpc.ClientConnInterface) StorageBucketStackControllerClient {
	return &storageBucketStackControllerClient{cc}
}

func (c *storageBucketStackControllerClient) Preview(ctx context.Context, in *StorageBucket, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketStackController_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBucketStackControllerClient) Apply(ctx context.Context, in *StorageBucketId, opts ...grpc.CallOption) (*StorageBucket, error) {
	out := new(StorageBucket)
	err := c.cc.Invoke(ctx, StorageBucketStackController_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageBucketStackControllerServer is the server API for StorageBucketStackController service.
// All implementations should embed UnimplementedStorageBucketStackControllerServer
// for forward compatibility
type StorageBucketStackControllerServer interface {
	// preview storage-bucket stack
	Preview(context.Context, *StorageBucket) (*StorageBucket, error)
	// apply storage-bucket stack
	Apply(context.Context, *StorageBucketId) (*StorageBucket, error)
}

// UnimplementedStorageBucketStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStorageBucketStackControllerServer struct {
}

func (UnimplementedStorageBucketStackControllerServer) Preview(context.Context, *StorageBucket) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedStorageBucketStackControllerServer) Apply(context.Context, *StorageBucketId) (*StorageBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeStorageBucketStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageBucketStackControllerServer will
// result in compilation errors.
type UnsafeStorageBucketStackControllerServer interface {
	mustEmbedUnimplementedStorageBucketStackControllerServer()
}

func RegisterStorageBucketStackControllerServer(s grpc.ServiceRegistrar, srv StorageBucketStackControllerServer) {
	s.RegisterService(&StorageBucketStackController_ServiceDesc, srv)
}

func _StorageBucketStackController_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketStackControllerServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketStackController_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketStackControllerServer).Preview(ctx, req.(*StorageBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBucketStackController_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageBucketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBucketStackControllerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBucketStackController_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBucketStackControllerServer).Apply(ctx, req.(*StorageBucketId))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageBucketStackController_ServiceDesc is the grpc.ServiceDesc for StorageBucketStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageBucketStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.storagebucket.rpc.StorageBucketStackController",
	HandlerType: (*StorageBucketStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preview",
			Handler:    _StorageBucketStackController_Preview_Handler,
		},
		{
			MethodName: "apply",
			Handler:    _StorageBucketStackController_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/storagebucket/rpc/service.proto",
}
