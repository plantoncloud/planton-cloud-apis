// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/endpoint/standard/service.proto

package standard

import (
	context "context"
	environment "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	product "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StandardEndpointCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointCommandController/create"
	StandardEndpointCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointCommandController/update"
	StandardEndpointCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointCommandController/delete"
	StandardEndpointCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointCommandController/restore"
)

// StandardEndpointCommandControllerClient is the client API for StandardEndpointCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StandardEndpointCommandControllerClient interface {
	// create standard-endpoint
	Create(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error)
	// update an existing standard-endpoint
	Update(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error)
	// delete standard-endpoint
	Delete(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpoint, error)
	// restore a deleted standard-endpoint
	Restore(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error)
}

type standardEndpointCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStandardEndpointCommandControllerClient(cc grpc.ClientConnInterface) StandardEndpointCommandControllerClient {
	return &standardEndpointCommandControllerClient{cc}
}

func (c *standardEndpointCommandControllerClient) Create(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointCommandControllerClient) Update(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointCommandControllerClient) Delete(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointCommandControllerClient) Restore(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StandardEndpointCommandControllerServer is the server API for StandardEndpointCommandController service.
// All implementations should embed UnimplementedStandardEndpointCommandControllerServer
// for forward compatibility
type StandardEndpointCommandControllerServer interface {
	// create standard-endpoint
	Create(context.Context, *StandardEndpoint) (*StandardEndpoint, error)
	// update an existing standard-endpoint
	Update(context.Context, *StandardEndpoint) (*StandardEndpoint, error)
	// delete standard-endpoint
	Delete(context.Context, *StandardEndpointId) (*StandardEndpoint, error)
	// restore a deleted standard-endpoint
	Restore(context.Context, *StandardEndpoint) (*StandardEndpoint, error)
}

// UnimplementedStandardEndpointCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStandardEndpointCommandControllerServer struct {
}

func (UnimplementedStandardEndpointCommandControllerServer) Create(context.Context, *StandardEndpoint) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStandardEndpointCommandControllerServer) Update(context.Context, *StandardEndpoint) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStandardEndpointCommandControllerServer) Delete(context.Context, *StandardEndpointId) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStandardEndpointCommandControllerServer) Restore(context.Context, *StandardEndpoint) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeStandardEndpointCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StandardEndpointCommandControllerServer will
// result in compilation errors.
type UnsafeStandardEndpointCommandControllerServer interface {
	mustEmbedUnimplementedStandardEndpointCommandControllerServer()
}

func RegisterStandardEndpointCommandControllerServer(s grpc.ServiceRegistrar, srv StandardEndpointCommandControllerServer) {
	s.RegisterService(&StandardEndpointCommandController_ServiceDesc, srv)
}

func _StandardEndpointCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointCommandControllerServer).Create(ctx, req.(*StandardEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointCommandControllerServer).Update(ctx, req.(*StandardEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointCommandControllerServer).Delete(ctx, req.(*StandardEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointCommandControllerServer).Restore(ctx, req.(*StandardEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

// StandardEndpointCommandController_ServiceDesc is the grpc.ServiceDesc for StandardEndpointCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StandardEndpointCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointCommandController",
	HandlerType: (*StandardEndpointCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _StandardEndpointCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _StandardEndpointCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _StandardEndpointCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _StandardEndpointCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/standard/service.proto",
}

const (
	StandardEndpointQueryController_List_FullMethodName                                   = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController/list"
	StandardEndpointQueryController_GetById_FullMethodName                                = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController/getById"
	StandardEndpointQueryController_FindByProductId_FullMethodName                        = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController/findByProductId"
	StandardEndpointQueryController_FindByEnvironmentId_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController/findByEnvironmentId"
	StandardEndpointQueryController_FindStandardEndpointCertificates_FullMethodName       = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController/findStandardEndpointCertificates"
	StandardEndpointQueryController_GetStandardEndpointDsnResolutionStatus_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController/getStandardEndpointDsnResolutionStatus"
)

// StandardEndpointQueryControllerClient is the client API for StandardEndpointQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StandardEndpointQueryControllerClient interface {
	// list all standard-endpoints on planton cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*StandardEndpointList, error)
	// look up standard-endpoint using standard-endpoint id
	GetById(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpoint, error)
	// find standard-endpoints by product id.
	// response contains only the endpoint domains that the authenticated user account id as viewer access to.
	FindByProductId(ctx context.Context, in *product.ProductId, opts ...grpc.CallOption) (*StandardEndpoints, error)
	// find standard-endpoints by environment id.
	// response contains only the endpoint domains that the authenticated user account id as viewer access to.
	FindByEnvironmentId(ctx context.Context, in *environment.EnvironmentId, opts ...grpc.CallOption) (*StandardEndpoints, error)
	// find certificates for standard-endpoint
	FindStandardEndpointCertificates(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*resource.Certificates, error)
	// check status of dns resolution for standard-endpoint.
	// confirms if the dns of the standard-endpoint domain is resolving to the correct address.
	GetStandardEndpointDsnResolutionStatus(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpointDnsResolutionStatus, error)
}

type standardEndpointQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStandardEndpointQueryControllerClient(cc grpc.ClientConnInterface) StandardEndpointQueryControllerClient {
	return &standardEndpointQueryControllerClient{cc}
}

func (c *standardEndpointQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*StandardEndpointList, error) {
	out := new(StandardEndpointList)
	err := c.cc.Invoke(ctx, StandardEndpointQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointQueryControllerClient) GetById(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointQueryControllerClient) FindByProductId(ctx context.Context, in *product.ProductId, opts ...grpc.CallOption) (*StandardEndpoints, error) {
	out := new(StandardEndpoints)
	err := c.cc.Invoke(ctx, StandardEndpointQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *environment.EnvironmentId, opts ...grpc.CallOption) (*StandardEndpoints, error) {
	out := new(StandardEndpoints)
	err := c.cc.Invoke(ctx, StandardEndpointQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointQueryControllerClient) FindStandardEndpointCertificates(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*resource.Certificates, error) {
	out := new(resource.Certificates)
	err := c.cc.Invoke(ctx, StandardEndpointQueryController_FindStandardEndpointCertificates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointQueryControllerClient) GetStandardEndpointDsnResolutionStatus(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpointDnsResolutionStatus, error) {
	out := new(StandardEndpointDnsResolutionStatus)
	err := c.cc.Invoke(ctx, StandardEndpointQueryController_GetStandardEndpointDsnResolutionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StandardEndpointQueryControllerServer is the server API for StandardEndpointQueryController service.
// All implementations should embed UnimplementedStandardEndpointQueryControllerServer
// for forward compatibility
type StandardEndpointQueryControllerServer interface {
	// list all standard-endpoints on planton cloud for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*StandardEndpointList, error)
	// look up standard-endpoint using standard-endpoint id
	GetById(context.Context, *StandardEndpointId) (*StandardEndpoint, error)
	// find standard-endpoints by product id.
	// response contains only the endpoint domains that the authenticated user account id as viewer access to.
	FindByProductId(context.Context, *product.ProductId) (*StandardEndpoints, error)
	// find standard-endpoints by environment id.
	// response contains only the endpoint domains that the authenticated user account id as viewer access to.
	FindByEnvironmentId(context.Context, *environment.EnvironmentId) (*StandardEndpoints, error)
	// find certificates for standard-endpoint
	FindStandardEndpointCertificates(context.Context, *StandardEndpointId) (*resource.Certificates, error)
	// check status of dns resolution for standard-endpoint.
	// confirms if the dns of the standard-endpoint domain is resolving to the correct address.
	GetStandardEndpointDsnResolutionStatus(context.Context, *StandardEndpointId) (*StandardEndpointDnsResolutionStatus, error)
}

// UnimplementedStandardEndpointQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStandardEndpointQueryControllerServer struct {
}

func (UnimplementedStandardEndpointQueryControllerServer) List(context.Context, *pagination.PageInfo) (*StandardEndpointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStandardEndpointQueryControllerServer) GetById(context.Context, *StandardEndpointId) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedStandardEndpointQueryControllerServer) FindByProductId(context.Context, *product.ProductId) (*StandardEndpoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedStandardEndpointQueryControllerServer) FindByEnvironmentId(context.Context, *environment.EnvironmentId) (*StandardEndpoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedStandardEndpointQueryControllerServer) FindStandardEndpointCertificates(context.Context, *StandardEndpointId) (*resource.Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStandardEndpointCertificates not implemented")
}
func (UnimplementedStandardEndpointQueryControllerServer) GetStandardEndpointDsnResolutionStatus(context.Context, *StandardEndpointId) (*StandardEndpointDnsResolutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStandardEndpointDsnResolutionStatus not implemented")
}

// UnsafeStandardEndpointQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StandardEndpointQueryControllerServer will
// result in compilation errors.
type UnsafeStandardEndpointQueryControllerServer interface {
	mustEmbedUnimplementedStandardEndpointQueryControllerServer()
}

func RegisterStandardEndpointQueryControllerServer(s grpc.ServiceRegistrar, srv StandardEndpointQueryControllerServer) {
	s.RegisterService(&StandardEndpointQueryController_ServiceDesc, srv)
}

func _StandardEndpointQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointQueryControllerServer).GetById(ctx, req.(*StandardEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointQueryControllerServer).FindByProductId(ctx, req.(*product.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(environment.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointQueryControllerServer).FindByEnvironmentId(ctx, req.(*environment.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointQueryController_FindStandardEndpointCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointQueryControllerServer).FindStandardEndpointCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointQueryController_FindStandardEndpointCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointQueryControllerServer).FindStandardEndpointCertificates(ctx, req.(*StandardEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointQueryController_GetStandardEndpointDsnResolutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointQueryControllerServer).GetStandardEndpointDsnResolutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointQueryController_GetStandardEndpointDsnResolutionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointQueryControllerServer).GetStandardEndpointDsnResolutionStatus(ctx, req.(*StandardEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

// StandardEndpointQueryController_ServiceDesc is the grpc.ServiceDesc for StandardEndpointQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StandardEndpointQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointQueryController",
	HandlerType: (*StandardEndpointQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _StandardEndpointQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _StandardEndpointQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _StandardEndpointQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _StandardEndpointQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findStandardEndpointCertificates",
			Handler:    _StandardEndpointQueryController_FindStandardEndpointCertificates_Handler,
		},
		{
			MethodName: "getStandardEndpointDsnResolutionStatus",
			Handler:    _StandardEndpointQueryController_GetStandardEndpointDsnResolutionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/standard/service.proto",
}

const (
	StandardEndpointStackController_Preview_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointStackController/preview"
	StandardEndpointStackController_Apply_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointStackController/apply"
)

// StandardEndpointStackControllerClient is the client API for StandardEndpointStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StandardEndpointStackControllerClient interface {
	// preview standard-endpoint stack
	Preview(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error)
	// apply standard-endpoint stack
	Apply(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpoint, error)
}

type standardEndpointStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewStandardEndpointStackControllerClient(cc grpc.ClientConnInterface) StandardEndpointStackControllerClient {
	return &standardEndpointStackControllerClient{cc}
}

func (c *standardEndpointStackControllerClient) Preview(ctx context.Context, in *StandardEndpoint, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointStackController_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardEndpointStackControllerClient) Apply(ctx context.Context, in *StandardEndpointId, opts ...grpc.CallOption) (*StandardEndpoint, error) {
	out := new(StandardEndpoint)
	err := c.cc.Invoke(ctx, StandardEndpointStackController_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StandardEndpointStackControllerServer is the server API for StandardEndpointStackController service.
// All implementations should embed UnimplementedStandardEndpointStackControllerServer
// for forward compatibility
type StandardEndpointStackControllerServer interface {
	// preview standard-endpoint stack
	Preview(context.Context, *StandardEndpoint) (*StandardEndpoint, error)
	// apply standard-endpoint stack
	Apply(context.Context, *StandardEndpointId) (*StandardEndpoint, error)
}

// UnimplementedStandardEndpointStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedStandardEndpointStackControllerServer struct {
}

func (UnimplementedStandardEndpointStackControllerServer) Preview(context.Context, *StandardEndpoint) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedStandardEndpointStackControllerServer) Apply(context.Context, *StandardEndpointId) (*StandardEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeStandardEndpointStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StandardEndpointStackControllerServer will
// result in compilation errors.
type UnsafeStandardEndpointStackControllerServer interface {
	mustEmbedUnimplementedStandardEndpointStackControllerServer()
}

func RegisterStandardEndpointStackControllerServer(s grpc.ServiceRegistrar, srv StandardEndpointStackControllerServer) {
	s.RegisterService(&StandardEndpointStackController_ServiceDesc, srv)
}

func _StandardEndpointStackController_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointStackControllerServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointStackController_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointStackControllerServer).Preview(ctx, req.(*StandardEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardEndpointStackController_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardEndpointStackControllerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandardEndpointStackController_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardEndpointStackControllerServer).Apply(ctx, req.(*StandardEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

// StandardEndpointStackController_ServiceDesc is the grpc.ServiceDesc for StandardEndpointStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StandardEndpointStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.standard.StandardEndpointStackController",
	HandlerType: (*StandardEndpointStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preview",
			Handler:    _StandardEndpointStackController_Preview_Handler,
		},
		{
			MethodName: "apply",
			Handler:    _StandardEndpointStackController_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/standard/service.proto",
}
