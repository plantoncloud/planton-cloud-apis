// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/endpoint/custom/rpc/service.proto

package rpc

import (
	context "context"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomEndpointCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointCommandController/create"
	CustomEndpointCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointCommandController/update"
	CustomEndpointCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointCommandController/delete"
	CustomEndpointCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointCommandController/restore"
)

// CustomEndpointCommandControllerClient is the client API for CustomEndpointCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEndpointCommandControllerClient interface {
	// create custom-endpoint
	Create(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// update an existing custom-endpoint
	Update(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// delete custom-endpoint
	Delete(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// restore a deleted custom-endpoint
	Restore(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error)
}

type customEndpointCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEndpointCommandControllerClient(cc grpc.ClientConnInterface) CustomEndpointCommandControllerClient {
	return &customEndpointCommandControllerClient{cc}
}

func (c *customEndpointCommandControllerClient) Create(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Update(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Delete(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointCommandControllerClient) Restore(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEndpointCommandControllerServer is the server API for CustomEndpointCommandController service.
// All implementations should embed UnimplementedCustomEndpointCommandControllerServer
// for forward compatibility
type CustomEndpointCommandControllerServer interface {
	// create custom-endpoint
	Create(context.Context, *CustomEndpoint) (*CustomEndpoint, error)
	// update an existing custom-endpoint
	Update(context.Context, *CustomEndpoint) (*CustomEndpoint, error)
	// delete custom-endpoint
	Delete(context.Context, *CustomEndpointId) (*CustomEndpoint, error)
	// restore a deleted custom-endpoint
	Restore(context.Context, *CustomEndpoint) (*CustomEndpoint, error)
}

// UnimplementedCustomEndpointCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCustomEndpointCommandControllerServer struct {
}

func (UnimplementedCustomEndpointCommandControllerServer) Create(context.Context, *CustomEndpoint) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Update(context.Context, *CustomEndpoint) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Delete(context.Context, *CustomEndpointId) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCustomEndpointCommandControllerServer) Restore(context.Context, *CustomEndpoint) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeCustomEndpointCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEndpointCommandControllerServer will
// result in compilation errors.
type UnsafeCustomEndpointCommandControllerServer interface {
	mustEmbedUnimplementedCustomEndpointCommandControllerServer()
}

func RegisterCustomEndpointCommandControllerServer(s grpc.ServiceRegistrar, srv CustomEndpointCommandControllerServer) {
	s.RegisterService(&CustomEndpointCommandController_ServiceDesc, srv)
}

func _CustomEndpointCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Create(ctx, req.(*CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Update(ctx, req.(*CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Delete(ctx, req.(*CustomEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointCommandControllerServer).Restore(ctx, req.(*CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEndpointCommandController_ServiceDesc is the grpc.ServiceDesc for CustomEndpointCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEndpointCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointCommandController",
	HandlerType: (*CustomEndpointCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CustomEndpointCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CustomEndpointCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CustomEndpointCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _CustomEndpointCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/custom/rpc/service.proto",
}

const (
	CustomEndpointQueryController_List_FullMethodName                                 = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController/list"
	CustomEndpointQueryController_GetById_FullMethodName                              = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController/getById"
	CustomEndpointQueryController_FindByProductId_FullMethodName                      = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController/findByProductId"
	CustomEndpointQueryController_GetCustomEndpointCertStatus_FullMethodName          = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController/getCustomEndpointCertStatus"
	CustomEndpointQueryController_GetCustomEndpointDsnResolutionStatus_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController/getCustomEndpointDsnResolutionStatus"
	CustomEndpointQueryController_FindCustomEndpointCertificates_FullMethodName       = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController/findCustomEndpointCertificates"
)

// CustomEndpointQueryControllerClient is the client API for CustomEndpointQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEndpointQueryControllerClient interface {
	// list all custom-endpoints on planton cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*CustomEndpointList, error)
	// look up custom-endpoint using custom-endpoint id
	GetById(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// find custom-endpoints by product id.
	// response contains only the endpoint domains that the authenticated user account id as viewer access to.
	FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*CustomEndpoints, error)
	// check cert status for custom-endpoint
	GetCustomEndpointCertStatus(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpointCertStatus, error)
	// check status of dns resolution for custom-endpoint.
	// confirms if the dns of the custom-endpoint domain is resolving to the correct address.
	GetCustomEndpointDsnResolutionStatus(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpointDnsResolutionStatus, error)
	// find certificates for custom-endpoint
	FindCustomEndpointCertificates(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*resource.Certificates, error)
}

type customEndpointQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEndpointQueryControllerClient(cc grpc.ClientConnInterface) CustomEndpointQueryControllerClient {
	return &customEndpointQueryControllerClient{cc}
}

func (c *customEndpointQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*CustomEndpointList, error) {
	out := new(CustomEndpointList)
	err := c.cc.Invoke(ctx, CustomEndpointQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointQueryControllerClient) GetById(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointQueryControllerClient) FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*CustomEndpoints, error) {
	out := new(CustomEndpoints)
	err := c.cc.Invoke(ctx, CustomEndpointQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointQueryControllerClient) GetCustomEndpointCertStatus(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpointCertStatus, error) {
	out := new(CustomEndpointCertStatus)
	err := c.cc.Invoke(ctx, CustomEndpointQueryController_GetCustomEndpointCertStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointQueryControllerClient) GetCustomEndpointDsnResolutionStatus(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpointDnsResolutionStatus, error) {
	out := new(CustomEndpointDnsResolutionStatus)
	err := c.cc.Invoke(ctx, CustomEndpointQueryController_GetCustomEndpointDsnResolutionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointQueryControllerClient) FindCustomEndpointCertificates(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*resource.Certificates, error) {
	out := new(resource.Certificates)
	err := c.cc.Invoke(ctx, CustomEndpointQueryController_FindCustomEndpointCertificates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEndpointQueryControllerServer is the server API for CustomEndpointQueryController service.
// All implementations should embed UnimplementedCustomEndpointQueryControllerServer
// for forward compatibility
type CustomEndpointQueryControllerServer interface {
	// list all custom-endpoints on planton cloud for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*CustomEndpointList, error)
	// look up custom-endpoint using custom-endpoint id
	GetById(context.Context, *CustomEndpointId) (*CustomEndpoint, error)
	// find custom-endpoints by product id.
	// response contains only the endpoint domains that the authenticated user account id as viewer access to.
	FindByProductId(context.Context, *rpc.ProductId) (*CustomEndpoints, error)
	// check cert status for custom-endpoint
	GetCustomEndpointCertStatus(context.Context, *CustomEndpointId) (*CustomEndpointCertStatus, error)
	// check status of dns resolution for custom-endpoint.
	// confirms if the dns of the custom-endpoint domain is resolving to the correct address.
	GetCustomEndpointDsnResolutionStatus(context.Context, *CustomEndpointId) (*CustomEndpointDnsResolutionStatus, error)
	// find certificates for custom-endpoint
	FindCustomEndpointCertificates(context.Context, *CustomEndpointId) (*resource.Certificates, error)
}

// UnimplementedCustomEndpointQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCustomEndpointQueryControllerServer struct {
}

func (UnimplementedCustomEndpointQueryControllerServer) List(context.Context, *pagination.PageInfo) (*CustomEndpointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCustomEndpointQueryControllerServer) GetById(context.Context, *CustomEndpointId) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCustomEndpointQueryControllerServer) FindByProductId(context.Context, *rpc.ProductId) (*CustomEndpoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedCustomEndpointQueryControllerServer) GetCustomEndpointCertStatus(context.Context, *CustomEndpointId) (*CustomEndpointCertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomEndpointCertStatus not implemented")
}
func (UnimplementedCustomEndpointQueryControllerServer) GetCustomEndpointDsnResolutionStatus(context.Context, *CustomEndpointId) (*CustomEndpointDnsResolutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomEndpointDsnResolutionStatus not implemented")
}
func (UnimplementedCustomEndpointQueryControllerServer) FindCustomEndpointCertificates(context.Context, *CustomEndpointId) (*resource.Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomEndpointCertificates not implemented")
}

// UnsafeCustomEndpointQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEndpointQueryControllerServer will
// result in compilation errors.
type UnsafeCustomEndpointQueryControllerServer interface {
	mustEmbedUnimplementedCustomEndpointQueryControllerServer()
}

func RegisterCustomEndpointQueryControllerServer(s grpc.ServiceRegistrar, srv CustomEndpointQueryControllerServer) {
	s.RegisterService(&CustomEndpointQueryController_ServiceDesc, srv)
}

func _CustomEndpointQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointQueryControllerServer).GetById(ctx, req.(*CustomEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointQueryControllerServer).FindByProductId(ctx, req.(*rpc.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointQueryController_GetCustomEndpointCertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointQueryControllerServer).GetCustomEndpointCertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointQueryController_GetCustomEndpointCertStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointQueryControllerServer).GetCustomEndpointCertStatus(ctx, req.(*CustomEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointQueryController_GetCustomEndpointDsnResolutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointQueryControllerServer).GetCustomEndpointDsnResolutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointQueryController_GetCustomEndpointDsnResolutionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointQueryControllerServer).GetCustomEndpointDsnResolutionStatus(ctx, req.(*CustomEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointQueryController_FindCustomEndpointCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointQueryControllerServer).FindCustomEndpointCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointQueryController_FindCustomEndpointCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointQueryControllerServer).FindCustomEndpointCertificates(ctx, req.(*CustomEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEndpointQueryController_ServiceDesc is the grpc.ServiceDesc for CustomEndpointQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEndpointQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointQueryController",
	HandlerType: (*CustomEndpointQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _CustomEndpointQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _CustomEndpointQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _CustomEndpointQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "getCustomEndpointCertStatus",
			Handler:    _CustomEndpointQueryController_GetCustomEndpointCertStatus_Handler,
		},
		{
			MethodName: "getCustomEndpointDsnResolutionStatus",
			Handler:    _CustomEndpointQueryController_GetCustomEndpointDsnResolutionStatus_Handler,
		},
		{
			MethodName: "findCustomEndpointCertificates",
			Handler:    _CustomEndpointQueryController_FindCustomEndpointCertificates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/custom/rpc/service.proto",
}

const (
	CustomEndpointRouteCommandController_Add_FullMethodName    = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointRouteCommandController/add"
	CustomEndpointRouteCommandController_Update_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointRouteCommandController/update"
	CustomEndpointRouteCommandController_Delete_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointRouteCommandController/delete"
)

// CustomEndpointRouteCommandControllerClient is the client API for CustomEndpointRouteCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEndpointRouteCommandControllerClient interface {
	// add a route to a custom-endpoint
	Add(ctx context.Context, in *AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// update an existing route of a custom-endpoint
	Update(ctx context.Context, in *AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// delete a route for a custom-endpoint.
	Delete(ctx context.Context, in *DeleteOrRestoreCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*CustomEndpoint, error)
}

type customEndpointRouteCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEndpointRouteCommandControllerClient(cc grpc.ClientConnInterface) CustomEndpointRouteCommandControllerClient {
	return &customEndpointRouteCommandControllerClient{cc}
}

func (c *customEndpointRouteCommandControllerClient) Add(ctx context.Context, in *AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointRouteCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointRouteCommandControllerClient) Update(ctx context.Context, in *AddOrUpdateCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointRouteCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointRouteCommandControllerClient) Delete(ctx context.Context, in *DeleteOrRestoreCustomEndpointRouteCommandInput, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointRouteCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEndpointRouteCommandControllerServer is the server API for CustomEndpointRouteCommandController service.
// All implementations should embed UnimplementedCustomEndpointRouteCommandControllerServer
// for forward compatibility
type CustomEndpointRouteCommandControllerServer interface {
	// add a route to a custom-endpoint
	Add(context.Context, *AddOrUpdateCustomEndpointRouteCommandInput) (*CustomEndpoint, error)
	// update an existing route of a custom-endpoint
	Update(context.Context, *AddOrUpdateCustomEndpointRouteCommandInput) (*CustomEndpoint, error)
	// delete a route for a custom-endpoint.
	Delete(context.Context, *DeleteOrRestoreCustomEndpointRouteCommandInput) (*CustomEndpoint, error)
}

// UnimplementedCustomEndpointRouteCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCustomEndpointRouteCommandControllerServer struct {
}

func (UnimplementedCustomEndpointRouteCommandControllerServer) Add(context.Context, *AddOrUpdateCustomEndpointRouteCommandInput) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCustomEndpointRouteCommandControllerServer) Update(context.Context, *AddOrUpdateCustomEndpointRouteCommandInput) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomEndpointRouteCommandControllerServer) Delete(context.Context, *DeleteOrRestoreCustomEndpointRouteCommandInput) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeCustomEndpointRouteCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEndpointRouteCommandControllerServer will
// result in compilation errors.
type UnsafeCustomEndpointRouteCommandControllerServer interface {
	mustEmbedUnimplementedCustomEndpointRouteCommandControllerServer()
}

func RegisterCustomEndpointRouteCommandControllerServer(s grpc.ServiceRegistrar, srv CustomEndpointRouteCommandControllerServer) {
	s.RegisterService(&CustomEndpointRouteCommandController_ServiceDesc, srv)
}

func _CustomEndpointRouteCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateCustomEndpointRouteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointRouteCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointRouteCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointRouteCommandControllerServer).Add(ctx, req.(*AddOrUpdateCustomEndpointRouteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointRouteCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateCustomEndpointRouteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointRouteCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointRouteCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointRouteCommandControllerServer).Update(ctx, req.(*AddOrUpdateCustomEndpointRouteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointRouteCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrRestoreCustomEndpointRouteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointRouteCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointRouteCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointRouteCommandControllerServer).Delete(ctx, req.(*DeleteOrRestoreCustomEndpointRouteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEndpointRouteCommandController_ServiceDesc is the grpc.ServiceDesc for CustomEndpointRouteCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEndpointRouteCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointRouteCommandController",
	HandlerType: (*CustomEndpointRouteCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _CustomEndpointRouteCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CustomEndpointRouteCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CustomEndpointRouteCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/custom/rpc/service.proto",
}

const (
	CustomEndpointStackController_Preview_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointStackController/preview"
	CustomEndpointStackController_Apply_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointStackController/apply"
)

// CustomEndpointStackControllerClient is the client API for CustomEndpointStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEndpointStackControllerClient interface {
	// preview custom-endpoint stack
	Preview(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error)
	// apply custom-endpoint stack
	Apply(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpoint, error)
}

type customEndpointStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEndpointStackControllerClient(cc grpc.ClientConnInterface) CustomEndpointStackControllerClient {
	return &customEndpointStackControllerClient{cc}
}

func (c *customEndpointStackControllerClient) Preview(ctx context.Context, in *CustomEndpoint, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointStackController_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEndpointStackControllerClient) Apply(ctx context.Context, in *CustomEndpointId, opts ...grpc.CallOption) (*CustomEndpoint, error) {
	out := new(CustomEndpoint)
	err := c.cc.Invoke(ctx, CustomEndpointStackController_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEndpointStackControllerServer is the server API for CustomEndpointStackController service.
// All implementations should embed UnimplementedCustomEndpointStackControllerServer
// for forward compatibility
type CustomEndpointStackControllerServer interface {
	// preview custom-endpoint stack
	Preview(context.Context, *CustomEndpoint) (*CustomEndpoint, error)
	// apply custom-endpoint stack
	Apply(context.Context, *CustomEndpointId) (*CustomEndpoint, error)
}

// UnimplementedCustomEndpointStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCustomEndpointStackControllerServer struct {
}

func (UnimplementedCustomEndpointStackControllerServer) Preview(context.Context, *CustomEndpoint) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedCustomEndpointStackControllerServer) Apply(context.Context, *CustomEndpointId) (*CustomEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeCustomEndpointStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEndpointStackControllerServer will
// result in compilation errors.
type UnsafeCustomEndpointStackControllerServer interface {
	mustEmbedUnimplementedCustomEndpointStackControllerServer()
}

func RegisterCustomEndpointStackControllerServer(s grpc.ServiceRegistrar, srv CustomEndpointStackControllerServer) {
	s.RegisterService(&CustomEndpointStackController_ServiceDesc, srv)
}

func _CustomEndpointStackController_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointStackControllerServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointStackController_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointStackControllerServer).Preview(ctx, req.(*CustomEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEndpointStackController_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomEndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEndpointStackControllerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEndpointStackController_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEndpointStackControllerServer).Apply(ctx, req.(*CustomEndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEndpointStackController_ServiceDesc is the grpc.ServiceDesc for CustomEndpointStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEndpointStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.endpoint.custom.rpc.CustomEndpointStackController",
	HandlerType: (*CustomEndpointStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preview",
			Handler:    _CustomEndpointStackController_Preview_Handler,
		},
		{
			MethodName: "apply",
			Handler:    _CustomEndpointStackController_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/endpoint/custom/rpc/service.proto",
}
