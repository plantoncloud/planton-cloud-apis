// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/redis/service.proto

package redis

import (
	context "context"
	kubecluster "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster"
	environment "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	product "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product"
	job "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RedisClusterCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/previewCreate"
	RedisClusterCommandController_Create_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/create"
	RedisClusterCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/previewUpdate"
	RedisClusterCommandController_Update_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/update"
	RedisClusterCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/previewDelete"
	RedisClusterCommandController_Delete_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/delete"
	RedisClusterCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/previewRestore"
	RedisClusterCommandController_Restore_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/restore"
	RedisClusterCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/createStackJob"
	RedisClusterCommandController_Restart_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/restart"
	RedisClusterCommandController_Pause_FullMethodName          = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/pause"
	RedisClusterCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/unpause"
	RedisClusterCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/previewRefresh"
	RedisClusterCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController/refresh"
)

// RedisClusterCommandControllerClient is the client API for RedisClusterCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisClusterCommandControllerClient interface {
	// preview creating redis-cluster
	PreviewCreate(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error)
	// create redis-cluster
	Create(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error)
	// preview updating an existing redis-cluster
	PreviewUpdate(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error)
	// update an existing redis-cluster
	Update(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error)
	// preview deleting an existing redis-cluster
	PreviewDelete(ctx context.Context, in *resource.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
	// delete an existing redis-cluster
	Delete(ctx context.Context, in *resource.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
	// preview restoring a previously deleted redis-cluster
	PreviewRestore(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error)
	// restore a previously deleted redis-cluster
	Restore(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error)
	// create-stack-job for redis-cluster
	CreateStackJob(ctx context.Context, in *job.CreateStackJobCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
	// restart a redis-cluster running in a environment.
	// redis-cluster is restarted by deleting running "redis" pods which will be automatically recreated by kubernetes
	Restart(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisCluster, error)
	// pause a redis-cluster running in a environment.
	// redis-cluster is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(ctx context.Context, in *resource.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
	// unpause a previously paused redis-cluster running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the redis-cluster.
	Unpause(ctx context.Context, in *resource.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
	// preview refresh a redis-cluster that was previously created
	PreviewRefresh(ctx context.Context, in *resource.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
	// refresh a redis-cluster that was previously created
	Refresh(ctx context.Context, in *resource.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*RedisCluster, error)
}

type redisClusterCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisClusterCommandControllerClient(cc grpc.ClientConnInterface) RedisClusterCommandControllerClient {
	return &redisClusterCommandControllerClient{cc}
}

func (c *redisClusterCommandControllerClient) PreviewCreate(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Create(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) PreviewUpdate(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Update(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) PreviewDelete(ctx context.Context, in *resource.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Delete(ctx context.Context, in *resource.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) PreviewRestore(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Restore(ctx context.Context, in *RedisCluster, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) CreateStackJob(ctx context.Context, in *job.CreateStackJobCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Restart(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Pause(ctx context.Context, in *resource.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Unpause(ctx context.Context, in *resource.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) PreviewRefresh(ctx context.Context, in *resource.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterCommandControllerClient) Refresh(ctx context.Context, in *resource.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisClusterCommandControllerServer is the server API for RedisClusterCommandController service.
// All implementations should embed UnimplementedRedisClusterCommandControllerServer
// for forward compatibility
type RedisClusterCommandControllerServer interface {
	// preview creating redis-cluster
	PreviewCreate(context.Context, *RedisCluster) (*RedisCluster, error)
	// create redis-cluster
	Create(context.Context, *RedisCluster) (*RedisCluster, error)
	// preview updating an existing redis-cluster
	PreviewUpdate(context.Context, *RedisCluster) (*RedisCluster, error)
	// update an existing redis-cluster
	Update(context.Context, *RedisCluster) (*RedisCluster, error)
	// preview deleting an existing redis-cluster
	PreviewDelete(context.Context, *resource.ApiResourceDeleteCommandInput) (*RedisCluster, error)
	// delete an existing redis-cluster
	Delete(context.Context, *resource.ApiResourceDeleteCommandInput) (*RedisCluster, error)
	// preview restoring a previously deleted redis-cluster
	PreviewRestore(context.Context, *RedisCluster) (*RedisCluster, error)
	// restore a previously deleted redis-cluster
	Restore(context.Context, *RedisCluster) (*RedisCluster, error)
	// create-stack-job for redis-cluster
	CreateStackJob(context.Context, *job.CreateStackJobCommandInput) (*RedisCluster, error)
	// restart a redis-cluster running in a environment.
	// redis-cluster is restarted by deleting running "redis" pods which will be automatically recreated by kubernetes
	Restart(context.Context, *RedisClusterId) (*RedisCluster, error)
	// pause a redis-cluster running in a environment.
	// redis-cluster is paused by scaling down number of replicas of
	// the kubernetes stateful sets to zero in the environment.
	Pause(context.Context, *resource.ApiResourcePauseCommandInput) (*RedisCluster, error)
	// unpause a previously paused redis-cluster running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the redis-cluster.
	Unpause(context.Context, *resource.ApiResourceUnPauseCommandInput) (*RedisCluster, error)
	// preview refresh a redis-cluster that was previously created
	PreviewRefresh(context.Context, *resource.ApiResourceRefreshCommandInput) (*RedisCluster, error)
	// refresh a redis-cluster that was previously created
	Refresh(context.Context, *resource.ApiResourceRefreshCommandInput) (*RedisCluster, error)
}

// UnimplementedRedisClusterCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedRedisClusterCommandControllerServer struct {
}

func (UnimplementedRedisClusterCommandControllerServer) PreviewCreate(context.Context, *RedisCluster) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Create(context.Context, *RedisCluster) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) PreviewUpdate(context.Context, *RedisCluster) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Update(context.Context, *RedisCluster) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) PreviewDelete(context.Context, *resource.ApiResourceDeleteCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Delete(context.Context, *resource.ApiResourceDeleteCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) PreviewRestore(context.Context, *RedisCluster) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Restore(context.Context, *RedisCluster) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) CreateStackJob(context.Context, *job.CreateStackJobCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Restart(context.Context, *RedisClusterId) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Pause(context.Context, *resource.ApiResourcePauseCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Unpause(context.Context, *resource.ApiResourceUnPauseCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) PreviewRefresh(context.Context, *resource.ApiResourceRefreshCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedRedisClusterCommandControllerServer) Refresh(context.Context, *resource.ApiResourceRefreshCommandInput) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeRedisClusterCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisClusterCommandControllerServer will
// result in compilation errors.
type UnsafeRedisClusterCommandControllerServer interface {
	mustEmbedUnimplementedRedisClusterCommandControllerServer()
}

func RegisterRedisClusterCommandControllerServer(s grpc.ServiceRegistrar, srv RedisClusterCommandControllerServer) {
	s.RegisterService(&RedisClusterCommandController_ServiceDesc, srv)
}

func _RedisClusterCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).PreviewCreate(ctx, req.(*RedisCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Create(ctx, req.(*RedisCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).PreviewUpdate(ctx, req.(*RedisCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Update(ctx, req.(*RedisCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).PreviewDelete(ctx, req.(*resource.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Delete(ctx, req.(*resource.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).PreviewRestore(ctx, req.(*RedisCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Restore(ctx, req.(*RedisCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(job.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).CreateStackJob(ctx, req.(*job.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Restart(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Pause(ctx, req.(*resource.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Unpause(ctx, req.(*resource.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).PreviewRefresh(ctx, req.(*resource.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterCommandControllerServer).Refresh(ctx, req.(*resource.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisClusterCommandController_ServiceDesc is the grpc.ServiceDesc for RedisClusterCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisClusterCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterCommandController",
	HandlerType: (*RedisClusterCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _RedisClusterCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _RedisClusterCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _RedisClusterCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _RedisClusterCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _RedisClusterCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RedisClusterCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _RedisClusterCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _RedisClusterCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _RedisClusterCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _RedisClusterCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _RedisClusterCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _RedisClusterCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _RedisClusterCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _RedisClusterCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/redis/service.proto",
}

const (
	RedisClusterQueryController_List_FullMethodName                = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/list"
	RedisClusterQueryController_GetById_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/getById"
	RedisClusterQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findByProductId"
	RedisClusterQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findByEnvironmentId"
	RedisClusterQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findByKubeClusterId"
	RedisClusterQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/getPassword"
	RedisClusterQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findPods"
)

// RedisClusterQueryControllerClient is the client API for RedisClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisClusterQueryControllerClient interface {
	// list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*RedisClusterList, error)
	// look up redis-cluster using redis-cluster id
	GetById(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisCluster, error)
	// find redis-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *product.ProductId, opts ...grpc.CallOption) (*RedisClusters, error)
	// find redis-clusters by environment
	FindByEnvironmentId(ctx context.Context, in *environment.EnvironmentId, opts ...grpc.CallOption) (*RedisClusters, error)
	FindByKubeClusterId(ctx context.Context, in *kubecluster.KubeClusterId, opts ...grpc.CallOption) (*RedisClusters, error)
	// look up redis-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisClusterPassword, error)
	// lookup pods of a redis-cluster deployed to a environment
	FindPods(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*resource1.Pods, error)
}

type redisClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisClusterQueryControllerClient(cc grpc.ClientConnInterface) RedisClusterQueryControllerClient {
	return &redisClusterQueryControllerClient{cc}
}

func (c *redisClusterQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*RedisClusterList, error) {
	out := new(RedisClusterList)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) GetById(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindByProductId(ctx context.Context, in *product.ProductId, opts ...grpc.CallOption) (*RedisClusters, error) {
	out := new(RedisClusters)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *environment.EnvironmentId, opts ...grpc.CallOption) (*RedisClusters, error) {
	out := new(RedisClusters)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *kubecluster.KubeClusterId, opts ...grpc.CallOption) (*RedisClusters, error) {
	out := new(RedisClusters)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) GetPassword(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisClusterPassword, error) {
	out := new(RedisClusterPassword)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindPods(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*resource1.Pods, error) {
	out := new(resource1.Pods)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisClusterQueryControllerServer is the server API for RedisClusterQueryController service.
// All implementations should embed UnimplementedRedisClusterQueryControllerServer
// for forward compatibility
type RedisClusterQueryControllerServer interface {
	// list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*RedisClusterList, error)
	// look up redis-cluster using redis-cluster id
	GetById(context.Context, *RedisClusterId) (*RedisCluster, error)
	// find redis-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *product.ProductId) (*RedisClusters, error)
	// find redis-clusters by environment
	FindByEnvironmentId(context.Context, *environment.EnvironmentId) (*RedisClusters, error)
	FindByKubeClusterId(context.Context, *kubecluster.KubeClusterId) (*RedisClusters, error)
	// look up redis-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *RedisClusterId) (*RedisClusterPassword, error)
	// lookup pods of a redis-cluster deployed to a environment
	FindPods(context.Context, *RedisClusterId) (*resource1.Pods, error)
}

// UnimplementedRedisClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedRedisClusterQueryControllerServer struct {
}

func (UnimplementedRedisClusterQueryControllerServer) List(context.Context, *pagination.PageInfo) (*RedisClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) GetById(context.Context, *RedisClusterId) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindByProductId(context.Context, *product.ProductId) (*RedisClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindByEnvironmentId(context.Context, *environment.EnvironmentId) (*RedisClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindByKubeClusterId(context.Context, *kubecluster.KubeClusterId) (*RedisClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) GetPassword(context.Context, *RedisClusterId) (*RedisClusterPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindPods(context.Context, *RedisClusterId) (*resource1.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeRedisClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisClusterQueryControllerServer will
// result in compilation errors.
type UnsafeRedisClusterQueryControllerServer interface {
	mustEmbedUnimplementedRedisClusterQueryControllerServer()
}

func RegisterRedisClusterQueryControllerServer(s grpc.ServiceRegistrar, srv RedisClusterQueryControllerServer) {
	s.RegisterService(&RedisClusterQueryController_ServiceDesc, srv)
}

func _RedisClusterQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).GetById(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindByProductId(ctx, req.(*product.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(environment.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindByEnvironmentId(ctx, req.(*environment.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kubecluster.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindByKubeClusterId(ctx, req.(*kubecluster.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).GetPassword(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindPods(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisClusterQueryController_ServiceDesc is the grpc.ServiceDesc for RedisClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController",
	HandlerType: (*RedisClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _RedisClusterQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _RedisClusterQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _RedisClusterQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _RedisClusterQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _RedisClusterQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _RedisClusterQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _RedisClusterQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/redis/service.proto",
}
