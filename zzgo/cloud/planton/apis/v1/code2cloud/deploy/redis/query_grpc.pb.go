// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/redis/query.proto

package redis

import (
	context "context"
	kubecluster "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster"
	environment "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	product "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RedisClusterQueryController_List_FullMethodName                = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/list"
	RedisClusterQueryController_GetById_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/getById"
	RedisClusterQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findByProductId"
	RedisClusterQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findByEnvironmentId"
	RedisClusterQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findByKubeClusterId"
	RedisClusterQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/getPassword"
	RedisClusterQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController/findPods"
)

// RedisClusterQueryControllerClient is the client API for RedisClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisClusterQueryControllerClient interface {
	// list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*RedisClusterList, error)
	// look up redis-cluster using redis-cluster id
	GetById(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisCluster, error)
	// find redis-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *product.ProductId, opts ...grpc.CallOption) (*RedisClusters, error)
	// find redis-clusters by environment
	FindByEnvironmentId(ctx context.Context, in *environment.EnvironmentId, opts ...grpc.CallOption) (*RedisClusters, error)
	FindByKubeClusterId(ctx context.Context, in *kubecluster.KubeClusterId, opts ...grpc.CallOption) (*RedisClusters, error)
	// look up redis-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisClusterPassword, error)
	// lookup pods of a redis-cluster deployed to a environment
	FindPods(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*resource.Pods, error)
}

type redisClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisClusterQueryControllerClient(cc grpc.ClientConnInterface) RedisClusterQueryControllerClient {
	return &redisClusterQueryControllerClient{cc}
}

func (c *redisClusterQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*RedisClusterList, error) {
	out := new(RedisClusterList)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) GetById(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisCluster, error) {
	out := new(RedisCluster)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindByProductId(ctx context.Context, in *product.ProductId, opts ...grpc.CallOption) (*RedisClusters, error) {
	out := new(RedisClusters)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *environment.EnvironmentId, opts ...grpc.CallOption) (*RedisClusters, error) {
	out := new(RedisClusters)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *kubecluster.KubeClusterId, opts ...grpc.CallOption) (*RedisClusters, error) {
	out := new(RedisClusters)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) GetPassword(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*RedisClusterPassword, error) {
	out := new(RedisClusterPassword)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClusterQueryControllerClient) FindPods(ctx context.Context, in *RedisClusterId, opts ...grpc.CallOption) (*resource.Pods, error) {
	out := new(resource.Pods)
	err := c.cc.Invoke(ctx, RedisClusterQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisClusterQueryControllerServer is the server API for RedisClusterQueryController service.
// All implementations should embed UnimplementedRedisClusterQueryControllerServer
// for forward compatibility
type RedisClusterQueryControllerServer interface {
	// list all redis-clusters on planton cluster for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*RedisClusterList, error)
	// look up redis-cluster using redis-cluster id
	GetById(context.Context, *RedisClusterId) (*RedisCluster, error)
	// find redis-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *product.ProductId) (*RedisClusters, error)
	// find redis-clusters by environment
	FindByEnvironmentId(context.Context, *environment.EnvironmentId) (*RedisClusters, error)
	FindByKubeClusterId(context.Context, *kubecluster.KubeClusterId) (*RedisClusters, error)
	// look up redis-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *RedisClusterId) (*RedisClusterPassword, error)
	// lookup pods of a redis-cluster deployed to a environment
	FindPods(context.Context, *RedisClusterId) (*resource.Pods, error)
}

// UnimplementedRedisClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedRedisClusterQueryControllerServer struct {
}

func (UnimplementedRedisClusterQueryControllerServer) List(context.Context, *pagination.PageInfo) (*RedisClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) GetById(context.Context, *RedisClusterId) (*RedisCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindByProductId(context.Context, *product.ProductId) (*RedisClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindByEnvironmentId(context.Context, *environment.EnvironmentId) (*RedisClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindByKubeClusterId(context.Context, *kubecluster.KubeClusterId) (*RedisClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) GetPassword(context.Context, *RedisClusterId) (*RedisClusterPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedRedisClusterQueryControllerServer) FindPods(context.Context, *RedisClusterId) (*resource.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeRedisClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisClusterQueryControllerServer will
// result in compilation errors.
type UnsafeRedisClusterQueryControllerServer interface {
	mustEmbedUnimplementedRedisClusterQueryControllerServer()
}

func RegisterRedisClusterQueryControllerServer(s grpc.ServiceRegistrar, srv RedisClusterQueryControllerServer) {
	s.RegisterService(&RedisClusterQueryController_ServiceDesc, srv)
}

func _RedisClusterQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).GetById(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindByProductId(ctx, req.(*product.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(environment.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindByEnvironmentId(ctx, req.(*environment.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kubecluster.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindByKubeClusterId(ctx, req.(*kubecluster.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).GetPassword(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisClusterQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisClusterQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisClusterQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisClusterQueryControllerServer).FindPods(ctx, req.(*RedisClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisClusterQueryController_ServiceDesc is the grpc.ServiceDesc for RedisClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.redis.RedisClusterQueryController",
	HandlerType: (*RedisClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _RedisClusterQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _RedisClusterQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _RedisClusterQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _RedisClusterQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _RedisClusterQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _RedisClusterQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _RedisClusterQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/redis/query.proto",
}
