// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/kafka/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kafka/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KafkaClusterCommandController_PreviewCreate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/previewCreate"
	KafkaClusterCommandController_Create_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/create"
	KafkaClusterCommandController_PreviewUpdate_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/previewUpdate"
	KafkaClusterCommandController_Update_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/update"
	KafkaClusterCommandController_PreviewDelete_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/previewDelete"
	KafkaClusterCommandController_Delete_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/delete"
	KafkaClusterCommandController_PreviewRestore_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/previewRestore"
	KafkaClusterCommandController_Restore_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/restore"
	KafkaClusterCommandController_CreateStackJob_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/createStackJob"
	KafkaClusterCommandController_Restart_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/restart"
	KafkaClusterCommandController_Pause_FullMethodName          = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/pause"
	KafkaClusterCommandController_Unpause_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/unpause"
	KafkaClusterCommandController_PreviewRefresh_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/previewRefresh"
	KafkaClusterCommandController_Refresh_FullMethodName        = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController/refresh"
)

// KafkaClusterCommandControllerClient is the client API for KafkaClusterCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaClusterCommandControllerClient interface {
	// preview create kafka-cluster
	PreviewCreate(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// create kafka-cluster
	Create(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// preview update an existing kafka-cluster
	PreviewUpdate(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// update an existing kafka-cluster
	Update(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// preview deleting an existing kafka-cluster
	PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// delete an existing kafka-cluster
	Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// preview restoring a deleted kafka-cluster
	PreviewRestore(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// restore a deleted kafka-cluster
	Restore(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// create-stack-job for kafka-cluster
	CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// restart a kafka-cluster running in a environment.
	// kafka-cluster is restarted by deleting running "broker" pods which will be automatically recreated by kubernetes
	// note: zookeeper pods are not deleted.
	Restart(ctx context.Context, in *model.KafkaClusterId, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// pause a kafka-cluster running in a environment.
	// kafka-cluster is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// unpause a previously paused kafka-cluster running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the kafka-cluster.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// preview refresh a kafka-cluster that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// refresh a kafka-cluster that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
}

type kafkaClusterCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaClusterCommandControllerClient(cc grpc.ClientConnInterface) KafkaClusterCommandControllerClient {
	return &kafkaClusterCommandControllerClient{cc}
}

func (c *kafkaClusterCommandControllerClient) PreviewCreate(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Create(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Update(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) PreviewRestore(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Restore(ctx context.Context, in *model.KafkaCluster, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Restart(ctx context.Context, in *model.KafkaClusterId, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaClusterCommandControllerServer is the server API for KafkaClusterCommandController service.
// All implementations should embed UnimplementedKafkaClusterCommandControllerServer
// for forward compatibility
type KafkaClusterCommandControllerServer interface {
	// preview create kafka-cluster
	PreviewCreate(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error)
	// create kafka-cluster
	Create(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error)
	// preview update an existing kafka-cluster
	PreviewUpdate(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error)
	// update an existing kafka-cluster
	Update(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error)
	// preview deleting an existing kafka-cluster
	PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KafkaCluster, error)
	// delete an existing kafka-cluster
	Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KafkaCluster, error)
	// preview restoring a deleted kafka-cluster
	PreviewRestore(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error)
	// restore a deleted kafka-cluster
	Restore(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error)
	// create-stack-job for kafka-cluster
	CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.KafkaCluster, error)
	// restart a kafka-cluster running in a environment.
	// kafka-cluster is restarted by deleting running "broker" pods which will be automatically recreated by kubernetes
	// note: zookeeper pods are not deleted.
	Restart(context.Context, *model.KafkaClusterId) (*model.KafkaCluster, error)
	// pause a kafka-cluster running in a environment.
	// kafka-cluster is paused by scaling down number of replicas of
	// the kubernetes deployment/stateful sets to zero in the environment.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.KafkaCluster, error)
	// unpause a previously paused kafka-cluster running in a environment.
	// unpause is done by scaling the number of pods back to the number of
	// replicas configured for the kafka-cluster.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.KafkaCluster, error)
	// preview refresh a kafka-cluster that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KafkaCluster, error)
	// refresh a kafka-cluster that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KafkaCluster, error)
}

// UnimplementedKafkaClusterCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaClusterCommandControllerServer struct {
}

func (UnimplementedKafkaClusterCommandControllerServer) PreviewCreate(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Create(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) PreviewUpdate(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Update(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Delete(context.Context, *model1.ApiResourceDeleteCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) PreviewRestore(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Restore(context.Context, *model.KafkaCluster) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Restart(context.Context, *model.KafkaClusterId) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedKafkaClusterCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeKafkaClusterCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaClusterCommandControllerServer will
// result in compilation errors.
type UnsafeKafkaClusterCommandControllerServer interface {
	mustEmbedUnimplementedKafkaClusterCommandControllerServer()
}

func RegisterKafkaClusterCommandControllerServer(s grpc.ServiceRegistrar, srv KafkaClusterCommandControllerServer) {
	s.RegisterService(&KafkaClusterCommandController_ServiceDesc, srv)
}

func _KafkaClusterCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).PreviewCreate(ctx, req.(*model.KafkaCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Create(ctx, req.(*model.KafkaCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).PreviewUpdate(ctx, req.(*model.KafkaCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Update(ctx, req.(*model.KafkaCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).PreviewRestore(ctx, req.(*model.KafkaCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Restore(ctx, req.(*model.KafkaCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).CreateStackJob(ctx, req.(*model2.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.KafkaClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Restart(ctx, req.(*model.KafkaClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaClusterCommandController_ServiceDesc is the grpc.ServiceDesc for KafkaClusterCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaClusterCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterCommandController",
	HandlerType: (*KafkaClusterCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _KafkaClusterCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _KafkaClusterCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _KafkaClusterCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _KafkaClusterCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _KafkaClusterCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KafkaClusterCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _KafkaClusterCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _KafkaClusterCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _KafkaClusterCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _KafkaClusterCommandController_Restart_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _KafkaClusterCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _KafkaClusterCommandController_Unpause_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _KafkaClusterCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _KafkaClusterCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/kafka/service/command.proto",
}

const (
	KafkaTopicCommandController_Add_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicCommandController/add"
	KafkaTopicCommandController_AddMultiple_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicCommandController/addMultiple"
	KafkaTopicCommandController_Update_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicCommandController/update"
	KafkaTopicCommandController_Delete_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicCommandController/delete"
)

// KafkaTopicCommandControllerClient is the client API for KafkaTopicCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaTopicCommandControllerClient interface {
	// add a single kafka topic to existing list of kafka topics of a kafka-cluster
	Add(ctx context.Context, in *model.AddOrUpdateKafkaTopicCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// add multiple kafka topics to existing list of kafka topics of a kafka-cluster
	AddMultiple(ctx context.Context, in *model.AddKafkaTopicsCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// update a kafka topic.
	Update(ctx context.Context, in *model.AddOrUpdateKafkaTopicCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
	// delete a kafka topic.
	Delete(ctx context.Context, in *model.DeleteOrRestoreKafkaTopicCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error)
}

type kafkaTopicCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaTopicCommandControllerClient(cc grpc.ClientConnInterface) KafkaTopicCommandControllerClient {
	return &kafkaTopicCommandControllerClient{cc}
}

func (c *kafkaTopicCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateKafkaTopicCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaTopicCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaTopicCommandControllerClient) AddMultiple(ctx context.Context, in *model.AddKafkaTopicsCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaTopicCommandController_AddMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaTopicCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateKafkaTopicCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaTopicCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaTopicCommandControllerClient) Delete(ctx context.Context, in *model.DeleteOrRestoreKafkaTopicCommandInput, opts ...grpc.CallOption) (*model.KafkaCluster, error) {
	out := new(model.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaTopicCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaTopicCommandControllerServer is the server API for KafkaTopicCommandController service.
// All implementations should embed UnimplementedKafkaTopicCommandControllerServer
// for forward compatibility
type KafkaTopicCommandControllerServer interface {
	// add a single kafka topic to existing list of kafka topics of a kafka-cluster
	Add(context.Context, *model.AddOrUpdateKafkaTopicCommandInput) (*model.KafkaCluster, error)
	// add multiple kafka topics to existing list of kafka topics of a kafka-cluster
	AddMultiple(context.Context, *model.AddKafkaTopicsCommandInput) (*model.KafkaCluster, error)
	// update a kafka topic.
	Update(context.Context, *model.AddOrUpdateKafkaTopicCommandInput) (*model.KafkaCluster, error)
	// delete a kafka topic.
	Delete(context.Context, *model.DeleteOrRestoreKafkaTopicCommandInput) (*model.KafkaCluster, error)
}

// UnimplementedKafkaTopicCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaTopicCommandControllerServer struct {
}

func (UnimplementedKafkaTopicCommandControllerServer) Add(context.Context, *model.AddOrUpdateKafkaTopicCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedKafkaTopicCommandControllerServer) AddMultiple(context.Context, *model.AddKafkaTopicsCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiple not implemented")
}
func (UnimplementedKafkaTopicCommandControllerServer) Update(context.Context, *model.AddOrUpdateKafkaTopicCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKafkaTopicCommandControllerServer) Delete(context.Context, *model.DeleteOrRestoreKafkaTopicCommandInput) (*model.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeKafkaTopicCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaTopicCommandControllerServer will
// result in compilation errors.
type UnsafeKafkaTopicCommandControllerServer interface {
	mustEmbedUnimplementedKafkaTopicCommandControllerServer()
}

func RegisterKafkaTopicCommandControllerServer(s grpc.ServiceRegistrar, srv KafkaTopicCommandControllerServer) {
	s.RegisterService(&KafkaTopicCommandController_ServiceDesc, srv)
}

func _KafkaTopicCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateKafkaTopicCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaTopicCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaTopicCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaTopicCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateKafkaTopicCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaTopicCommandController_AddMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddKafkaTopicsCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaTopicCommandControllerServer).AddMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaTopicCommandController_AddMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaTopicCommandControllerServer).AddMultiple(ctx, req.(*model.AddKafkaTopicsCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaTopicCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateKafkaTopicCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaTopicCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaTopicCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaTopicCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateKafkaTopicCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaTopicCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteOrRestoreKafkaTopicCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaTopicCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaTopicCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaTopicCommandControllerServer).Delete(ctx, req.(*model.DeleteOrRestoreKafkaTopicCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaTopicCommandController_ServiceDesc is the grpc.ServiceDesc for KafkaTopicCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaTopicCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicCommandController",
	HandlerType: (*KafkaTopicCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _KafkaTopicCommandController_Add_Handler,
		},
		{
			MethodName: "addMultiple",
			Handler:    _KafkaTopicCommandController_AddMultiple_Handler,
		},
		{
			MethodName: "update",
			Handler:    _KafkaTopicCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KafkaTopicCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/kafka/service/command.proto",
}
