// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/deploy/kafka/service/query.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kafka/model"
	model4 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster/model"
	model3 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc/pagination/model"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KafkaClusterQueryController_List_FullMethodName                = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/list"
	KafkaClusterQueryController_GetById_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/getById"
	KafkaClusterQueryController_FindByProductId_FullMethodName     = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/findByProductId"
	KafkaClusterQueryController_FindByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/findByEnvironmentId"
	KafkaClusterQueryController_FindByKubeClusterId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/findByKubeClusterId"
	KafkaClusterQueryController_GetPassword_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/getPassword"
	KafkaClusterQueryController_FindPods_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController/findPods"
)

// KafkaClusterQueryControllerClient is the client API for KafkaClusterQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaClusterQueryControllerClient interface {
	// list all kafka-clusters on planton cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.KafkaClusterList, error)
	// look up kafka-cluster using kafka-cluster id
	GetById(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*model1.KafkaCluster, error)
	// find kafka-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(ctx context.Context, in *model2.ProductId, opts ...grpc.CallOption) (*model1.KafkaClusters, error)
	// find kafka-clusters by environment
	FindByEnvironmentId(ctx context.Context, in *model3.EnvironmentId, opts ...grpc.CallOption) (*model1.KafkaClusters, error)
	// find kafka-clusters by kube-cluster
	FindByKubeClusterId(ctx context.Context, in *model4.KubeClusterId, opts ...grpc.CallOption) (*model1.KafkaClusters, error)
	// look up kafka-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*model1.KafkaClusterPassword, error)
	// lookup pods of a kafka-cluster deployed to a environment
	FindPods(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*resource.Pods, error)
}

type kafkaClusterQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaClusterQueryControllerClient(cc grpc.ClientConnInterface) KafkaClusterQueryControllerClient {
	return &kafkaClusterQueryControllerClient{cc}
}

func (c *kafkaClusterQueryControllerClient) List(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.KafkaClusterList, error) {
	out := new(model1.KafkaClusterList)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterQueryControllerClient) GetById(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*model1.KafkaCluster, error) {
	out := new(model1.KafkaCluster)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterQueryControllerClient) FindByProductId(ctx context.Context, in *model2.ProductId, opts ...grpc.CallOption) (*model1.KafkaClusters, error) {
	out := new(model1.KafkaClusters)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterQueryControllerClient) FindByEnvironmentId(ctx context.Context, in *model3.EnvironmentId, opts ...grpc.CallOption) (*model1.KafkaClusters, error) {
	out := new(model1.KafkaClusters)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_FindByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *model4.KubeClusterId, opts ...grpc.CallOption) (*model1.KafkaClusters, error) {
	out := new(model1.KafkaClusters)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterQueryControllerClient) GetPassword(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*model1.KafkaClusterPassword, error) {
	out := new(model1.KafkaClusterPassword)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClusterQueryControllerClient) FindPods(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*resource.Pods, error) {
	out := new(resource.Pods)
	err := c.cc.Invoke(ctx, KafkaClusterQueryController_FindPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaClusterQueryControllerServer is the server API for KafkaClusterQueryController service.
// All implementations should embed UnimplementedKafkaClusterQueryControllerServer
// for forward compatibility
type KafkaClusterQueryControllerServer interface {
	// list all kafka-clusters on planton cloud for the requested page. This is intended for use on portal.
	List(context.Context, *model.PageInfo) (*model1.KafkaClusterList, error)
	// look up kafka-cluster using kafka-cluster id
	GetById(context.Context, *model1.KafkaClusterId) (*model1.KafkaCluster, error)
	// find kafka-clusters by product id.
	// response contains only the resources that the authenticated user account has viewer access to.
	FindByProductId(context.Context, *model2.ProductId) (*model1.KafkaClusters, error)
	// find kafka-clusters by environment
	FindByEnvironmentId(context.Context, *model3.EnvironmentId) (*model1.KafkaClusters, error)
	// find kafka-clusters by kube-cluster
	FindByKubeClusterId(context.Context, *model4.KubeClusterId) (*model1.KafkaClusters, error)
	// look up kafka-cluster sasl password
	// password is retrieved from the kubernetes cluster.
	GetPassword(context.Context, *model1.KafkaClusterId) (*model1.KafkaClusterPassword, error)
	// lookup pods of a kafka-cluster deployed to a environment
	FindPods(context.Context, *model1.KafkaClusterId) (*resource.Pods, error)
}

// UnimplementedKafkaClusterQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaClusterQueryControllerServer struct {
}

func (UnimplementedKafkaClusterQueryControllerServer) List(context.Context, *model.PageInfo) (*model1.KafkaClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKafkaClusterQueryControllerServer) GetById(context.Context, *model1.KafkaClusterId) (*model1.KafkaCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedKafkaClusterQueryControllerServer) FindByProductId(context.Context, *model2.ProductId) (*model1.KafkaClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedKafkaClusterQueryControllerServer) FindByEnvironmentId(context.Context, *model3.EnvironmentId) (*model1.KafkaClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEnvironmentId not implemented")
}
func (UnimplementedKafkaClusterQueryControllerServer) FindByKubeClusterId(context.Context, *model4.KubeClusterId) (*model1.KafkaClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedKafkaClusterQueryControllerServer) GetPassword(context.Context, *model1.KafkaClusterId) (*model1.KafkaClusterPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedKafkaClusterQueryControllerServer) FindPods(context.Context, *model1.KafkaClusterId) (*resource.Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPods not implemented")
}

// UnsafeKafkaClusterQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaClusterQueryControllerServer will
// result in compilation errors.
type UnsafeKafkaClusterQueryControllerServer interface {
	mustEmbedUnimplementedKafkaClusterQueryControllerServer()
}

func RegisterKafkaClusterQueryControllerServer(s grpc.ServiceRegistrar, srv KafkaClusterQueryControllerServer) {
	s.RegisterService(&KafkaClusterQueryController_ServiceDesc, srv)
}

func _KafkaClusterQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).List(ctx, req.(*model.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.KafkaClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).GetById(ctx, req.(*model1.KafkaClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).FindByProductId(ctx, req.(*model2.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterQueryController_FindByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model3.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).FindByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_FindByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).FindByEnvironmentId(ctx, req.(*model3.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model4.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).FindByKubeClusterId(ctx, req.(*model4.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterQueryController_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.KafkaClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).GetPassword(ctx, req.(*model1.KafkaClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaClusterQueryController_FindPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.KafkaClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaClusterQueryControllerServer).FindPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaClusterQueryController_FindPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaClusterQueryControllerServer).FindPods(ctx, req.(*model1.KafkaClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaClusterQueryController_ServiceDesc is the grpc.ServiceDesc for KafkaClusterQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaClusterQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaClusterQueryController",
	HandlerType: (*KafkaClusterQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _KafkaClusterQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _KafkaClusterQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _KafkaClusterQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByEnvironmentId",
			Handler:    _KafkaClusterQueryController_FindByEnvironmentId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _KafkaClusterQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getPassword",
			Handler:    _KafkaClusterQueryController_GetPassword_Handler,
		},
		{
			MethodName: "findPods",
			Handler:    _KafkaClusterQueryController_FindPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/kafka/service/query.proto",
}

const (
	KafkaTopicQueryController_FindByKafkaClusterId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicQueryController/findByKafkaClusterId"
	KafkaTopicQueryController_GetById_FullMethodName              = "/cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicQueryController/getById"
)

// KafkaTopicQueryControllerClient is the client API for KafkaTopicQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaTopicQueryControllerClient interface {
	// find kafka topics by kafka-cluster id
	FindByKafkaClusterId(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*model1.KafkaTopics, error)
	// look up kafka topic using kafka topic id
	GetById(ctx context.Context, in *model1.KafkaTopicQueryInput, opts ...grpc.CallOption) (*model1.KafkaTopic, error)
}

type kafkaTopicQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaTopicQueryControllerClient(cc grpc.ClientConnInterface) KafkaTopicQueryControllerClient {
	return &kafkaTopicQueryControllerClient{cc}
}

func (c *kafkaTopicQueryControllerClient) FindByKafkaClusterId(ctx context.Context, in *model1.KafkaClusterId, opts ...grpc.CallOption) (*model1.KafkaTopics, error) {
	out := new(model1.KafkaTopics)
	err := c.cc.Invoke(ctx, KafkaTopicQueryController_FindByKafkaClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaTopicQueryControllerClient) GetById(ctx context.Context, in *model1.KafkaTopicQueryInput, opts ...grpc.CallOption) (*model1.KafkaTopic, error) {
	out := new(model1.KafkaTopic)
	err := c.cc.Invoke(ctx, KafkaTopicQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaTopicQueryControllerServer is the server API for KafkaTopicQueryController service.
// All implementations should embed UnimplementedKafkaTopicQueryControllerServer
// for forward compatibility
type KafkaTopicQueryControllerServer interface {
	// find kafka topics by kafka-cluster id
	FindByKafkaClusterId(context.Context, *model1.KafkaClusterId) (*model1.KafkaTopics, error)
	// look up kafka topic using kafka topic id
	GetById(context.Context, *model1.KafkaTopicQueryInput) (*model1.KafkaTopic, error)
}

// UnimplementedKafkaTopicQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaTopicQueryControllerServer struct {
}

func (UnimplementedKafkaTopicQueryControllerServer) FindByKafkaClusterId(context.Context, *model1.KafkaClusterId) (*model1.KafkaTopics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKafkaClusterId not implemented")
}
func (UnimplementedKafkaTopicQueryControllerServer) GetById(context.Context, *model1.KafkaTopicQueryInput) (*model1.KafkaTopic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}

// UnsafeKafkaTopicQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaTopicQueryControllerServer will
// result in compilation errors.
type UnsafeKafkaTopicQueryControllerServer interface {
	mustEmbedUnimplementedKafkaTopicQueryControllerServer()
}

func RegisterKafkaTopicQueryControllerServer(s grpc.ServiceRegistrar, srv KafkaTopicQueryControllerServer) {
	s.RegisterService(&KafkaTopicQueryController_ServiceDesc, srv)
}

func _KafkaTopicQueryController_FindByKafkaClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.KafkaClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaTopicQueryControllerServer).FindByKafkaClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaTopicQueryController_FindByKafkaClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaTopicQueryControllerServer).FindByKafkaClusterId(ctx, req.(*model1.KafkaClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaTopicQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.KafkaTopicQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaTopicQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaTopicQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaTopicQueryControllerServer).GetById(ctx, req.(*model1.KafkaTopicQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaTopicQueryController_ServiceDesc is the grpc.ServiceDesc for KafkaTopicQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaTopicQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.deploy.kafka.service.KafkaTopicQueryController",
	HandlerType: (*KafkaTopicQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findByKafkaClusterId",
			Handler:    _KafkaTopicQueryController_FindByKafkaClusterId_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _KafkaTopicQueryController_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/deploy/kafka/service/query.proto",
}
