// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/develop/artifactstore/stack/gcp/service/stack.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/artifactstore/stack/gcp/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtifactStoreGcpStackController_Execute_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.develop.artifactstore.stack.gcp.service.ArtifactStoreGcpStackController/execute"
	ArtifactStoreGcpStackController_GetStackOutputs_FullMethodName = "/cloud.planton.apis.v1.code2cloud.develop.artifactstore.stack.gcp.service.ArtifactStoreGcpStackController/getStackOutputs"
)

// ArtifactStoreGcpStackControllerClient is the client API for ArtifactStoreGcpStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactStoreGcpStackControllerClient interface {
	Execute(ctx context.Context, in *model.ArtifactStoreGcpStackInput, opts ...grpc.CallOption) (ArtifactStoreGcpStackController_ExecuteClient, error)
	GetStackOutputs(ctx context.Context, in *model.ArtifactStoreGcpStackInput, opts ...grpc.CallOption) (*model.ArtifactStoreGcpStackOutputs, error)
}

type artifactStoreGcpStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactStoreGcpStackControllerClient(cc grpc.ClientConnInterface) ArtifactStoreGcpStackControllerClient {
	return &artifactStoreGcpStackControllerClient{cc}
}

func (c *artifactStoreGcpStackControllerClient) Execute(ctx context.Context, in *model.ArtifactStoreGcpStackInput, opts ...grpc.CallOption) (ArtifactStoreGcpStackController_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtifactStoreGcpStackController_ServiceDesc.Streams[0], ArtifactStoreGcpStackController_Execute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &artifactStoreGcpStackControllerExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtifactStoreGcpStackController_ExecuteClient interface {
	Recv() (*model.ArtifactStoreGcpStackResponse, error)
	grpc.ClientStream
}

type artifactStoreGcpStackControllerExecuteClient struct {
	grpc.ClientStream
}

func (x *artifactStoreGcpStackControllerExecuteClient) Recv() (*model.ArtifactStoreGcpStackResponse, error) {
	m := new(model.ArtifactStoreGcpStackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *artifactStoreGcpStackControllerClient) GetStackOutputs(ctx context.Context, in *model.ArtifactStoreGcpStackInput, opts ...grpc.CallOption) (*model.ArtifactStoreGcpStackOutputs, error) {
	out := new(model.ArtifactStoreGcpStackOutputs)
	err := c.cc.Invoke(ctx, ArtifactStoreGcpStackController_GetStackOutputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactStoreGcpStackControllerServer is the server API for ArtifactStoreGcpStackController service.
// All implementations should embed UnimplementedArtifactStoreGcpStackControllerServer
// for forward compatibility
type ArtifactStoreGcpStackControllerServer interface {
	Execute(*model.ArtifactStoreGcpStackInput, ArtifactStoreGcpStackController_ExecuteServer) error
	GetStackOutputs(context.Context, *model.ArtifactStoreGcpStackInput) (*model.ArtifactStoreGcpStackOutputs, error)
}

// UnimplementedArtifactStoreGcpStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedArtifactStoreGcpStackControllerServer struct {
}

func (UnimplementedArtifactStoreGcpStackControllerServer) Execute(*model.ArtifactStoreGcpStackInput, ArtifactStoreGcpStackController_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedArtifactStoreGcpStackControllerServer) GetStackOutputs(context.Context, *model.ArtifactStoreGcpStackInput) (*model.ArtifactStoreGcpStackOutputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStackOutputs not implemented")
}

// UnsafeArtifactStoreGcpStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactStoreGcpStackControllerServer will
// result in compilation errors.
type UnsafeArtifactStoreGcpStackControllerServer interface {
	mustEmbedUnimplementedArtifactStoreGcpStackControllerServer()
}

func RegisterArtifactStoreGcpStackControllerServer(s grpc.ServiceRegistrar, srv ArtifactStoreGcpStackControllerServer) {
	s.RegisterService(&ArtifactStoreGcpStackController_ServiceDesc, srv)
}

func _ArtifactStoreGcpStackController_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.ArtifactStoreGcpStackInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtifactStoreGcpStackControllerServer).Execute(m, &artifactStoreGcpStackControllerExecuteServer{stream})
}

type ArtifactStoreGcpStackController_ExecuteServer interface {
	Send(*model.ArtifactStoreGcpStackResponse) error
	grpc.ServerStream
}

type artifactStoreGcpStackControllerExecuteServer struct {
	grpc.ServerStream
}

func (x *artifactStoreGcpStackControllerExecuteServer) Send(m *model.ArtifactStoreGcpStackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ArtifactStoreGcpStackController_GetStackOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ArtifactStoreGcpStackInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactStoreGcpStackControllerServer).GetStackOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactStoreGcpStackController_GetStackOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactStoreGcpStackControllerServer).GetStackOutputs(ctx, req.(*model.ArtifactStoreGcpStackInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactStoreGcpStackController_ServiceDesc is the grpc.ServiceDesc for ArtifactStoreGcpStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactStoreGcpStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.develop.artifactstore.stack.gcp.service.ArtifactStoreGcpStackController",
	HandlerType: (*ArtifactStoreGcpStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStackOutputs",
			Handler:    _ArtifactStoreGcpStackController_GetStackOutputs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _ArtifactStoreGcpStackController_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/planton/apis/v1/code2cloud/develop/artifactstore/stack/gcp/service/stack.proto",
}
