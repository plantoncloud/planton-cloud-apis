// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/enums/profile/profile.proto

package profile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// deviation from the recommended best-practice of prefixing all enum entries with enum type in order to use the
// language to name and identify project specific folders.
type CodeProjectLang int32

const (
	CodeProjectLang_CODE_PROJECT_LANG_UNSPECIFIED    CodeProjectLang = 0
	CodeProjectLang_CODE_PROJECT_LANG_NOT_APPLICABLE CodeProjectLang = 1
	CodeProjectLang_PROTOBUF                         CodeProjectLang = 2
	CodeProjectLang_GOLANG                           CodeProjectLang = 3
	CodeProjectLang_JAVA                             CodeProjectLang = 4
	CodeProjectLang_PYTHON                           CodeProjectLang = 5
	CodeProjectLang_JAVASCRIPT                       CodeProjectLang = 6
	CodeProjectLang_RUST                             CodeProjectLang = 7
	CodeProjectLang_DOCKER                           CodeProjectLang = 8
)

// Enum value maps for CodeProjectLang.
var (
	CodeProjectLang_name = map[int32]string{
		0: "CODE_PROJECT_LANG_UNSPECIFIED",
		1: "CODE_PROJECT_LANG_NOT_APPLICABLE",
		2: "PROTOBUF",
		3: "GOLANG",
		4: "JAVA",
		5: "PYTHON",
		6: "JAVASCRIPT",
		7: "RUST",
		8: "DOCKER",
	}
	CodeProjectLang_value = map[string]int32{
		"CODE_PROJECT_LANG_UNSPECIFIED":    0,
		"CODE_PROJECT_LANG_NOT_APPLICABLE": 1,
		"PROTOBUF":                         2,
		"GOLANG":                           3,
		"JAVA":                             4,
		"PYTHON":                           5,
		"JAVASCRIPT":                       6,
		"RUST":                             7,
		"DOCKER":                           8,
	}
)

func (x CodeProjectLang) Enum() *CodeProjectLang {
	p := new(CodeProjectLang)
	*p = x
	return p
}

func (x CodeProjectLang) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeProjectLang) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[0].Descriptor()
}

func (CodeProjectLang) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[0]
}

func (x CodeProjectLang) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeProjectLang.Descriptor instead.
func (CodeProjectLang) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP(), []int{0}
}

type CodeProjectCat int32

const (
	CodeProjectCat_CODE_PROJECT_CAT_UNSPECIFIED    CodeProjectCat = 0
	CodeProjectCat_CODE_PROJECT_CAT_NOT_APPLICABLE CodeProjectCat = 1
	CodeProjectCat_CODE_PROJECT_CAT_CLI            CodeProjectCat = 2
	CodeProjectCat_CODE_PROJECT_CAT_LIB            CodeProjectCat = 3
	CodeProjectCat_CODE_PROJECT_CAT_MICROSERVICE   CodeProjectCat = 4
)

// Enum value maps for CodeProjectCat.
var (
	CodeProjectCat_name = map[int32]string{
		0: "CODE_PROJECT_CAT_UNSPECIFIED",
		1: "CODE_PROJECT_CAT_NOT_APPLICABLE",
		2: "CODE_PROJECT_CAT_CLI",
		3: "CODE_PROJECT_CAT_LIB",
		4: "CODE_PROJECT_CAT_MICROSERVICE",
	}
	CodeProjectCat_value = map[string]int32{
		"CODE_PROJECT_CAT_UNSPECIFIED":    0,
		"CODE_PROJECT_CAT_NOT_APPLICABLE": 1,
		"CODE_PROJECT_CAT_CLI":            2,
		"CODE_PROJECT_CAT_LIB":            3,
		"CODE_PROJECT_CAT_MICROSERVICE":   4,
	}
)

func (x CodeProjectCat) Enum() *CodeProjectCat {
	p := new(CodeProjectCat)
	*p = x
	return p
}

func (x CodeProjectCat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeProjectCat) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[1].Descriptor()
}

func (CodeProjectCat) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[1]
}

func (x CodeProjectCat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeProjectCat.Descriptor instead.
func (CodeProjectCat) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP(), []int{1}
}

type CodeProjectCatLibSubCat int32

const (
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_UNSPECIFIED    CodeProjectCatLibSubCat = 0
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_NOT_APPLICABLE CodeProjectCatLibSubCat = 1
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_JAVA_JAR       CodeProjectCatLibSubCat = 2
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_GO_MODULE      CodeProjectCatLibSubCat = 3
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_NPM_PACKAGE    CodeProjectCatLibSubCat = 4
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_PYTHON_PACKAGE CodeProjectCatLibSubCat = 5
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_DOCKER_IMAGE   CodeProjectCatLibSubCat = 6
	CodeProjectCatLibSubCat_CODE_PROJECT_CAT_LIB_SUB_CAT_PROTO          CodeProjectCatLibSubCat = 7
)

// Enum value maps for CodeProjectCatLibSubCat.
var (
	CodeProjectCatLibSubCat_name = map[int32]string{
		0: "CODE_PROJECT_CAT_LIB_SUB_CAT_UNSPECIFIED",
		1: "CODE_PROJECT_CAT_LIB_SUB_CAT_NOT_APPLICABLE",
		2: "CODE_PROJECT_CAT_LIB_SUB_CAT_JAVA_JAR",
		3: "CODE_PROJECT_CAT_LIB_SUB_CAT_GO_MODULE",
		4: "CODE_PROJECT_CAT_LIB_SUB_CAT_NPM_PACKAGE",
		5: "CODE_PROJECT_CAT_LIB_SUB_CAT_PYTHON_PACKAGE",
		6: "CODE_PROJECT_CAT_LIB_SUB_CAT_DOCKER_IMAGE",
		7: "CODE_PROJECT_CAT_LIB_SUB_CAT_PROTO",
	}
	CodeProjectCatLibSubCat_value = map[string]int32{
		"CODE_PROJECT_CAT_LIB_SUB_CAT_UNSPECIFIED":    0,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_NOT_APPLICABLE": 1,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_JAVA_JAR":       2,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_GO_MODULE":      3,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_NPM_PACKAGE":    4,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_PYTHON_PACKAGE": 5,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_DOCKER_IMAGE":   6,
		"CODE_PROJECT_CAT_LIB_SUB_CAT_PROTO":          7,
	}
)

func (x CodeProjectCatLibSubCat) Enum() *CodeProjectCatLibSubCat {
	p := new(CodeProjectCatLibSubCat)
	*p = x
	return p
}

func (x CodeProjectCatLibSubCat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeProjectCatLibSubCat) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[2].Descriptor()
}

func (CodeProjectCatLibSubCat) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[2]
}

func (x CodeProjectCatLibSubCat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeProjectCatLibSubCat.Descriptor instead.
func (CodeProjectCatLibSubCat) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP(), []int{2}
}

type CodeProjectCatMicroserviceSubCat int32

const (
	CodeProjectCatMicroserviceSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_UNSPECIFIED    CodeProjectCatMicroserviceSubCat = 0
	CodeProjectCatMicroserviceSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_NOT_APPLICABLE CodeProjectCatMicroserviceSubCat = 1
	CodeProjectCatMicroserviceSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API            CodeProjectCatMicroserviceSubCat = 2
	CodeProjectCatMicroserviceSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_JOB            CodeProjectCatMicroserviceSubCat = 3
	CodeProjectCatMicroserviceSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP        CodeProjectCatMicroserviceSubCat = 4
)

// Enum value maps for CodeProjectCatMicroserviceSubCat.
var (
	CodeProjectCatMicroserviceSubCat_name = map[int32]string{
		0: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_UNSPECIFIED",
		1: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_NOT_APPLICABLE",
		2: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API",
		3: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_JOB",
		4: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP",
	}
	CodeProjectCatMicroserviceSubCat_value = map[string]int32{
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_UNSPECIFIED":    0,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_NOT_APPLICABLE": 1,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API":            2,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_JOB":            3,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP":        4,
	}
)

func (x CodeProjectCatMicroserviceSubCat) Enum() *CodeProjectCatMicroserviceSubCat {
	p := new(CodeProjectCatMicroserviceSubCat)
	*p = x
	return p
}

func (x CodeProjectCatMicroserviceSubCat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeProjectCatMicroserviceSubCat) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[3].Descriptor()
}

func (CodeProjectCatMicroserviceSubCat) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[3]
}

func (x CodeProjectCatMicroserviceSubCat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeProjectCatMicroserviceSubCat.Descriptor instead.
func (CodeProjectCatMicroserviceSubCat) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP(), []int{3}
}

type CodeProjectCatMicroserviceSubCatApiSubSubCat int32

const (
	CodeProjectCatMicroserviceSubCatApiSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_UNSPECIFIED    CodeProjectCatMicroserviceSubCatApiSubSubCat = 0
	CodeProjectCatMicroserviceSubCatApiSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_NOT_APPLICABLE CodeProjectCatMicroserviceSubCatApiSubSubCat = 1
	CodeProjectCatMicroserviceSubCatApiSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_REST           CodeProjectCatMicroserviceSubCatApiSubSubCat = 2
	CodeProjectCatMicroserviceSubCatApiSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRPC           CodeProjectCatMicroserviceSubCatApiSubSubCat = 3
	CodeProjectCatMicroserviceSubCatApiSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRAPHQL        CodeProjectCatMicroserviceSubCatApiSubSubCat = 4
)

// Enum value maps for CodeProjectCatMicroserviceSubCatApiSubSubCat.
var (
	CodeProjectCatMicroserviceSubCatApiSubSubCat_name = map[int32]string{
		0: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_UNSPECIFIED",
		1: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_NOT_APPLICABLE",
		2: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_REST",
		3: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRPC",
		4: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRAPHQL",
	}
	CodeProjectCatMicroserviceSubCatApiSubSubCat_value = map[string]int32{
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_UNSPECIFIED":    0,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_NOT_APPLICABLE": 1,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_REST":           2,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRPC":           3,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_API_SUB_SUB_CAT_GRAPHQL":        4,
	}
)

func (x CodeProjectCatMicroserviceSubCatApiSubSubCat) Enum() *CodeProjectCatMicroserviceSubCatApiSubSubCat {
	p := new(CodeProjectCatMicroserviceSubCatApiSubSubCat)
	*p = x
	return p
}

func (x CodeProjectCatMicroserviceSubCatApiSubSubCat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeProjectCatMicroserviceSubCatApiSubSubCat) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[4].Descriptor()
}

func (CodeProjectCatMicroserviceSubCatApiSubSubCat) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[4]
}

func (x CodeProjectCatMicroserviceSubCatApiSubSubCat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeProjectCatMicroserviceSubCatApiSubSubCat.Descriptor instead.
func (CodeProjectCatMicroserviceSubCatApiSubSubCat) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP(), []int{4}
}

type CodeProjectCatMicroserviceSubCatWebAppSubSubCat int32

const (
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_UNSPECIFIED    CodeProjectCatMicroserviceSubCatWebAppSubSubCat = 0
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NOT_APPLICABLE CodeProjectCatMicroserviceSubCatWebAppSubSubCat = 1
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_DOCUSAURUS     CodeProjectCatMicroserviceSubCatWebAppSubSubCat = 2
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NEXTJS         CodeProjectCatMicroserviceSubCatWebAppSubSubCat = 3
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_STATIC_SITE    CodeProjectCatMicroserviceSubCatWebAppSubSubCat = 4
)

// Enum value maps for CodeProjectCatMicroserviceSubCatWebAppSubSubCat.
var (
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_name = map[int32]string{
		0: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_UNSPECIFIED",
		1: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NOT_APPLICABLE",
		2: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_DOCUSAURUS",
		3: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NEXTJS",
		4: "CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_STATIC_SITE",
	}
	CodeProjectCatMicroserviceSubCatWebAppSubSubCat_value = map[string]int32{
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_UNSPECIFIED":    0,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NOT_APPLICABLE": 1,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_DOCUSAURUS":     2,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_NEXTJS":         3,
		"CODE_PROJECT_CAT_MICROSERVICE_SUB_CAT_WEB_APP_SUB_SUB_CAT_STATIC_SITE":    4,
	}
)

func (x CodeProjectCatMicroserviceSubCatWebAppSubSubCat) Enum() *CodeProjectCatMicroserviceSubCatWebAppSubSubCat {
	p := new(CodeProjectCatMicroserviceSubCatWebAppSubSubCat)
	*p = x
	return p
}

func (x CodeProjectCatMicroserviceSubCatWebAppSubSubCat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeProjectCatMicroserviceSubCatWebAppSubSubCat) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[5].Descriptor()
}

func (CodeProjectCatMicroserviceSubCatWebAppSubSubCat) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes[5]
}

func (x CodeProjectCatMicroserviceSubCatWebAppSubSubCat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeProjectCatMicroserviceSubCatWebAppSubSubCat.Descriptor instead.
func (CodeProjectCatMicroserviceSubCatWebAppSubSubCat) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP(), []int{5}
}

var File_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDesc = []byte{
	0x0a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x49, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2a, 0xb0, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x47,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4c, 0x41, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x41, 0x56, 0x41, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10,
	0x06, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x53, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x08, 0x2a, 0xae, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f,
	0x4c, 0x49, 0x42, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x2a, 0x85, 0x03, 0x0a, 0x17, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x4c, 0x69, 0x62, 0x53, 0x75,
	0x62, 0x43, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x43, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x43, 0x41, 0x54, 0x5f, 0x4a, 0x41, 0x56, 0x41, 0x5f, 0x4a, 0x41, 0x52, 0x10, 0x02, 0x12, 0x2a,
	0x0a, 0x26, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x47,
	0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c,
	0x49, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4e, 0x50, 0x4d, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49,
	0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x07,
	0x2a, 0xa4, 0x02, 0x0a, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54,
	0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f,
	0x41, 0x50, 0x49, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4a,
	0x4f, 0x42, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x57, 0x45,
	0x42, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x04, 0x2a, 0x82, 0x03, 0x0a, 0x2c, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x41, 0x70, 0x69, 0x53,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x41, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41,
	0x54, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x48, 0x0a, 0x44, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x03, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x51, 0x4c, 0x10, 0x04, 0x2a, 0xa5, 0x03, 0x0a,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61,
	0x74, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x12, 0x49, 0x0a, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x48, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f,
	0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x43, 0x41, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x48, 0x0a, 0x44, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x53, 0x41, 0x55, 0x52, 0x55,
	0x53, 0x10, 0x02, 0x12, 0x44, 0x0a, 0x40, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x57, 0x45, 0x42,
	0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x4a, 0x53, 0x10, 0x03, 0x12, 0x49, 0x0a, 0x45, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x49,
	0x54, 0x45, 0x10, 0x04, 0x42, 0xb6, 0x04, 0x0a, 0x57, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x79, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67,
	0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xa2, 0x02, 0x0a, 0x43, 0x50,
	0x41, 0x56, 0x43, 0x44, 0x53, 0x50, 0x45, 0x50, 0xaa, 0x02, 0x49, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0xca, 0x02, 0x49, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0xe2, 0x02, 0x55, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x52, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x3a, 0x3a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_goTypes = []interface{}{
	(CodeProjectLang)(0),                                 // 0: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectLang
	(CodeProjectCat)(0),                                  // 1: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCat
	(CodeProjectCatLibSubCat)(0),                         // 2: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatLibSubCat
	(CodeProjectCatMicroserviceSubCat)(0),                // 3: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCat
	(CodeProjectCatMicroserviceSubCatApiSubSubCat)(0),    // 4: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatApiSubSubCat
	(CodeProjectCatMicroserviceSubCatWebAppSubSubCat)(0), // 5: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat
}
var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_init()
}
func file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_depIdxs,
		EnumInfos:         file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_enumTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_enums_profile_profile_proto_depIdxs = nil
}
