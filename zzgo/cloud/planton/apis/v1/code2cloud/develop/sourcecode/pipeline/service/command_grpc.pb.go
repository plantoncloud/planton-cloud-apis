// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/pipeline/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodePipelineCommandController_AddOrUpdatePipeline_FullMethodName = "/cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.service.CodePipelineCommandController/addOrUpdatePipeline"
)

// CodePipelineCommandControllerClient is the client API for CodePipelineCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodePipelineCommandControllerClient interface {
	// add or update magic pipeline for a code project
	AddOrUpdatePipeline(ctx context.Context, in *model.CodeProjectId, opts ...grpc.CallOption) (*model.CodeProject, error)
}

type codePipelineCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCodePipelineCommandControllerClient(cc grpc.ClientConnInterface) CodePipelineCommandControllerClient {
	return &codePipelineCommandControllerClient{cc}
}

func (c *codePipelineCommandControllerClient) AddOrUpdatePipeline(ctx context.Context, in *model.CodeProjectId, opts ...grpc.CallOption) (*model.CodeProject, error) {
	out := new(model.CodeProject)
	err := c.cc.Invoke(ctx, CodePipelineCommandController_AddOrUpdatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodePipelineCommandControllerServer is the server API for CodePipelineCommandController service.
// All implementations should embed UnimplementedCodePipelineCommandControllerServer
// for forward compatibility
type CodePipelineCommandControllerServer interface {
	// add or update magic pipeline for a code project
	AddOrUpdatePipeline(context.Context, *model.CodeProjectId) (*model.CodeProject, error)
}

// UnimplementedCodePipelineCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCodePipelineCommandControllerServer struct {
}

func (UnimplementedCodePipelineCommandControllerServer) AddOrUpdatePipeline(context.Context, *model.CodeProjectId) (*model.CodeProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdatePipeline not implemented")
}

// UnsafeCodePipelineCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodePipelineCommandControllerServer will
// result in compilation errors.
type UnsafeCodePipelineCommandControllerServer interface {
	mustEmbedUnimplementedCodePipelineCommandControllerServer()
}

func RegisterCodePipelineCommandControllerServer(s grpc.ServiceRegistrar, srv CodePipelineCommandControllerServer) {
	s.RegisterService(&CodePipelineCommandController_ServiceDesc, srv)
}

func _CodePipelineCommandController_AddOrUpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CodeProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodePipelineCommandControllerServer).AddOrUpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodePipelineCommandController_AddOrUpdatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodePipelineCommandControllerServer).AddOrUpdatePipeline(ctx, req.(*model.CodeProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

// CodePipelineCommandController_ServiceDesc is the grpc.ServiceDesc for CodePipelineCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodePipelineCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.develop.sourcecode.pipeline.service.CodePipelineCommandController",
	HandlerType: (*CodePipelineCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addOrUpdatePipeline",
			Handler:    _CodePipelineCommandController_AddOrUpdatePipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/develop/sourcecode/pipeline/service/command.proto",
}
