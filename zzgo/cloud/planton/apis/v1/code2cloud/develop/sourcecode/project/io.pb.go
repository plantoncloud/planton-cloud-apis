// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/io.proto

package project

import (
	profile "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/enums/profile"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wrapper for code project id
type CodeProjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CodeProjectId) Reset() {
	*x = CodeProjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectId) ProtoMessage() {}

func (x *CodeProjectId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectId.ProtoReflect.Descriptor instead.
func (*CodeProjectId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{0}
}

func (x *CodeProjectId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list of code project ids
type CodeProjectIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []string `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectIds) Reset() {
	*x = CodeProjectIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectIds) ProtoMessage() {}

func (x *CodeProjectIds) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectIds.ProtoReflect.Descriptor instead.
func (*CodeProjectIds) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{1}
}

func (x *CodeProjectIds) GetEntries() []string {
	if x != nil {
		return x.Entries
	}
	return nil
}

// wrapper for code project url
type CodeProjectUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CodeProjectUrl) Reset() {
	*x = CodeProjectUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectUrl) ProtoMessage() {}

func (x *CodeProjectUrl) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectUrl.ProtoReflect.Descriptor instead.
func (*CodeProjectUrl) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{2}
}

func (x *CodeProjectUrl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list of code projects
type CodeProjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CodeProject `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjects) Reset() {
	*x = CodeProjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjects) ProtoMessage() {}

func (x *CodeProjects) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjects.ProtoReflect.Descriptor instead.
func (*CodeProjects) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{3}
}

func (x *CodeProjects) GetEntries() []*CodeProject {
	if x != nil {
		return x.Entries
	}
	return nil
}

// response for paginated query to list code projects
type CodeProjectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPages int32          `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Entries    []*CodeProject `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectList) Reset() {
	*x = CodeProjectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectList) ProtoMessage() {}

func (x *CodeProjectList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectList.ProtoReflect.Descriptor instead.
func (*CodeProjectList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{4}
}

func (x *CodeProjectList) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *CodeProjectList) GetEntries() []*CodeProject {
	if x != nil {
		return x.Entries
	}
	return nil
}

// input for command to attach a machine account to code-project on upstream code-server(github/gitlab)
type AttachMachineAccountByCodeProjectIdCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email of the machine account to be attached to the code-project
	MachineAccountEmail string `protobuf:"bytes,1,opt,name=machine_account_email,json=machineAccountEmail,proto3" json:"machine_account_email,omitempty"`
	// id of the code project to which the machine account is to be attached
	CodeProjectId string `protobuf:"bytes,2,opt,name=code_project_id,json=codeProjectId,proto3" json:"code_project_id,omitempty"`
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) Reset() {
	*x = AttachMachineAccountByCodeProjectIdCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachMachineAccountByCodeProjectIdCommandInput) ProtoMessage() {}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachMachineAccountByCodeProjectIdCommandInput.ProtoReflect.Descriptor instead.
func (*AttachMachineAccountByCodeProjectIdCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{5}
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) GetMachineAccountEmail() string {
	if x != nil {
		return x.MachineAccountEmail
	}
	return ""
}

func (x *AttachMachineAccountByCodeProjectIdCommandInput) GetCodeProjectId() string {
	if x != nil {
		return x.CodeProjectId
	}
	return ""
}

// code project file
type CodeProjectFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path of the file, including the name of the file ex: .github/workflows/main.yaml
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// base64 encoded content of the template file
	FileContentBase64 string `protobuf:"bytes,2,opt,name=file_content_base64,json=fileContentBase64,proto3" json:"file_content_base64,omitempty"`
	// file content plain text
	FileContent string `protobuf:"bytes,3,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *CodeProjectFile) Reset() {
	*x = CodeProjectFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectFile) ProtoMessage() {}

func (x *CodeProjectFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectFile.ProtoReflect.Descriptor instead.
func (*CodeProjectFile) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{6}
}

func (x *CodeProjectFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CodeProjectFile) GetFileContentBase64() string {
	if x != nil {
		return x.FileContentBase64
	}
	return ""
}

func (x *CodeProjectFile) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

// list of code project files
type CodeProjectFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CodeProjectFile `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CodeProjectFiles) Reset() {
	*x = CodeProjectFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectFiles) ProtoMessage() {}

func (x *CodeProjectFiles) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectFiles.ProtoReflect.Descriptor instead.
func (*CodeProjectFiles) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{7}
}

func (x *CodeProjectFiles) GetEntries() []*CodeProjectFile {
	if x != nil {
		return x.Entries
	}
	return nil
}

// code project profile
type CodeProjectProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this field is only used in the local context and is ignored for operations performed on the server.
	CodeProjectDir string `protobuf:"bytes,1,opt,name=code_project_dir,json=codeProjectDir,proto3" json:"code_project_dir,omitempty"`
	// is code project deployable to a environment.
	// this field is only used in the local context and is ignored for operations performed on the server.
	IsDeployable bool `protobuf:"varint,2,opt,name=is_deployable,json=isDeployable,proto3" json:"is_deployable,omitempty"`
	// code project language
	Lang profile.CodeProjectLang `protobuf:"varint,3,opt,name=lang,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectLang" json:"lang,omitempty"`
	// code project category library vs cli vs microservice
	Cat profile.CodeProjectCat `protobuf:"varint,4,opt,name=cat,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCat" json:"cat,omitempty"`
	// code project sub category
	//
	// Types that are assignable to SubCat:
	//
	//	*CodeProjectProfile_LibSubCat
	//	*CodeProjectProfile_MicroserviceSubCat
	SubCat isCodeProjectProfile_SubCat `protobuf_oneof:"sub_cat"`
	// code project sub-sub category
	//
	// Types that are assignable to SubSubCat:
	//
	//	*CodeProjectProfile_MicroserviceApiSubSubCat
	//	*CodeProjectProfile_MicroserviceWebAppSubSubCat
	SubSubCat isCodeProjectProfile_SubSubCat `protobuf_oneof:"sub_sub_cat"`
}

func (x *CodeProjectProfile) Reset() {
	*x = CodeProjectProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeProjectProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeProjectProfile) ProtoMessage() {}

func (x *CodeProjectProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeProjectProfile.ProtoReflect.Descriptor instead.
func (*CodeProjectProfile) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP(), []int{8}
}

func (x *CodeProjectProfile) GetCodeProjectDir() string {
	if x != nil {
		return x.CodeProjectDir
	}
	return ""
}

func (x *CodeProjectProfile) GetIsDeployable() bool {
	if x != nil {
		return x.IsDeployable
	}
	return false
}

func (x *CodeProjectProfile) GetLang() profile.CodeProjectLang {
	if x != nil {
		return x.Lang
	}
	return profile.CodeProjectLang(0)
}

func (x *CodeProjectProfile) GetCat() profile.CodeProjectCat {
	if x != nil {
		return x.Cat
	}
	return profile.CodeProjectCat(0)
}

func (m *CodeProjectProfile) GetSubCat() isCodeProjectProfile_SubCat {
	if m != nil {
		return m.SubCat
	}
	return nil
}

func (x *CodeProjectProfile) GetLibSubCat() profile.CodeProjectCatLibSubCat {
	if x, ok := x.GetSubCat().(*CodeProjectProfile_LibSubCat); ok {
		return x.LibSubCat
	}
	return profile.CodeProjectCatLibSubCat(0)
}

func (x *CodeProjectProfile) GetMicroserviceSubCat() profile.CodeProjectCatMicroserviceSubCat {
	if x, ok := x.GetSubCat().(*CodeProjectProfile_MicroserviceSubCat); ok {
		return x.MicroserviceSubCat
	}
	return profile.CodeProjectCatMicroserviceSubCat(0)
}

func (m *CodeProjectProfile) GetSubSubCat() isCodeProjectProfile_SubSubCat {
	if m != nil {
		return m.SubSubCat
	}
	return nil
}

func (x *CodeProjectProfile) GetMicroserviceApiSubSubCat() profile.CodeProjectCatMicroserviceSubCatApiSubSubCat {
	if x, ok := x.GetSubSubCat().(*CodeProjectProfile_MicroserviceApiSubSubCat); ok {
		return x.MicroserviceApiSubSubCat
	}
	return profile.CodeProjectCatMicroserviceSubCatApiSubSubCat(0)
}

func (x *CodeProjectProfile) GetMicroserviceWebAppSubSubCat() profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat {
	if x, ok := x.GetSubSubCat().(*CodeProjectProfile_MicroserviceWebAppSubSubCat); ok {
		return x.MicroserviceWebAppSubSubCat
	}
	return profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat(0)
}

type isCodeProjectProfile_SubCat interface {
	isCodeProjectProfile_SubCat()
}

type CodeProjectProfile_LibSubCat struct {
	LibSubCat profile.CodeProjectCatLibSubCat `protobuf:"varint,5,opt,name=lib_sub_cat,json=libSubCat,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatLibSubCat,oneof"`
}

type CodeProjectProfile_MicroserviceSubCat struct {
	MicroserviceSubCat profile.CodeProjectCatMicroserviceSubCat `protobuf:"varint,6,opt,name=microservice_sub_cat,json=microserviceSubCat,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCat,oneof"`
}

func (*CodeProjectProfile_LibSubCat) isCodeProjectProfile_SubCat() {}

func (*CodeProjectProfile_MicroserviceSubCat) isCodeProjectProfile_SubCat() {}

type isCodeProjectProfile_SubSubCat interface {
	isCodeProjectProfile_SubSubCat()
}

type CodeProjectProfile_MicroserviceApiSubSubCat struct {
	MicroserviceApiSubSubCat profile.CodeProjectCatMicroserviceSubCatApiSubSubCat `protobuf:"varint,7,opt,name=microservice_api_sub_sub_cat,json=microserviceApiSubSubCat,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatApiSubSubCat,oneof"`
}

type CodeProjectProfile_MicroserviceWebAppSubSubCat struct {
	MicroserviceWebAppSubSubCat profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat `protobuf:"varint,8,opt,name=microservice_web_app_sub_sub_cat,json=microserviceWebAppSubSubCat,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat,oneof"`
}

func (*CodeProjectProfile_MicroserviceApiSubSubCat) isCodeProjectProfile_SubSubCat() {}

func (*CodeProjectProfile_MicroserviceWebAppSubSubCat) isCodeProjectProfile_SubSubCat() {}

var File_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDesc = []byte{
	0x0a, 0x44, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x0e,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x72, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x62, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x2f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x7a, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x85, 0x08,
	0x0a, 0x12, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x59, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x52, 0x03, 0x63, 0x61, 0x74,
	0x12, 0x84, 0x01, 0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x4c, 0x69, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69,
	0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0xb9, 0x01, 0x0a, 0x1c, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x77, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x41, 0x70, 0x69,
	0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x48, 0x01, 0x52, 0x18, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x7a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x57, 0x65, 0x62,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x48, 0x01, 0x52, 0x1b,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x41,
	0x70, 0x70, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x61, 0x74, 0x42, 0xd9, 0x03, 0x0a, 0x49, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xa2, 0x02, 0x08, 0x43, 0x50,
	0x41, 0x56, 0x43, 0x44, 0x53, 0x50, 0xaa, 0x02, 0x3b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0xca, 0x02, 0x3b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0xe2, 0x02, 0x47, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x42, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41,
	0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x3a, 0x3a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_goTypes = []interface{}{
	(*CodeProjectId)(nil),   // 0: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectId
	(*CodeProjectIds)(nil),  // 1: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectIds
	(*CodeProjectUrl)(nil),  // 2: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectUrl
	(*CodeProjects)(nil),    // 3: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjects
	(*CodeProjectList)(nil), // 4: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectList
	(*AttachMachineAccountByCodeProjectIdCommandInput)(nil),      // 5: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.AttachMachineAccountByCodeProjectIdCommandInput
	(*CodeProjectFile)(nil),                                      // 6: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectFile
	(*CodeProjectFiles)(nil),                                     // 7: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectFiles
	(*CodeProjectProfile)(nil),                                   // 8: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile
	(*CodeProject)(nil),                                          // 9: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProject
	(profile.CodeProjectLang)(0),                                 // 10: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectLang
	(profile.CodeProjectCat)(0),                                  // 11: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCat
	(profile.CodeProjectCatLibSubCat)(0),                         // 12: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatLibSubCat
	(profile.CodeProjectCatMicroserviceSubCat)(0),                // 13: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCat
	(profile.CodeProjectCatMicroserviceSubCatApiSubSubCat)(0),    // 14: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatApiSubSubCat
	(profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat)(0), // 15: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat
}
var file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_depIdxs = []int32{
	9,  // 0: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjects.entries:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProject
	9,  // 1: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectList.entries:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProject
	6,  // 2: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectFiles.entries:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectFile
	10, // 3: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile.lang:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectLang
	11, // 4: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile.cat:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCat
	12, // 5: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile.lib_sub_cat:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatLibSubCat
	13, // 6: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile.microservice_sub_cat:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCat
	14, // 7: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile.microservice_api_sub_sub_cat:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatApiSubSubCat
	15, // 8: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectProfile.microservice_web_app_sub_sub_cat:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.enums.profile.CodeProjectCatMicroserviceSubCatWebAppSubSubCat
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_init() }
func file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto != nil {
		return
	}
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachMachineAccountByCodeProjectIdCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeProjectProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CodeProjectProfile_LibSubCat)(nil),
		(*CodeProjectProfile_MicroserviceSubCat)(nil),
		(*CodeProjectProfile_MicroserviceApiSubSubCat)(nil),
		(*CodeProjectProfile_MicroserviceWebAppSubSubCat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_develop_sourcecode_project_io_proto_depIdxs = nil
}
