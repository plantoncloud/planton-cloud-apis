// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/develop/buildengine/rpc/model.proto

package rpc

import (
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/sourcecode/project"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// build engine code project
type BuildEngineProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code project directory
	CodeProjectDir string `protobuf:"bytes,1,opt,name=code_project_dir,json=codeProjectDir,proto3" json:"code_project_dir,omitempty"`
	// company id
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// product key
	ProductKey string `protobuf:"bytes,3,opt,name=product_key,json=productKey,proto3" json:"product_key,omitempty"`
	// product id
	ProductId string `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// code project id
	CodeProjectId string `protobuf:"bytes,5,opt,name=code_project_id,json=codeProjectId,proto3" json:"code_project_id,omitempty"`
	// code project name
	CodeProjectName string `protobuf:"bytes,6,opt,name=code_project_name,json=codeProjectName,proto3" json:"code_project_name,omitempty"`
	// git remote origin url.
	// either https or ssh url depending on the method supported for cloning the git project.
	// this is the same url that should added to the code project that is linked to microservice resources.
	GitRemoteUrl string `protobuf:"bytes,7,opt,name=git_remote_url,json=gitRemoteUrl,proto3" json:"git_remote_url,omitempty"`
	// name of the git branch checked out when code project profile is loaded
	GitBranch string `protobuf:"bytes,8,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch,omitempty"`
	// name of the git branch checked out when code project profile is loaded
	GitCommitSha string `protobuf:"bytes,9,opt,name=git_commit_sha,json=gitCommitSha,proto3" json:"git_commit_sha,omitempty"`
	// normalized code project path used for ensuring uniqueness in tilt resources in build engine.
	CodeProjectNormalizedPath string `protobuf:"bytes,10,opt,name=code_project_normalized_path,json=codeProjectNormalizedPath,proto3" json:"code_project_normalized_path,omitempty"`
	// name of the environment to look up the deployment config for setting up dot-env
	// this value is to be fetched from planton backend
	// when planton backend is not available(offline mode), value for this attribute is set to "dev".
	EnvironmentName string `protobuf:"bytes,11,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	// id of the environment to look up the deployment config for setting up dot-env
	// this value is to be fetched from planton backend
	// when planton backend is not available(offline mode), value for this attribute is set to "<product-id>-dev".
	EnvironmentId string `protobuf:"bytes,12,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// flag to indicate if project is required to be built before deployed to build engine environment.
	// this flag is used to ensure link between build step and deployment step in tilt config file.
	IsBuildRequired bool `protobuf:"varint,13,opt,name=is_build_required,json=isBuildRequired,proto3" json:"is_build_required,omitempty"`
	// is code project deployable to a environment.
	IsDeployable bool `protobuf:"varint,14,opt,name=is_deployable,json=isDeployable,proto3" json:"is_deployable,omitempty"`
	// project tilt config snippet
	TiltConfigSnippet string `protobuf:"bytes,15,opt,name=tilt_config_snippet,json=tiltConfigSnippet,proto3" json:"tilt_config_snippet,omitempty"`
}

func (x *BuildEngineProject) Reset() {
	*x = BuildEngineProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEngineProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEngineProject) ProtoMessage() {}

func (x *BuildEngineProject) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEngineProject.ProtoReflect.Descriptor instead.
func (*BuildEngineProject) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescGZIP(), []int{0}
}

func (x *BuildEngineProject) GetCodeProjectDir() string {
	if x != nil {
		return x.CodeProjectDir
	}
	return ""
}

func (x *BuildEngineProject) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BuildEngineProject) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *BuildEngineProject) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *BuildEngineProject) GetCodeProjectId() string {
	if x != nil {
		return x.CodeProjectId
	}
	return ""
}

func (x *BuildEngineProject) GetCodeProjectName() string {
	if x != nil {
		return x.CodeProjectName
	}
	return ""
}

func (x *BuildEngineProject) GetGitRemoteUrl() string {
	if x != nil {
		return x.GitRemoteUrl
	}
	return ""
}

func (x *BuildEngineProject) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *BuildEngineProject) GetGitCommitSha() string {
	if x != nil {
		return x.GitCommitSha
	}
	return ""
}

func (x *BuildEngineProject) GetCodeProjectNormalizedPath() string {
	if x != nil {
		return x.CodeProjectNormalizedPath
	}
	return ""
}

func (x *BuildEngineProject) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *BuildEngineProject) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *BuildEngineProject) GetIsBuildRequired() bool {
	if x != nil {
		return x.IsBuildRequired
	}
	return false
}

func (x *BuildEngineProject) GetIsDeployable() bool {
	if x != nil {
		return x.IsDeployable
	}
	return false
}

func (x *BuildEngineProject) GetTiltConfigSnippet() string {
	if x != nil {
		return x.TiltConfigSnippet
	}
	return ""
}

var File_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDesc = []byte{
	0x0a, 0x44, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x47, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x04, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x42, 0xb4, 0x03, 0x0a, 0x42, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42,
	0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x68, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x72, 0x70, 0x63, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x56, 0x43, 0x44,
	0x42, 0xaa, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0xca, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31,
	0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x5c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0xe2,
	0x02, 0x40, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c,
	0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5c, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x3a, 0x3a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_goTypes = []interface{}{
	(*BuildEngineProject)(nil), // 0: cloud.planton.apis.v1.code2cloud.develop.buildengine.BuildEngineProject
}
var file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_init() }
func file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEngineProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_develop_buildengine_rpc_model_proto_depIdxs = nil
}
