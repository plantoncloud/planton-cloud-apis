// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto

package rpc

import (
	context "context"
	rpc1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/deploy/kubecluster/rpc"
	rpc2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/cloud/gcp/resource/project/rpc"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/product/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnvironmentCommandController_Create_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/create"
	EnvironmentCommandController_Update_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/update"
	EnvironmentCommandController_Delete_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/delete"
	EnvironmentCommandController_Restore_FullMethodName                   = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/restore"
	EnvironmentCommandController_Clone_FullMethodName                     = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/clone"
	EnvironmentCommandController_SetBuildEngineEnvironment_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/setBuildEngineEnvironment"
	EnvironmentCommandController_Pause_FullMethodName                     = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/pause"
	EnvironmentCommandController_Unpause_FullMethodName                   = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/unpause"
	EnvironmentCommandController_DeleteNamespace_FullMethodName           = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController/deleteNamespace"
)

// EnvironmentCommandControllerClient is the client API for EnvironmentCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentCommandControllerClient interface {
	// create environment
	Create(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error)
	// update an existing environment
	Update(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error)
	// delete an existing environment
	// deleting a environment involves cleaning of all product components deployed for that environment.
	// microservices, secrets, postgres-clusters, kafka-cluster should be cleaned up in the corresponding environment
	Delete(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error)
	// restore a deleted environment
	// restoring a environment tries to restore all the individual resources that were destroyed as part of the delete operation.
	Restore(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error)
	// clone an existing environment for a product
	// a environment is cloned by creating the following resources with same spec as the source environment.
	// 1. microservice deployment environments
	// 2. secrets
	// 3. postgres-clusters
	// 4. kafka-clusters & kafka topics
	Clone(ctx context.Context, in *CloneEnvironmentCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// set the provided environment as the build engine environment.
	// setting a environment as build engine env requires that existing build engine env is
	// unset followed by setting a new env as build engine env.
	// this rpc offers an alternate method to replace two sequential rpc calls required, one to unset
	// the current build engine env and then to set a new env as build engine env.
	// the implementation takes care of both the actions.
	SetBuildEngineEnvironment(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error)
	// pause a environment.
	// a environment is paused by scaling down all the workloads to zero replicas.
	// the workload include microservice deployments, postgres-clusters, kafka-clusters etc.
	Pause(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error)
	// unpause a environment.
	// a environment is unpause by scaling back all the workloads.
	// all microservice deployments are scaled back to the same number of replicas configured in the most recent successful deployment.
	// postgres-clusters and kafka-clusters are configured to the same number of replicas configured.
	Unpause(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error)
	// delete a namespace that is part of the environment running in a kube-cluster container cluster
	DeleteNamespace(ctx context.Context, in *ByEnvironmentByNamespaceInput, opts ...grpc.CallOption) (*resource.WorkloadNamespace, error)
}

type environmentCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentCommandControllerClient {
	return &environmentCommandControllerClient{cc}
}

func (c *environmentCommandControllerClient) Create(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Update(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Delete(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Restore(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Clone(ctx context.Context, in *CloneEnvironmentCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Clone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) SetBuildEngineEnvironment(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_SetBuildEngineEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Pause(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Unpause(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) DeleteNamespace(ctx context.Context, in *ByEnvironmentByNamespaceInput, opts ...grpc.CallOption) (*resource.WorkloadNamespace, error) {
	out := new(resource.WorkloadNamespace)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_DeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentCommandControllerServer is the server API for EnvironmentCommandController service.
// All implementations should embed UnimplementedEnvironmentCommandControllerServer
// for forward compatibility
type EnvironmentCommandControllerServer interface {
	// create environment
	Create(context.Context, *Environment) (*Environment, error)
	// update an existing environment
	Update(context.Context, *Environment) (*Environment, error)
	// delete an existing environment
	// deleting a environment involves cleaning of all product components deployed for that environment.
	// microservices, secrets, postgres-clusters, kafka-cluster should be cleaned up in the corresponding environment
	Delete(context.Context, *EnvironmentId) (*Environment, error)
	// restore a deleted environment
	// restoring a environment tries to restore all the individual resources that were destroyed as part of the delete operation.
	Restore(context.Context, *Environment) (*Environment, error)
	// clone an existing environment for a product
	// a environment is cloned by creating the following resources with same spec as the source environment.
	// 1. microservice deployment environments
	// 2. secrets
	// 3. postgres-clusters
	// 4. kafka-clusters & kafka topics
	Clone(context.Context, *CloneEnvironmentCommandInput) (*Environment, error)
	// set the provided environment as the build engine environment.
	// setting a environment as build engine env requires that existing build engine env is
	// unset followed by setting a new env as build engine env.
	// this rpc offers an alternate method to replace two sequential rpc calls required, one to unset
	// the current build engine env and then to set a new env as build engine env.
	// the implementation takes care of both the actions.
	SetBuildEngineEnvironment(context.Context, *EnvironmentId) (*Environment, error)
	// pause a environment.
	// a environment is paused by scaling down all the workloads to zero replicas.
	// the workload include microservice deployments, postgres-clusters, kafka-clusters etc.
	Pause(context.Context, *EnvironmentId) (*Environment, error)
	// unpause a environment.
	// a environment is unpause by scaling back all the workloads.
	// all microservice deployments are scaled back to the same number of replicas configured in the most recent successful deployment.
	// postgres-clusters and kafka-clusters are configured to the same number of replicas configured.
	Unpause(context.Context, *EnvironmentId) (*Environment, error)
	// delete a namespace that is part of the environment running in a kube-cluster container cluster
	DeleteNamespace(context.Context, *ByEnvironmentByNamespaceInput) (*resource.WorkloadNamespace, error)
}

// UnimplementedEnvironmentCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentCommandControllerServer struct {
}

func (UnimplementedEnvironmentCommandControllerServer) Create(context.Context, *Environment) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Update(context.Context, *Environment) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Delete(context.Context, *EnvironmentId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Restore(context.Context, *Environment) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Clone(context.Context, *CloneEnvironmentCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) SetBuildEngineEnvironment(context.Context, *EnvironmentId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBuildEngineEnvironment not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Pause(context.Context, *EnvironmentId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Unpause(context.Context, *EnvironmentId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) DeleteNamespace(context.Context, *ByEnvironmentByNamespaceInput) (*resource.WorkloadNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}

// UnsafeEnvironmentCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentCommandControllerServer()
}

func RegisterEnvironmentCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentCommandControllerServer) {
	s.RegisterService(&EnvironmentCommandController_ServiceDesc, srv)
}

func _EnvironmentCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Create(ctx, req.(*Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Update(ctx, req.(*Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Delete(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Restore(ctx, req.(*Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneEnvironmentCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Clone(ctx, req.(*CloneEnvironmentCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_SetBuildEngineEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).SetBuildEngineEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_SetBuildEngineEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).SetBuildEngineEnvironment(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Pause(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Unpause(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEnvironmentByNamespaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).DeleteNamespace(ctx, req.(*ByEnvironmentByNamespaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentCommandController",
	HandlerType: (*EnvironmentCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _EnvironmentCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EnvironmentCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _EnvironmentCommandController_Restore_Handler,
		},
		{
			MethodName: "clone",
			Handler:    _EnvironmentCommandController_Clone_Handler,
		},
		{
			MethodName: "setBuildEngineEnvironment",
			Handler:    _EnvironmentCommandController_SetBuildEngineEnvironment_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _EnvironmentCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _EnvironmentCommandController_Unpause_Handler,
		},
		{
			MethodName: "deleteNamespace",
			Handler:    _EnvironmentCommandController_DeleteNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}

const (
	EnvironmentQueryController_List_FullMethodName                                  = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/list"
	EnvironmentQueryController_GetById_FullMethodName                               = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getById"
	EnvironmentQueryController_FindByProductId_FullMethodName                       = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findByProductId"
	EnvironmentQueryController_FindByKubeClusterId_FullMethodName                   = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findByKubeClusterId"
	EnvironmentQueryController_GetByProductIdAndEnvironmentName_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getByProductIdAndEnvironmentName"
	EnvironmentQueryController_GetBuildEngineEnvironmentByProductId_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getBuildEngineEnvironmentByProductId"
	EnvironmentQueryController_GetSecretsGcpProjectByEnvironmentId_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/getSecretsGcpProjectByEnvironmentId"
	EnvironmentQueryController_FindWorkloadPodsByEnvironmentId_FullMethodName       = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findWorkloadPodsByEnvironmentId"
	EnvironmentQueryController_FindWorkloadNamespacesByEnvironmentId_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController/findWorkloadNamespacesByEnvironmentId"
)

// EnvironmentQueryControllerClient is the client API for EnvironmentQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentQueryControllerClient interface {
	// list all environments on planton cloud for the requested page. This is intended for use on portal.
	List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*EnvironmentList, error)
	// look up environment using environment id
	GetById(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error)
	// find environments by product id
	FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*Environments, error)
	// find environments by kube-cluster id
	FindByKubeClusterId(ctx context.Context, in *rpc1.KubeClusterId, opts ...grpc.CallOption) (*Environments, error)
	// look up environment using environment id
	GetByProductIdAndEnvironmentName(ctx context.Context, in *GetByProductIdAndEnvironmentNameQueryInput, opts ...grpc.CallOption) (*Environment, error)
	// look up the build engine environment for the product required for launching the microservice in build engine
	GetBuildEngineEnvironmentByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*Environment, error)
	// look up the gcp project details by environment id required for fetching secrets for launching project in build engine.
	GetSecretsGcpProjectByEnvironmentId(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*rpc2.GcpProject, error)
	// find workload pods part of environment
	FindWorkloadPodsByEnvironmentId(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*resource.WorkloadPods, error)
	// find workload namespaces in a environment.
	FindWorkloadNamespacesByEnvironmentId(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*resource.WorkloadNamespaces, error)
}

type environmentQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentQueryControllerClient(cc grpc.ClientConnInterface) EnvironmentQueryControllerClient {
	return &environmentQueryControllerClient{cc}
}

func (c *environmentQueryControllerClient) List(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*EnvironmentList, error) {
	out := new(EnvironmentList)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) GetById(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) FindByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*Environments, error) {
	out := new(Environments)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_FindByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) FindByKubeClusterId(ctx context.Context, in *rpc1.KubeClusterId, opts ...grpc.CallOption) (*Environments, error) {
	out := new(Environments)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_FindByKubeClusterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) GetByProductIdAndEnvironmentName(ctx context.Context, in *GetByProductIdAndEnvironmentNameQueryInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_GetByProductIdAndEnvironmentName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) GetBuildEngineEnvironmentByProductId(ctx context.Context, in *rpc.ProductId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_GetBuildEngineEnvironmentByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) GetSecretsGcpProjectByEnvironmentId(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*rpc2.GcpProject, error) {
	out := new(rpc2.GcpProject)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_GetSecretsGcpProjectByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) FindWorkloadPodsByEnvironmentId(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*resource.WorkloadPods, error) {
	out := new(resource.WorkloadPods)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_FindWorkloadPodsByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentQueryControllerClient) FindWorkloadNamespacesByEnvironmentId(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*resource.WorkloadNamespaces, error) {
	out := new(resource.WorkloadNamespaces)
	err := c.cc.Invoke(ctx, EnvironmentQueryController_FindWorkloadNamespacesByEnvironmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentQueryControllerServer is the server API for EnvironmentQueryController service.
// All implementations should embed UnimplementedEnvironmentQueryControllerServer
// for forward compatibility
type EnvironmentQueryControllerServer interface {
	// list all environments on planton cloud for the requested page. This is intended for use on portal.
	List(context.Context, *pagination.PageInfo) (*EnvironmentList, error)
	// look up environment using environment id
	GetById(context.Context, *EnvironmentId) (*Environment, error)
	// find environments by product id
	FindByProductId(context.Context, *rpc.ProductId) (*Environments, error)
	// find environments by kube-cluster id
	FindByKubeClusterId(context.Context, *rpc1.KubeClusterId) (*Environments, error)
	// look up environment using environment id
	GetByProductIdAndEnvironmentName(context.Context, *GetByProductIdAndEnvironmentNameQueryInput) (*Environment, error)
	// look up the build engine environment for the product required for launching the microservice in build engine
	GetBuildEngineEnvironmentByProductId(context.Context, *rpc.ProductId) (*Environment, error)
	// look up the gcp project details by environment id required for fetching secrets for launching project in build engine.
	GetSecretsGcpProjectByEnvironmentId(context.Context, *EnvironmentId) (*rpc2.GcpProject, error)
	// find workload pods part of environment
	FindWorkloadPodsByEnvironmentId(context.Context, *EnvironmentId) (*resource.WorkloadPods, error)
	// find workload namespaces in a environment.
	FindWorkloadNamespacesByEnvironmentId(context.Context, *EnvironmentId) (*resource.WorkloadNamespaces, error)
}

// UnimplementedEnvironmentQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentQueryControllerServer struct {
}

func (UnimplementedEnvironmentQueryControllerServer) List(context.Context, *pagination.PageInfo) (*EnvironmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) GetById(context.Context, *EnvironmentId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) FindByProductId(context.Context, *rpc.ProductId) (*Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProductId not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) FindByKubeClusterId(context.Context, *rpc1.KubeClusterId) (*Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKubeClusterId not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) GetByProductIdAndEnvironmentName(context.Context, *GetByProductIdAndEnvironmentNameQueryInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByProductIdAndEnvironmentName not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) GetBuildEngineEnvironmentByProductId(context.Context, *rpc.ProductId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildEngineEnvironmentByProductId not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) GetSecretsGcpProjectByEnvironmentId(context.Context, *EnvironmentId) (*rpc2.GcpProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretsGcpProjectByEnvironmentId not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) FindWorkloadPodsByEnvironmentId(context.Context, *EnvironmentId) (*resource.WorkloadPods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWorkloadPodsByEnvironmentId not implemented")
}
func (UnimplementedEnvironmentQueryControllerServer) FindWorkloadNamespacesByEnvironmentId(context.Context, *EnvironmentId) (*resource.WorkloadNamespaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWorkloadNamespacesByEnvironmentId not implemented")
}

// UnsafeEnvironmentQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentQueryControllerServer will
// result in compilation errors.
type UnsafeEnvironmentQueryControllerServer interface {
	mustEmbedUnimplementedEnvironmentQueryControllerServer()
}

func RegisterEnvironmentQueryControllerServer(s grpc.ServiceRegistrar, srv EnvironmentQueryControllerServer) {
	s.RegisterService(&EnvironmentQueryController_ServiceDesc, srv)
}

func _EnvironmentQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).List(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).GetById(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_FindByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).FindByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_FindByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).FindByProductId(ctx, req.(*rpc.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_FindByKubeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc1.KubeClusterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).FindByKubeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_FindByKubeClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).FindByKubeClusterId(ctx, req.(*rpc1.KubeClusterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_GetByProductIdAndEnvironmentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByProductIdAndEnvironmentNameQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).GetByProductIdAndEnvironmentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_GetByProductIdAndEnvironmentName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).GetByProductIdAndEnvironmentName(ctx, req.(*GetByProductIdAndEnvironmentNameQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_GetBuildEngineEnvironmentByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).GetBuildEngineEnvironmentByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_GetBuildEngineEnvironmentByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).GetBuildEngineEnvironmentByProductId(ctx, req.(*rpc.ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_GetSecretsGcpProjectByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).GetSecretsGcpProjectByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_GetSecretsGcpProjectByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).GetSecretsGcpProjectByEnvironmentId(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_FindWorkloadPodsByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).FindWorkloadPodsByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_FindWorkloadPodsByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).FindWorkloadPodsByEnvironmentId(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentQueryController_FindWorkloadNamespacesByEnvironmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentQueryControllerServer).FindWorkloadNamespacesByEnvironmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentQueryController_FindWorkloadNamespacesByEnvironmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentQueryControllerServer).FindWorkloadNamespacesByEnvironmentId(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentQueryController_ServiceDesc is the grpc.ServiceDesc for EnvironmentQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentQueryController",
	HandlerType: (*EnvironmentQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _EnvironmentQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _EnvironmentQueryController_GetById_Handler,
		},
		{
			MethodName: "findByProductId",
			Handler:    _EnvironmentQueryController_FindByProductId_Handler,
		},
		{
			MethodName: "findByKubeClusterId",
			Handler:    _EnvironmentQueryController_FindByKubeClusterId_Handler,
		},
		{
			MethodName: "getByProductIdAndEnvironmentName",
			Handler:    _EnvironmentQueryController_GetByProductIdAndEnvironmentName_Handler,
		},
		{
			MethodName: "getBuildEngineEnvironmentByProductId",
			Handler:    _EnvironmentQueryController_GetBuildEngineEnvironmentByProductId_Handler,
		},
		{
			MethodName: "getSecretsGcpProjectByEnvironmentId",
			Handler:    _EnvironmentQueryController_GetSecretsGcpProjectByEnvironmentId_Handler,
		},
		{
			MethodName: "findWorkloadPodsByEnvironmentId",
			Handler:    _EnvironmentQueryController_FindWorkloadPodsByEnvironmentId_Handler,
		},
		{
			MethodName: "findWorkloadNamespacesByEnvironmentId",
			Handler:    _EnvironmentQueryController_FindWorkloadNamespacesByEnvironmentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}

const (
	EnvironmentSecretCommandController_Add_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/add"
	EnvironmentSecretCommandController_AddMultiple_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/addMultiple"
	EnvironmentSecretCommandController_Delete_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/delete"
	EnvironmentSecretCommandController_UpdateValue_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController/updateValue"
)

// EnvironmentSecretCommandControllerClient is the client API for EnvironmentSecretCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentSecretCommandControllerClient interface {
	// add a env secret to a environment
	Add(ctx context.Context, in *AddEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// add multiple product secrets to existing list of product secrets of a environment
	AddMultiple(ctx context.Context, in *AddEnvironmentSecretsCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// delete a environment secret.
	Delete(ctx context.Context, in *DeleteOrRestoreEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// update value of a product secret
	UpdateValue(ctx context.Context, in *UpdateEnvironmentSecretValueCommandInput, opts ...grpc.CallOption) (*EnvironmentSecret, error)
}

type environmentSecretCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentSecretCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentSecretCommandControllerClient {
	return &environmentSecretCommandControllerClient{cc}
}

func (c *environmentSecretCommandControllerClient) Add(ctx context.Context, in *AddEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretCommandControllerClient) AddMultiple(ctx context.Context, in *AddEnvironmentSecretsCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_AddMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretCommandControllerClient) Delete(ctx context.Context, in *DeleteOrRestoreEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretCommandControllerClient) UpdateValue(ctx context.Context, in *UpdateEnvironmentSecretValueCommandInput, opts ...grpc.CallOption) (*EnvironmentSecret, error) {
	out := new(EnvironmentSecret)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_UpdateValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentSecretCommandControllerServer is the server API for EnvironmentSecretCommandController service.
// All implementations should embed UnimplementedEnvironmentSecretCommandControllerServer
// for forward compatibility
type EnvironmentSecretCommandControllerServer interface {
	// add a env secret to a environment
	Add(context.Context, *AddEnvironmentSecretCommandInput) (*Environment, error)
	// add multiple product secrets to existing list of product secrets of a environment
	AddMultiple(context.Context, *AddEnvironmentSecretsCommandInput) (*Environment, error)
	// delete a environment secret.
	Delete(context.Context, *DeleteOrRestoreEnvironmentSecretCommandInput) (*Environment, error)
	// update value of a product secret
	UpdateValue(context.Context, *UpdateEnvironmentSecretValueCommandInput) (*EnvironmentSecret, error)
}

// UnimplementedEnvironmentSecretCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentSecretCommandControllerServer struct {
}

func (UnimplementedEnvironmentSecretCommandControllerServer) Add(context.Context, *AddEnvironmentSecretCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEnvironmentSecretCommandControllerServer) AddMultiple(context.Context, *AddEnvironmentSecretsCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiple not implemented")
}
func (UnimplementedEnvironmentSecretCommandControllerServer) Delete(context.Context, *DeleteOrRestoreEnvironmentSecretCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentSecretCommandControllerServer) UpdateValue(context.Context, *UpdateEnvironmentSecretValueCommandInput) (*EnvironmentSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}

// UnsafeEnvironmentSecretCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentSecretCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentSecretCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentSecretCommandControllerServer()
}

func RegisterEnvironmentSecretCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentSecretCommandControllerServer) {
	s.RegisterService(&EnvironmentSecretCommandController_ServiceDesc, srv)
}

func _EnvironmentSecretCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnvironmentSecretCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).Add(ctx, req.(*AddEnvironmentSecretCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretCommandController_AddMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnvironmentSecretsCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).AddMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_AddMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).AddMultiple(ctx, req.(*AddEnvironmentSecretsCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrRestoreEnvironmentSecretCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).Delete(ctx, req.(*DeleteOrRestoreEnvironmentSecretCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretCommandController_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentSecretValueCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_UpdateValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).UpdateValue(ctx, req.(*UpdateEnvironmentSecretValueCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentSecretCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentSecretCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentSecretCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretCommandController",
	HandlerType: (*EnvironmentSecretCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _EnvironmentSecretCommandController_Add_Handler,
		},
		{
			MethodName: "addMultiple",
			Handler:    _EnvironmentSecretCommandController_AddMultiple_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentSecretCommandController_Delete_Handler,
		},
		{
			MethodName: "updateValue",
			Handler:    _EnvironmentSecretCommandController_UpdateValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}

const (
	EnvironmentSecretQueryController_GetById_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController/getById"
	EnvironmentSecretQueryController_GetValue_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController/getValue"
)

// EnvironmentSecretQueryControllerClient is the client API for EnvironmentSecretQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentSecretQueryControllerClient interface {
	// lookup product secrets using product secret id
	GetById(ctx context.Context, in *GetByEnvironmentSecretIdInput, opts ...grpc.CallOption) (*EnvironmentSecret, error)
	// get value of a product secret
	GetValue(ctx context.Context, in *GetByEnvironmentSecretIdInput, opts ...grpc.CallOption) (*EnvironmentSecretValue, error)
}

type environmentSecretQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentSecretQueryControllerClient(cc grpc.ClientConnInterface) EnvironmentSecretQueryControllerClient {
	return &environmentSecretQueryControllerClient{cc}
}

func (c *environmentSecretQueryControllerClient) GetById(ctx context.Context, in *GetByEnvironmentSecretIdInput, opts ...grpc.CallOption) (*EnvironmentSecret, error) {
	out := new(EnvironmentSecret)
	err := c.cc.Invoke(ctx, EnvironmentSecretQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretQueryControllerClient) GetValue(ctx context.Context, in *GetByEnvironmentSecretIdInput, opts ...grpc.CallOption) (*EnvironmentSecretValue, error) {
	out := new(EnvironmentSecretValue)
	err := c.cc.Invoke(ctx, EnvironmentSecretQueryController_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentSecretQueryControllerServer is the server API for EnvironmentSecretQueryController service.
// All implementations should embed UnimplementedEnvironmentSecretQueryControllerServer
// for forward compatibility
type EnvironmentSecretQueryControllerServer interface {
	// lookup product secrets using product secret id
	GetById(context.Context, *GetByEnvironmentSecretIdInput) (*EnvironmentSecret, error)
	// get value of a product secret
	GetValue(context.Context, *GetByEnvironmentSecretIdInput) (*EnvironmentSecretValue, error)
}

// UnimplementedEnvironmentSecretQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentSecretQueryControllerServer struct {
}

func (UnimplementedEnvironmentSecretQueryControllerServer) GetById(context.Context, *GetByEnvironmentSecretIdInput) (*EnvironmentSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEnvironmentSecretQueryControllerServer) GetValue(context.Context, *GetByEnvironmentSecretIdInput) (*EnvironmentSecretValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}

// UnsafeEnvironmentSecretQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentSecretQueryControllerServer will
// result in compilation errors.
type UnsafeEnvironmentSecretQueryControllerServer interface {
	mustEmbedUnimplementedEnvironmentSecretQueryControllerServer()
}

func RegisterEnvironmentSecretQueryControllerServer(s grpc.ServiceRegistrar, srv EnvironmentSecretQueryControllerServer) {
	s.RegisterService(&EnvironmentSecretQueryController_ServiceDesc, srv)
}

func _EnvironmentSecretQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEnvironmentSecretIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretQueryControllerServer).GetById(ctx, req.(*GetByEnvironmentSecretIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretQueryController_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEnvironmentSecretIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretQueryControllerServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretQueryController_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretQueryControllerServer).GetValue(ctx, req.(*GetByEnvironmentSecretIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentSecretQueryController_ServiceDesc is the grpc.ServiceDesc for EnvironmentSecretQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentSecretQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentSecretQueryController",
	HandlerType: (*EnvironmentSecretQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _EnvironmentSecretQueryController_GetById_Handler,
		},
		{
			MethodName: "getValue",
			Handler:    _EnvironmentSecretQueryController_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}

const (
	EnvironmentVariableCommandController_Add_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/add"
	EnvironmentVariableCommandController_AddMultiple_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/addMultiple"
	EnvironmentVariableCommandController_Delete_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/delete"
	EnvironmentVariableCommandController_UpdateValue_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController/updateValue"
)

// EnvironmentVariableCommandControllerClient is the client API for EnvironmentVariableCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentVariableCommandControllerClient interface {
	// add a environment variable to a product
	Add(ctx context.Context, in *AddEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// add multiple environment variables to existing list of environment variables of a environment
	AddMultiple(ctx context.Context, in *AddEnvironmentVariablesCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// delete a environment variable.
	Delete(ctx context.Context, in *DeleteOrRestoreEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*Environment, error)
	// update value of a environment variable
	UpdateValue(ctx context.Context, in *UpdateEnvironmentVariableValueCommandInput, opts ...grpc.CallOption) (*EnvironmentVariable, error)
}

type environmentVariableCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentVariableCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentVariableCommandControllerClient {
	return &environmentVariableCommandControllerClient{cc}
}

func (c *environmentVariableCommandControllerClient) Add(ctx context.Context, in *AddEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableCommandControllerClient) AddMultiple(ctx context.Context, in *AddEnvironmentVariablesCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_AddMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableCommandControllerClient) Delete(ctx context.Context, in *DeleteOrRestoreEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableCommandControllerClient) UpdateValue(ctx context.Context, in *UpdateEnvironmentVariableValueCommandInput, opts ...grpc.CallOption) (*EnvironmentVariable, error) {
	out := new(EnvironmentVariable)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_UpdateValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentVariableCommandControllerServer is the server API for EnvironmentVariableCommandController service.
// All implementations should embed UnimplementedEnvironmentVariableCommandControllerServer
// for forward compatibility
type EnvironmentVariableCommandControllerServer interface {
	// add a environment variable to a product
	Add(context.Context, *AddEnvironmentVariableCommandInput) (*Environment, error)
	// add multiple environment variables to existing list of environment variables of a environment
	AddMultiple(context.Context, *AddEnvironmentVariablesCommandInput) (*Environment, error)
	// delete a environment variable.
	Delete(context.Context, *DeleteOrRestoreEnvironmentVariableCommandInput) (*Environment, error)
	// update value of a environment variable
	UpdateValue(context.Context, *UpdateEnvironmentVariableValueCommandInput) (*EnvironmentVariable, error)
}

// UnimplementedEnvironmentVariableCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentVariableCommandControllerServer struct {
}

func (UnimplementedEnvironmentVariableCommandControllerServer) Add(context.Context, *AddEnvironmentVariableCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEnvironmentVariableCommandControllerServer) AddMultiple(context.Context, *AddEnvironmentVariablesCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiple not implemented")
}
func (UnimplementedEnvironmentVariableCommandControllerServer) Delete(context.Context, *DeleteOrRestoreEnvironmentVariableCommandInput) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentVariableCommandControllerServer) UpdateValue(context.Context, *UpdateEnvironmentVariableValueCommandInput) (*EnvironmentVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}

// UnsafeEnvironmentVariableCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentVariableCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentVariableCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentVariableCommandControllerServer()
}

func RegisterEnvironmentVariableCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentVariableCommandControllerServer) {
	s.RegisterService(&EnvironmentVariableCommandController_ServiceDesc, srv)
}

func _EnvironmentVariableCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnvironmentVariableCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).Add(ctx, req.(*AddEnvironmentVariableCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableCommandController_AddMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnvironmentVariablesCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).AddMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_AddMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).AddMultiple(ctx, req.(*AddEnvironmentVariablesCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrRestoreEnvironmentVariableCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).Delete(ctx, req.(*DeleteOrRestoreEnvironmentVariableCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableCommandController_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentVariableValueCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_UpdateValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).UpdateValue(ctx, req.(*UpdateEnvironmentVariableValueCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentVariableCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentVariableCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentVariableCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableCommandController",
	HandlerType: (*EnvironmentVariableCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _EnvironmentVariableCommandController_Add_Handler,
		},
		{
			MethodName: "addMultiple",
			Handler:    _EnvironmentVariableCommandController_AddMultiple_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentVariableCommandController_Delete_Handler,
		},
		{
			MethodName: "updateValue",
			Handler:    _EnvironmentVariableCommandController_UpdateValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}

const (
	EnvironmentVariableQueryController_GetById_FullMethodName  = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController/getById"
	EnvironmentVariableQueryController_GetValue_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController/getValue"
)

// EnvironmentVariableQueryControllerClient is the client API for EnvironmentVariableQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentVariableQueryControllerClient interface {
	// lookup environment variables using environment variable id
	GetById(ctx context.Context, in *GetByEnvironmentVariableIdInput, opts ...grpc.CallOption) (*EnvironmentVariable, error)
	// get value of a environment variable
	GetValue(ctx context.Context, in *GetByEnvironmentVariableIdInput, opts ...grpc.CallOption) (*EnvironmentVariableValue, error)
}

type environmentVariableQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentVariableQueryControllerClient(cc grpc.ClientConnInterface) EnvironmentVariableQueryControllerClient {
	return &environmentVariableQueryControllerClient{cc}
}

func (c *environmentVariableQueryControllerClient) GetById(ctx context.Context, in *GetByEnvironmentVariableIdInput, opts ...grpc.CallOption) (*EnvironmentVariable, error) {
	out := new(EnvironmentVariable)
	err := c.cc.Invoke(ctx, EnvironmentVariableQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableQueryControllerClient) GetValue(ctx context.Context, in *GetByEnvironmentVariableIdInput, opts ...grpc.CallOption) (*EnvironmentVariableValue, error) {
	out := new(EnvironmentVariableValue)
	err := c.cc.Invoke(ctx, EnvironmentVariableQueryController_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentVariableQueryControllerServer is the server API for EnvironmentVariableQueryController service.
// All implementations should embed UnimplementedEnvironmentVariableQueryControllerServer
// for forward compatibility
type EnvironmentVariableQueryControllerServer interface {
	// lookup environment variables using environment variable id
	GetById(context.Context, *GetByEnvironmentVariableIdInput) (*EnvironmentVariable, error)
	// get value of a environment variable
	GetValue(context.Context, *GetByEnvironmentVariableIdInput) (*EnvironmentVariableValue, error)
}

// UnimplementedEnvironmentVariableQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentVariableQueryControllerServer struct {
}

func (UnimplementedEnvironmentVariableQueryControllerServer) GetById(context.Context, *GetByEnvironmentVariableIdInput) (*EnvironmentVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEnvironmentVariableQueryControllerServer) GetValue(context.Context, *GetByEnvironmentVariableIdInput) (*EnvironmentVariableValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}

// UnsafeEnvironmentVariableQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentVariableQueryControllerServer will
// result in compilation errors.
type UnsafeEnvironmentVariableQueryControllerServer interface {
	mustEmbedUnimplementedEnvironmentVariableQueryControllerServer()
}

func RegisterEnvironmentVariableQueryControllerServer(s grpc.ServiceRegistrar, srv EnvironmentVariableQueryControllerServer) {
	s.RegisterService(&EnvironmentVariableQueryController_ServiceDesc, srv)
}

func _EnvironmentVariableQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEnvironmentVariableIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableQueryControllerServer).GetById(ctx, req.(*GetByEnvironmentVariableIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableQueryController_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEnvironmentVariableIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableQueryControllerServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableQueryController_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableQueryControllerServer).GetValue(ctx, req.(*GetByEnvironmentVariableIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentVariableQueryController_ServiceDesc is the grpc.ServiceDesc for EnvironmentVariableQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentVariableQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentVariableQueryController",
	HandlerType: (*EnvironmentVariableQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _EnvironmentVariableQueryController_GetById_Handler,
		},
		{
			MethodName: "getValue",
			Handler:    _EnvironmentVariableQueryController_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}

const (
	EnvironmentStackController_Preview_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController/preview"
	EnvironmentStackController_Apply_FullMethodName   = "/cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController/apply"
)

// EnvironmentStackControllerClient is the client API for EnvironmentStackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentStackControllerClient interface {
	// preview environment secrets stack
	Preview(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error)
	// apply environment secrets stack
	Apply(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error)
}

type environmentStackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentStackControllerClient(cc grpc.ClientConnInterface) EnvironmentStackControllerClient {
	return &environmentStackControllerClient{cc}
}

func (c *environmentStackControllerClient) Preview(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentStackController_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentStackControllerClient) Apply(ctx context.Context, in *EnvironmentId, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentStackController_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentStackControllerServer is the server API for EnvironmentStackController service.
// All implementations should embed UnimplementedEnvironmentStackControllerServer
// for forward compatibility
type EnvironmentStackControllerServer interface {
	// preview environment secrets stack
	Preview(context.Context, *Environment) (*Environment, error)
	// apply environment secrets stack
	Apply(context.Context, *EnvironmentId) (*Environment, error)
}

// UnimplementedEnvironmentStackControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentStackControllerServer struct {
}

func (UnimplementedEnvironmentStackControllerServer) Preview(context.Context, *Environment) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedEnvironmentStackControllerServer) Apply(context.Context, *EnvironmentId) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

// UnsafeEnvironmentStackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentStackControllerServer will
// result in compilation errors.
type UnsafeEnvironmentStackControllerServer interface {
	mustEmbedUnimplementedEnvironmentStackControllerServer()
}

func RegisterEnvironmentStackControllerServer(s grpc.ServiceRegistrar, srv EnvironmentStackControllerServer) {
	s.RegisterService(&EnvironmentStackController_ServiceDesc, srv)
}

func _EnvironmentStackController_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentStackControllerServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentStackController_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentStackControllerServer).Preview(ctx, req.(*Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentStackController_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentStackControllerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentStackController_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentStackControllerServer).Apply(ctx, req.(*EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentStackController_ServiceDesc is the grpc.ServiceDesc for EnvironmentStackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentStackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.rpc.EnvironmentStackController",
	HandlerType: (*EnvironmentStackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preview",
			Handler:    _EnvironmentStackController_Preview_Handler,
		},
		{
			MethodName: "apply",
			Handler:    _EnvironmentStackController_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/rpc/service.proto",
}
