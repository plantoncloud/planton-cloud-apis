// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/code2cloud/environment/state/model.proto

package state

import (
	enums "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment/state/enums"
	audit "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/audit"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/state"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// environment state
type EnvironmentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event-type
	EventType enums.EnvironmentEventType `protobuf:"varint,99,opt,name=event_type,json=eventType,proto3,enum=cloud.planton.apis.v1.code2cloud.environment.state.enums.EnvironmentEventType" json:"event_type,omitempty"`
	// resource api version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// resource metadata
	Metadata *resource.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	Spec *EnvironmentSpecState `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *EnvironmentStatusState `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnvironmentState) Reset() {
	*x = EnvironmentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentState) ProtoMessage() {}

func (x *EnvironmentState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentState.ProtoReflect.Descriptor instead.
func (*EnvironmentState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{0}
}

func (x *EnvironmentState) GetEventType() enums.EnvironmentEventType {
	if x != nil {
		return x.EventType
	}
	return enums.EnvironmentEventType(0)
}

func (x *EnvironmentState) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *EnvironmentState) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *EnvironmentState) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EnvironmentState) GetSpec() *EnvironmentSpecState {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *EnvironmentState) GetStatus() *EnvironmentStatusState {
	if x != nil {
		return x.Status
	}
	return nil
}

// environment spec
type EnvironmentSpecState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// company to which the environment belongs to.
	// the value is computed from product.
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// product to which the environment belongs to
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// cloud-provider on which the storage-bucket is to be created.
	// the value is computed from kube-cluster.
	KubernetesProvider string `protobuf:"bytes,3,opt,name=kubernetes_provider,json=kubernetesProvider,proto3" json:"kubernetes_provider,omitempty"`
	// target kube-cluster to which the workloads like microservice-instances, postgres databases,
	// kafka-clusters etc are deployed to.
	KubeClusterId string `protobuf:"bytes,4,opt,name=kube_cluster_id,json=kubeClusterId,proto3" json:"kube_cluster_id,omitempty"`
	// description for environment.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// id of the environment from which this environment is created.
	// value is ignored when the environment is not cloned from another environment.
	ClonedFrom string `protobuf:"bytes,6,opt,name=cloned_from,json=clonedFrom,proto3" json:"cloned_from,omitempty"`
	// list of environment variables for the environment
	// this attribute is ignored for environment creation.
	Variables []*EnvironmentVariableState `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty"`
	// list of environment secrets for the environment
	// this attribute is ignored for environment creation.
	Secrets []*EnvironmentSecretState `protobuf:"bytes,8,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// flag to control inheritance of kube-cluster endpoint domains.
	// new standard_endpoints are created for each endpoint_domain of the kube-cluster only when this flag is set.
	IsInheritEndpointDomainsEnabled bool `protobuf:"varint,9,opt,name=is_inherit_endpoint_domains_enabled,json=isInheritEndpointDomainsEnabled,proto3" json:"is_inherit_endpoint_domains_enabled,omitempty"`
	// id of the gcp project in which the environment-secrets are to be created in secrets-manager.
	EnvironmentSecretsGcpProjectId string `protobuf:"bytes,10,opt,name=environment_secrets_gcp_project_id,json=environmentSecretsGcpProjectId,proto3" json:"environment_secrets_gcp_project_id,omitempty"`
	// microservice-instance spec for environment
	MicroserviceInstance *EnvironmentSpecMicroserviceInstanceSpecState `protobuf:"bytes,11,opt,name=microservice_instance,json=microserviceInstance,proto3" json:"microservice_instance,omitempty"`
}

func (x *EnvironmentSpecState) Reset() {
	*x = EnvironmentSpecState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentSpecState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpecState) ProtoMessage() {}

func (x *EnvironmentSpecState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpecState.ProtoReflect.Descriptor instead.
func (*EnvironmentSpecState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{1}
}

func (x *EnvironmentSpecState) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *EnvironmentSpecState) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *EnvironmentSpecState) GetKubernetesProvider() string {
	if x != nil {
		return x.KubernetesProvider
	}
	return ""
}

func (x *EnvironmentSpecState) GetKubeClusterId() string {
	if x != nil {
		return x.KubeClusterId
	}
	return ""
}

func (x *EnvironmentSpecState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EnvironmentSpecState) GetClonedFrom() string {
	if x != nil {
		return x.ClonedFrom
	}
	return ""
}

func (x *EnvironmentSpecState) GetVariables() []*EnvironmentVariableState {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EnvironmentSpecState) GetSecrets() []*EnvironmentSecretState {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *EnvironmentSpecState) GetIsInheritEndpointDomainsEnabled() bool {
	if x != nil {
		return x.IsInheritEndpointDomainsEnabled
	}
	return false
}

func (x *EnvironmentSpecState) GetEnvironmentSecretsGcpProjectId() string {
	if x != nil {
		return x.EnvironmentSecretsGcpProjectId
	}
	return ""
}

func (x *EnvironmentSpecState) GetMicroserviceInstance() *EnvironmentSpecMicroserviceInstanceSpecState {
	if x != nil {
		return x.MicroserviceInstance
	}
	return nil
}

// environment microservice-instance spec
type EnvironmentSpecMicroserviceInstanceSpecState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to indicate of this environment is to be used as the build engine environment.
	// default value is set to "false".
	// at any point, only one environment in a product can be configured as build-engine environment.
	// if there is already a environment which is configured as the build engine environment,
	// then that environment needs to be updated to disable that first before enabling it on the new environment.
	IsBuildEngineEnvironment bool `protobuf:"varint,1,opt,name=is_build_engine_environment,json=isBuildEngineEnvironment,proto3" json:"is_build_engine_environment,omitempty"`
	// microservice-instance pipeline spec
	Pipeline *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *EnvironmentSpecMicroserviceInstanceSpecState) Reset() {
	*x = EnvironmentSpecMicroserviceInstanceSpecState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentSpecMicroserviceInstanceSpecState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpecMicroserviceInstanceSpecState) ProtoMessage() {}

func (x *EnvironmentSpecMicroserviceInstanceSpecState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpecMicroserviceInstanceSpecState.ProtoReflect.Descriptor instead.
func (*EnvironmentSpecMicroserviceInstanceSpecState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{2}
}

func (x *EnvironmentSpecMicroserviceInstanceSpecState) GetIsBuildEngineEnvironment() bool {
	if x != nil {
		return x.IsBuildEngineEnvironment
	}
	return false
}

func (x *EnvironmentSpecMicroserviceInstanceSpecState) GetPipeline() *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// environment microservice-instance pipeline spec
type EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle to enable or disable microservice-instance deployments to this environment.
	// recommended default is "true"
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// list of environment ids that are considered as lower environments to this environment.
	// in deployment pipelines for microservice-instances a successful deployment of all lower environments
	// is required before deploying to this environment.
	// this is used for creating dependency requirements on github/gitlab pipelines between deployment pipeline jobs.
	LowerEnvironmentIds []string `protobuf:"bytes,2,rep,name=lower_environment_ids,json=lowerEnvironmentIds,proto3" json:"lower_environment_ids,omitempty"`
	// id of the artifact-store required to construct the container image name.
	// a product can have multiple artifact-stores. The container images are published to all artifact-stores.
	// when creating a Deployment resource on kubernetes, only one container image name is allowed.
	// this attribute will provide the ability to determine the artifact-store to be used for constructing the container
	// image name to be used in the kubernetes Deployment resource.
	ContainerImageArtifactStoreId string `protobuf:"bytes,3,opt,name=container_image_artifact_store_id,json=containerImageArtifactStoreId,proto3" json:"container_image_artifact_store_id,omitempty"`
}

func (x *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) Reset() {
	*x = EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) ProtoMessage() {}

func (x *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState.ProtoReflect.Descriptor instead.
func (*EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{3}
}

func (x *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) GetLowerEnvironmentIds() []string {
	if x != nil {
		return x.LowerEnvironmentIds
	}
	return nil
}

func (x *EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState) GetContainerImageArtifactStoreId() string {
	if x != nil {
		return x.ContainerImageArtifactStoreId
	}
	return ""
}

// environment status
type EnvironmentStatusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource lifecycle
	Lifecycle *resource.RunnableResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// system audit info
	SysAudit *audit.SysAudit `protobuf:"bytes,98,opt,name=sys_audit,json=sysAudit,proto3" json:"sys_audit,omitempty"`
	// id of the stack-job
	StackJobId string `protobuf:"bytes,97,opt,name=stack_job_id,json=stackJobId,proto3" json:"stack_job_id,omitempty"`
}

func (x *EnvironmentStatusState) Reset() {
	*x = EnvironmentStatusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentStatusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatusState) ProtoMessage() {}

func (x *EnvironmentStatusState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatusState.ProtoReflect.Descriptor instead.
func (*EnvironmentStatusState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{4}
}

func (x *EnvironmentStatusState) GetLifecycle() *resource.RunnableResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *EnvironmentStatusState) GetSysAudit() *audit.SysAudit {
	if x != nil {
		return x.SysAudit
	}
	return nil
}

func (x *EnvironmentStatusState) GetStackJobId() string {
	if x != nil {
		return x.StackJobId
	}
	return ""
}

// environment-var
type EnvironmentVariableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// system audit info
	SysAudit *audit.SysAudit `protobuf:"bytes,99,opt,name=sys_audit,json=sysAudit,proto3" json:"sys_audit,omitempty"`
	// the name must adhere to the following constraints:
	// - it must be between 1 and 64 characters.
	// - it can only contain english letters (a-z, a-z), numbers (0-9), hyphens (-), and underscores (_).
	// - it cannot start with a hyphen or underscore.
	// - it cannot end with a hyphen.
	// - it must be unique within the environment.
	//
	// this can be represented by the following regular expression:
	// "^[a-za-z0-9]([a-za-z0-9-_]{0,62}[a-za-z0-9])?$"
	//
	// note: in the above regular expression, {0,62} ensures the total length of the string
	//
	//	is 64 characters or less, including the starting and ending characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// human readable identifier for environment variable unique on planton cloud.
	// value is computed using 'var-<environment-id>-<var-name>'.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// value for the environment variable.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvironmentVariableState) Reset() {
	*x = EnvironmentVariableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentVariableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariableState) ProtoMessage() {}

func (x *EnvironmentVariableState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariableState.ProtoReflect.Descriptor instead.
func (*EnvironmentVariableState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{5}
}

func (x *EnvironmentVariableState) GetSysAudit() *audit.SysAudit {
	if x != nil {
		return x.SysAudit
	}
	return nil
}

func (x *EnvironmentVariableState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentVariableState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentVariableState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// environment-secret
type EnvironmentSecretState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// system audit info
	SysAudit *audit.SysAudit `protobuf:"bytes,99,opt,name=sys_audit,json=sysAudit,proto3" json:"sys_audit,omitempty"`
	// the name must adhere to the following constraints:
	// - it must be between 1 and 64 characters.
	// - it can only contain english letters (a-z, a-z), numbers (0-9), hyphens (-), and underscores (_).
	// - it cannot start with a hyphen or underscore.
	// - it cannot end with a hyphen.
	// - it must be unique within the environment.
	//
	// this can be represented by the following regular expression:
	// "^[a-za-z0-9]([a-za-z0-9-_]{0,62}[a-za-z0-9])?$"
	//
	// note: in the above regular expression, {0,62} ensures the total length of the string
	//
	//	is 64 characters or less, including the starting and ending characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// human readable identifier for environment secret unique on planton cloud.
	// value is computed using 'sec-<environment-id>-<secret-name>'.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// id of the secret resource on the secrets management service provider ex: google cloud secrets manager.
	// value is same as the secret-id for google cloud secrets-manager backend.
	ProviderSecretId string `protobuf:"bytes,3,opt,name=provider_secret_id,json=providerSecretId,proto3" json:"provider_secret_id,omitempty"`
}

func (x *EnvironmentSecretState) Reset() {
	*x = EnvironmentSecretState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentSecretState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSecretState) ProtoMessage() {}

func (x *EnvironmentSecretState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSecretState.ProtoReflect.Descriptor instead.
func (*EnvironmentSecretState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP(), []int{6}
}

func (x *EnvironmentSecretState) GetSysAudit() *audit.SysAudit {
	if x != nil {
		return x.SysAudit
	}
	return nil
}

func (x *EnvironmentSecretState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentSecretState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentSecretState) GetProviderSecretId() string {
	if x != nil {
		return x.ProviderSecretId
	}
	return ""
}

var File_cloud_planton_apis_v1_code2cloud_environment_state_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x44, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x03, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1f,
	0x88, 0xa6, 0x1d, 0x09, 0x90, 0xa6, 0x1d, 0x01, 0x9a, 0xa6, 0x1d, 0x13, 0x08, 0x14, 0x12, 0x0f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xf4, 0x05, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x6a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x64,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x69, 0x73, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x95,
	0x01, 0x0a, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x14, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x2c, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x38, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x16,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x08, 0x73, 0x79, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x08, 0x73, 0x79, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x08, 0x73, 0x79, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x42, 0x9a, 0x03, 0x0a, 0x36, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x62, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0xa2, 0x02,
	0x07, 0x43, 0x50, 0x41, 0x56, 0x43, 0x45, 0x53, 0xaa, 0x02, 0x32, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0xca, 0x02, 0x32,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70,
	0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0xe2, 0x02, 0x3e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x38, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescData = file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_goTypes = []interface{}{
	(*EnvironmentState)(nil),                                         // 0: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentState
	(*EnvironmentSpecState)(nil),                                     // 1: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecState
	(*EnvironmentSpecMicroserviceInstanceSpecState)(nil),             // 2: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecMicroserviceInstanceSpecState
	(*EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState)(nil), // 3: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState
	(*EnvironmentStatusState)(nil),                                   // 4: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentStatusState
	(*EnvironmentVariableState)(nil),                                 // 5: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentVariableState
	(*EnvironmentSecretState)(nil),                                   // 6: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSecretState
	(enums.EnvironmentEventType)(0),                                  // 7: cloud.planton.apis.v1.code2cloud.environment.state.enums.EnvironmentEventType
	(*resource.Metadata)(nil),                                        // 8: cloud.planton.apis.v1.commons.resource.Metadata
	(*resource.RunnableResourceLifecycle)(nil),                       // 9: cloud.planton.apis.v1.commons.resource.RunnableResourceLifecycle
	(*audit.SysAudit)(nil),                                           // 10: cloud.planton.apis.v1.commons.audit.SysAudit
}
var file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_depIdxs = []int32{
	7,  // 0: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentState.event_type:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.enums.EnvironmentEventType
	8,  // 1: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentState.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	1,  // 2: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentState.spec:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecState
	4,  // 3: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentState.status:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentStatusState
	5,  // 4: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecState.variables:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentVariableState
	6,  // 5: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecState.secrets:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSecretState
	2,  // 6: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecState.microservice_instance:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecMicroserviceInstanceSpecState
	3,  // 7: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecMicroserviceInstanceSpecState.pipeline:type_name -> cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState
	9,  // 8: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentStatusState.lifecycle:type_name -> cloud.planton.apis.v1.commons.resource.RunnableResourceLifecycle
	10, // 9: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentStatusState.sys_audit:type_name -> cloud.planton.apis.v1.commons.audit.SysAudit
	10, // 10: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentVariableState.sys_audit:type_name -> cloud.planton.apis.v1.commons.audit.SysAudit
	10, // 11: cloud.planton.apis.v1.code2cloud.environment.state.EnvironmentSecretState.sys_audit:type_name -> cloud.planton.apis.v1.commons.audit.SysAudit
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_init() }
func file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_init() {
	if File_cloud_planton_apis_v1_code2cloud_environment_state_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentSpecState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentSpecMicroserviceInstanceSpecState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentSpecMicroserviceInstanceSpecPipelineSpecState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentStatusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentVariableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentSecretState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_code2cloud_environment_state_model_proto = out.File
	file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_code2cloud_environment_state_model_proto_depIdxs = nil
}
