// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/code2cloud/environment/service/command.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/environment/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/model"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/kubernetes/resource"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnvironmentCommandController_PreviewCreate_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/previewCreate"
	EnvironmentCommandController_Create_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/create"
	EnvironmentCommandController_PreviewUpdate_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/previewUpdate"
	EnvironmentCommandController_Update_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/update"
	EnvironmentCommandController_PreviewDelete_FullMethodName             = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/previewDelete"
	EnvironmentCommandController_Delete_FullMethodName                    = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/delete"
	EnvironmentCommandController_PreviewRestore_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/previewRestore"
	EnvironmentCommandController_Restore_FullMethodName                   = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/restore"
	EnvironmentCommandController_CreateStackJob_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/createStackJob"
	EnvironmentCommandController_Clone_FullMethodName                     = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/clone"
	EnvironmentCommandController_SetBuildEngineEnvironment_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/setBuildEngineEnvironment"
	EnvironmentCommandController_Pause_FullMethodName                     = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/pause"
	EnvironmentCommandController_Unpause_FullMethodName                   = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/unpause"
	EnvironmentCommandController_DeleteNamespace_FullMethodName           = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/deleteNamespace"
	EnvironmentCommandController_PreviewRefresh_FullMethodName            = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/previewRefresh"
	EnvironmentCommandController_Refresh_FullMethodName                   = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController/refresh"
)

// EnvironmentCommandControllerClient is the client API for EnvironmentCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentCommandControllerClient interface {
	// preview creating environment
	PreviewCreate(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error)
	// create environment
	Create(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error)
	// preview updating an existing environment
	PreviewUpdate(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error)
	// update an existing environment
	Update(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error)
	// preview deleting an environment
	PreviewDelete(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// delete an existing environment
	// deleting a environment involves cleaning of all product components deployed for that environment.
	// microservices, secrets, postgres-clusters, kafka-cluster should be cleaned up in the corresponding environment
	Delete(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// preview restoring a deleted environment
	PreviewRestore(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error)
	// restore a deleted environment
	// restoring a environment tries to restore all the individual resources that were destroyed as part of the delete operation.
	Restore(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error)
	// create-stack-job for environment
	CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// clone an existing environment for a product
	// a environment is cloned by creating the following resources with same spec as the source environment.
	// 1. microservice deployment environments
	// 2. secrets
	// 3. postgres-clusters
	// 4. kafka-clusters & kafka topics
	Clone(ctx context.Context, in *model.CloneEnvironmentCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// set the provided environment as the build engine environment.
	// setting a environment as build engine env requires that existing build engine env is
	// unset followed by setting a new env as build engine env.
	// this rpc offers an alternate method to replace two sequential rpc calls required, one to unset
	// the current build engine env and then to set a new env as build engine env.
	// the implementation takes care of both the actions.
	SetBuildEngineEnvironment(ctx context.Context, in *model.EnvironmentId, opts ...grpc.CallOption) (*model.Environment, error)
	// pause a environment.
	// a environment is paused by scaling down all the workloads to zero replicas.
	// the workload include microservice deployments, postgres-clusters, kafka-clusters etc.
	Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// unpause a environment.
	// a environment is unpause by scaling back all the workloads.
	// all microservice deployments are scaled back to the same number of replicas configured in the most recent successful deployment.
	// postgres-clusters and kafka-clusters are configured to the same number of replicas configured.
	Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// delete a namespace that is part of the environment running in a kube-cluster kubernetes cluster
	DeleteNamespace(ctx context.Context, in *model.ByEnvironmentByNamespaceInput, opts ...grpc.CallOption) (*resource.WorkloadNamespace, error)
	// preview refresh a environment that was previously created
	PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// refresh a environment that was previously created
	Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
}

type environmentCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentCommandControllerClient {
	return &environmentCommandControllerClient{cc}
}

func (c *environmentCommandControllerClient) PreviewCreate(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_PreviewCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Create(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) PreviewUpdate(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_PreviewUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Update(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) PreviewDelete(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_PreviewDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Delete(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) PreviewRestore(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_PreviewRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Restore(ctx context.Context, in *model.Environment, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) CreateStackJob(ctx context.Context, in *model2.CreateStackJobCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_CreateStackJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Clone(ctx context.Context, in *model.CloneEnvironmentCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Clone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) SetBuildEngineEnvironment(ctx context.Context, in *model.EnvironmentId, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_SetBuildEngineEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Pause(ctx context.Context, in *model1.ApiResourcePauseCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Unpause(ctx context.Context, in *model1.ApiResourceUnPauseCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Unpause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) DeleteNamespace(ctx context.Context, in *model.ByEnvironmentByNamespaceInput, opts ...grpc.CallOption) (*resource.WorkloadNamespace, error) {
	out := new(resource.WorkloadNamespace)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_DeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) PreviewRefresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_PreviewRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentCommandControllerClient) Refresh(ctx context.Context, in *model1.ApiResourceRefreshCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentCommandController_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentCommandControllerServer is the server API for EnvironmentCommandController service.
// All implementations should embed UnimplementedEnvironmentCommandControllerServer
// for forward compatibility
type EnvironmentCommandControllerServer interface {
	// preview creating environment
	PreviewCreate(context.Context, *model.Environment) (*model.Environment, error)
	// create environment
	Create(context.Context, *model.Environment) (*model.Environment, error)
	// preview updating an existing environment
	PreviewUpdate(context.Context, *model.Environment) (*model.Environment, error)
	// update an existing environment
	Update(context.Context, *model.Environment) (*model.Environment, error)
	// preview deleting an environment
	PreviewDelete(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error)
	// delete an existing environment
	// deleting a environment involves cleaning of all product components deployed for that environment.
	// microservices, secrets, postgres-clusters, kafka-cluster should be cleaned up in the corresponding environment
	Delete(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error)
	// preview restoring a deleted environment
	PreviewRestore(context.Context, *model.Environment) (*model.Environment, error)
	// restore a deleted environment
	// restoring a environment tries to restore all the individual resources that were destroyed as part of the delete operation.
	Restore(context.Context, *model.Environment) (*model.Environment, error)
	// create-stack-job for environment
	CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.Environment, error)
	// clone an existing environment for a product
	// a environment is cloned by creating the following resources with same spec as the source environment.
	// 1. microservice deployment environments
	// 2. secrets
	// 3. postgres-clusters
	// 4. kafka-clusters & kafka topics
	Clone(context.Context, *model.CloneEnvironmentCommandInput) (*model.Environment, error)
	// set the provided environment as the build engine environment.
	// setting a environment as build engine env requires that existing build engine env is
	// unset followed by setting a new env as build engine env.
	// this rpc offers an alternate method to replace two sequential rpc calls required, one to unset
	// the current build engine env and then to set a new env as build engine env.
	// the implementation takes care of both the actions.
	SetBuildEngineEnvironment(context.Context, *model.EnvironmentId) (*model.Environment, error)
	// pause a environment.
	// a environment is paused by scaling down all the workloads to zero replicas.
	// the workload include microservice deployments, postgres-clusters, kafka-clusters etc.
	Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.Environment, error)
	// unpause a environment.
	// a environment is unpause by scaling back all the workloads.
	// all microservice deployments are scaled back to the same number of replicas configured in the most recent successful deployment.
	// postgres-clusters and kafka-clusters are configured to the same number of replicas configured.
	Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.Environment, error)
	// delete a namespace that is part of the environment running in a kube-cluster kubernetes cluster
	DeleteNamespace(context.Context, *model.ByEnvironmentByNamespaceInput) (*resource.WorkloadNamespace, error)
	// preview refresh a environment that was previously created
	PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error)
	// refresh a environment that was previously created
	Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error)
}

// UnimplementedEnvironmentCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentCommandControllerServer struct {
}

func (UnimplementedEnvironmentCommandControllerServer) PreviewCreate(context.Context, *model.Environment) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewCreate not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Create(context.Context, *model.Environment) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) PreviewUpdate(context.Context, *model.Environment) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUpdate not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Update(context.Context, *model.Environment) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) PreviewDelete(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewDelete not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Delete(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) PreviewRestore(context.Context, *model.Environment) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRestore not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Restore(context.Context, *model.Environment) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) CreateStackJob(context.Context, *model2.CreateStackJobCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStackJob not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Clone(context.Context, *model.CloneEnvironmentCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) SetBuildEngineEnvironment(context.Context, *model.EnvironmentId) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBuildEngineEnvironment not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Pause(context.Context, *model1.ApiResourcePauseCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Unpause(context.Context, *model1.ApiResourceUnPauseCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) DeleteNamespace(context.Context, *model.ByEnvironmentByNamespaceInput) (*resource.WorkloadNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) PreviewRefresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRefresh not implemented")
}
func (UnimplementedEnvironmentCommandControllerServer) Refresh(context.Context, *model1.ApiResourceRefreshCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}

// UnsafeEnvironmentCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentCommandControllerServer()
}

func RegisterEnvironmentCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentCommandControllerServer) {
	s.RegisterService(&EnvironmentCommandController_ServiceDesc, srv)
}

func _EnvironmentCommandController_PreviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).PreviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_PreviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).PreviewCreate(ctx, req.(*model.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Create(ctx, req.(*model.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_PreviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).PreviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_PreviewUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).PreviewUpdate(ctx, req.(*model.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Update(ctx, req.(*model.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_PreviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).PreviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_PreviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).PreviewDelete(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Delete(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_PreviewRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).PreviewRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_PreviewRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).PreviewRestore(ctx, req.(*model.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Restore(ctx, req.(*model.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_CreateStackJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CreateStackJobCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).CreateStackJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_CreateStackJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).CreateStackJob(ctx, req.(*model2.CreateStackJobCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CloneEnvironmentCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Clone(ctx, req.(*model.CloneEnvironmentCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_SetBuildEngineEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EnvironmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).SetBuildEngineEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_SetBuildEngineEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).SetBuildEngineEnvironment(ctx, req.(*model.EnvironmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourcePauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Pause(ctx, req.(*model1.ApiResourcePauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceUnPauseCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Unpause(ctx, req.(*model1.ApiResourceUnPauseCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ByEnvironmentByNamespaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).DeleteNamespace(ctx, req.(*model.ByEnvironmentByNamespaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_PreviewRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).PreviewRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_PreviewRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).PreviewRefresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentCommandController_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ApiResourceRefreshCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentCommandControllerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentCommandController_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentCommandControllerServer).Refresh(ctx, req.(*model1.ApiResourceRefreshCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentCommandController",
	HandlerType: (*EnvironmentCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "previewCreate",
			Handler:    _EnvironmentCommandController_PreviewCreate_Handler,
		},
		{
			MethodName: "create",
			Handler:    _EnvironmentCommandController_Create_Handler,
		},
		{
			MethodName: "previewUpdate",
			Handler:    _EnvironmentCommandController_PreviewUpdate_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EnvironmentCommandController_Update_Handler,
		},
		{
			MethodName: "previewDelete",
			Handler:    _EnvironmentCommandController_PreviewDelete_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentCommandController_Delete_Handler,
		},
		{
			MethodName: "previewRestore",
			Handler:    _EnvironmentCommandController_PreviewRestore_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _EnvironmentCommandController_Restore_Handler,
		},
		{
			MethodName: "createStackJob",
			Handler:    _EnvironmentCommandController_CreateStackJob_Handler,
		},
		{
			MethodName: "clone",
			Handler:    _EnvironmentCommandController_Clone_Handler,
		},
		{
			MethodName: "setBuildEngineEnvironment",
			Handler:    _EnvironmentCommandController_SetBuildEngineEnvironment_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _EnvironmentCommandController_Pause_Handler,
		},
		{
			MethodName: "unpause",
			Handler:    _EnvironmentCommandController_Unpause_Handler,
		},
		{
			MethodName: "deleteNamespace",
			Handler:    _EnvironmentCommandController_DeleteNamespace_Handler,
		},
		{
			MethodName: "previewRefresh",
			Handler:    _EnvironmentCommandController_PreviewRefresh_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _EnvironmentCommandController_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/service/command.proto",
}

const (
	EnvironmentSecretCommandController_Add_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentSecretCommandController/add"
	EnvironmentSecretCommandController_AddMultiple_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentSecretCommandController/addMultiple"
	EnvironmentSecretCommandController_Delete_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentSecretCommandController/delete"
	EnvironmentSecretCommandController_UpdateValue_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentSecretCommandController/updateValue"
)

// EnvironmentSecretCommandControllerClient is the client API for EnvironmentSecretCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentSecretCommandControllerClient interface {
	// add a env secret to a environment
	Add(ctx context.Context, in *model.AddEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// add multiple product secrets to existing list of product secrets of a environment
	AddMultiple(ctx context.Context, in *model.AddEnvironmentSecretsCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// delete a environment secret.
	Delete(ctx context.Context, in *model.DeleteOrRestoreEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// update value of a product secret
	UpdateValue(ctx context.Context, in *model.UpdateEnvironmentSecretValueCommandInput, opts ...grpc.CallOption) (*model.EnvironmentSecret, error)
}

type environmentSecretCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentSecretCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentSecretCommandControllerClient {
	return &environmentSecretCommandControllerClient{cc}
}

func (c *environmentSecretCommandControllerClient) Add(ctx context.Context, in *model.AddEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretCommandControllerClient) AddMultiple(ctx context.Context, in *model.AddEnvironmentSecretsCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_AddMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretCommandControllerClient) Delete(ctx context.Context, in *model.DeleteOrRestoreEnvironmentSecretCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSecretCommandControllerClient) UpdateValue(ctx context.Context, in *model.UpdateEnvironmentSecretValueCommandInput, opts ...grpc.CallOption) (*model.EnvironmentSecret, error) {
	out := new(model.EnvironmentSecret)
	err := c.cc.Invoke(ctx, EnvironmentSecretCommandController_UpdateValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentSecretCommandControllerServer is the server API for EnvironmentSecretCommandController service.
// All implementations should embed UnimplementedEnvironmentSecretCommandControllerServer
// for forward compatibility
type EnvironmentSecretCommandControllerServer interface {
	// add a env secret to a environment
	Add(context.Context, *model.AddEnvironmentSecretCommandInput) (*model.Environment, error)
	// add multiple product secrets to existing list of product secrets of a environment
	AddMultiple(context.Context, *model.AddEnvironmentSecretsCommandInput) (*model.Environment, error)
	// delete a environment secret.
	Delete(context.Context, *model.DeleteOrRestoreEnvironmentSecretCommandInput) (*model.Environment, error)
	// update value of a product secret
	UpdateValue(context.Context, *model.UpdateEnvironmentSecretValueCommandInput) (*model.EnvironmentSecret, error)
}

// UnimplementedEnvironmentSecretCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentSecretCommandControllerServer struct {
}

func (UnimplementedEnvironmentSecretCommandControllerServer) Add(context.Context, *model.AddEnvironmentSecretCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEnvironmentSecretCommandControllerServer) AddMultiple(context.Context, *model.AddEnvironmentSecretsCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiple not implemented")
}
func (UnimplementedEnvironmentSecretCommandControllerServer) Delete(context.Context, *model.DeleteOrRestoreEnvironmentSecretCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentSecretCommandControllerServer) UpdateValue(context.Context, *model.UpdateEnvironmentSecretValueCommandInput) (*model.EnvironmentSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}

// UnsafeEnvironmentSecretCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentSecretCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentSecretCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentSecretCommandControllerServer()
}

func RegisterEnvironmentSecretCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentSecretCommandControllerServer) {
	s.RegisterService(&EnvironmentSecretCommandController_ServiceDesc, srv)
}

func _EnvironmentSecretCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddEnvironmentSecretCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).Add(ctx, req.(*model.AddEnvironmentSecretCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretCommandController_AddMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddEnvironmentSecretsCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).AddMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_AddMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).AddMultiple(ctx, req.(*model.AddEnvironmentSecretsCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteOrRestoreEnvironmentSecretCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).Delete(ctx, req.(*model.DeleteOrRestoreEnvironmentSecretCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSecretCommandController_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateEnvironmentSecretValueCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSecretCommandControllerServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSecretCommandController_UpdateValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSecretCommandControllerServer).UpdateValue(ctx, req.(*model.UpdateEnvironmentSecretValueCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentSecretCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentSecretCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentSecretCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentSecretCommandController",
	HandlerType: (*EnvironmentSecretCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _EnvironmentSecretCommandController_Add_Handler,
		},
		{
			MethodName: "addMultiple",
			Handler:    _EnvironmentSecretCommandController_AddMultiple_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentSecretCommandController_Delete_Handler,
		},
		{
			MethodName: "updateValue",
			Handler:    _EnvironmentSecretCommandController_UpdateValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/service/command.proto",
}

const (
	EnvironmentVariableCommandController_Add_FullMethodName         = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentVariableCommandController/add"
	EnvironmentVariableCommandController_AddMultiple_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentVariableCommandController/addMultiple"
	EnvironmentVariableCommandController_Delete_FullMethodName      = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentVariableCommandController/delete"
	EnvironmentVariableCommandController_UpdateValue_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentVariableCommandController/updateValue"
)

// EnvironmentVariableCommandControllerClient is the client API for EnvironmentVariableCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentVariableCommandControllerClient interface {
	// add a environment variable to a product
	Add(ctx context.Context, in *model.AddEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// add multiple environment variables to existing list of environment variables of a environment
	AddMultiple(ctx context.Context, in *model.AddEnvironmentVariablesCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// delete a environment variable.
	Delete(ctx context.Context, in *model.DeleteOrRestoreEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// update value of a environment variable
	UpdateValue(ctx context.Context, in *model.UpdateEnvironmentVariableValueCommandInput, opts ...grpc.CallOption) (*model.EnvironmentVariable, error)
}

type environmentVariableCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentVariableCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentVariableCommandControllerClient {
	return &environmentVariableCommandControllerClient{cc}
}

func (c *environmentVariableCommandControllerClient) Add(ctx context.Context, in *model.AddEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableCommandControllerClient) AddMultiple(ctx context.Context, in *model.AddEnvironmentVariablesCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_AddMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableCommandControllerClient) Delete(ctx context.Context, in *model.DeleteOrRestoreEnvironmentVariableCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentVariableCommandControllerClient) UpdateValue(ctx context.Context, in *model.UpdateEnvironmentVariableValueCommandInput, opts ...grpc.CallOption) (*model.EnvironmentVariable, error) {
	out := new(model.EnvironmentVariable)
	err := c.cc.Invoke(ctx, EnvironmentVariableCommandController_UpdateValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentVariableCommandControllerServer is the server API for EnvironmentVariableCommandController service.
// All implementations should embed UnimplementedEnvironmentVariableCommandControllerServer
// for forward compatibility
type EnvironmentVariableCommandControllerServer interface {
	// add a environment variable to a product
	Add(context.Context, *model.AddEnvironmentVariableCommandInput) (*model.Environment, error)
	// add multiple environment variables to existing list of environment variables of a environment
	AddMultiple(context.Context, *model.AddEnvironmentVariablesCommandInput) (*model.Environment, error)
	// delete a environment variable.
	Delete(context.Context, *model.DeleteOrRestoreEnvironmentVariableCommandInput) (*model.Environment, error)
	// update value of a environment variable
	UpdateValue(context.Context, *model.UpdateEnvironmentVariableValueCommandInput) (*model.EnvironmentVariable, error)
}

// UnimplementedEnvironmentVariableCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentVariableCommandControllerServer struct {
}

func (UnimplementedEnvironmentVariableCommandControllerServer) Add(context.Context, *model.AddEnvironmentVariableCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEnvironmentVariableCommandControllerServer) AddMultiple(context.Context, *model.AddEnvironmentVariablesCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiple not implemented")
}
func (UnimplementedEnvironmentVariableCommandControllerServer) Delete(context.Context, *model.DeleteOrRestoreEnvironmentVariableCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentVariableCommandControllerServer) UpdateValue(context.Context, *model.UpdateEnvironmentVariableValueCommandInput) (*model.EnvironmentVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}

// UnsafeEnvironmentVariableCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentVariableCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentVariableCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentVariableCommandControllerServer()
}

func RegisterEnvironmentVariableCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentVariableCommandControllerServer) {
	s.RegisterService(&EnvironmentVariableCommandController_ServiceDesc, srv)
}

func _EnvironmentVariableCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddEnvironmentVariableCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).Add(ctx, req.(*model.AddEnvironmentVariableCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableCommandController_AddMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddEnvironmentVariablesCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).AddMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_AddMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).AddMultiple(ctx, req.(*model.AddEnvironmentVariablesCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteOrRestoreEnvironmentVariableCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).Delete(ctx, req.(*model.DeleteOrRestoreEnvironmentVariableCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentVariableCommandController_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateEnvironmentVariableValueCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentVariableCommandControllerServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentVariableCommandController_UpdateValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentVariableCommandControllerServer).UpdateValue(ctx, req.(*model.UpdateEnvironmentVariableValueCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentVariableCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentVariableCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentVariableCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentVariableCommandController",
	HandlerType: (*EnvironmentVariableCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _EnvironmentVariableCommandController_Add_Handler,
		},
		{
			MethodName: "addMultiple",
			Handler:    _EnvironmentVariableCommandController_AddMultiple_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentVariableCommandController_Delete_Handler,
		},
		{
			MethodName: "updateValue",
			Handler:    _EnvironmentVariableCommandController_UpdateValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/service/command.proto",
}

const (
	EnvironmentEndpointDomainCommandController_Add_FullMethodName    = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentEndpointDomainCommandController/add"
	EnvironmentEndpointDomainCommandController_Update_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentEndpointDomainCommandController/update"
	EnvironmentEndpointDomainCommandController_Delete_FullMethodName = "/cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentEndpointDomainCommandController/delete"
)

// EnvironmentEndpointDomainCommandControllerClient is the client API for EnvironmentEndpointDomainCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentEndpointDomainCommandControllerClient interface {
	// add a new endpoint-domain to a environment
	Add(ctx context.Context, in *model.AddOrUpdateEndpointDomainCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// update an existing endpoint-domain to a environment
	Update(ctx context.Context, in *model.AddOrUpdateEndpointDomainCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
	// delete an dns-zone of a company
	Delete(ctx context.Context, in *model.DeleteEndpointDomainCommandInput, opts ...grpc.CallOption) (*model.Environment, error)
}

type environmentEndpointDomainCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentEndpointDomainCommandControllerClient(cc grpc.ClientConnInterface) EnvironmentEndpointDomainCommandControllerClient {
	return &environmentEndpointDomainCommandControllerClient{cc}
}

func (c *environmentEndpointDomainCommandControllerClient) Add(ctx context.Context, in *model.AddOrUpdateEndpointDomainCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentEndpointDomainCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentEndpointDomainCommandControllerClient) Update(ctx context.Context, in *model.AddOrUpdateEndpointDomainCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentEndpointDomainCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentEndpointDomainCommandControllerClient) Delete(ctx context.Context, in *model.DeleteEndpointDomainCommandInput, opts ...grpc.CallOption) (*model.Environment, error) {
	out := new(model.Environment)
	err := c.cc.Invoke(ctx, EnvironmentEndpointDomainCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentEndpointDomainCommandControllerServer is the server API for EnvironmentEndpointDomainCommandController service.
// All implementations should embed UnimplementedEnvironmentEndpointDomainCommandControllerServer
// for forward compatibility
type EnvironmentEndpointDomainCommandControllerServer interface {
	// add a new endpoint-domain to a environment
	Add(context.Context, *model.AddOrUpdateEndpointDomainCommandInput) (*model.Environment, error)
	// update an existing endpoint-domain to a environment
	Update(context.Context, *model.AddOrUpdateEndpointDomainCommandInput) (*model.Environment, error)
	// delete an dns-zone of a company
	Delete(context.Context, *model.DeleteEndpointDomainCommandInput) (*model.Environment, error)
}

// UnimplementedEnvironmentEndpointDomainCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedEnvironmentEndpointDomainCommandControllerServer struct {
}

func (UnimplementedEnvironmentEndpointDomainCommandControllerServer) Add(context.Context, *model.AddOrUpdateEndpointDomainCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEnvironmentEndpointDomainCommandControllerServer) Update(context.Context, *model.AddOrUpdateEndpointDomainCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnvironmentEndpointDomainCommandControllerServer) Delete(context.Context, *model.DeleteEndpointDomainCommandInput) (*model.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeEnvironmentEndpointDomainCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentEndpointDomainCommandControllerServer will
// result in compilation errors.
type UnsafeEnvironmentEndpointDomainCommandControllerServer interface {
	mustEmbedUnimplementedEnvironmentEndpointDomainCommandControllerServer()
}

func RegisterEnvironmentEndpointDomainCommandControllerServer(s grpc.ServiceRegistrar, srv EnvironmentEndpointDomainCommandControllerServer) {
	s.RegisterService(&EnvironmentEndpointDomainCommandController_ServiceDesc, srv)
}

func _EnvironmentEndpointDomainCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateEndpointDomainCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentEndpointDomainCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentEndpointDomainCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentEndpointDomainCommandControllerServer).Add(ctx, req.(*model.AddOrUpdateEndpointDomainCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentEndpointDomainCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddOrUpdateEndpointDomainCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentEndpointDomainCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentEndpointDomainCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentEndpointDomainCommandControllerServer).Update(ctx, req.(*model.AddOrUpdateEndpointDomainCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentEndpointDomainCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteEndpointDomainCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentEndpointDomainCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentEndpointDomainCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentEndpointDomainCommandControllerServer).Delete(ctx, req.(*model.DeleteEndpointDomainCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentEndpointDomainCommandController_ServiceDesc is the grpc.ServiceDesc for EnvironmentEndpointDomainCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentEndpointDomainCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.code2cloud.environment.service.EnvironmentEndpointDomainCommandController",
	HandlerType: (*EnvironmentEndpointDomainCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _EnvironmentEndpointDomainCommandController_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EnvironmentEndpointDomainCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EnvironmentEndpointDomainCommandController_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/code2cloud/environment/service/command.proto",
}
