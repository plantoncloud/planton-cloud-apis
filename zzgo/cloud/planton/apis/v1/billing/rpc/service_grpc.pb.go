// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/billing/rpc/service.proto

package rpc

import (
	context "context"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/company/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingCommandController_UpdBillingAccount_FullMethodName     = "/cloud.planton.apis.v1.billing.rpc.BillingCommandController/updBillingAccount"
	BillingCommandController_DelBillingAccount_FullMethodName     = "/cloud.planton.apis.v1.billing.rpc.BillingCommandController/delBillingAccount"
	BillingCommandController_RestoreBillingAccount_FullMethodName = "/cloud.planton.apis.v1.billing.rpc.BillingCommandController/restoreBillingAccount"
)

// BillingCommandControllerClient is the client API for BillingCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingCommandControllerClient interface {
	// update an existing billing account.
	UpdBillingAccount(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*BillingAccount, error)
	// delete an existing billing account.
	// a billing account can not be deleted without deleting all the subscriptions linked to the billing account.
	DelBillingAccount(ctx context.Context, in *BillingAccountId, opts ...grpc.CallOption) (*BillingAccount, error)
	// restore a previously deleted billing account.
	RestoreBillingAccount(ctx context.Context, in *BillingAccountId, opts ...grpc.CallOption) (*BillingAccount, error)
}

type billingCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingCommandControllerClient(cc grpc.ClientConnInterface) BillingCommandControllerClient {
	return &billingCommandControllerClient{cc}
}

func (c *billingCommandControllerClient) UpdBillingAccount(ctx context.Context, in *BillingAccount, opts ...grpc.CallOption) (*BillingAccount, error) {
	out := new(BillingAccount)
	err := c.cc.Invoke(ctx, BillingCommandController_UpdBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingCommandControllerClient) DelBillingAccount(ctx context.Context, in *BillingAccountId, opts ...grpc.CallOption) (*BillingAccount, error) {
	out := new(BillingAccount)
	err := c.cc.Invoke(ctx, BillingCommandController_DelBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingCommandControllerClient) RestoreBillingAccount(ctx context.Context, in *BillingAccountId, opts ...grpc.CallOption) (*BillingAccount, error) {
	out := new(BillingAccount)
	err := c.cc.Invoke(ctx, BillingCommandController_RestoreBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingCommandControllerServer is the server API for BillingCommandController service.
// All implementations should embed UnimplementedBillingCommandControllerServer
// for forward compatibility
type BillingCommandControllerServer interface {
	// update an existing billing account.
	UpdBillingAccount(context.Context, *BillingAccount) (*BillingAccount, error)
	// delete an existing billing account.
	// a billing account can not be deleted without deleting all the subscriptions linked to the billing account.
	DelBillingAccount(context.Context, *BillingAccountId) (*BillingAccount, error)
	// restore a previously deleted billing account.
	RestoreBillingAccount(context.Context, *BillingAccountId) (*BillingAccount, error)
}

// UnimplementedBillingCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedBillingCommandControllerServer struct {
}

func (UnimplementedBillingCommandControllerServer) UpdBillingAccount(context.Context, *BillingAccount) (*BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdBillingAccount not implemented")
}
func (UnimplementedBillingCommandControllerServer) DelBillingAccount(context.Context, *BillingAccountId) (*BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBillingAccount not implemented")
}
func (UnimplementedBillingCommandControllerServer) RestoreBillingAccount(context.Context, *BillingAccountId) (*BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBillingAccount not implemented")
}

// UnsafeBillingCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingCommandControllerServer will
// result in compilation errors.
type UnsafeBillingCommandControllerServer interface {
	mustEmbedUnimplementedBillingCommandControllerServer()
}

func RegisterBillingCommandControllerServer(s grpc.ServiceRegistrar, srv BillingCommandControllerServer) {
	s.RegisterService(&BillingCommandController_ServiceDesc, srv)
}

func _BillingCommandController_UpdBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCommandControllerServer).UpdBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingCommandController_UpdBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCommandControllerServer).UpdBillingAccount(ctx, req.(*BillingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCommandController_DelBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCommandControllerServer).DelBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingCommandController_DelBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCommandControllerServer).DelBillingAccount(ctx, req.(*BillingAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingCommandController_RestoreBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingCommandControllerServer).RestoreBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingCommandController_RestoreBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingCommandControllerServer).RestoreBillingAccount(ctx, req.(*BillingAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingCommandController_ServiceDesc is the grpc.ServiceDesc for BillingCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.billing.rpc.BillingCommandController",
	HandlerType: (*BillingCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updBillingAccount",
			Handler:    _BillingCommandController_UpdBillingAccount_Handler,
		},
		{
			MethodName: "delBillingAccount",
			Handler:    _BillingCommandController_DelBillingAccount_Handler,
		},
		{
			MethodName: "restoreBillingAccount",
			Handler:    _BillingCommandController_RestoreBillingAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/billing/rpc/service.proto",
}

const (
	BillingQueryController_ListBillingAccounts_FullMethodName                 = "/cloud.planton.apis.v1.billing.rpc.BillingQueryController/listBillingAccounts"
	BillingQueryController_GetBillingAccountByBillingAccountId_FullMethodName = "/cloud.planton.apis.v1.billing.rpc.BillingQueryController/getBillingAccountByBillingAccountId"
	BillingQueryController_GetBillingAccountByCompanyId_FullMethodName        = "/cloud.planton.apis.v1.billing.rpc.BillingQueryController/getBillingAccountByCompanyId"
	BillingQueryController_GetCustomerPortalSessionByCompanyId_FullMethodName = "/cloud.planton.apis.v1.billing.rpc.BillingQueryController/getCustomerPortalSessionByCompanyId"
)

// BillingQueryControllerClient is the client API for BillingQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingQueryControllerClient interface {
	// retrieve paginated list of all billing accounts on planton cloud. this is intended to be used on portal.
	ListBillingAccounts(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*BillingAccountList, error)
	// lookup billing account using billing account id.
	GetBillingAccountByBillingAccountId(ctx context.Context, in *BillingAccountId, opts ...grpc.CallOption) (*BillingAccount, error)
	// lookup billing account using company id.
	GetBillingAccountByCompanyId(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*BillingAccount, error)
	// get customer portal session.
	// https://stripe.com/docs/api/customer_portal/sessions/create
	GetCustomerPortalSessionByCompanyId(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*GetCustomerPortalSessionQueryResp, error)
}

type billingQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingQueryControllerClient(cc grpc.ClientConnInterface) BillingQueryControllerClient {
	return &billingQueryControllerClient{cc}
}

func (c *billingQueryControllerClient) ListBillingAccounts(ctx context.Context, in *pagination.PageInfo, opts ...grpc.CallOption) (*BillingAccountList, error) {
	out := new(BillingAccountList)
	err := c.cc.Invoke(ctx, BillingQueryController_ListBillingAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingQueryControllerClient) GetBillingAccountByBillingAccountId(ctx context.Context, in *BillingAccountId, opts ...grpc.CallOption) (*BillingAccount, error) {
	out := new(BillingAccount)
	err := c.cc.Invoke(ctx, BillingQueryController_GetBillingAccountByBillingAccountId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingQueryControllerClient) GetBillingAccountByCompanyId(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*BillingAccount, error) {
	out := new(BillingAccount)
	err := c.cc.Invoke(ctx, BillingQueryController_GetBillingAccountByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingQueryControllerClient) GetCustomerPortalSessionByCompanyId(ctx context.Context, in *rpc.CompanyId, opts ...grpc.CallOption) (*GetCustomerPortalSessionQueryResp, error) {
	out := new(GetCustomerPortalSessionQueryResp)
	err := c.cc.Invoke(ctx, BillingQueryController_GetCustomerPortalSessionByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingQueryControllerServer is the server API for BillingQueryController service.
// All implementations should embed UnimplementedBillingQueryControllerServer
// for forward compatibility
type BillingQueryControllerServer interface {
	// retrieve paginated list of all billing accounts on planton cloud. this is intended to be used on portal.
	ListBillingAccounts(context.Context, *pagination.PageInfo) (*BillingAccountList, error)
	// lookup billing account using billing account id.
	GetBillingAccountByBillingAccountId(context.Context, *BillingAccountId) (*BillingAccount, error)
	// lookup billing account using company id.
	GetBillingAccountByCompanyId(context.Context, *rpc.CompanyId) (*BillingAccount, error)
	// get customer portal session.
	// https://stripe.com/docs/api/customer_portal/sessions/create
	GetCustomerPortalSessionByCompanyId(context.Context, *rpc.CompanyId) (*GetCustomerPortalSessionQueryResp, error)
}

// UnimplementedBillingQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedBillingQueryControllerServer struct {
}

func (UnimplementedBillingQueryControllerServer) ListBillingAccounts(context.Context, *pagination.PageInfo) (*BillingAccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingAccounts not implemented")
}
func (UnimplementedBillingQueryControllerServer) GetBillingAccountByBillingAccountId(context.Context, *BillingAccountId) (*BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingAccountByBillingAccountId not implemented")
}
func (UnimplementedBillingQueryControllerServer) GetBillingAccountByCompanyId(context.Context, *rpc.CompanyId) (*BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingAccountByCompanyId not implemented")
}
func (UnimplementedBillingQueryControllerServer) GetCustomerPortalSessionByCompanyId(context.Context, *rpc.CompanyId) (*GetCustomerPortalSessionQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerPortalSessionByCompanyId not implemented")
}

// UnsafeBillingQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingQueryControllerServer will
// result in compilation errors.
type UnsafeBillingQueryControllerServer interface {
	mustEmbedUnimplementedBillingQueryControllerServer()
}

func RegisterBillingQueryControllerServer(s grpc.ServiceRegistrar, srv BillingQueryControllerServer) {
	s.RegisterService(&BillingQueryController_ServiceDesc, srv)
}

func _BillingQueryController_ListBillingAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pagination.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).ListBillingAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_ListBillingAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).ListBillingAccounts(ctx, req.(*pagination.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingQueryController_GetBillingAccountByBillingAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).GetBillingAccountByBillingAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_GetBillingAccountByBillingAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).GetBillingAccountByBillingAccountId(ctx, req.(*BillingAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingQueryController_GetBillingAccountByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).GetBillingAccountByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_GetBillingAccountByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).GetBillingAccountByCompanyId(ctx, req.(*rpc.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingQueryController_GetCustomerPortalSessionByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).GetCustomerPortalSessionByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_GetCustomerPortalSessionByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).GetCustomerPortalSessionByCompanyId(ctx, req.(*rpc.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingQueryController_ServiceDesc is the grpc.ServiceDesc for BillingQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.billing.rpc.BillingQueryController",
	HandlerType: (*BillingQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listBillingAccounts",
			Handler:    _BillingQueryController_ListBillingAccounts_Handler,
		},
		{
			MethodName: "getBillingAccountByBillingAccountId",
			Handler:    _BillingQueryController_GetBillingAccountByBillingAccountId_Handler,
		},
		{
			MethodName: "getBillingAccountByCompanyId",
			Handler:    _BillingQueryController_GetBillingAccountByCompanyId_Handler,
		},
		{
			MethodName: "getCustomerPortalSessionByCompanyId",
			Handler:    _BillingQueryController_GetCustomerPortalSessionByCompanyId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/billing/rpc/service.proto",
}
