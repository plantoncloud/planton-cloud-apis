// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/billing/service/query.proto

package service

import (
	context "context"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/billing/model"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination/model"
	model2 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/resourcemanager/company/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingQueryController_ListBillingAccounts_FullMethodName                 = "/cloud.planton.apis.v1.billing.service.BillingQueryController/listBillingAccounts"
	BillingQueryController_GetBillingAccountByBillingAccountId_FullMethodName = "/cloud.planton.apis.v1.billing.service.BillingQueryController/getBillingAccountByBillingAccountId"
	BillingQueryController_GetBillingAccountByCompanyId_FullMethodName        = "/cloud.planton.apis.v1.billing.service.BillingQueryController/getBillingAccountByCompanyId"
	BillingQueryController_GetCustomerPortalSessionByCompanyId_FullMethodName = "/cloud.planton.apis.v1.billing.service.BillingQueryController/getCustomerPortalSessionByCompanyId"
)

// BillingQueryControllerClient is the client API for BillingQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingQueryControllerClient interface {
	// retrieve paginated list of all billing accounts on planton cloud. this is intended to be used on portal.
	ListBillingAccounts(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.BillingAccountList, error)
	// lookup billing account using billing account id.
	GetBillingAccountByBillingAccountId(ctx context.Context, in *model1.BillingAccountId, opts ...grpc.CallOption) (*model1.BillingAccount, error)
	// lookup billing account using company id.
	GetBillingAccountByCompanyId(ctx context.Context, in *model2.CompanyId, opts ...grpc.CallOption) (*model1.BillingAccount, error)
	// get customer portal session.
	// https://stripe.com/docs/api/customer_portal/sessions/create
	GetCustomerPortalSessionByCompanyId(ctx context.Context, in *model2.CompanyId, opts ...grpc.CallOption) (*model1.GetCustomerPortalSessionQueryResp, error)
}

type billingQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingQueryControllerClient(cc grpc.ClientConnInterface) BillingQueryControllerClient {
	return &billingQueryControllerClient{cc}
}

func (c *billingQueryControllerClient) ListBillingAccounts(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.BillingAccountList, error) {
	out := new(model1.BillingAccountList)
	err := c.cc.Invoke(ctx, BillingQueryController_ListBillingAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingQueryControllerClient) GetBillingAccountByBillingAccountId(ctx context.Context, in *model1.BillingAccountId, opts ...grpc.CallOption) (*model1.BillingAccount, error) {
	out := new(model1.BillingAccount)
	err := c.cc.Invoke(ctx, BillingQueryController_GetBillingAccountByBillingAccountId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingQueryControllerClient) GetBillingAccountByCompanyId(ctx context.Context, in *model2.CompanyId, opts ...grpc.CallOption) (*model1.BillingAccount, error) {
	out := new(model1.BillingAccount)
	err := c.cc.Invoke(ctx, BillingQueryController_GetBillingAccountByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingQueryControllerClient) GetCustomerPortalSessionByCompanyId(ctx context.Context, in *model2.CompanyId, opts ...grpc.CallOption) (*model1.GetCustomerPortalSessionQueryResp, error) {
	out := new(model1.GetCustomerPortalSessionQueryResp)
	err := c.cc.Invoke(ctx, BillingQueryController_GetCustomerPortalSessionByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingQueryControllerServer is the server API for BillingQueryController service.
// All implementations should embed UnimplementedBillingQueryControllerServer
// for forward compatibility
type BillingQueryControllerServer interface {
	// retrieve paginated list of all billing accounts on planton cloud. this is intended to be used on portal.
	ListBillingAccounts(context.Context, *model.PageInfo) (*model1.BillingAccountList, error)
	// lookup billing account using billing account id.
	GetBillingAccountByBillingAccountId(context.Context, *model1.BillingAccountId) (*model1.BillingAccount, error)
	// lookup billing account using company id.
	GetBillingAccountByCompanyId(context.Context, *model2.CompanyId) (*model1.BillingAccount, error)
	// get customer portal session.
	// https://stripe.com/docs/api/customer_portal/sessions/create
	GetCustomerPortalSessionByCompanyId(context.Context, *model2.CompanyId) (*model1.GetCustomerPortalSessionQueryResp, error)
}

// UnimplementedBillingQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedBillingQueryControllerServer struct {
}

func (UnimplementedBillingQueryControllerServer) ListBillingAccounts(context.Context, *model.PageInfo) (*model1.BillingAccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingAccounts not implemented")
}
func (UnimplementedBillingQueryControllerServer) GetBillingAccountByBillingAccountId(context.Context, *model1.BillingAccountId) (*model1.BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingAccountByBillingAccountId not implemented")
}
func (UnimplementedBillingQueryControllerServer) GetBillingAccountByCompanyId(context.Context, *model2.CompanyId) (*model1.BillingAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingAccountByCompanyId not implemented")
}
func (UnimplementedBillingQueryControllerServer) GetCustomerPortalSessionByCompanyId(context.Context, *model2.CompanyId) (*model1.GetCustomerPortalSessionQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerPortalSessionByCompanyId not implemented")
}

// UnsafeBillingQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingQueryControllerServer will
// result in compilation errors.
type UnsafeBillingQueryControllerServer interface {
	mustEmbedUnimplementedBillingQueryControllerServer()
}

func RegisterBillingQueryControllerServer(s grpc.ServiceRegistrar, srv BillingQueryControllerServer) {
	s.RegisterService(&BillingQueryController_ServiceDesc, srv)
}

func _BillingQueryController_ListBillingAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).ListBillingAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_ListBillingAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).ListBillingAccounts(ctx, req.(*model.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingQueryController_GetBillingAccountByBillingAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.BillingAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).GetBillingAccountByBillingAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_GetBillingAccountByBillingAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).GetBillingAccountByBillingAccountId(ctx, req.(*model1.BillingAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingQueryController_GetBillingAccountByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).GetBillingAccountByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_GetBillingAccountByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).GetBillingAccountByCompanyId(ctx, req.(*model2.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingQueryController_GetCustomerPortalSessionByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model2.CompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingQueryControllerServer).GetCustomerPortalSessionByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingQueryController_GetCustomerPortalSessionByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingQueryControllerServer).GetCustomerPortalSessionByCompanyId(ctx, req.(*model2.CompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingQueryController_ServiceDesc is the grpc.ServiceDesc for BillingQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.billing.service.BillingQueryController",
	HandlerType: (*BillingQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listBillingAccounts",
			Handler:    _BillingQueryController_ListBillingAccounts_Handler,
		},
		{
			MethodName: "getBillingAccountByBillingAccountId",
			Handler:    _BillingQueryController_GetBillingAccountByBillingAccountId_Handler,
		},
		{
			MethodName: "getBillingAccountByCompanyId",
			Handler:    _BillingQueryController_GetBillingAccountByCompanyId_Handler,
		},
		{
			MethodName: "getCustomerPortalSessionByCompanyId",
			Handler:    _BillingQueryController_GetCustomerPortalSessionByCompanyId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/billing/service/query.proto",
}
