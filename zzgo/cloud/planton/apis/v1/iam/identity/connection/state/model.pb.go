// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/iam/identity/connection/state/model.proto

package state

import (
	audit "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/audit"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/options"
	enums "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/iam/identity/connection/state/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdentityConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event_type is event that resulted in the new state which often is a result of processing a command
	EventType enums.IdentityConnectionEventType `protobuf:"varint,99,opt,name=event_type,json=eventType,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.state.enums.IdentityConnectionEventType" json:"event_type,omitempty"`
	// resource api version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// metadata for the resource
	// id:
	//
	// naming convention "<idc>-<company_id>-<connection_name>".
	// backend ignores the value provided by the client.
	//
	// name:
	//
	// a user preferred name of the identity connection.
	// (important) spaces and special characters are not allowed except for hyphens.
	Metadata *resource.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// resource spec
	Spec *IdentityConnectionSpecState `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// resource status
	Status *IdentityConnectionStatusState `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IdentityConnectionState) Reset() {
	*x = IdentityConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionState) ProtoMessage() {}

func (x *IdentityConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionState.ProtoReflect.Descriptor instead.
func (*IdentityConnectionState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescGZIP(), []int{0}
}

func (x *IdentityConnectionState) GetEventType() enums.IdentityConnectionEventType {
	if x != nil {
		return x.EventType
	}
	return enums.IdentityConnectionEventType(0)
}

func (x *IdentityConnectionState) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *IdentityConnectionState) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *IdentityConnectionState) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IdentityConnectionState) GetSpec() *IdentityConnectionSpecState {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *IdentityConnectionState) GetStatus() *IdentityConnectionStatusState {
	if x != nil {
		return x.Status
	}
	return nil
}

// identity connection used for linking a company's identity provider with planton cloud.
type IdentityConnectionSpecState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the company owning the identity connection.
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// type of the identity connection.
	ConnectionType string `protobuf:"bytes,2,opt,name=connection_type,json=connectionType,proto3" json:"connection_type,omitempty"`
	// a user preferred name of the identity connection.
	// (important) spaces and special characters are not allowed except for hyphens.
	ConnectionName string `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connection_name,omitempty"`
	// (read-only) this is generated by planton cloud.
	// naming convention "<dc>-<company_id>-<connection_name>.
	// backend ignores the value provided by the client.
	IdentityConnectionId string `protobuf:"bytes,4,opt,name=identity_connection_id,json=identityConnectionId,proto3" json:"identity_connection_id,omitempty"`
	// (read-only) id assigned by auth0 upon successful creation of the enterprise connection.
	// this value is required to query auth0 system to get the details of the connection.
	IdentityConnectionIdOnIdp string `protobuf:"bytes,5,opt,name=identity_connection_id_on_idp,json=identityConnectionIdOnIdp,proto3" json:"identity_connection_id_on_idp,omitempty"`
	// (read-only) url of the identity connection on idp.
	// this is constructed when a client requests for the account object.
	// the format of the url for machine accounts is https://manage.auth0.com/dashboard/us/<tenant>/connections/enterprise/<connection-type-on-auth0>/<connection-id-on-auth0>/settings
	// ex: https://manage.auth0.com/dashboard/us/planton-pcs-dev/connections/enterprise/google-apps/con_DBlqRlQ8dsPCvZnj/settings
	IdpUrl string `protobuf:"bytes,6,opt,name=idp_url,json=idpUrl,proto3" json:"idp_url,omitempty"`
	// saml input for sign in url
	SignInUrl string `protobuf:"bytes,7,opt,name=sign_in_url,json=signInUrl,proto3" json:"sign_in_url,omitempty"`
	// saml input for x509_signing_cert_base64
	// this is also used in ping federate
	X509SigningCertBase64 string `protobuf:"bytes,8,opt,name=x509_signing_cert_base64,json=x509SigningCertBase64,proto3" json:"x509_signing_cert_base64,omitempty"`
	// saml input for enable_sign_out
	EnableSignOut bool `protobuf:"varint,9,opt,name=enable_sign_out,json=enableSignOut,proto3" json:"enable_sign_out,omitempty"`
	// saml input for sign_out_url
	SignOutUrl string `protobuf:"bytes,10,opt,name=sign_out_url,json=signOutUrl,proto3" json:"sign_out_url,omitempty"`
	// saml input for user_id_attribute
	UserIdAttribute string `protobuf:"bytes,11,opt,name=user_id_attribute,json=userIdAttribute,proto3" json:"user_id_attribute,omitempty"`
	// saml input for sign_request
	// this is also used in ping federate
	SignRequest bool `protobuf:"varint,12,opt,name=sign_request,json=signRequest,proto3" json:"sign_request,omitempty"`
	// saml input for sign_request_algorithm
	// this is also used in ping federate
	SignRequestAlgorithm string `protobuf:"bytes,13,opt,name=sign_request_algorithm,json=signRequestAlgorithm,proto3" json:"sign_request_algorithm,omitempty"`
	// saml input for sign_request_algorithm_digest
	// this is also used in ping federate
	SignRequestAlgorithmDigest string `protobuf:"bytes,14,opt,name=sign_request_algorithm_digest,json=signRequestAlgorithmDigest,proto3" json:"sign_request_algorithm_digest,omitempty"`
	// saml input for protocol_binding
	ProtocolBinding string `protobuf:"bytes,15,opt,name=protocol_binding,json=protocolBinding,proto3" json:"protocol_binding,omitempty"`
	// ping federate input for server_url
	PingFederateServerUrl string `protobuf:"bytes,16,opt,name=ping_federate_server_url,json=pingFederateServerUrl,proto3" json:"ping_federate_server_url,omitempty"`
	// ldap connection input for idp_domains
	IdpDomains []string `protobuf:"bytes,17,rep,name=idp_domains,json=idpDomains,proto3" json:"idp_domains,omitempty"`
	// ldap connection input for is_cache_disabled
	IsCacheDisabled bool `protobuf:"varint,18,opt,name=is_cache_disabled,json=isCacheDisabled,proto3" json:"is_cache_disabled,omitempty"`
	// ldap connection input for is_client_ssl_certificate_authentication_required
	IsClientSslCertificateAuthenticationRequired bool `protobuf:"varint,19,opt,name=is_client_ssl_certificate_authentication_required,json=isClientSslCertificateAuthenticationRequired,proto3" json:"is_client_ssl_certificate_authentication_required,omitempty"`
	// ldap connection input for is_kerberos_enabled
	IsKerberosEnabled bool `protobuf:"varint,20,opt,name=is_kerberos_enabled,json=isKerberosEnabled,proto3" json:"is_kerberos_enabled,omitempty"`
	// open id connection input for issue_url
	IssueUrl string `protobuf:"bytes,21,opt,name=issue_url,json=issueUrl,proto3" json:"issue_url,omitempty"`
	// open id connection input for client_id
	// this is also used in okta workforce / AzureActiveDirectoryNativeConnection
	ClientId string `protobuf:"bytes,22,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// open id connection input for callback_url
	// this is also used in okta workforce
	CallbackUrl string `protobuf:"bytes,23,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	// adfs connection input for adfs_metadata_url
	AdfsMetadataUrl string `protobuf:"bytes,24,opt,name=adfs_metadata_url,json=adfsMetadataUrl,proto3" json:"adfs_metadata_url,omitempty"`
	// adfs connection input for adfs_metadata_federation_file
	AdfsMetadataFederationFileBase64 string `protobuf:"bytes,25,opt,name=adfs_metadata_federation_file_base64,json=adfsMetadataFederationFileBase64,proto3" json:"adfs_metadata_federation_file_base64,omitempty"`
	// okta workforce input for okta domain
	OktaDomain string `protobuf:"bytes,26,opt,name=okta_domain,json=oktaDomain,proto3" json:"okta_domain,omitempty"`
	// okta workforce input for client_secret
	// this is also used in AzureActiveDirectoryNativeConnection
	ClientSecret string `protobuf:"bytes,27,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// azure active directory native connection input for microsoft_azure_ad_domain
	MicrosoftAzureAdDomain string `protobuf:"bytes,28,opt,name=microsoft_azure_ad_domain,json=microsoftAzureAdDomain,proto3" json:"microsoft_azure_ad_domain,omitempty"`
	// azure active directory native connection input for use_common_endpoint
	UseCommonEndpoint bool `protobuf:"varint,29,opt,name=use_common_endpoint,json=useCommonEndpoint,proto3" json:"use_common_endpoint,omitempty"`
	// azure active directory native connection input for identity_api
	IdentityApi string `protobuf:"bytes,30,opt,name=identity_api,json=identityApi,proto3" json:"identity_api,omitempty"`
}

func (x *IdentityConnectionSpecState) Reset() {
	*x = IdentityConnectionSpecState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionSpecState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionSpecState) ProtoMessage() {}

func (x *IdentityConnectionSpecState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionSpecState.ProtoReflect.Descriptor instead.
func (*IdentityConnectionSpecState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescGZIP(), []int{1}
}

func (x *IdentityConnectionSpecState) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetConnectionType() string {
	if x != nil {
		return x.ConnectionType
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetIdentityConnectionId() string {
	if x != nil {
		return x.IdentityConnectionId
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetIdentityConnectionIdOnIdp() string {
	if x != nil {
		return x.IdentityConnectionIdOnIdp
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetIdpUrl() string {
	if x != nil {
		return x.IdpUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetSignInUrl() string {
	if x != nil {
		return x.SignInUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetX509SigningCertBase64() string {
	if x != nil {
		return x.X509SigningCertBase64
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetEnableSignOut() bool {
	if x != nil {
		return x.EnableSignOut
	}
	return false
}

func (x *IdentityConnectionSpecState) GetSignOutUrl() string {
	if x != nil {
		return x.SignOutUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetUserIdAttribute() string {
	if x != nil {
		return x.UserIdAttribute
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetSignRequest() bool {
	if x != nil {
		return x.SignRequest
	}
	return false
}

func (x *IdentityConnectionSpecState) GetSignRequestAlgorithm() string {
	if x != nil {
		return x.SignRequestAlgorithm
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetSignRequestAlgorithmDigest() string {
	if x != nil {
		return x.SignRequestAlgorithmDigest
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetProtocolBinding() string {
	if x != nil {
		return x.ProtocolBinding
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetPingFederateServerUrl() string {
	if x != nil {
		return x.PingFederateServerUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetIdpDomains() []string {
	if x != nil {
		return x.IdpDomains
	}
	return nil
}

func (x *IdentityConnectionSpecState) GetIsCacheDisabled() bool {
	if x != nil {
		return x.IsCacheDisabled
	}
	return false
}

func (x *IdentityConnectionSpecState) GetIsClientSslCertificateAuthenticationRequired() bool {
	if x != nil {
		return x.IsClientSslCertificateAuthenticationRequired
	}
	return false
}

func (x *IdentityConnectionSpecState) GetIsKerberosEnabled() bool {
	if x != nil {
		return x.IsKerberosEnabled
	}
	return false
}

func (x *IdentityConnectionSpecState) GetIssueUrl() string {
	if x != nil {
		return x.IssueUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetAdfsMetadataUrl() string {
	if x != nil {
		return x.AdfsMetadataUrl
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetAdfsMetadataFederationFileBase64() string {
	if x != nil {
		return x.AdfsMetadataFederationFileBase64
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetOktaDomain() string {
	if x != nil {
		return x.OktaDomain
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetMicrosoftAzureAdDomain() string {
	if x != nil {
		return x.MicrosoftAzureAdDomain
	}
	return ""
}

func (x *IdentityConnectionSpecState) GetUseCommonEndpoint() bool {
	if x != nil {
		return x.UseCommonEndpoint
	}
	return false
}

func (x *IdentityConnectionSpecState) GetIdentityApi() string {
	if x != nil {
		return x.IdentityApi
	}
	return ""
}

// status for identity-connection
type IdentityConnectionStatusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lifecycle of the resource
	Lifecycle *resource.ResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// system audit info
	SysAudit *audit.SysAudit `protobuf:"bytes,98,opt,name=sys_audit,json=sysAudit,proto3" json:"sys_audit,omitempty"`
}

func (x *IdentityConnectionStatusState) Reset() {
	*x = IdentityConnectionStatusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionStatusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionStatusState) ProtoMessage() {}

func (x *IdentityConnectionStatusState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionStatusState.ProtoReflect.Descriptor instead.
func (*IdentityConnectionStatusState) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescGZIP(), []int{2}
}

func (x *IdentityConnectionStatusState) GetLifecycle() *resource.ResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *IdentityConnectionStatusState) GetSysAudit() *audit.SysAudit {
	if x != nil {
		return x.SysAudit
	}
	return nil
}

var File_cloud_planton_apis_v1_iam_identity_connection_state_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x33, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x45, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x04, 0x0a, 0x17, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x64, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x1b, 0x88, 0xa6, 0x1d, 0x0d, 0x9a, 0xa6, 0x1d, 0x13, 0x08, 0x06, 0x12, 0x0f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x81,
	0x0b, 0x0a, 0x1b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x4f, 0x6e, 0x49, 0x64, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x37, 0x0a, 0x18, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x78, 0x35, 0x30, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x65, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x31,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2c, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x72, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x66, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x66, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x4e,
	0x0a, 0x24, 0x61, 0x64, 0x66, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x61, 0x64,
	0x66, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6b, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x69, 0x22, 0xc4, 0x01, 0x0a, 0x1d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x4a, 0x0a,
	0x09, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x08, 0x73, 0x79, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0xac, 0x03, 0x0a, 0x41, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0xa2, 0x02, 0x08, 0x43, 0x50, 0x41, 0x56, 0x49, 0x49, 0x43, 0x53, 0xaa, 0x02, 0x33,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0xca, 0x02, 0x33, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5c, 0x53, 0x74, 0x61, 0x74, 0x65, 0xe2, 0x02, 0x3f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56,
	0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x49, 0x61, 0x6d, 0x3a, 0x3a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescData = file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_goTypes = []interface{}{
	(*IdentityConnectionState)(nil),        // 0: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionState
	(*IdentityConnectionSpecState)(nil),    // 1: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionSpecState
	(*IdentityConnectionStatusState)(nil),  // 2: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionStatusState
	(enums.IdentityConnectionEventType)(0), // 3: cloud.planton.apis.v1.iam.identity.connection.state.enums.IdentityConnectionEventType
	(*resource.Metadata)(nil),              // 4: cloud.planton.apis.v1.commons.resource.Metadata
	(*resource.ResourceLifecycle)(nil),     // 5: cloud.planton.apis.v1.commons.resource.ResourceLifecycle
	(*audit.SysAudit)(nil),                 // 6: cloud.planton.apis.v1.commons.audit.SysAudit
}
var file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_depIdxs = []int32{
	3, // 0: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionState.event_type:type_name -> cloud.planton.apis.v1.iam.identity.connection.state.enums.IdentityConnectionEventType
	4, // 1: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionState.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	1, // 2: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionState.spec:type_name -> cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionSpecState
	2, // 3: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionState.status:type_name -> cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionStatusState
	5, // 4: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionStatusState.lifecycle:type_name -> cloud.planton.apis.v1.commons.resource.ResourceLifecycle
	6, // 5: cloud.planton.apis.v1.iam.identity.connection.state.IdentityConnectionStatusState.sys_audit:type_name -> cloud.planton.apis.v1.commons.audit.SysAudit
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_init() }
func file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_init() {
	if File_cloud_planton_apis_v1_iam_identity_connection_state_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionSpecState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionStatusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_iam_identity_connection_state_model_proto = out.File
	file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_iam_identity_connection_state_model_proto_depIdxs = nil
}
