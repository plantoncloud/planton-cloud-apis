// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/iam/identity/connection/model.proto

package connection

import (
	audit "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/audit"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/field/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/options"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	enums "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/iam/identity/connection/provider/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// identity-connection used for linking a company's identity provider with planton cloud
type IdentityConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource api version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// metadata for the resource
	// id:
	//
	// naming convention "<idc>-<company_id>-<connection_name>".
	// backend ignores the value provided by the client.
	//
	// name:
	//
	// a user preferred name of the identity connection.
	// (important) spaces and special characters are not allowed except for hyphens.
	Metadata *resource.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// resource spec
	Spec *IdentityConnectionSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// resource status
	Status *IdentityConnectionStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IdentityConnection) Reset() {
	*x = IdentityConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnection) ProtoMessage() {}

func (x *IdentityConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnection.ProtoReflect.Descriptor instead.
func (*IdentityConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{0}
}

func (x *IdentityConnection) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *IdentityConnection) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *IdentityConnection) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IdentityConnection) GetSpec() *IdentityConnectionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *IdentityConnection) GetStatus() *IdentityConnectionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// specification for identity-connection
type IdentityConnectionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the company owning the identity connection.
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// type of the identity connection.
	ConnectionType enums.IdentityConnectionType `protobuf:"varint,2,opt,name=connection_type,json=connectionType,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.IdentityConnectionType" json:"connection_type,omitempty"`
	// (read-only) id assigned by auth0 upon successful creation of the enterprise connection.
	// this value is required to query auth0 system to get the details of the connection.
	IdentityConnectionIdOnIdp string `protobuf:"bytes,5,opt,name=identity_connection_id_on_idp,json=identityConnectionIdOnIdp,proto3" json:"identity_connection_id_on_idp,omitempty"`
	// (read-only) url of the identity connection on idp.
	// this is constructed when a client requests for the account object.
	// the format of the url for machine accounts is https://manage.auth0.com/dashboard/us/<tenant>/connections/enterprise/<connection-type-on-auth0>/<connection-id-on-auth0>/settings
	// ex: https://manage.auth0.com/dashboard/us/planton-pcs-dev/connections/enterprise/google-apps/con_DBlqRlQ8dsPCvZnj/settings
	IdpUrl string `protobuf:"bytes,6,opt,name=idp_url,json=idpUrl,proto3" json:"idp_url,omitempty"`
	// saml connection details.
	// this is conditionally required only when the connection type is "saml"
	SamlConnection *SamlConnection `protobuf:"bytes,7,opt,name=saml_connection,json=samlConnection,proto3" json:"saml_connection,omitempty"`
	// ldap connection details.
	// this is conditionally required only when the connection type is "ldap"
	LdapConnection *LdapConnection `protobuf:"bytes,8,opt,name=ldap_connection,json=ldapConnection,proto3" json:"ldap_connection,omitempty"`
	// adfs connection details.
	// this is conditionally required only when the connection type is "adfs"
	AdfsConnection *AdfsConnection `protobuf:"bytes,9,opt,name=adfs_connection,json=adfsConnection,proto3" json:"adfs_connection,omitempty"`
	// openid connection details.
	// this is conditionally required only when the connection type is "openid"
	OpenidConnection *OpenidConnection `protobuf:"bytes,10,opt,name=openid_connection,json=openidConnection,proto3" json:"openid_connection,omitempty"`
	// okta workforce connection details.
	// this is conditionally required only when the connection type is "okta_workforce"
	OktaWorkforceConnection *OktaWorkforceConnection `protobuf:"bytes,11,opt,name=okta_workforce_connection,json=oktaWorkforceConnection,proto3" json:"okta_workforce_connection,omitempty"`
	// azure active identity native connection details.
	// this is conditionally required only when the connection type is "azure_active_identity_native"
	AzureActiveIdentityNativeConnection *AzureActiveDirectoryNativeConnection `protobuf:"bytes,12,opt,name=azure_active_identity_native_connection,json=azureActiveIdentityNativeConnection,proto3" json:"azure_active_identity_native_connection,omitempty"`
	// ping federate connection details.
	// this is conditionally required only when the connection type is "ping_federate"
	PingFederateConnection *PingFederateConnection `protobuf:"bytes,13,opt,name=ping_federate_connection,json=pingFederateConnection,proto3" json:"ping_federate_connection,omitempty"`
}

func (x *IdentityConnectionSpec) Reset() {
	*x = IdentityConnectionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionSpec) ProtoMessage() {}

func (x *IdentityConnectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionSpec.ProtoReflect.Descriptor instead.
func (*IdentityConnectionSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{1}
}

func (x *IdentityConnectionSpec) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *IdentityConnectionSpec) GetConnectionType() enums.IdentityConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return enums.IdentityConnectionType(0)
}

func (x *IdentityConnectionSpec) GetIdentityConnectionIdOnIdp() string {
	if x != nil {
		return x.IdentityConnectionIdOnIdp
	}
	return ""
}

func (x *IdentityConnectionSpec) GetIdpUrl() string {
	if x != nil {
		return x.IdpUrl
	}
	return ""
}

func (x *IdentityConnectionSpec) GetSamlConnection() *SamlConnection {
	if x != nil {
		return x.SamlConnection
	}
	return nil
}

func (x *IdentityConnectionSpec) GetLdapConnection() *LdapConnection {
	if x != nil {
		return x.LdapConnection
	}
	return nil
}

func (x *IdentityConnectionSpec) GetAdfsConnection() *AdfsConnection {
	if x != nil {
		return x.AdfsConnection
	}
	return nil
}

func (x *IdentityConnectionSpec) GetOpenidConnection() *OpenidConnection {
	if x != nil {
		return x.OpenidConnection
	}
	return nil
}

func (x *IdentityConnectionSpec) GetOktaWorkforceConnection() *OktaWorkforceConnection {
	if x != nil {
		return x.OktaWorkforceConnection
	}
	return nil
}

func (x *IdentityConnectionSpec) GetAzureActiveIdentityNativeConnection() *AzureActiveDirectoryNativeConnection {
	if x != nil {
		return x.AzureActiveIdentityNativeConnection
	}
	return nil
}

func (x *IdentityConnectionSpec) GetPingFederateConnection() *PingFederateConnection {
	if x != nil {
		return x.PingFederateConnection
	}
	return nil
}

// status for identity-connection
type IdentityConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lifecycle of the resource
	Lifecycle *resource.ResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// resource audit info
	Audit *audit.ResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
	// resource version-id
	VersionId string `protobuf:"bytes,97,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *IdentityConnectionStatus) Reset() {
	*x = IdentityConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionStatus) ProtoMessage() {}

func (x *IdentityConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionStatus.ProtoReflect.Descriptor instead.
func (*IdentityConnectionStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{2}
}

func (x *IdentityConnectionStatus) GetLifecycle() *resource.ResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *IdentityConnectionStatus) GetAudit() *audit.ResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *IdentityConnectionStatus) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type SamlConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInUrl                  string                               `protobuf:"bytes,1,opt,name=sign_in_url,json=signInUrl,proto3" json:"sign_in_url,omitempty"`
	X509SigningCertBase64      string                               `protobuf:"bytes,2,opt,name=x509_signing_cert_base64,json=x509SigningCertBase64,proto3" json:"x509_signing_cert_base64,omitempty"`
	EnableSignOut              bool                                 `protobuf:"varint,3,opt,name=enable_sign_out,json=enableSignOut,proto3" json:"enable_sign_out,omitempty"`
	SignOutUrl                 string                               `protobuf:"bytes,4,opt,name=sign_out_url,json=signOutUrl,proto3" json:"sign_out_url,omitempty"`
	UserIdAttribute            string                               `protobuf:"bytes,5,opt,name=user_id_attribute,json=userIdAttribute,proto3" json:"user_id_attribute,omitempty"`
	SignRequest                bool                                 `protobuf:"varint,6,opt,name=sign_request,json=signRequest,proto3" json:"sign_request,omitempty"`
	SignRequestAlgorithm       enums.SamlSignRequestAlgorithm       `protobuf:"varint,7,opt,name=sign_request_algorithm,json=signRequestAlgorithm,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithm" json:"sign_request_algorithm,omitempty"`
	SignRequestAlgorithmDigest enums.SamlSignRequestAlgorithmDigest `protobuf:"varint,8,opt,name=sign_request_algorithm_digest,json=signRequestAlgorithmDigest,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithmDigest" json:"sign_request_algorithm_digest,omitempty"`
	ProtocolBinding            enums.SamlProtocolBinding            `protobuf:"varint,9,opt,name=protocol_binding,json=protocolBinding,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlProtocolBinding" json:"protocol_binding,omitempty"`
}

func (x *SamlConnection) Reset() {
	*x = SamlConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamlConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamlConnection) ProtoMessage() {}

func (x *SamlConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamlConnection.ProtoReflect.Descriptor instead.
func (*SamlConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{3}
}

func (x *SamlConnection) GetSignInUrl() string {
	if x != nil {
		return x.SignInUrl
	}
	return ""
}

func (x *SamlConnection) GetX509SigningCertBase64() string {
	if x != nil {
		return x.X509SigningCertBase64
	}
	return ""
}

func (x *SamlConnection) GetEnableSignOut() bool {
	if x != nil {
		return x.EnableSignOut
	}
	return false
}

func (x *SamlConnection) GetSignOutUrl() string {
	if x != nil {
		return x.SignOutUrl
	}
	return ""
}

func (x *SamlConnection) GetUserIdAttribute() string {
	if x != nil {
		return x.UserIdAttribute
	}
	return ""
}

func (x *SamlConnection) GetSignRequest() bool {
	if x != nil {
		return x.SignRequest
	}
	return false
}

func (x *SamlConnection) GetSignRequestAlgorithm() enums.SamlSignRequestAlgorithm {
	if x != nil {
		return x.SignRequestAlgorithm
	}
	return enums.SamlSignRequestAlgorithm(0)
}

func (x *SamlConnection) GetSignRequestAlgorithmDigest() enums.SamlSignRequestAlgorithmDigest {
	if x != nil {
		return x.SignRequestAlgorithmDigest
	}
	return enums.SamlSignRequestAlgorithmDigest(0)
}

func (x *SamlConnection) GetProtocolBinding() enums.SamlProtocolBinding {
	if x != nil {
		return x.ProtocolBinding
	}
	return enums.SamlProtocolBinding(0)
}

type PingFederateConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl                  string                               `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	X509SigningCertBase64      string                               `protobuf:"bytes,2,opt,name=x509_signing_cert_base64,json=x509SigningCertBase64,proto3" json:"x509_signing_cert_base64,omitempty"`
	SignRequest                bool                                 `protobuf:"varint,3,opt,name=sign_request,json=signRequest,proto3" json:"sign_request,omitempty"`
	SignRequestAlgorithm       enums.SamlSignRequestAlgorithm       `protobuf:"varint,4,opt,name=sign_request_algorithm,json=signRequestAlgorithm,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithm" json:"sign_request_algorithm,omitempty"`
	SignRequestAlgorithmDigest enums.SamlSignRequestAlgorithmDigest `protobuf:"varint,5,opt,name=sign_request_algorithm_digest,json=signRequestAlgorithmDigest,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithmDigest" json:"sign_request_algorithm_digest,omitempty"`
}

func (x *PingFederateConnection) Reset() {
	*x = PingFederateConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingFederateConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingFederateConnection) ProtoMessage() {}

func (x *PingFederateConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingFederateConnection.ProtoReflect.Descriptor instead.
func (*PingFederateConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{4}
}

func (x *PingFederateConnection) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *PingFederateConnection) GetX509SigningCertBase64() string {
	if x != nil {
		return x.X509SigningCertBase64
	}
	return ""
}

func (x *PingFederateConnection) GetSignRequest() bool {
	if x != nil {
		return x.SignRequest
	}
	return false
}

func (x *PingFederateConnection) GetSignRequestAlgorithm() enums.SamlSignRequestAlgorithm {
	if x != nil {
		return x.SignRequestAlgorithm
	}
	return enums.SamlSignRequestAlgorithm(0)
}

func (x *PingFederateConnection) GetSignRequestAlgorithmDigest() enums.SamlSignRequestAlgorithmDigest {
	if x != nil {
		return x.SignRequestAlgorithmDigest
	}
	return enums.SamlSignRequestAlgorithmDigest(0)
}

type LdapConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpDomains                                   []string `protobuf:"bytes,1,rep,name=idp_domains,json=idpDomains,proto3" json:"idp_domains,omitempty"`
	IsCacheDisabled                              bool     `protobuf:"varint,2,opt,name=is_cache_disabled,json=isCacheDisabled,proto3" json:"is_cache_disabled,omitempty"`
	IsClientSslCertificateAuthenticationRequired bool     `protobuf:"varint,3,opt,name=is_client_ssl_certificate_authentication_required,json=isClientSslCertificateAuthenticationRequired,proto3" json:"is_client_ssl_certificate_authentication_required,omitempty"`
	IsKerberosEnabled                            bool     `protobuf:"varint,4,opt,name=is_kerberos_enabled,json=isKerberosEnabled,proto3" json:"is_kerberos_enabled,omitempty"`
}

func (x *LdapConnection) Reset() {
	*x = LdapConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdapConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdapConnection) ProtoMessage() {}

func (x *LdapConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdapConnection.ProtoReflect.Descriptor instead.
func (*LdapConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{5}
}

func (x *LdapConnection) GetIdpDomains() []string {
	if x != nil {
		return x.IdpDomains
	}
	return nil
}

func (x *LdapConnection) GetIsCacheDisabled() bool {
	if x != nil {
		return x.IsCacheDisabled
	}
	return false
}

func (x *LdapConnection) GetIsClientSslCertificateAuthenticationRequired() bool {
	if x != nil {
		return x.IsClientSslCertificateAuthenticationRequired
	}
	return false
}

func (x *LdapConnection) GetIsKerberosEnabled() bool {
	if x != nil {
		return x.IsKerberosEnabled
	}
	return false
}

type OpenidConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueUrl    string `protobuf:"bytes,1,opt,name=issue_url,json=issueUrl,proto3" json:"issue_url,omitempty"`
	ClientId    string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CallbackUrl string `protobuf:"bytes,3,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
}

func (x *OpenidConnection) Reset() {
	*x = OpenidConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenidConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenidConnection) ProtoMessage() {}

func (x *OpenidConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenidConnection.ProtoReflect.Descriptor instead.
func (*OpenidConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{6}
}

func (x *OpenidConnection) GetIssueUrl() string {
	if x != nil {
		return x.IssueUrl
	}
	return ""
}

func (x *OpenidConnection) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OpenidConnection) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

// active identity federation services connection
type AdfsConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdfsMetadataUrl                  string `protobuf:"bytes,1,opt,name=adfs_metadata_url,json=adfsMetadataUrl,proto3" json:"adfs_metadata_url,omitempty"`
	AdfsMetadataFederationFileBase64 string `protobuf:"bytes,2,opt,name=adfs_metadata_federation_file_base64,json=adfsMetadataFederationFileBase64,proto3" json:"adfs_metadata_federation_file_base64,omitempty"`
}

func (x *AdfsConnection) Reset() {
	*x = AdfsConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdfsConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdfsConnection) ProtoMessage() {}

func (x *AdfsConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdfsConnection.ProtoReflect.Descriptor instead.
func (*AdfsConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{7}
}

func (x *AdfsConnection) GetAdfsMetadataUrl() string {
	if x != nil {
		return x.AdfsMetadataUrl
	}
	return ""
}

func (x *AdfsConnection) GetAdfsMetadataFederationFileBase64() string {
	if x != nil {
		return x.AdfsMetadataFederationFileBase64
	}
	return ""
}

type OktaWorkforceConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OktaDomain   string `protobuf:"bytes,1,opt,name=okta_domain,json=oktaDomain,proto3" json:"okta_domain,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	CallbackUrl  string `protobuf:"bytes,4,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
}

func (x *OktaWorkforceConnection) Reset() {
	*x = OktaWorkforceConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OktaWorkforceConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaWorkforceConnection) ProtoMessage() {}

func (x *OktaWorkforceConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaWorkforceConnection.ProtoReflect.Descriptor instead.
func (*OktaWorkforceConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{8}
}

func (x *OktaWorkforceConnection) GetOktaDomain() string {
	if x != nil {
		return x.OktaDomain
	}
	return ""
}

func (x *OktaWorkforceConnection) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OktaWorkforceConnection) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OktaWorkforceConnection) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

type AzureActiveDirectoryNativeConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MicrosoftAzureAdDomain string                     `protobuf:"bytes,1,opt,name=microsoft_azure_ad_domain,json=microsoftAzureAdDomain,proto3" json:"microsoft_azure_ad_domain,omitempty"`
	ClientId               string                     `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret           string                     `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	UseCommonEndpoint      bool                       `protobuf:"varint,4,opt,name=use_common_endpoint,json=useCommonEndpoint,proto3" json:"use_common_endpoint,omitempty"`
	IdentityApi            enums.MicrosoftIdentityApi `protobuf:"varint,5,opt,name=identity_api,json=identityApi,proto3,enum=cloud.planton.apis.v1.iam.identity.connection.provider.enums.MicrosoftIdentityApi" json:"identity_api,omitempty"`
}

func (x *AzureActiveDirectoryNativeConnection) Reset() {
	*x = AzureActiveDirectoryNativeConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureActiveDirectoryNativeConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureActiveDirectoryNativeConnection) ProtoMessage() {}

func (x *AzureActiveDirectoryNativeConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureActiveDirectoryNativeConnection.ProtoReflect.Descriptor instead.
func (*AzureActiveDirectoryNativeConnection) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{9}
}

func (x *AzureActiveDirectoryNativeConnection) GetMicrosoftAzureAdDomain() string {
	if x != nil {
		return x.MicrosoftAzureAdDomain
	}
	return ""
}

func (x *AzureActiveDirectoryNativeConnection) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AzureActiveDirectoryNativeConnection) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AzureActiveDirectoryNativeConnection) GetUseCommonEndpoint() bool {
	if x != nil {
		return x.UseCommonEndpoint
	}
	return false
}

func (x *AzureActiveDirectoryNativeConnection) GetIdentityApi() enums.MicrosoftIdentityApi {
	if x != nil {
		return x.IdentityApi
	}
	return enums.MicrosoftIdentityApi(0)
}

// wrapper to get list of identity connections
type IdentityConnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*IdentityConnection `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *IdentityConnections) Reset() {
	*x = IdentityConnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnections) ProtoMessage() {}

func (x *IdentityConnections) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnections.ProtoReflect.Descriptor instead.
func (*IdentityConnections) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{10}
}

func (x *IdentityConnections) GetEntries() []*IdentityConnection {
	if x != nil {
		return x.Entries
	}
	return nil
}

// wrapper for user identity connection id.
type IdentityConnectionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IdentityConnectionId) Reset() {
	*x = IdentityConnectionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionId) ProtoMessage() {}

func (x *IdentityConnectionId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionId.ProtoReflect.Descriptor instead.
func (*IdentityConnectionId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{11}
}

func (x *IdentityConnectionId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// input for paginated queries that require identity account id as input.
type ListWithIdentityConnectionIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identity connection id
	IdentityConnectionId string               `protobuf:"bytes,1,opt,name=identity_connection_id,json=identityConnectionId,proto3" json:"identity_connection_id,omitempty"`
	Page                 *pagination.PageInfo `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListWithIdentityConnectionIdReq) Reset() {
	*x = ListWithIdentityConnectionIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWithIdentityConnectionIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWithIdentityConnectionIdReq) ProtoMessage() {}

func (x *ListWithIdentityConnectionIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWithIdentityConnectionIdReq.ProtoReflect.Descriptor instead.
func (*ListWithIdentityConnectionIdReq) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{12}
}

func (x *ListWithIdentityConnectionIdReq) GetIdentityConnectionId() string {
	if x != nil {
		return x.IdentityConnectionId
	}
	return ""
}

func (x *ListWithIdentityConnectionIdReq) GetPage() *pagination.PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

type IdentityConnectionCompanyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IdentityConnectionCompanyId) Reset() {
	*x = IdentityConnectionCompanyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConnectionCompanyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConnectionCompanyId) ProtoMessage() {}

func (x *IdentityConnectionCompanyId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConnectionCompanyId.ProtoReflect.Descriptor instead.
func (*IdentityConnectionCompanyId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP(), []int{13}
}

func (x *IdentityConnectionCompanyId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_cloud_planton_apis_v1_iam_identity_connection_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDesc = []byte{
	0x0a, 0x39, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x45, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x02,
	0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x5f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x1b, 0x88, 0xa6, 0x1d, 0x0d, 0x9a, 0xa6, 0x1d, 0x13, 0x08, 0x06, 0x12, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x22, 0xe9, 0x08, 0x0a,
	0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x54, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x4f, 0x6e, 0x49, 0x64, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x66, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x6c, 0x64, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x64, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x6c, 0x64, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x0f, 0x61, 0x64, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x66, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x64, 0x66, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x6f, 0x6b, 0x74, 0x61, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x6f, 0x6b, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x27,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x23, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x18, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x48,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb1, 0x05, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x78, 0x35,
	0x30, 0x39, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x78, 0x35,
	0x30, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8c, 0x01, 0x0a,
	0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x61, 0x6d,
	0x6c, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x9f, 0x01, 0x0a, 0x1d,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x1a, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xc4, 0x03, 0x0a, 0x16,
	0x50, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x78, 0x35, 0x30, 0x39, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x8c, 0x01, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x56, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x9f, 0x01, 0x0a, 0x1d, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x4c, 0x64, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x70, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x67, 0x0a, 0x31, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2c, 0x69,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x73, 0x5f, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4b, 0x65, 0x72, 0x62,
	0x65, 0x72, 0x6f, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x10, 0x4f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x8c, 0x01, 0x0a,
	0x0e, 0x41, 0x64, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x64, 0x66, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x66, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x24, 0x61,
	0x64, 0x66, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x61, 0x64, 0x66, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x9f, 0x01, 0x0a, 0x17,
	0x4f, 0x6b, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6b, 0x74, 0x61, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6b,
	0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0xca, 0x02,
	0x0a, 0x24, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x70, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x52, 0x0b, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x22, 0x72, 0x0a, 0x13, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2c,
	0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x33,
	0x0a, 0x1b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x86, 0x03, 0x0a, 0x3b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x5d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a,
	0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x56, 0x49, 0x49, 0x43, 0xaa, 0x02, 0x2d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e,
	0x56, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x2d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x39, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x33, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x3a, 0x3a, 0x49, 0x61, 0x6d, 0x3a, 0x3a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescData = file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cloud_planton_apis_v1_iam_identity_connection_model_proto_goTypes = []interface{}{
	(*IdentityConnection)(nil),                   // 0: cloud.planton.apis.v1.iam.identity.connection.IdentityConnection
	(*IdentityConnectionSpec)(nil),               // 1: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec
	(*IdentityConnectionStatus)(nil),             // 2: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionStatus
	(*SamlConnection)(nil),                       // 3: cloud.planton.apis.v1.iam.identity.connection.SamlConnection
	(*PingFederateConnection)(nil),               // 4: cloud.planton.apis.v1.iam.identity.connection.PingFederateConnection
	(*LdapConnection)(nil),                       // 5: cloud.planton.apis.v1.iam.identity.connection.LdapConnection
	(*OpenidConnection)(nil),                     // 6: cloud.planton.apis.v1.iam.identity.connection.OpenidConnection
	(*AdfsConnection)(nil),                       // 7: cloud.planton.apis.v1.iam.identity.connection.AdfsConnection
	(*OktaWorkforceConnection)(nil),              // 8: cloud.planton.apis.v1.iam.identity.connection.OktaWorkforceConnection
	(*AzureActiveDirectoryNativeConnection)(nil), // 9: cloud.planton.apis.v1.iam.identity.connection.AzureActiveDirectoryNativeConnection
	(*IdentityConnections)(nil),                  // 10: cloud.planton.apis.v1.iam.identity.connection.IdentityConnections
	(*IdentityConnectionId)(nil),                 // 11: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionId
	(*ListWithIdentityConnectionIdReq)(nil),      // 12: cloud.planton.apis.v1.iam.identity.connection.ListWithIdentityConnectionIdReq
	(*IdentityConnectionCompanyId)(nil),          // 13: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionCompanyId
	(*resource.Metadata)(nil),                    // 14: cloud.planton.apis.v1.commons.resource.Metadata
	(enums.IdentityConnectionType)(0),            // 15: cloud.planton.apis.v1.iam.identity.connection.provider.enums.IdentityConnectionType
	(*resource.ResourceLifecycle)(nil),           // 16: cloud.planton.apis.v1.commons.resource.ResourceLifecycle
	(*audit.ResourceAudit)(nil),                  // 17: cloud.planton.apis.v1.commons.audit.ResourceAudit
	(enums.SamlSignRequestAlgorithm)(0),          // 18: cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithm
	(enums.SamlSignRequestAlgorithmDigest)(0),    // 19: cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithmDigest
	(enums.SamlProtocolBinding)(0),               // 20: cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlProtocolBinding
	(enums.MicrosoftIdentityApi)(0),              // 21: cloud.planton.apis.v1.iam.identity.connection.provider.enums.MicrosoftIdentityApi
	(*pagination.PageInfo)(nil),                  // 22: cloud.planton.apis.v1.commons.pagination.PageInfo
}
var file_cloud_planton_apis_v1_iam_identity_connection_model_proto_depIdxs = []int32{
	14, // 0: cloud.planton.apis.v1.iam.identity.connection.IdentityConnection.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	1,  // 1: cloud.planton.apis.v1.iam.identity.connection.IdentityConnection.spec:type_name -> cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec
	2,  // 2: cloud.planton.apis.v1.iam.identity.connection.IdentityConnection.status:type_name -> cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionStatus
	15, // 3: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.connection_type:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.IdentityConnectionType
	3,  // 4: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.saml_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.SamlConnection
	5,  // 5: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.ldap_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.LdapConnection
	7,  // 6: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.adfs_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.AdfsConnection
	6,  // 7: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.openid_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.OpenidConnection
	8,  // 8: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.okta_workforce_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.OktaWorkforceConnection
	9,  // 9: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.azure_active_identity_native_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.AzureActiveDirectoryNativeConnection
	4,  // 10: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionSpec.ping_federate_connection:type_name -> cloud.planton.apis.v1.iam.identity.connection.PingFederateConnection
	16, // 11: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionStatus.lifecycle:type_name -> cloud.planton.apis.v1.commons.resource.ResourceLifecycle
	17, // 12: cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionStatus.audit:type_name -> cloud.planton.apis.v1.commons.audit.ResourceAudit
	18, // 13: cloud.planton.apis.v1.iam.identity.connection.SamlConnection.sign_request_algorithm:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithm
	19, // 14: cloud.planton.apis.v1.iam.identity.connection.SamlConnection.sign_request_algorithm_digest:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithmDigest
	20, // 15: cloud.planton.apis.v1.iam.identity.connection.SamlConnection.protocol_binding:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlProtocolBinding
	18, // 16: cloud.planton.apis.v1.iam.identity.connection.PingFederateConnection.sign_request_algorithm:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithm
	19, // 17: cloud.planton.apis.v1.iam.identity.connection.PingFederateConnection.sign_request_algorithm_digest:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.SamlSignRequestAlgorithmDigest
	21, // 18: cloud.planton.apis.v1.iam.identity.connection.AzureActiveDirectoryNativeConnection.identity_api:type_name -> cloud.planton.apis.v1.iam.identity.connection.provider.enums.MicrosoftIdentityApi
	0,  // 19: cloud.planton.apis.v1.iam.identity.connection.IdentityConnections.entries:type_name -> cloud.planton.apis.v1.iam.identity.connection.IdentityConnection
	22, // 20: cloud.planton.apis.v1.iam.identity.connection.ListWithIdentityConnectionIdReq.page:type_name -> cloud.planton.apis.v1.commons.pagination.PageInfo
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_iam_identity_connection_model_proto_init() }
func file_cloud_planton_apis_v1_iam_identity_connection_model_proto_init() {
	if File_cloud_planton_apis_v1_iam_identity_connection_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamlConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingFederateConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdapConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenidConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdfsConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OktaWorkforceConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureActiveDirectoryNativeConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWithIdentityConnectionIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConnectionCompanyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_iam_identity_connection_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_iam_identity_connection_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_iam_identity_connection_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_iam_identity_connection_model_proto = out.File
	file_cloud_planton_apis_v1_iam_identity_connection_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_iam_identity_connection_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_iam_identity_connection_model_proto_depIdxs = nil
}
