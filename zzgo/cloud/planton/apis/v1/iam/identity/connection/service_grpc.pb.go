// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/iam/identity/connection/service.proto

package connection

import (
	context "context"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentityConnectionCommandController_Create_FullMethodName  = "/cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionCommandController/create"
	IdentityConnectionCommandController_Update_FullMethodName  = "/cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionCommandController/update"
	IdentityConnectionCommandController_Delete_FullMethodName  = "/cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionCommandController/delete"
	IdentityConnectionCommandController_Restore_FullMethodName = "/cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionCommandController/restore"
)

// IdentityConnectionCommandControllerClient is the client API for IdentityConnectionCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityConnectionCommandControllerClient interface {
	// create new identity connection
	Create(ctx context.Context, in *IdentityConnection, opts ...grpc.CallOption) (*IdentityConnection, error)
	// update an existing identity connection
	Update(ctx context.Context, in *IdentityConnection, opts ...grpc.CallOption) (*IdentityConnection, error)
	// delete an existing identity connection
	Delete(ctx context.Context, in *resource.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*IdentityConnection, error)
	// restore an existing identity connection
	Restore(ctx context.Context, in *IdentityConnection, opts ...grpc.CallOption) (*IdentityConnection, error)
}

type identityConnectionCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityConnectionCommandControllerClient(cc grpc.ClientConnInterface) IdentityConnectionCommandControllerClient {
	return &identityConnectionCommandControllerClient{cc}
}

func (c *identityConnectionCommandControllerClient) Create(ctx context.Context, in *IdentityConnection, opts ...grpc.CallOption) (*IdentityConnection, error) {
	out := new(IdentityConnection)
	err := c.cc.Invoke(ctx, IdentityConnectionCommandController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityConnectionCommandControllerClient) Update(ctx context.Context, in *IdentityConnection, opts ...grpc.CallOption) (*IdentityConnection, error) {
	out := new(IdentityConnection)
	err := c.cc.Invoke(ctx, IdentityConnectionCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityConnectionCommandControllerClient) Delete(ctx context.Context, in *resource.ApiResourceDeleteCommandInput, opts ...grpc.CallOption) (*IdentityConnection, error) {
	out := new(IdentityConnection)
	err := c.cc.Invoke(ctx, IdentityConnectionCommandController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityConnectionCommandControllerClient) Restore(ctx context.Context, in *IdentityConnection, opts ...grpc.CallOption) (*IdentityConnection, error) {
	out := new(IdentityConnection)
	err := c.cc.Invoke(ctx, IdentityConnectionCommandController_Restore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityConnectionCommandControllerServer is the server API for IdentityConnectionCommandController service.
// All implementations should embed UnimplementedIdentityConnectionCommandControllerServer
// for forward compatibility
type IdentityConnectionCommandControllerServer interface {
	// create new identity connection
	Create(context.Context, *IdentityConnection) (*IdentityConnection, error)
	// update an existing identity connection
	Update(context.Context, *IdentityConnection) (*IdentityConnection, error)
	// delete an existing identity connection
	Delete(context.Context, *resource.ApiResourceDeleteCommandInput) (*IdentityConnection, error)
	// restore an existing identity connection
	Restore(context.Context, *IdentityConnection) (*IdentityConnection, error)
}

// UnimplementedIdentityConnectionCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIdentityConnectionCommandControllerServer struct {
}

func (UnimplementedIdentityConnectionCommandControllerServer) Create(context.Context, *IdentityConnection) (*IdentityConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIdentityConnectionCommandControllerServer) Update(context.Context, *IdentityConnection) (*IdentityConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIdentityConnectionCommandControllerServer) Delete(context.Context, *resource.ApiResourceDeleteCommandInput) (*IdentityConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIdentityConnectionCommandControllerServer) Restore(context.Context, *IdentityConnection) (*IdentityConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}

// UnsafeIdentityConnectionCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityConnectionCommandControllerServer will
// result in compilation errors.
type UnsafeIdentityConnectionCommandControllerServer interface {
	mustEmbedUnimplementedIdentityConnectionCommandControllerServer()
}

func RegisterIdentityConnectionCommandControllerServer(s grpc.ServiceRegistrar, srv IdentityConnectionCommandControllerServer) {
	s.RegisterService(&IdentityConnectionCommandController_ServiceDesc, srv)
}

func _IdentityConnectionCommandController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityConnectionCommandControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityConnectionCommandController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityConnectionCommandControllerServer).Create(ctx, req.(*IdentityConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityConnectionCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityConnectionCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityConnectionCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityConnectionCommandControllerServer).Update(ctx, req.(*IdentityConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityConnectionCommandController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.ApiResourceDeleteCommandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityConnectionCommandControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityConnectionCommandController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityConnectionCommandControllerServer).Delete(ctx, req.(*resource.ApiResourceDeleteCommandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityConnectionCommandController_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityConnectionCommandControllerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityConnectionCommandController_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityConnectionCommandControllerServer).Restore(ctx, req.(*IdentityConnection))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityConnectionCommandController_ServiceDesc is the grpc.ServiceDesc for IdentityConnectionCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityConnectionCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionCommandController",
	HandlerType: (*IdentityConnectionCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _IdentityConnectionCommandController_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _IdentityConnectionCommandController_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _IdentityConnectionCommandController_Delete_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _IdentityConnectionCommandController_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/identity/connection/service.proto",
}

const (
	IdentityConnectionQueryController_GetById_FullMethodName         = "/cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionQueryController/getById"
	IdentityConnectionQueryController_FindByCompanyId_FullMethodName = "/cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionQueryController/findByCompanyId"
)

// IdentityConnectionQueryControllerClient is the client API for IdentityConnectionQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityConnectionQueryControllerClient interface {
	// lookup identity account by id.
	GetById(ctx context.Context, in *IdentityConnectionId, opts ...grpc.CallOption) (*IdentityConnection, error)
	// retrieve paginated list of all identity connections on planton cloud. this is intended for use on portal.
	FindByCompanyId(ctx context.Context, in *IdentityConnectionCompanyId, opts ...grpc.CallOption) (*IdentityConnections, error)
}

type identityConnectionQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityConnectionQueryControllerClient(cc grpc.ClientConnInterface) IdentityConnectionQueryControllerClient {
	return &identityConnectionQueryControllerClient{cc}
}

func (c *identityConnectionQueryControllerClient) GetById(ctx context.Context, in *IdentityConnectionId, opts ...grpc.CallOption) (*IdentityConnection, error) {
	out := new(IdentityConnection)
	err := c.cc.Invoke(ctx, IdentityConnectionQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityConnectionQueryControllerClient) FindByCompanyId(ctx context.Context, in *IdentityConnectionCompanyId, opts ...grpc.CallOption) (*IdentityConnections, error) {
	out := new(IdentityConnections)
	err := c.cc.Invoke(ctx, IdentityConnectionQueryController_FindByCompanyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityConnectionQueryControllerServer is the server API for IdentityConnectionQueryController service.
// All implementations should embed UnimplementedIdentityConnectionQueryControllerServer
// for forward compatibility
type IdentityConnectionQueryControllerServer interface {
	// lookup identity account by id.
	GetById(context.Context, *IdentityConnectionId) (*IdentityConnection, error)
	// retrieve paginated list of all identity connections on planton cloud. this is intended for use on portal.
	FindByCompanyId(context.Context, *IdentityConnectionCompanyId) (*IdentityConnections, error)
}

// UnimplementedIdentityConnectionQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIdentityConnectionQueryControllerServer struct {
}

func (UnimplementedIdentityConnectionQueryControllerServer) GetById(context.Context, *IdentityConnectionId) (*IdentityConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedIdentityConnectionQueryControllerServer) FindByCompanyId(context.Context, *IdentityConnectionCompanyId) (*IdentityConnections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCompanyId not implemented")
}

// UnsafeIdentityConnectionQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityConnectionQueryControllerServer will
// result in compilation errors.
type UnsafeIdentityConnectionQueryControllerServer interface {
	mustEmbedUnimplementedIdentityConnectionQueryControllerServer()
}

func RegisterIdentityConnectionQueryControllerServer(s grpc.ServiceRegistrar, srv IdentityConnectionQueryControllerServer) {
	s.RegisterService(&IdentityConnectionQueryController_ServiceDesc, srv)
}

func _IdentityConnectionQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityConnectionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityConnectionQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityConnectionQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityConnectionQueryControllerServer).GetById(ctx, req.(*IdentityConnectionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityConnectionQueryController_FindByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityConnectionCompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityConnectionQueryControllerServer).FindByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityConnectionQueryController_FindByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityConnectionQueryControllerServer).FindByCompanyId(ctx, req.(*IdentityConnectionCompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityConnectionQueryController_ServiceDesc is the grpc.ServiceDesc for IdentityConnectionQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityConnectionQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.identity.connection.IdentityConnectionQueryController",
	HandlerType: (*IdentityConnectionQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getById",
			Handler:    _IdentityConnectionQueryController_GetById_Handler,
		},
		{
			MethodName: "findByCompanyId",
			Handler:    _IdentityConnectionQueryController_FindByCompanyId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/identity/connection/service.proto",
}
