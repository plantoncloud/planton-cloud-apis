// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/iam/authn/machine/rpc/service.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MachineAuthenticationQueryController_GetAccessToken_FullMethodName = "/cloud.planton.apis.v1.iam.authn.machine.rpc.MachineAuthenticationQueryController/getAccessToken"
)

// MachineAuthenticationQueryControllerClient is the client API for MachineAuthenticationQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineAuthenticationQueryControllerClient interface {
	// get an access token in exchange for a valid machine identity account client credentials
	GetAccessToken(ctx context.Context, in *GetMachineAccessTokenQueryInput, opts ...grpc.CallOption) (*AccessToken, error)
}

type machineAuthenticationQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineAuthenticationQueryControllerClient(cc grpc.ClientConnInterface) MachineAuthenticationQueryControllerClient {
	return &machineAuthenticationQueryControllerClient{cc}
}

func (c *machineAuthenticationQueryControllerClient) GetAccessToken(ctx context.Context, in *GetMachineAccessTokenQueryInput, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, MachineAuthenticationQueryController_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineAuthenticationQueryControllerServer is the server API for MachineAuthenticationQueryController service.
// All implementations should embed UnimplementedMachineAuthenticationQueryControllerServer
// for forward compatibility
type MachineAuthenticationQueryControllerServer interface {
	// get an access token in exchange for a valid machine identity account client credentials
	GetAccessToken(context.Context, *GetMachineAccessTokenQueryInput) (*AccessToken, error)
}

// UnimplementedMachineAuthenticationQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedMachineAuthenticationQueryControllerServer struct {
}

func (UnimplementedMachineAuthenticationQueryControllerServer) GetAccessToken(context.Context, *GetMachineAccessTokenQueryInput) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}

// UnsafeMachineAuthenticationQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineAuthenticationQueryControllerServer will
// result in compilation errors.
type UnsafeMachineAuthenticationQueryControllerServer interface {
	mustEmbedUnimplementedMachineAuthenticationQueryControllerServer()
}

func RegisterMachineAuthenticationQueryControllerServer(s grpc.ServiceRegistrar, srv MachineAuthenticationQueryControllerServer) {
	s.RegisterService(&MachineAuthenticationQueryController_ServiceDesc, srv)
}

func _MachineAuthenticationQueryController_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineAccessTokenQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineAuthenticationQueryControllerServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineAuthenticationQueryController_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineAuthenticationQueryControllerServer).GetAccessToken(ctx, req.(*GetMachineAccessTokenQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineAuthenticationQueryController_ServiceDesc is the grpc.ServiceDesc for MachineAuthenticationQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineAuthenticationQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.authn.machine.rpc.MachineAuthenticationQueryController",
	HandlerType: (*MachineAuthenticationQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAccessToken",
			Handler:    _MachineAuthenticationQueryController_GetAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/authn/machine/rpc/service.proto",
}
