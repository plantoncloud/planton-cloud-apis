// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/iam/authz/policy/state.proto

package policy

import (
	audit "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/audit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FGA Tuple defines the relationship between a user and an object, specifying
// the type of access or relation the user has to the object.
type FgaTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// audit information associated with the fga tuple.
	Audit *audit.AuditInfo `protobuf:"bytes,99,opt,name=audit,proto3" json:"audit,omitempty"`
	// unique identifier of each record
	// id value is "<ulid>" generated for each record
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// user_type indicates the category or type of the user involved in the relationship.
	// This helps in differentiating between different roles or kinds of users.
	UserType string `protobuf:"bytes,2,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	// user_id uniquely identifies the user within the specified user_type.
	// It's a unique identifier (such as a UUID or username) that specifies which user the tuple is referring to.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// relation describes the type of access or relationship the user has with the object.
	// Examples include roles like 'admin', 'editor', 'viewer', etc.
	Relation string `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	// object_type indicates the category or type of the object involved in the relationship.
	// This helps in differentiating between different types of resources or objects.
	ObjectType string `protobuf:"bytes,5,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// object_id uniquely identifies the object within the specified object_type.
	// It's a unique identifier (such as a UUID or resource name) that specifies which object the tuple is referring to.
	ObjectId string `protobuf:"bytes,6,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *FgaTuple) Reset() {
	*x = FgaTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FgaTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FgaTuple) ProtoMessage() {}

func (x *FgaTuple) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FgaTuple.ProtoReflect.Descriptor instead.
func (*FgaTuple) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescGZIP(), []int{0}
}

func (x *FgaTuple) GetAudit() *audit.AuditInfo {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *FgaTuple) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FgaTuple) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *FgaTuple) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FgaTuple) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *FgaTuple) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *FgaTuple) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

var File_cloud_planton_apis_v1_iam_authz_policy_state_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDesc = []byte{
	0x0a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01,
	0x0a, 0x08, 0x46, 0x67, 0x61, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x42, 0xdc, 0x02, 0x0a, 0x34, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa2,
	0x02, 0x07, 0x43, 0x50, 0x41, 0x56, 0x49, 0x41, 0x50, 0xaa, 0x02, 0x26, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56,
	0x31, 0x2e, 0x49, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0xca, 0x02, 0x26, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x41,
	0x75, 0x74, 0x68, 0x7a, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xe2, 0x02, 0x32, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x2c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x49, 0x61, 0x6d,
	0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescData = file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDesc
)

func file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDescData
}

var file_cloud_planton_apis_v1_iam_authz_policy_state_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_planton_apis_v1_iam_authz_policy_state_proto_goTypes = []interface{}{
	(*FgaTuple)(nil),        // 0: cloud.planton.apis.v1.iam.authz.policy.FgaTuple
	(*audit.AuditInfo)(nil), // 1: cloud.planton.apis.v1.commons.audit.AuditInfo
}
var file_cloud_planton_apis_v1_iam_authz_policy_state_proto_depIdxs = []int32{
	1, // 0: cloud.planton.apis.v1.iam.authz.policy.FgaTuple.audit:type_name -> cloud.planton.apis.v1.commons.audit.AuditInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_iam_authz_policy_state_proto_init() }
func file_cloud_planton_apis_v1_iam_authz_policy_state_proto_init() {
	if File_cloud_planton_apis_v1_iam_authz_policy_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_iam_authz_policy_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FgaTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_iam_authz_policy_state_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_iam_authz_policy_state_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_iam_authz_policy_state_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_iam_authz_policy_state_proto = out.File
	file_cloud_planton_apis_v1_iam_authz_policy_state_proto_rawDesc = nil
	file_cloud_planton_apis_v1_iam_authz_policy_state_proto_goTypes = nil
	file_cloud_planton_apis_v1_iam_authz_policy_state_proto_depIdxs = nil
}
