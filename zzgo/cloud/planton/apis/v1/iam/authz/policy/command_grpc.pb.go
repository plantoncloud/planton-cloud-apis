// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/iam/authz/policy/command.proto

package policy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IamPolicyCommandController_Add_FullMethodName                   = "/cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController/add"
	IamPolicyCommandController_RemoveMultiple_FullMethodName        = "/cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController/removeMultiple"
	IamPolicyCommandController_Update_FullMethodName                = "/cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController/update"
	IamPolicyCommandController_AddCompany_FullMethodName            = "/cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController/addCompany"
	IamPolicyCommandController_RemoveCompanyMultiple_FullMethodName = "/cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController/removeCompanyMultiple"
	IamPolicyCommandController_AddApiResourceOwner_FullMethodName   = "/cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController/addApiResourceOwner"
)

// IamPolicyCommandControllerClient is the client API for IamPolicyCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamPolicyCommandControllerClient interface {
	// add iam policies to a resource
	Add(ctx context.Context, in *AddIamPolicyInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
	// remove list of iam policies of a principal and resource
	RemoveMultiple(ctx context.Context, in *RemoveIamPoliciesInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
	Update(ctx context.Context, in *UpdateIamPolicyInput, opts ...grpc.CallOption) (*IamPolicyByPrincipal, error)
	// add iam policies to a resource
	AddCompany(ctx context.Context, in *AddIamPolicyInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
	// remove list of iam policies of a principal and resource
	RemoveCompanyMultiple(ctx context.Context, in *RemoveIamPoliciesInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
	// add an owner for a resource.
	// this rpc is used by planton-cloud platform services when ever a new api resource is newly created.
	// a tuple is created on fga and the same tuple along with any contextual
	// information is stored in planton-cloud's database.
	AddApiResourceOwner(ctx context.Context, in *FgaTuple, opts ...grpc.CallOption) (*FgaTuple, error)
}

type iamPolicyCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIamPolicyCommandControllerClient(cc grpc.ClientConnInterface) IamPolicyCommandControllerClient {
	return &iamPolicyCommandControllerClient{cc}
}

func (c *iamPolicyCommandControllerClient) Add(ctx context.Context, in *AddIamPolicyInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyCommandControllerClient) RemoveMultiple(ctx context.Context, in *RemoveIamPoliciesInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_RemoveMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyCommandControllerClient) Update(ctx context.Context, in *UpdateIamPolicyInput, opts ...grpc.CallOption) (*IamPolicyByPrincipal, error) {
	out := new(IamPolicyByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyCommandControllerClient) AddCompany(ctx context.Context, in *AddIamPolicyInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_AddCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyCommandControllerClient) RemoveCompanyMultiple(ctx context.Context, in *RemoveIamPoliciesInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_RemoveCompanyMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyCommandControllerClient) AddApiResourceOwner(ctx context.Context, in *FgaTuple, opts ...grpc.CallOption) (*FgaTuple, error) {
	out := new(FgaTuple)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_AddApiResourceOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamPolicyCommandControllerServer is the server API for IamPolicyCommandController service.
// All implementations should embed UnimplementedIamPolicyCommandControllerServer
// for forward compatibility
type IamPolicyCommandControllerServer interface {
	// add iam policies to a resource
	Add(context.Context, *AddIamPolicyInput) (*IamPoliciesByPrincipal, error)
	// remove list of iam policies of a principal and resource
	RemoveMultiple(context.Context, *RemoveIamPoliciesInput) (*IamPoliciesByPrincipal, error)
	Update(context.Context, *UpdateIamPolicyInput) (*IamPolicyByPrincipal, error)
	// add iam policies to a resource
	AddCompany(context.Context, *AddIamPolicyInput) (*IamPoliciesByPrincipal, error)
	// remove list of iam policies of a principal and resource
	RemoveCompanyMultiple(context.Context, *RemoveIamPoliciesInput) (*IamPoliciesByPrincipal, error)
	// add an owner for a resource.
	// this rpc is used by planton-cloud platform services when ever a new api resource is newly created.
	// a tuple is created on fga and the same tuple along with any contextual
	// information is stored in planton-cloud's database.
	AddApiResourceOwner(context.Context, *FgaTuple) (*FgaTuple, error)
}

// UnimplementedIamPolicyCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIamPolicyCommandControllerServer struct {
}

func (UnimplementedIamPolicyCommandControllerServer) Add(context.Context, *AddIamPolicyInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedIamPolicyCommandControllerServer) RemoveMultiple(context.Context, *RemoveIamPoliciesInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiple not implemented")
}
func (UnimplementedIamPolicyCommandControllerServer) Update(context.Context, *UpdateIamPolicyInput) (*IamPolicyByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIamPolicyCommandControllerServer) AddCompany(context.Context, *AddIamPolicyInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompany not implemented")
}
func (UnimplementedIamPolicyCommandControllerServer) RemoveCompanyMultiple(context.Context, *RemoveIamPoliciesInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCompanyMultiple not implemented")
}
func (UnimplementedIamPolicyCommandControllerServer) AddApiResourceOwner(context.Context, *FgaTuple) (*FgaTuple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApiResourceOwner not implemented")
}

// UnsafeIamPolicyCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamPolicyCommandControllerServer will
// result in compilation errors.
type UnsafeIamPolicyCommandControllerServer interface {
	mustEmbedUnimplementedIamPolicyCommandControllerServer()
}

func RegisterIamPolicyCommandControllerServer(s grpc.ServiceRegistrar, srv IamPolicyCommandControllerServer) {
	s.RegisterService(&IamPolicyCommandController_ServiceDesc, srv)
}

func _IamPolicyCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIamPolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).Add(ctx, req.(*AddIamPolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyCommandController_RemoveMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIamPoliciesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).RemoveMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_RemoveMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).RemoveMultiple(ctx, req.(*RemoveIamPoliciesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyCommandController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIamPolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).Update(ctx, req.(*UpdateIamPolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyCommandController_AddCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIamPolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).AddCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_AddCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).AddCompany(ctx, req.(*AddIamPolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyCommandController_RemoveCompanyMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIamPoliciesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).RemoveCompanyMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_RemoveCompanyMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).RemoveCompanyMultiple(ctx, req.(*RemoveIamPoliciesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyCommandController_AddApiResourceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FgaTuple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).AddApiResourceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_AddApiResourceOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).AddApiResourceOwner(ctx, req.(*FgaTuple))
	}
	return interceptor(ctx, in, info, handler)
}

// IamPolicyCommandController_ServiceDesc is the grpc.ServiceDesc for IamPolicyCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IamPolicyCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.authz.policy.IamPolicyCommandController",
	HandlerType: (*IamPolicyCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _IamPolicyCommandController_Add_Handler,
		},
		{
			MethodName: "removeMultiple",
			Handler:    _IamPolicyCommandController_RemoveMultiple_Handler,
		},
		{
			MethodName: "update",
			Handler:    _IamPolicyCommandController_Update_Handler,
		},
		{
			MethodName: "addCompany",
			Handler:    _IamPolicyCommandController_AddCompany_Handler,
		},
		{
			MethodName: "removeCompanyMultiple",
			Handler:    _IamPolicyCommandController_RemoveCompanyMultiple_Handler,
		},
		{
			MethodName: "addApiResourceOwner",
			Handler:    _IamPolicyCommandController_AddApiResourceOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/authz/policy/command.proto",
}
