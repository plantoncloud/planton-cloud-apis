// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/iam/authz/policy/rpc/service.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IamPolicyCommandController_Add_FullMethodName            = "/cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController/add"
	IamPolicyCommandController_RemoveMultiple_FullMethodName = "/cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController/removeMultiple"
)

// IamPolicyCommandControllerClient is the client API for IamPolicyCommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamPolicyCommandControllerClient interface {
	// add iam policies to a resource
	Add(ctx context.Context, in *AddIamPolicyInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
	// remove list of iam policies of a principal and resource
	RemoveMultiple(ctx context.Context, in *RemoveIamPoliciesInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
}

type iamPolicyCommandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIamPolicyCommandControllerClient(cc grpc.ClientConnInterface) IamPolicyCommandControllerClient {
	return &iamPolicyCommandControllerClient{cc}
}

func (c *iamPolicyCommandControllerClient) Add(ctx context.Context, in *AddIamPolicyInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyCommandControllerClient) RemoveMultiple(ctx context.Context, in *RemoveIamPoliciesInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyCommandController_RemoveMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamPolicyCommandControllerServer is the server API for IamPolicyCommandController service.
// All implementations should embed UnimplementedIamPolicyCommandControllerServer
// for forward compatibility
type IamPolicyCommandControllerServer interface {
	// add iam policies to a resource
	Add(context.Context, *AddIamPolicyInput) (*IamPoliciesByPrincipal, error)
	// remove list of iam policies of a principal and resource
	RemoveMultiple(context.Context, *RemoveIamPoliciesInput) (*IamPoliciesByPrincipal, error)
}

// UnimplementedIamPolicyCommandControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIamPolicyCommandControllerServer struct {
}

func (UnimplementedIamPolicyCommandControllerServer) Add(context.Context, *AddIamPolicyInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedIamPolicyCommandControllerServer) RemoveMultiple(context.Context, *RemoveIamPoliciesInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiple not implemented")
}

// UnsafeIamPolicyCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamPolicyCommandControllerServer will
// result in compilation errors.
type UnsafeIamPolicyCommandControllerServer interface {
	mustEmbedUnimplementedIamPolicyCommandControllerServer()
}

func RegisterIamPolicyCommandControllerServer(s grpc.ServiceRegistrar, srv IamPolicyCommandControllerServer) {
	s.RegisterService(&IamPolicyCommandController_ServiceDesc, srv)
}

func _IamPolicyCommandController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIamPolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).Add(ctx, req.(*AddIamPolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyCommandController_RemoveMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIamPoliciesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyCommandControllerServer).RemoveMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyCommandController_RemoveMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyCommandControllerServer).RemoveMultiple(ctx, req.(*RemoveIamPoliciesInput))
	}
	return interceptor(ctx, in, info, handler)
}

// IamPolicyCommandController_ServiceDesc is the grpc.ServiceDesc for IamPolicyCommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IamPolicyCommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyCommandController",
	HandlerType: (*IamPolicyCommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _IamPolicyCommandController_Add_Handler,
		},
		{
			MethodName: "removeMultiple",
			Handler:    _IamPolicyCommandController_RemoveMultiple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/authz/policy/rpc/service.proto",
}

const (
	IamPolicyQueryController_GetByResourceTypeAndResourceId_FullMethodName            = "/cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController/getByResourceTypeAndResourceId"
	IamPolicyQueryController_GetByResourceTypeAndResourceIdGroupByRole_FullMethodName = "/cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController/getByResourceTypeAndResourceIdGroupByRole"
)

// IamPolicyQueryControllerClient is the client API for IamPolicyQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamPolicyQueryControllerClient interface {
	// retrieve iam policies by type and id
	GetByResourceTypeAndResourceId(ctx context.Context, in *GetIamPolicyByResourceTypeAndResourceIdInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error)
	// retrieve iam policies by type and id grouped by role
	GetByResourceTypeAndResourceIdGroupByRole(ctx context.Context, in *GetIamPolicyByResourceTypeAndResourceIdInput, opts ...grpc.CallOption) (*IamPoliciesByRole, error)
}

type iamPolicyQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIamPolicyQueryControllerClient(cc grpc.ClientConnInterface) IamPolicyQueryControllerClient {
	return &iamPolicyQueryControllerClient{cc}
}

func (c *iamPolicyQueryControllerClient) GetByResourceTypeAndResourceId(ctx context.Context, in *GetIamPolicyByResourceTypeAndResourceIdInput, opts ...grpc.CallOption) (*IamPoliciesByPrincipal, error) {
	out := new(IamPoliciesByPrincipal)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_GetByResourceTypeAndResourceId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamPolicyQueryControllerClient) GetByResourceTypeAndResourceIdGroupByRole(ctx context.Context, in *GetIamPolicyByResourceTypeAndResourceIdInput, opts ...grpc.CallOption) (*IamPoliciesByRole, error) {
	out := new(IamPoliciesByRole)
	err := c.cc.Invoke(ctx, IamPolicyQueryController_GetByResourceTypeAndResourceIdGroupByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamPolicyQueryControllerServer is the server API for IamPolicyQueryController service.
// All implementations should embed UnimplementedIamPolicyQueryControllerServer
// for forward compatibility
type IamPolicyQueryControllerServer interface {
	// retrieve iam policies by type and id
	GetByResourceTypeAndResourceId(context.Context, *GetIamPolicyByResourceTypeAndResourceIdInput) (*IamPoliciesByPrincipal, error)
	// retrieve iam policies by type and id grouped by role
	GetByResourceTypeAndResourceIdGroupByRole(context.Context, *GetIamPolicyByResourceTypeAndResourceIdInput) (*IamPoliciesByRole, error)
}

// UnimplementedIamPolicyQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIamPolicyQueryControllerServer struct {
}

func (UnimplementedIamPolicyQueryControllerServer) GetByResourceTypeAndResourceId(context.Context, *GetIamPolicyByResourceTypeAndResourceIdInput) (*IamPoliciesByPrincipal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByResourceTypeAndResourceId not implemented")
}
func (UnimplementedIamPolicyQueryControllerServer) GetByResourceTypeAndResourceIdGroupByRole(context.Context, *GetIamPolicyByResourceTypeAndResourceIdInput) (*IamPoliciesByRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByResourceTypeAndResourceIdGroupByRole not implemented")
}

// UnsafeIamPolicyQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamPolicyQueryControllerServer will
// result in compilation errors.
type UnsafeIamPolicyQueryControllerServer interface {
	mustEmbedUnimplementedIamPolicyQueryControllerServer()
}

func RegisterIamPolicyQueryControllerServer(s grpc.ServiceRegistrar, srv IamPolicyQueryControllerServer) {
	s.RegisterService(&IamPolicyQueryController_ServiceDesc, srv)
}

func _IamPolicyQueryController_GetByResourceTypeAndResourceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIamPolicyByResourceTypeAndResourceIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).GetByResourceTypeAndResourceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_GetByResourceTypeAndResourceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).GetByResourceTypeAndResourceId(ctx, req.(*GetIamPolicyByResourceTypeAndResourceIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamPolicyQueryController_GetByResourceTypeAndResourceIdGroupByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIamPolicyByResourceTypeAndResourceIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamPolicyQueryControllerServer).GetByResourceTypeAndResourceIdGroupByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamPolicyQueryController_GetByResourceTypeAndResourceIdGroupByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamPolicyQueryControllerServer).GetByResourceTypeAndResourceIdGroupByRole(ctx, req.(*GetIamPolicyByResourceTypeAndResourceIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// IamPolicyQueryController_ServiceDesc is the grpc.ServiceDesc for IamPolicyQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IamPolicyQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.authz.policy.rpc.IamPolicyQueryController",
	HandlerType: (*IamPolicyQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getByResourceTypeAndResourceId",
			Handler:    _IamPolicyQueryController_GetByResourceTypeAndResourceId_Handler,
		},
		{
			MethodName: "getByResourceTypeAndResourceIdGroupByRole",
			Handler:    _IamPolicyQueryController_GetByResourceTypeAndResourceIdGroupByRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/authz/policy/rpc/service.proto",
}
