// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/iam/authz/policy/model.proto

package policy

import (
	role "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/iam/authz/role"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// response of iam policy by principal
type IamPolicyByPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the principal of the policy that is associated.
	// principal could be email id of the user.
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// type of the principal id
	// example values could be user/ company etc.;
	PrincipalType string `protobuf:"bytes,2,opt,name=principal_type,json=principalType,proto3" json:"principal_type,omitempty"`
	// iam role details assigned to principal
	Role *role.IamRole `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// id of the owner resource if the relation is of owner.
	// a part from the direct relations that we have on an resource we have to show the relations of the resources that are linked.
	// for example cloud account and company has owner relation.
	// we show the relations of the owner company as well.
	OwnerId string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// type of the owner id
	// example values could be company/ product etc.;
	OwnerType string `protobuf:"bytes,5,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
}

func (x *IamPolicyByPrincipal) Reset() {
	*x = IamPolicyByPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPolicyByPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPolicyByPrincipal) ProtoMessage() {}

func (x *IamPolicyByPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPolicyByPrincipal.ProtoReflect.Descriptor instead.
func (*IamPolicyByPrincipal) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{0}
}

func (x *IamPolicyByPrincipal) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *IamPolicyByPrincipal) GetPrincipalType() string {
	if x != nil {
		return x.PrincipalType
	}
	return ""
}

func (x *IamPolicyByPrincipal) GetRole() *role.IamRole {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *IamPolicyByPrincipal) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *IamPolicyByPrincipal) GetOwnerType() string {
	if x != nil {
		return x.OwnerType
	}
	return ""
}

// input message to get IAM policies of a resource.
type GetIamPolicyByResourceTypeAndResourceIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the resource for which we want to get iam policies
	// example values could be company/ cloud_account etc.;
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// id of the resource to get iam policy
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// flag to get inherited policies from owner
	ShowInheritedPolicies bool `protobuf:"varint,3,opt,name=show_inherited_policies,json=showInheritedPolicies,proto3" json:"show_inherited_policies,omitempty"`
}

func (x *GetIamPolicyByResourceTypeAndResourceIdInput) Reset() {
	*x = GetIamPolicyByResourceTypeAndResourceIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIamPolicyByResourceTypeAndResourceIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIamPolicyByResourceTypeAndResourceIdInput) ProtoMessage() {}

func (x *GetIamPolicyByResourceTypeAndResourceIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIamPolicyByResourceTypeAndResourceIdInput.ProtoReflect.Descriptor instead.
func (*GetIamPolicyByResourceTypeAndResourceIdInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{1}
}

func (x *GetIamPolicyByResourceTypeAndResourceIdInput) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *GetIamPolicyByResourceTypeAndResourceIdInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetIamPolicyByResourceTypeAndResourceIdInput) GetShowInheritedPolicies() bool {
	if x != nil {
		return x.ShowInheritedPolicies
	}
	return false
}

// response to return all iam policies by principal
type IamPoliciesByPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of iam policies
	Entries []*IamPolicyByPrincipal `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *IamPoliciesByPrincipal) Reset() {
	*x = IamPoliciesByPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPoliciesByPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPoliciesByPrincipal) ProtoMessage() {}

func (x *IamPoliciesByPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPoliciesByPrincipal.ProtoReflect.Descriptor instead.
func (*IamPoliciesByPrincipal) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{2}
}

func (x *IamPoliciesByPrincipal) GetEntries() []*IamPolicyByPrincipal {
	if x != nil {
		return x.Entries
	}
	return nil
}

// input to add IAM policy of a resource
type AddIamPolicyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of principal ids that are meant to be linked with the resource
	PrincipalIds []string `protobuf:"bytes,1,rep,name=principal_ids,json=principalIds,proto3" json:"principal_ids,omitempty"`
	// type of the principal
	// example could be user/ company etc.;
	PrincipalType string `protobuf:"bytes,2,opt,name=principal_type,json=principalType,proto3" json:"principal_type,omitempty"`
	// list of roles to be assigned to the principal ids
	Roles []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	// type of the resource for which we want to add iam policies
	// example values could be company/ cloud_account etc.;
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// id of the resource to add iam policy
	ResourceId string `protobuf:"bytes,5,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *AddIamPolicyInput) Reset() {
	*x = AddIamPolicyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIamPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIamPolicyInput) ProtoMessage() {}

func (x *AddIamPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIamPolicyInput.ProtoReflect.Descriptor instead.
func (*AddIamPolicyInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{3}
}

func (x *AddIamPolicyInput) GetPrincipalIds() []string {
	if x != nil {
		return x.PrincipalIds
	}
	return nil
}

func (x *AddIamPolicyInput) GetPrincipalType() string {
	if x != nil {
		return x.PrincipalType
	}
	return ""
}

func (x *AddIamPolicyInput) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AddIamPolicyInput) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AddIamPolicyInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// input to remove IAM policy of a resource
type RemoveIamPolicyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// principal id for which the iam policy has to be removed
	PrincipalId string `protobuf:"bytes,1,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	// type of the principal
	// example could be user/ company etc.;
	PrincipalType string `protobuf:"bytes,2,opt,name=principal_type,json=principalType,proto3" json:"principal_type,omitempty"`
	// role code to be removed for the principal with resource
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// type of the resource for which we want to remove iam policy
	// example values could be company/ cloud_account etc.;
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// id of the resource to remove iam policy
	ResourceId string `protobuf:"bytes,5,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *RemoveIamPolicyInput) Reset() {
	*x = RemoveIamPolicyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIamPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIamPolicyInput) ProtoMessage() {}

func (x *RemoveIamPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIamPolicyInput.ProtoReflect.Descriptor instead.
func (*RemoveIamPolicyInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveIamPolicyInput) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *RemoveIamPolicyInput) GetPrincipalType() string {
	if x != nil {
		return x.PrincipalType
	}
	return ""
}

func (x *RemoveIamPolicyInput) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RemoveIamPolicyInput) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *RemoveIamPolicyInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// input to remove multiple iam polices
type RemoveIamPoliciesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of remove iam policy inputs
	Entries []*RemoveIamPolicyInput `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *RemoveIamPoliciesInput) Reset() {
	*x = RemoveIamPoliciesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIamPoliciesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIamPoliciesInput) ProtoMessage() {}

func (x *RemoveIamPoliciesInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIamPoliciesInput.ProtoReflect.Descriptor instead.
func (*RemoveIamPoliciesInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveIamPoliciesInput) GetEntries() []*RemoveIamPolicyInput {
	if x != nil {
		return x.Entries
	}
	return nil
}

// response of iam policy by role
type IamPolicyByRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iam role details assigned to principal
	Role *role.IamRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// list of iam principals assigned with the role
	IamPrincipals []*IamPrincipal `protobuf:"bytes,2,rep,name=iam_principals,json=iamPrincipals,proto3" json:"iam_principals,omitempty"`
}

func (x *IamPolicyByRole) Reset() {
	*x = IamPolicyByRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPolicyByRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPolicyByRole) ProtoMessage() {}

func (x *IamPolicyByRole) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPolicyByRole.ProtoReflect.Descriptor instead.
func (*IamPolicyByRole) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{6}
}

func (x *IamPolicyByRole) GetRole() *role.IamRole {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *IamPolicyByRole) GetIamPrincipals() []*IamPrincipal {
	if x != nil {
		return x.IamPrincipals
	}
	return nil
}

type IamPrincipal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the principal of the policy that is associated.
	// principal could be email id of the user.
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// type of the principal id
	// example values could be user/ company etc.;
	PrincipalType string `protobuf:"bytes,2,opt,name=principal_type,json=principalType,proto3" json:"principal_type,omitempty"`
	// id of the owner resource if the relation is of owner.
	// a part from the direct relations that we have on an resource we have to show the relations of the resources that are linked.
	// for example cloud account and company has owner relation.
	// we show the relations of the owner company as well.
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// type of the owner id
	// example values could be company/ product etc.;
	OwnerType string `protobuf:"bytes,4,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
}

func (x *IamPrincipal) Reset() {
	*x = IamPrincipal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPrincipal) ProtoMessage() {}

func (x *IamPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPrincipal.ProtoReflect.Descriptor instead.
func (*IamPrincipal) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{7}
}

func (x *IamPrincipal) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *IamPrincipal) GetPrincipalType() string {
	if x != nil {
		return x.PrincipalType
	}
	return ""
}

func (x *IamPrincipal) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *IamPrincipal) GetOwnerType() string {
	if x != nil {
		return x.OwnerType
	}
	return ""
}

// response to return all iam policies by role
type IamPoliciesByRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of iam policies
	Entries []*IamPolicyByRole `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *IamPoliciesByRole) Reset() {
	*x = IamPoliciesByRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPoliciesByRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPoliciesByRole) ProtoMessage() {}

func (x *IamPoliciesByRole) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPoliciesByRole.ProtoReflect.Descriptor instead.
func (*IamPoliciesByRole) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP(), []int{8}
}

func (x *IamPoliciesByRole) GetEntries() []*IamPolicyByRole {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_cloud_planton_apis_v1_iam_authz_policy_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDesc = []byte{
	0x0a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x30, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8,
	0x01, 0x0a, 0x14, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x16, 0x49, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x56, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x49, 0x61, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x56, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x49, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x5b,
	0x0a, 0x0e, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0d, 0x69, 0x61,
	0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0c,
	0x49, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x49,
	0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x51, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x42, 0xdc, 0x02, 0x0a, 0x34, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x56, 0x49, 0x41, 0x50, 0xaa, 0x02, 0x26, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69,
	0x73, 0x2e, 0x56, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0x02, 0x26, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x61,
	0x6d, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xe2, 0x02,
	0x32, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41,
	0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x7a,
	0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x2c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a,
	0x49, 0x61, 0x6d, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescData = file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cloud_planton_apis_v1_iam_authz_policy_model_proto_goTypes = []interface{}{
	(*IamPolicyByPrincipal)(nil),                         // 0: cloud.planton.apis.v1.iam.authz.policy.IamPolicyByPrincipal
	(*GetIamPolicyByResourceTypeAndResourceIdInput)(nil), // 1: cloud.planton.apis.v1.iam.authz.policy.GetIamPolicyByResourceTypeAndResourceIdInput
	(*IamPoliciesByPrincipal)(nil),                       // 2: cloud.planton.apis.v1.iam.authz.policy.IamPoliciesByPrincipal
	(*AddIamPolicyInput)(nil),                            // 3: cloud.planton.apis.v1.iam.authz.policy.AddIamPolicyInput
	(*RemoveIamPolicyInput)(nil),                         // 4: cloud.planton.apis.v1.iam.authz.policy.RemoveIamPolicyInput
	(*RemoveIamPoliciesInput)(nil),                       // 5: cloud.planton.apis.v1.iam.authz.policy.RemoveIamPoliciesInput
	(*IamPolicyByRole)(nil),                              // 6: cloud.planton.apis.v1.iam.authz.policy.IamPolicyByRole
	(*IamPrincipal)(nil),                                 // 7: cloud.planton.apis.v1.iam.authz.policy.IamPrincipal
	(*IamPoliciesByRole)(nil),                            // 8: cloud.planton.apis.v1.iam.authz.policy.IamPoliciesByRole
	(*role.IamRole)(nil),                                 // 9: cloud.planton.apis.v1.iam.authz.role.IamRole
}
var file_cloud_planton_apis_v1_iam_authz_policy_model_proto_depIdxs = []int32{
	9, // 0: cloud.planton.apis.v1.iam.authz.policy.IamPolicyByPrincipal.role:type_name -> cloud.planton.apis.v1.iam.authz.role.IamRole
	0, // 1: cloud.planton.apis.v1.iam.authz.policy.IamPoliciesByPrincipal.entries:type_name -> cloud.planton.apis.v1.iam.authz.policy.IamPolicyByPrincipal
	4, // 2: cloud.planton.apis.v1.iam.authz.policy.RemoveIamPoliciesInput.entries:type_name -> cloud.planton.apis.v1.iam.authz.policy.RemoveIamPolicyInput
	9, // 3: cloud.planton.apis.v1.iam.authz.policy.IamPolicyByRole.role:type_name -> cloud.planton.apis.v1.iam.authz.role.IamRole
	7, // 4: cloud.planton.apis.v1.iam.authz.policy.IamPolicyByRole.iam_principals:type_name -> cloud.planton.apis.v1.iam.authz.policy.IamPrincipal
	6, // 5: cloud.planton.apis.v1.iam.authz.policy.IamPoliciesByRole.entries:type_name -> cloud.planton.apis.v1.iam.authz.policy.IamPolicyByRole
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_iam_authz_policy_model_proto_init() }
func file_cloud_planton_apis_v1_iam_authz_policy_model_proto_init() {
	if File_cloud_planton_apis_v1_iam_authz_policy_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPolicyByPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIamPolicyByResourceTypeAndResourceIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPoliciesByPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIamPolicyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIamPolicyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIamPoliciesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPolicyByRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPrincipal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPoliciesByRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_iam_authz_policy_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_iam_authz_policy_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_iam_authz_policy_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_iam_authz_policy_model_proto = out.File
	file_cloud_planton_apis_v1_iam_authz_policy_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_iam_authz_policy_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_iam_authz_policy_model_proto_depIdxs = nil
}
