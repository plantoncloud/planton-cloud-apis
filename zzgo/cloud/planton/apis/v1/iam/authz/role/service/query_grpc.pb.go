// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloud/planton/apis/v1/iam/authz/role/service/query.proto

package service

import (
	context "context"
	model "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/commons/rpc/pagination/model"
	model1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/iam/authz/role/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IamRoleQueryController_List_FullMethodName                               = "/cloud.planton.apis.v1.iam.authz.role.service.IamRoleQueryController/list"
	IamRoleQueryController_GetById_FullMethodName                            = "/cloud.planton.apis.v1.iam.authz.role.service.IamRoleQueryController/getById"
	IamRoleQueryController_FindByResourceTypeAndPrincipalType_FullMethodName = "/cloud.planton.apis.v1.iam.authz.role.service.IamRoleQueryController/findByResourceTypeAndPrincipalType"
	IamRoleQueryController_GetIamPrincipalTypesByResourceType_FullMethodName = "/cloud.planton.apis.v1.iam.authz.role.service.IamRoleQueryController/getIamPrincipalTypesByResourceType"
)

// IamRoleQueryControllerClient is the client API for IamRoleQueryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamRoleQueryControllerClient interface {
	// retrieve paginated list of all iam roles on planton cloud. this is intended for use on portal.
	List(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.IamRoleList, error)
	// lookup iam role by role id
	GetById(ctx context.Context, in *model1.IamRoleId, opts ...grpc.CallOption) (*model1.IamRole, error)
	// lookup iam role by resource type and principal type
	FindByResourceTypeAndPrincipalType(ctx context.Context, in *model1.ResourceTypeAndPrincipalTypeInput, opts ...grpc.CallOption) (*model1.IamRoles, error)
	// lookup iam principal type by resource type
	// returns the list of principal types that can be used to create relations with the resource
	// for example cloud account is allowed to share at company and user level
	// by this cloud account have two principal types to create relations with
	GetIamPrincipalTypesByResourceType(ctx context.Context, in *model1.IamResourceTypeInput, opts ...grpc.CallOption) (*model1.PrincipalTypes, error)
}

type iamRoleQueryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIamRoleQueryControllerClient(cc grpc.ClientConnInterface) IamRoleQueryControllerClient {
	return &iamRoleQueryControllerClient{cc}
}

func (c *iamRoleQueryControllerClient) List(ctx context.Context, in *model.PageInfo, opts ...grpc.CallOption) (*model1.IamRoleList, error) {
	out := new(model1.IamRoleList)
	err := c.cc.Invoke(ctx, IamRoleQueryController_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamRoleQueryControllerClient) GetById(ctx context.Context, in *model1.IamRoleId, opts ...grpc.CallOption) (*model1.IamRole, error) {
	out := new(model1.IamRole)
	err := c.cc.Invoke(ctx, IamRoleQueryController_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamRoleQueryControllerClient) FindByResourceTypeAndPrincipalType(ctx context.Context, in *model1.ResourceTypeAndPrincipalTypeInput, opts ...grpc.CallOption) (*model1.IamRoles, error) {
	out := new(model1.IamRoles)
	err := c.cc.Invoke(ctx, IamRoleQueryController_FindByResourceTypeAndPrincipalType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamRoleQueryControllerClient) GetIamPrincipalTypesByResourceType(ctx context.Context, in *model1.IamResourceTypeInput, opts ...grpc.CallOption) (*model1.PrincipalTypes, error) {
	out := new(model1.PrincipalTypes)
	err := c.cc.Invoke(ctx, IamRoleQueryController_GetIamPrincipalTypesByResourceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamRoleQueryControllerServer is the server API for IamRoleQueryController service.
// All implementations should embed UnimplementedIamRoleQueryControllerServer
// for forward compatibility
type IamRoleQueryControllerServer interface {
	// retrieve paginated list of all iam roles on planton cloud. this is intended for use on portal.
	List(context.Context, *model.PageInfo) (*model1.IamRoleList, error)
	// lookup iam role by role id
	GetById(context.Context, *model1.IamRoleId) (*model1.IamRole, error)
	// lookup iam role by resource type and principal type
	FindByResourceTypeAndPrincipalType(context.Context, *model1.ResourceTypeAndPrincipalTypeInput) (*model1.IamRoles, error)
	// lookup iam principal type by resource type
	// returns the list of principal types that can be used to create relations with the resource
	// for example cloud account is allowed to share at company and user level
	// by this cloud account have two principal types to create relations with
	GetIamPrincipalTypesByResourceType(context.Context, *model1.IamResourceTypeInput) (*model1.PrincipalTypes, error)
}

// UnimplementedIamRoleQueryControllerServer should be embedded to have forward compatible implementations.
type UnimplementedIamRoleQueryControllerServer struct {
}

func (UnimplementedIamRoleQueryControllerServer) List(context.Context, *model.PageInfo) (*model1.IamRoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIamRoleQueryControllerServer) GetById(context.Context, *model1.IamRoleId) (*model1.IamRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedIamRoleQueryControllerServer) FindByResourceTypeAndPrincipalType(context.Context, *model1.ResourceTypeAndPrincipalTypeInput) (*model1.IamRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByResourceTypeAndPrincipalType not implemented")
}
func (UnimplementedIamRoleQueryControllerServer) GetIamPrincipalTypesByResourceType(context.Context, *model1.IamResourceTypeInput) (*model1.PrincipalTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIamPrincipalTypesByResourceType not implemented")
}

// UnsafeIamRoleQueryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamRoleQueryControllerServer will
// result in compilation errors.
type UnsafeIamRoleQueryControllerServer interface {
	mustEmbedUnimplementedIamRoleQueryControllerServer()
}

func RegisterIamRoleQueryControllerServer(s grpc.ServiceRegistrar, srv IamRoleQueryControllerServer) {
	s.RegisterService(&IamRoleQueryController_ServiceDesc, srv)
}

func _IamRoleQueryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamRoleQueryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamRoleQueryController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamRoleQueryControllerServer).List(ctx, req.(*model.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamRoleQueryController_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.IamRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamRoleQueryControllerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamRoleQueryController_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamRoleQueryControllerServer).GetById(ctx, req.(*model1.IamRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamRoleQueryController_FindByResourceTypeAndPrincipalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.ResourceTypeAndPrincipalTypeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamRoleQueryControllerServer).FindByResourceTypeAndPrincipalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamRoleQueryController_FindByResourceTypeAndPrincipalType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamRoleQueryControllerServer).FindByResourceTypeAndPrincipalType(ctx, req.(*model1.ResourceTypeAndPrincipalTypeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamRoleQueryController_GetIamPrincipalTypesByResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model1.IamResourceTypeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamRoleQueryControllerServer).GetIamPrincipalTypesByResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IamRoleQueryController_GetIamPrincipalTypesByResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamRoleQueryControllerServer).GetIamPrincipalTypesByResourceType(ctx, req.(*model1.IamResourceTypeInput))
	}
	return interceptor(ctx, in, info, handler)
}

// IamRoleQueryController_ServiceDesc is the grpc.ServiceDesc for IamRoleQueryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IamRoleQueryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.planton.apis.v1.iam.authz.role.service.IamRoleQueryController",
	HandlerType: (*IamRoleQueryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _IamRoleQueryController_List_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _IamRoleQueryController_GetById_Handler,
		},
		{
			MethodName: "findByResourceTypeAndPrincipalType",
			Handler:    _IamRoleQueryController_FindByResourceTypeAndPrincipalType_Handler,
		},
		{
			MethodName: "getIamPrincipalTypesByResourceType",
			Handler:    _IamRoleQueryController_GetIamPrincipalTypesByResourceType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/planton/apis/v1/iam/authz/role/service/query.proto",
}
