// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/stack/job/model.proto

package job

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	audit "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/audit"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	enums "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/enums"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/field/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/metadata/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/options"
	pagination "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/rpc/pagination"
	executionstatus "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/enums/executionstatus"
	operationtype "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/enums/operationtype"
	event "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/progress/enums/event"
	statusevent "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/job/progress/enums/statusevent"
	engine "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/stack/pulumi/engine"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// stack-job
type StackJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource api-version
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// resource kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// resource metadata
	Metadata *resource.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// resource spec
	Spec *StackJobSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// resource status
	Status *StackJobStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StackJob) Reset() {
	*x = StackJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJob) ProtoMessage() {}

func (x *StackJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJob.ProtoReflect.Descriptor instead.
func (*StackJob) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{0}
}

func (x *StackJob) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *StackJob) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *StackJob) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StackJob) GetSpec() *StackJobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *StackJob) GetStatus() *StackJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// stack-job spec
type StackJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the company to which the stack-job belongs to.
	// value is computed from stack
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// id of the product to which the stack-job belongs to.
	// value is empty for non-product specific resources
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// id of the environment to which the stack-job belongs to.
	// value is empty for non-environment specific resources
	EnvironmentId string `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// resource type for which the stack-job is created
	// value is computed from stack.
	ResourceType enums.ResourceType `protobuf:"varint,4,opt,name=resource_type,json=resourceType,proto3,enum=cloud.planton.apis.v1.commons.resource.enums.ResourceType" json:"resource_type,omitempty"`
	// id of the resource for which the stack-job is created.
	ResourceId string `protobuf:"bytes,5,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// id of the resource version for which the stack-job is created.
	ResourceVersionId string `protobuf:"bytes,6,opt,name=resource_version_id,json=resourceVersionId,proto3" json:"resource_version_id,omitempty"`
	// id of the stack to which the stack-job belongs to.
	// value is computed based on resource-id.
	StackId string `protobuf:"bytes,7,opt,name=stack_id,json=stackId,proto3" json:"stack_id,omitempty"`
	// stack-job operation type
	OperationType operationtype.StackJobOperationType `protobuf:"varint,8,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// name of the pulumi-stack.
	// this value is computed by stack service.
	PulumiStackName string `protobuf:"bytes,9,opt,name=pulumi_stack_name,json=pulumiStackName,proto3" json:"pulumi_stack_name,omitempty"`
	// event type of the resource that triggered the stack job
	ResourceEvent string `protobuf:"bytes,10,opt,name=resource_event,json=resourceEvent,proto3" json:"resource_event,omitempty"`
}

func (x *StackJobSpec) Reset() {
	*x = StackJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobSpec) ProtoMessage() {}

func (x *StackJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobSpec.ProtoReflect.Descriptor instead.
func (*StackJobSpec) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{1}
}

func (x *StackJobSpec) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *StackJobSpec) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StackJobSpec) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *StackJobSpec) GetResourceType() enums.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return enums.ResourceType(0)
}

func (x *StackJobSpec) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *StackJobSpec) GetResourceVersionId() string {
	if x != nil {
		return x.ResourceVersionId
	}
	return ""
}

func (x *StackJobSpec) GetStackId() string {
	if x != nil {
		return x.StackId
	}
	return ""
}

func (x *StackJobSpec) GetOperationType() operationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return operationtype.StackJobOperationType(0)
}

func (x *StackJobSpec) GetPulumiStackName() string {
	if x != nil {
		return x.PulumiStackName
	}
	return ""
}

func (x *StackJobSpec) GetResourceEvent() string {
	if x != nil {
		return x.ResourceEvent
	}
	return ""
}

// stack-job status
type StackJobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource lifecycle
	Lifecycle *resource.ResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// resource audit info
	Audit *audit.ResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
	// execution status of the stack-job
	ExecutionStatus executionstatus.StackJobExecutionStatus `protobuf:"varint,1,opt,name=execution_status,json=executionStatus,proto3,enum=cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus" json:"execution_status,omitempty"`
}

func (x *StackJobStatus) Reset() {
	*x = StackJobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobStatus) ProtoMessage() {}

func (x *StackJobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobStatus.ProtoReflect.Descriptor instead.
func (*StackJobStatus) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{2}
}

func (x *StackJobStatus) GetLifecycle() *resource.ResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *StackJobStatus) GetAudit() *audit.ResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *StackJobStatus) GetExecutionStatus() executionstatus.StackJobExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return executionstatus.StackJobExecutionStatus(0)
}

// wrapper for stack-job id
type StackJobId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StackJobId) Reset() {
	*x = StackJobId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobId) ProtoMessage() {}

func (x *StackJobId) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobId.ProtoReflect.Descriptor instead.
func (*StackJobId) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{3}
}

func (x *StackJobId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// list stack-jobs by resource type and id query input
type ListStackJobsByFiltersQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page info
	PageInfo *pagination.PageInfo `protobuf:"bytes,1,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// id of the company to filter the stack-jobs
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// id of the product to filter the stack-jobs
	ProductId string `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// id of the product env to filter the stack-jobs
	EnvironmentId string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// type of resource
	ResourceType enums.ResourceType `protobuf:"varint,5,opt,name=resource_type,json=resourceType,proto3,enum=cloud.planton.apis.v1.commons.resource.enums.ResourceType" json:"resource_type,omitempty"`
	// id of the resource
	ResourceId string `protobuf:"bytes,6,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// stack operation type
	OperationType operationtype.StackJobOperationType `protobuf:"varint,7,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// execution status of the stack-job
	ExecutionStatus executionstatus.StackJobExecutionStatus `protobuf:"varint,8,opt,name=execution_status,json=executionStatus,proto3,enum=cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus" json:"execution_status,omitempty"`
}

func (x *ListStackJobsByFiltersQueryInput) Reset() {
	*x = ListStackJobsByFiltersQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStackJobsByFiltersQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStackJobsByFiltersQueryInput) ProtoMessage() {}

func (x *ListStackJobsByFiltersQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStackJobsByFiltersQueryInput.ProtoReflect.Descriptor instead.
func (*ListStackJobsByFiltersQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{4}
}

func (x *ListStackJobsByFiltersQueryInput) GetPageInfo() *pagination.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListStackJobsByFiltersQueryInput) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetResourceType() enums.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return enums.ResourceType(0)
}

func (x *ListStackJobsByFiltersQueryInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ListStackJobsByFiltersQueryInput) GetOperationType() operationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return operationtype.StackJobOperationType(0)
}

func (x *ListStackJobsByFiltersQueryInput) GetExecutionStatus() executionstatus.StackJobExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return executionstatus.StackJobExecutionStatus(0)
}

// paginated list of stack-jobs
type StackJobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of pages
	TotalPages int32 `protobuf:"varint,1,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// list of stack-jobs
	Entries []*StackJob `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *StackJobList) Reset() {
	*x = StackJobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobList) ProtoMessage() {}

func (x *StackJobList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobList.ProtoReflect.Descriptor instead.
func (*StackJobList) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{5}
}

func (x *StackJobList) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *StackJobList) GetEntries() []*StackJob {
	if x != nil {
		return x.Entries
	}
	return nil
}

// input for rpc to set stack-job execution status
type SetStackJobExecutionStatusCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the stack-job
	StackJobId string `protobuf:"bytes,1,opt,name=stack_job_id,json=stackJobId,proto3" json:"stack_job_id,omitempty"`
	// execution-status to be set for the stack-job
	ExecutionStatus executionstatus.StackJobExecutionStatus `protobuf:"varint,2,opt,name=execution_status,json=executionStatus,proto3,enum=cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus" json:"execution_status,omitempty"`
}

func (x *SetStackJobExecutionStatusCommandInput) Reset() {
	*x = SetStackJobExecutionStatusCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStackJobExecutionStatusCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStackJobExecutionStatusCommandInput) ProtoMessage() {}

func (x *SetStackJobExecutionStatusCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStackJobExecutionStatusCommandInput.ProtoReflect.Descriptor instead.
func (*SetStackJobExecutionStatusCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{6}
}

func (x *SetStackJobExecutionStatusCommandInput) GetStackJobId() string {
	if x != nil {
		return x.StackJobId
	}
	return ""
}

func (x *SetStackJobExecutionStatusCommandInput) GetExecutionStatus() executionstatus.StackJobExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return executionstatus.StackJobExecutionStatus(0)
}

// information required to build log file name for company or product level stacks.
// the company level stacks are named using format: "{companyId}/{resource_type}.{resource_id}.{stack_name}.{operation_type}.{timestamp}.log"
// the product level stacks are named using format: "{companyId}/{productId}/{resource_type}.{resource_id}.{stack_name}.{operation_type}.{timestamp}.log"
type StackJobLogFileNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the company
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// id of the product.
	// this attribute is ignore for company level stacks.
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// id of the resource on which the stack is being executed
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// type of the operation being performed on the stack
	OperationType operationtype.StackJobOperationType `protobuf:"varint,4,opt,name=operation_type,json=operationType,proto3,enum=cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType" json:"operation_type,omitempty"`
	// timestamp in "yyyymmhhmmss" format to be suffixed to the file name
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StackJobLogFileNameInfo) Reset() {
	*x = StackJobLogFileNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobLogFileNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobLogFileNameInfo) ProtoMessage() {}

func (x *StackJobLogFileNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobLogFileNameInfo.ProtoReflect.Descriptor instead.
func (*StackJobLogFileNameInfo) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{7}
}

func (x *StackJobLogFileNameInfo) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *StackJobLogFileNameInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StackJobLogFileNameInfo) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *StackJobLogFileNameInfo) GetOperationType() operationtype.StackJobOperationType {
	if x != nil {
		return x.OperationType
	}
	return operationtype.StackJobOperationType(0)
}

func (x *StackJobLogFileNameInfo) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// stack-job progress event
type StackJobProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the event
	EventType event.StackJobProgressEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=cloud.planton.apis.v1.stack.job.progress.enums.event.StackJobProgressEventType" json:"event_type,omitempty"`
	// stack-job progress status is populated when event_type is "STACK_JOB_PROGRESS_EVENT_TYPE_STATUS_EVENT"
	ProgressStatusPayload *StackJobProgressStatusPayload `protobuf:"bytes,2,opt,name=progress_status_payload,json=progressStatusPayload,proto3" json:"progress_status_payload,omitempty"`
	// pulumi engine event is only populated when event_type is "STACK_JOB_PROGRESS_EVENT_TYPE_PULUMI_ENGINE_EVENT"
	EngineEventPayload *engine.EngineEvent `protobuf:"bytes,3,opt,name=engine_event_payload,json=engineEventPayload,proto3" json:"engine_event_payload,omitempty"`
}

func (x *StackJobProgressEvent) Reset() {
	*x = StackJobProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobProgressEvent) ProtoMessage() {}

func (x *StackJobProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobProgressEvent.ProtoReflect.Descriptor instead.
func (*StackJobProgressEvent) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{8}
}

func (x *StackJobProgressEvent) GetEventType() event.StackJobProgressEventType {
	if x != nil {
		return x.EventType
	}
	return event.StackJobProgressEventType(0)
}

func (x *StackJobProgressEvent) GetProgressStatusPayload() *StackJobProgressStatusPayload {
	if x != nil {
		return x.ProgressStatusPayload
	}
	return nil
}

func (x *StackJobProgressEvent) GetEngineEventPayload() *engine.EngineEvent {
	if x != nil {
		return x.EngineEventPayload
	}
	return nil
}

// stack-job progress status payload
type StackJobProgressStatusPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the stack-job progress status event
	EventType statusevent.StackJobProgressStatusEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=cloud.planton.apis.v1.stack.job.progress.enums.statusevent.StackJobProgressStatusEventType" json:"event_type,omitempty"`
	// error message is populated when event_type is "STACK_JOB_PROGRESS_STATUS_EVENT_TYPE_FAILED"
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *StackJobProgressStatusPayload) Reset() {
	*x = StackJobProgressStatusPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobProgressStatusPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobProgressStatusPayload) ProtoMessage() {}

func (x *StackJobProgressStatusPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobProgressStatusPayload.ProtoReflect.Descriptor instead.
func (*StackJobProgressStatusPayload) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{9}
}

func (x *StackJobProgressStatusPayload) GetEventType() statusevent.StackJobProgressStatusEventType {
	if x != nil {
		return x.EventType
	}
	return statusevent.StackJobProgressStatusEventType(0)
}

func (x *StackJobProgressStatusPayload) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type StackJobLogSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshSnapshot *StackJobLogPulumiOperationSnapshot `protobuf:"bytes,1,opt,name=refresh_snapshot,json=refreshSnapshot,proto3" json:"refresh_snapshot,omitempty"`
	PreviewSnapshot *StackJobLogPulumiOperationSnapshot `protobuf:"bytes,2,opt,name=preview_snapshot,json=previewSnapshot,proto3" json:"preview_snapshot,omitempty"`
	ApplySnapshot   *StackJobLogPulumiOperationSnapshot `protobuf:"bytes,3,opt,name=apply_snapshot,json=applySnapshot,proto3" json:"apply_snapshot,omitempty"`
	DestroySnapshot *StackJobLogPulumiOperationSnapshot `protobuf:"bytes,4,opt,name=destroy_snapshot,json=destroySnapshot,proto3" json:"destroy_snapshot,omitempty"`
}

func (x *StackJobLogSnapshot) Reset() {
	*x = StackJobLogSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobLogSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobLogSnapshot) ProtoMessage() {}

func (x *StackJobLogSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobLogSnapshot.ProtoReflect.Descriptor instead.
func (*StackJobLogSnapshot) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{10}
}

func (x *StackJobLogSnapshot) GetRefreshSnapshot() *StackJobLogPulumiOperationSnapshot {
	if x != nil {
		return x.RefreshSnapshot
	}
	return nil
}

func (x *StackJobLogSnapshot) GetPreviewSnapshot() *StackJobLogPulumiOperationSnapshot {
	if x != nil {
		return x.PreviewSnapshot
	}
	return nil
}

func (x *StackJobLogSnapshot) GetApplySnapshot() *StackJobLogPulumiOperationSnapshot {
	if x != nil {
		return x.ApplySnapshot
	}
	return nil
}

func (x *StackJobLogSnapshot) GetDestroySnapshot() *StackJobLogPulumiOperationSnapshot {
	if x != nil {
		return x.DestroySnapshot
	}
	return nil
}

type StackJobLogPulumiOperationSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceChanges *PulumiOperationResourceChangesSnapshot `protobuf:"bytes,1,opt,name=resource_changes,json=resourceChanges,proto3" json:"resource_changes,omitempty"`
	Diff            *PulumiOperationDiffSnapshot            `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *StackJobLogPulumiOperationSnapshot) Reset() {
	*x = StackJobLogPulumiOperationSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackJobLogPulumiOperationSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackJobLogPulumiOperationSnapshot) ProtoMessage() {}

func (x *StackJobLogPulumiOperationSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackJobLogPulumiOperationSnapshot.ProtoReflect.Descriptor instead.
func (*StackJobLogPulumiOperationSnapshot) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{11}
}

func (x *StackJobLogPulumiOperationSnapshot) GetResourceChanges() *PulumiOperationResourceChangesSnapshot {
	if x != nil {
		return x.ResourceChanges
	}
	return nil
}

func (x *StackJobLogPulumiOperationSnapshot) GetDiff() *PulumiOperationDiffSnapshot {
	if x != nil {
		return x.Diff
	}
	return nil
}

type PulumiOperationResourceChangesSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrnToRowMap map[string]*PulumiOperationResourceChangesSnapshotRow `protobuf:"bytes,1,rep,name=urn_to_row_map,json=urnToRowMap,proto3" json:"urn_to_row_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PulumiOperationResourceChangesSnapshot) Reset() {
	*x = PulumiOperationResourceChangesSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiOperationResourceChangesSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiOperationResourceChangesSnapshot) ProtoMessage() {}

func (x *PulumiOperationResourceChangesSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiOperationResourceChangesSnapshot.ProtoReflect.Descriptor instead.
func (*PulumiOperationResourceChangesSnapshot) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{12}
}

func (x *PulumiOperationResourceChangesSnapshot) GetUrnToRowMap() map[string]*PulumiOperationResourceChangesSnapshotRow {
	if x != nil {
		return x.UrnToRowMap
	}
	return nil
}

type PulumiOperationDiffSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceDiff []string `protobuf:"bytes,2,rep,name=resource_diff,json=resourceDiff,proto3" json:"resource_diff,omitempty"`
}

func (x *PulumiOperationDiffSnapshot) Reset() {
	*x = PulumiOperationDiffSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiOperationDiffSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiOperationDiffSnapshot) ProtoMessage() {}

func (x *PulumiOperationDiffSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiOperationDiffSnapshot.ProtoReflect.Descriptor instead.
func (*PulumiOperationDiffSnapshot) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{13}
}

func (x *PulumiOperationDiffSnapshot) GetResourceDiff() []string {
	if x != nil {
		return x.ResourceDiff
	}
	return nil
}

type PulumiOperationResourceChangesSnapshotRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	Status       string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PulumiOperationResourceChangesSnapshotRow) Reset() {
	*x = PulumiOperationResourceChangesSnapshotRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiOperationResourceChangesSnapshotRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiOperationResourceChangesSnapshotRow) ProtoMessage() {}

func (x *PulumiOperationResourceChangesSnapshotRow) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiOperationResourceChangesSnapshotRow.ProtoReflect.Descriptor instead.
func (*PulumiOperationResourceChangesSnapshotRow) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{14}
}

func (x *PulumiOperationResourceChangesSnapshotRow) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PulumiOperationResourceChangesSnapshotRow) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *PulumiOperationResourceChangesSnapshotRow) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// input for rpc to create a new stack job for any resource.
type CreateStackJobCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource for which the stack-job is to be created.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// operation-type to be used for creating the stack-job.
	StackJobOperationType operationtype.StackJobOperationType `protobuf:"varint,2,opt,name=stack_job_operation_type,json=stackJobOperationType,proto3,enum=cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType" json:"stack_job_operation_type,omitempty"`
	// reason for creating the stack job
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateStackJobCommandInput) Reset() {
	*x = CreateStackJobCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStackJobCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStackJobCommandInput) ProtoMessage() {}

func (x *CreateStackJobCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStackJobCommandInput.ProtoReflect.Descriptor instead.
func (*CreateStackJobCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP(), []int{15}
}

func (x *CreateStackJobCommandInput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CreateStackJobCommandInput) GetStackJobOperationType() operationtype.StackJobOperationType {
	if x != nil {
		return x.StackJobOperationType
	}
	return operationtype.StackJobOperationType(0)
}

func (x *CreateStackJobCommandInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_cloud_planton_apis_v1_stack_job_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_stack_job_model_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a, 0x6f,
	0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x40, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a, 0x6f, 0x62,
	0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6a,
	0x6f, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x35, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xba, 0x48, 0x1a, 0x72, 0x18,
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x23, 0x8a, 0xb5, 0x18,
	0x02, 0x73, 0x6a, 0x98, 0xb5, 0x18, 0x01, 0x88, 0xa6, 0x1d, 0x1a, 0x9a, 0xa6, 0x1d, 0x11, 0x08,
	0x19, 0x12, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x22, 0xec, 0x04, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x03, 0xd0, 0x01, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x03, 0xd0, 0x01, 0x01, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0,
	0xb8, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18,
	0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x03, 0xd0, 0x01, 0x01, 0xc8, 0xb8,
	0x18, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x00, 0xd0, 0xb8, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x03, 0xd0, 0x01, 0x01, 0xd0, 0xb8, 0x18, 0x01,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xae, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x22, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xc8, 0x04, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x5f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x71, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x74, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xba, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xba, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x71, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f,
	0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a,
	0x17, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xc0, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x7a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c,
	0x6f, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c,
	0x6f, 0x67, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x6e, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c,
	0x6f, 0x67, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x6a, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67,
	0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x6e, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a,
	0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x50, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x72, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x22, 0xb4, 0x02, 0x0a, 0x26, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x7d,
	0x0a, 0x0e, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x55, 0x72, 0x6e, 0x54, 0x6f, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x1a, 0x8a, 0x01,
	0x0a, 0x10, 0x55, 0x72, 0x6e, 0x54, 0x6f, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x1b, 0x50, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66,
	0x66, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x22, 0x8d,
	0x01, 0x0a, 0x29, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe3,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x83,
	0x01, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0xb0, 0x02, 0x0a, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2f, 0x6a, 0x6f, 0x62, 0xa2, 0x02, 0x06, 0x43, 0x50, 0x41, 0x56, 0x53, 0x4a, 0xaa, 0x02,
	0x1f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x4a, 0x6f, 0x62,
	0xca, 0x02, 0x1f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x4a,
	0x6f, 0x62, 0xe2, 0x02, 0x2b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x5c, 0x4a, 0x6f, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x24, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x3a, 0x3a, 0x4a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_stack_job_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_stack_job_model_proto_rawDescData = file_cloud_planton_apis_v1_stack_job_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_stack_job_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_stack_job_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_stack_job_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_stack_job_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_stack_job_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_cloud_planton_apis_v1_stack_job_model_proto_goTypes = []interface{}{
	(*StackJob)(nil),                                  // 0: cloud.planton.apis.v1.stack.job.StackJob
	(*StackJobSpec)(nil),                              // 1: cloud.planton.apis.v1.stack.job.StackJobSpec
	(*StackJobStatus)(nil),                            // 2: cloud.planton.apis.v1.stack.job.StackJobStatus
	(*StackJobId)(nil),                                // 3: cloud.planton.apis.v1.stack.job.StackJobId
	(*ListStackJobsByFiltersQueryInput)(nil),          // 4: cloud.planton.apis.v1.stack.job.ListStackJobsByFiltersQueryInput
	(*StackJobList)(nil),                              // 5: cloud.planton.apis.v1.stack.job.StackJobList
	(*SetStackJobExecutionStatusCommandInput)(nil),    // 6: cloud.planton.apis.v1.stack.job.SetStackJobExecutionStatusCommandInput
	(*StackJobLogFileNameInfo)(nil),                   // 7: cloud.planton.apis.v1.stack.job.StackJobLogFileNameInfo
	(*StackJobProgressEvent)(nil),                     // 8: cloud.planton.apis.v1.stack.job.StackJobProgressEvent
	(*StackJobProgressStatusPayload)(nil),             // 9: cloud.planton.apis.v1.stack.job.StackJobProgressStatusPayload
	(*StackJobLogSnapshot)(nil),                       // 10: cloud.planton.apis.v1.stack.job.StackJobLogSnapshot
	(*StackJobLogPulumiOperationSnapshot)(nil),        // 11: cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot
	(*PulumiOperationResourceChangesSnapshot)(nil),    // 12: cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshot
	(*PulumiOperationDiffSnapshot)(nil),               // 13: cloud.planton.apis.v1.stack.job.PulumiOperationDiffSnapshot
	(*PulumiOperationResourceChangesSnapshotRow)(nil), // 14: cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshotRow
	(*CreateStackJobCommandInput)(nil),                // 15: cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput
	nil,                                               // 16: cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshot.UrnToRowMapEntry
	(*resource.Metadata)(nil),                         // 17: cloud.planton.apis.v1.commons.resource.Metadata
	(enums.ResourceType)(0),                           // 18: cloud.planton.apis.v1.commons.resource.enums.ResourceType
	(operationtype.StackJobOperationType)(0),          // 19: cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType
	(*resource.ResourceLifecycle)(nil),                // 20: cloud.planton.apis.v1.commons.resource.ResourceLifecycle
	(*audit.ResourceAudit)(nil),                       // 21: cloud.planton.apis.v1.commons.audit.ResourceAudit
	(executionstatus.StackJobExecutionStatus)(0),      // 22: cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus
	(*pagination.PageInfo)(nil),                       // 23: cloud.planton.apis.v1.commons.pagination.PageInfo
	(event.StackJobProgressEventType)(0),              // 24: cloud.planton.apis.v1.stack.job.progress.enums.event.StackJobProgressEventType
	(*engine.EngineEvent)(nil),                        // 25: cloud.planton.apis.v1.stack.pulumi.engine.EngineEvent
	(statusevent.StackJobProgressStatusEventType)(0),  // 26: cloud.planton.apis.v1.stack.job.progress.enums.statusevent.StackJobProgressStatusEventType
}
var file_cloud_planton_apis_v1_stack_job_model_proto_depIdxs = []int32{
	17, // 0: cloud.planton.apis.v1.stack.job.StackJob.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	1,  // 1: cloud.planton.apis.v1.stack.job.StackJob.spec:type_name -> cloud.planton.apis.v1.stack.job.StackJobSpec
	2,  // 2: cloud.planton.apis.v1.stack.job.StackJob.status:type_name -> cloud.planton.apis.v1.stack.job.StackJobStatus
	18, // 3: cloud.planton.apis.v1.stack.job.StackJobSpec.resource_type:type_name -> cloud.planton.apis.v1.commons.resource.enums.ResourceType
	19, // 4: cloud.planton.apis.v1.stack.job.StackJobSpec.operation_type:type_name -> cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType
	20, // 5: cloud.planton.apis.v1.stack.job.StackJobStatus.lifecycle:type_name -> cloud.planton.apis.v1.commons.resource.ResourceLifecycle
	21, // 6: cloud.planton.apis.v1.stack.job.StackJobStatus.audit:type_name -> cloud.planton.apis.v1.commons.audit.ResourceAudit
	22, // 7: cloud.planton.apis.v1.stack.job.StackJobStatus.execution_status:type_name -> cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus
	23, // 8: cloud.planton.apis.v1.stack.job.ListStackJobsByFiltersQueryInput.page_info:type_name -> cloud.planton.apis.v1.commons.pagination.PageInfo
	18, // 9: cloud.planton.apis.v1.stack.job.ListStackJobsByFiltersQueryInput.resource_type:type_name -> cloud.planton.apis.v1.commons.resource.enums.ResourceType
	19, // 10: cloud.planton.apis.v1.stack.job.ListStackJobsByFiltersQueryInput.operation_type:type_name -> cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType
	22, // 11: cloud.planton.apis.v1.stack.job.ListStackJobsByFiltersQueryInput.execution_status:type_name -> cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus
	0,  // 12: cloud.planton.apis.v1.stack.job.StackJobList.entries:type_name -> cloud.planton.apis.v1.stack.job.StackJob
	22, // 13: cloud.planton.apis.v1.stack.job.SetStackJobExecutionStatusCommandInput.execution_status:type_name -> cloud.planton.apis.v1.stack.job.enums.executionstatus.StackJobExecutionStatus
	19, // 14: cloud.planton.apis.v1.stack.job.StackJobLogFileNameInfo.operation_type:type_name -> cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType
	24, // 15: cloud.planton.apis.v1.stack.job.StackJobProgressEvent.event_type:type_name -> cloud.planton.apis.v1.stack.job.progress.enums.event.StackJobProgressEventType
	9,  // 16: cloud.planton.apis.v1.stack.job.StackJobProgressEvent.progress_status_payload:type_name -> cloud.planton.apis.v1.stack.job.StackJobProgressStatusPayload
	25, // 17: cloud.planton.apis.v1.stack.job.StackJobProgressEvent.engine_event_payload:type_name -> cloud.planton.apis.v1.stack.pulumi.engine.EngineEvent
	26, // 18: cloud.planton.apis.v1.stack.job.StackJobProgressStatusPayload.event_type:type_name -> cloud.planton.apis.v1.stack.job.progress.enums.statusevent.StackJobProgressStatusEventType
	11, // 19: cloud.planton.apis.v1.stack.job.StackJobLogSnapshot.refresh_snapshot:type_name -> cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot
	11, // 20: cloud.planton.apis.v1.stack.job.StackJobLogSnapshot.preview_snapshot:type_name -> cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot
	11, // 21: cloud.planton.apis.v1.stack.job.StackJobLogSnapshot.apply_snapshot:type_name -> cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot
	11, // 22: cloud.planton.apis.v1.stack.job.StackJobLogSnapshot.destroy_snapshot:type_name -> cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot
	12, // 23: cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot.resource_changes:type_name -> cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshot
	13, // 24: cloud.planton.apis.v1.stack.job.StackJobLogPulumiOperationSnapshot.diff:type_name -> cloud.planton.apis.v1.stack.job.PulumiOperationDiffSnapshot
	16, // 25: cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshot.urn_to_row_map:type_name -> cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshot.UrnToRowMapEntry
	19, // 26: cloud.planton.apis.v1.stack.job.CreateStackJobCommandInput.stack_job_operation_type:type_name -> cloud.planton.apis.v1.stack.job.enums.operationtype.StackJobOperationType
	14, // 27: cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshot.UrnToRowMapEntry.value:type_name -> cloud.planton.apis.v1.stack.job.PulumiOperationResourceChangesSnapshotRow
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_stack_job_model_proto_init() }
func file_cloud_planton_apis_v1_stack_job_model_proto_init() {
	if File_cloud_planton_apis_v1_stack_job_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStackJobsByFiltersQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStackJobExecutionStatusCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobLogFileNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobProgressStatusPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobLogSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackJobLogPulumiOperationSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiOperationResourceChangesSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiOperationDiffSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulumiOperationResourceChangesSnapshotRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStackJobCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_stack_job_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_stack_job_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_stack_job_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_stack_job_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_stack_job_model_proto = out.File
	file_cloud_planton_apis_v1_stack_job_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_stack_job_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_stack_job_model_proto_depIdxs = nil
}
