// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/integration/gitlab/proxy/io.proto

package proxy

import (
	project "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/sourcecode/project"
	proxy "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/github/proxy"
	enums "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/gitlab/proxy/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gitlab client info
type GitlabClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab host to send the request to ex: https://gitlab.com
	GitlabHost string `protobuf:"bytes,1,opt,name=gitlab_host,json=gitlabHost,proto3" json:"gitlab_host,omitempty"`
	// gitlab authorization type
	AuthorizationType enums.GitlabApiAuthorizationType `protobuf:"varint,2,opt,name=authorization_type,json=authorizationType,proto3,enum=cloud.planton.apis.v1.integration.gitlab.proxy.enums.GitlabApiAuthorizationType" json:"authorization_type,omitempty"`
	// api or oauth token to be used to query gitlab server
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GitlabClientInfo) Reset() {
	*x = GitlabClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabClientInfo) ProtoMessage() {}

func (x *GitlabClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabClientInfo.ProtoReflect.Descriptor instead.
func (*GitlabClientInfo) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{0}
}

func (x *GitlabClientInfo) GetGitlabHost() string {
	if x != nil {
		return x.GitlabHost
	}
	return ""
}

func (x *GitlabClientInfo) GetAuthorizationType() enums.GitlabApiAuthorizationType {
	if x != nil {
		return x.AuthorizationType
	}
	return enums.GitlabApiAuthorizationType(0)
}

func (x *GitlabClientInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// input to list projects in a group and its subgroups on gitlab
// https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects
type ListProjectsQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
}

func (x *ListProjectsQueryInput) Reset() {
	*x = ListProjectsQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsQueryInput) ProtoMessage() {}

func (x *ListProjectsQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsQueryInput.ProtoReflect.Descriptor instead.
func (*ListProjectsQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{1}
}

func (x *ListProjectsQueryInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

// input for query to get project on gitlab
type GetProjectQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// id of the project on gitlab
	GitlabProjectId string `protobuf:"bytes,2,opt,name=gitlab_project_id,json=gitlabProjectId,proto3" json:"gitlab_project_id,omitempty"`
}

func (x *GetProjectQueryInput) Reset() {
	*x = GetProjectQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectQueryInput) ProtoMessage() {}

func (x *GetProjectQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectQueryInput.ProtoReflect.Descriptor instead.
func (*GetProjectQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectQueryInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *GetProjectQueryInput) GetGitlabProjectId() string {
	if x != nil {
		return x.GitlabProjectId
	}
	return ""
}

// input for command to create a new git repository on gitlab
type CreProjectCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// group path configured on the code-server
	// proxy-server will only check for the groups starting from this path and does not check the parents of this group.
	// the provided credentials may not have access to the parents of this group.
	CodeServerGroupPath string `protobuf:"bytes,2,opt,name=code_server_group_path,json=codeServerGroupPath,proto3" json:"code_server_group_path,omitempty"`
	// path of the group on gitlab
	GroupPath string `protobuf:"bytes,3,opt,name=group_path,json=groupPath,proto3" json:"group_path,omitempty"`
	// name of the new project
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *CreProjectCommandInput) Reset() {
	*x = CreProjectCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreProjectCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreProjectCommandInput) ProtoMessage() {}

func (x *CreProjectCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreProjectCommandInput.ProtoReflect.Descriptor instead.
func (*CreProjectCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{3}
}

func (x *CreProjectCommandInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *CreProjectCommandInput) GetCodeServerGroupPath() string {
	if x != nil {
		return x.CodeServerGroupPath
	}
	return ""
}

func (x *CreProjectCommandInput) GetGroupPath() string {
	if x != nil {
		return x.GroupPath
	}
	return ""
}

func (x *CreProjectCommandInput) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

// input for command to apply a cookiecutter on a code project on github
type GitlabApplyTemplateCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info required to lookup template project info.
	// code project templates is only supported for template projects hosted on github
	TemplateProjectGithubClientInfo *proxy.GithubClientInfo `protobuf:"bytes,1,opt,name=template_project_github_client_info,json=templateProjectGithubClientInfo,proto3" json:"template_project_github_client_info,omitempty"`
	// gitlab client info required to clone and publish template changes to target project
	TargetProjectGitlabClientInfo *GitlabClientInfo `protobuf:"bytes,2,opt,name=target_project_gitlab_client_info,json=targetProjectGitlabClientInfo,proto3" json:"target_project_gitlab_client_info,omitempty"`
	// template code project
	TemplateProject *project.CodeProject `protobuf:"bytes,3,opt,name=template_project,json=templateProject,proto3" json:"template_project,omitempty"`
	// code project for which the template should be applied
	TargetCodeProject *project.CodeProject `protobuf:"bytes,4,opt,name=target_code_project,json=targetCodeProject,proto3" json:"target_code_project,omitempty"`
}

func (x *GitlabApplyTemplateCommandInput) Reset() {
	*x = GitlabApplyTemplateCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabApplyTemplateCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabApplyTemplateCommandInput) ProtoMessage() {}

func (x *GitlabApplyTemplateCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabApplyTemplateCommandInput.ProtoReflect.Descriptor instead.
func (*GitlabApplyTemplateCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{4}
}

func (x *GitlabApplyTemplateCommandInput) GetTemplateProjectGithubClientInfo() *proxy.GithubClientInfo {
	if x != nil {
		return x.TemplateProjectGithubClientInfo
	}
	return nil
}

func (x *GitlabApplyTemplateCommandInput) GetTargetProjectGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.TargetProjectGitlabClientInfo
	}
	return nil
}

func (x *GitlabApplyTemplateCommandInput) GetTemplateProject() *project.CodeProject {
	if x != nil {
		return x.TemplateProject
	}
	return nil
}

func (x *GitlabApplyTemplateCommandInput) GetTargetCodeProject() *project.CodeProject {
	if x != nil {
		return x.TargetCodeProject
	}
	return nil
}

// input for command to add list of variables to a gitlab project
type AddVariablesToProjectCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// id of the project on gitlab
	GitlabProjectId string `protobuf:"bytes,2,opt,name=gitlab_project_id,json=gitlabProjectId,proto3" json:"gitlab_project_id,omitempty"`
	// variables to be added to the project
	// the key is the name of the variable and value is the value of the variable
	Variables map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddVariablesToProjectCommandInput) Reset() {
	*x = AddVariablesToProjectCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVariablesToProjectCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVariablesToProjectCommandInput) ProtoMessage() {}

func (x *AddVariablesToProjectCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVariablesToProjectCommandInput.ProtoReflect.Descriptor instead.
func (*AddVariablesToProjectCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{5}
}

func (x *AddVariablesToProjectCommandInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *AddVariablesToProjectCommandInput) GetGitlabProjectId() string {
	if x != nil {
		return x.GitlabProjectId
	}
	return ""
}

func (x *AddVariablesToProjectCommandInput) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

// input for command to add list of variables to a gitlab group
type AddVariablesToGroupCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// id of the group on gitlab
	GitlabGroupId string `protobuf:"bytes,2,opt,name=gitlab_group_id,json=gitlabGroupId,proto3" json:"gitlab_group_id,omitempty"`
	// variables to be added to the group
	// the key is the name of the variable and value is the value of the variable
	Variables map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddVariablesToGroupCommandInput) Reset() {
	*x = AddVariablesToGroupCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVariablesToGroupCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVariablesToGroupCommandInput) ProtoMessage() {}

func (x *AddVariablesToGroupCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVariablesToGroupCommandInput.ProtoReflect.Descriptor instead.
func (*AddVariablesToGroupCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{6}
}

func (x *AddVariablesToGroupCommandInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *AddVariablesToGroupCommandInput) GetGitlabGroupId() string {
	if x != nil {
		return x.GitlabGroupId
	}
	return ""
}

func (x *AddVariablesToGroupCommandInput) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

// input for query to get group on gitlab
type GetGroupQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// id of the group on gitlab
	GitlabGroupId string `protobuf:"bytes,2,opt,name=gitlab_group_id,json=gitlabGroupId,proto3" json:"gitlab_group_id,omitempty"`
}

func (x *GetGroupQueryInput) Reset() {
	*x = GetGroupQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupQueryInput) ProtoMessage() {}

func (x *GetGroupQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupQueryInput.ProtoReflect.Descriptor instead.
func (*GetGroupQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{7}
}

func (x *GetGroupQueryInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *GetGroupQueryInput) GetGitlabGroupId() string {
	if x != nil {
		return x.GitlabGroupId
	}
	return ""
}

// input for query to get code project profile of a gitlab project
type GetGitlabCodeProjectProfileQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info required to clone project
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// id of the gitlab project
	GitlabProjectId string `protobuf:"bytes,2,opt,name=gitlab_project_id,json=gitlabProjectId,proto3" json:"gitlab_project_id,omitempty"`
}

func (x *GetGitlabCodeProjectProfileQueryInput) Reset() {
	*x = GetGitlabCodeProjectProfileQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitlabCodeProjectProfileQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitlabCodeProjectProfileQueryInput) ProtoMessage() {}

func (x *GetGitlabCodeProjectProfileQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitlabCodeProjectProfileQueryInput.ProtoReflect.Descriptor instead.
func (*GetGitlabCodeProjectProfileQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{8}
}

func (x *GetGitlabCodeProjectProfileQueryInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *GetGitlabCodeProjectProfileQueryInput) GetGitlabProjectId() string {
	if x != nil {
		return x.GitlabProjectId
	}
	return ""
}

// input for command to add files to a project on gitlab
type AddFilesToGitlabProjectCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gitlab client info required to clone project and push changes
	GitlabClientInfo *GitlabClientInfo `protobuf:"bytes,1,opt,name=gitlab_client_info,json=gitlabClientInfo,proto3" json:"gitlab_client_info,omitempty"`
	// id of the gitlab project to which the files are to be added
	GitlabProjectId string `protobuf:"bytes,2,opt,name=gitlab_project_id,json=gitlabProjectId,proto3" json:"gitlab_project_id,omitempty"`
	// files to be added to the project
	CodeProjectFiles []*project.CodeProjectFile `protobuf:"bytes,3,rep,name=code_project_files,json=codeProjectFiles,proto3" json:"code_project_files,omitempty"`
}

func (x *AddFilesToGitlabProjectCommandInput) Reset() {
	*x = AddFilesToGitlabProjectCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFilesToGitlabProjectCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFilesToGitlabProjectCommandInput) ProtoMessage() {}

func (x *AddFilesToGitlabProjectCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFilesToGitlabProjectCommandInput.ProtoReflect.Descriptor instead.
func (*AddFilesToGitlabProjectCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP(), []int{9}
}

func (x *AddFilesToGitlabProjectCommandInput) GetGitlabClientInfo() *GitlabClientInfo {
	if x != nil {
		return x.GitlabClientInfo
	}
	return nil
}

func (x *AddFilesToGitlabProjectCommandInput) GetGitlabProjectId() string {
	if x != nil {
		return x.GitlabProjectId
	}
	return ""
}

func (x *AddFilesToGitlabProjectCommandInput) GetCodeProjectFiles() []*project.CodeProjectFile {
	if x != nil {
		return x.CodeProjectFiles
	}
	return nil
}

var File_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDesc = []byte{
	0x0a, 0x37, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x40, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x41, 0x70, 0x69, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb2, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xff, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xae, 0x04, 0x0a, 0x1f, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x23, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x78, 0x0a, 0x13, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf5, 0x02, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x7c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a,
	0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xbd, 0x02, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x42, 0x89, 0x03, 0x0a, 0x3c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x42, 0x07, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0xa2, 0x02, 0x07, 0x43,
	0x50, 0x41, 0x56, 0x49, 0x47, 0x50, 0xaa, 0x02, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0xca, 0x02, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x5c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0xe2, 0x02, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31,
	0x5c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x5c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x3a, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescData = file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDesc
)

func file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDescData
}

var file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_goTypes = []interface{}{
	(*GitlabClientInfo)(nil),                      // 0: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	(*ListProjectsQueryInput)(nil),                // 1: cloud.planton.apis.v1.integration.gitlab.proxy.ListProjectsQueryInput
	(*GetProjectQueryInput)(nil),                  // 2: cloud.planton.apis.v1.integration.gitlab.proxy.GetProjectQueryInput
	(*CreProjectCommandInput)(nil),                // 3: cloud.planton.apis.v1.integration.gitlab.proxy.CreProjectCommandInput
	(*GitlabApplyTemplateCommandInput)(nil),       // 4: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabApplyTemplateCommandInput
	(*AddVariablesToProjectCommandInput)(nil),     // 5: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToProjectCommandInput
	(*AddVariablesToGroupCommandInput)(nil),       // 6: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToGroupCommandInput
	(*GetGroupQueryInput)(nil),                    // 7: cloud.planton.apis.v1.integration.gitlab.proxy.GetGroupQueryInput
	(*GetGitlabCodeProjectProfileQueryInput)(nil), // 8: cloud.planton.apis.v1.integration.gitlab.proxy.GetGitlabCodeProjectProfileQueryInput
	(*AddFilesToGitlabProjectCommandInput)(nil),   // 9: cloud.planton.apis.v1.integration.gitlab.proxy.AddFilesToGitlabProjectCommandInput
	nil,                                   // 10: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToProjectCommandInput.VariablesEntry
	nil,                                   // 11: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToGroupCommandInput.VariablesEntry
	(enums.GitlabApiAuthorizationType)(0), // 12: cloud.planton.apis.v1.integration.gitlab.proxy.enums.GitlabApiAuthorizationType
	(*proxy.GithubClientInfo)(nil),        // 13: cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	(*project.CodeProject)(nil),           // 14: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProject
	(*project.CodeProjectFile)(nil),       // 15: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectFile
}
var file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_depIdxs = []int32{
	12, // 0: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo.authorization_type:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.enums.GitlabApiAuthorizationType
	0,  // 1: cloud.planton.apis.v1.integration.gitlab.proxy.ListProjectsQueryInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	0,  // 2: cloud.planton.apis.v1.integration.gitlab.proxy.GetProjectQueryInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	0,  // 3: cloud.planton.apis.v1.integration.gitlab.proxy.CreProjectCommandInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	13, // 4: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabApplyTemplateCommandInput.template_project_github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	0,  // 5: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabApplyTemplateCommandInput.target_project_gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	14, // 6: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabApplyTemplateCommandInput.template_project:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProject
	14, // 7: cloud.planton.apis.v1.integration.gitlab.proxy.GitlabApplyTemplateCommandInput.target_code_project:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProject
	0,  // 8: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToProjectCommandInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	10, // 9: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToProjectCommandInput.variables:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToProjectCommandInput.VariablesEntry
	0,  // 10: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToGroupCommandInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	11, // 11: cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToGroupCommandInput.variables:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.AddVariablesToGroupCommandInput.VariablesEntry
	0,  // 12: cloud.planton.apis.v1.integration.gitlab.proxy.GetGroupQueryInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	0,  // 13: cloud.planton.apis.v1.integration.gitlab.proxy.GetGitlabCodeProjectProfileQueryInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	0,  // 14: cloud.planton.apis.v1.integration.gitlab.proxy.AddFilesToGitlabProjectCommandInput.gitlab_client_info:type_name -> cloud.planton.apis.v1.integration.gitlab.proxy.GitlabClientInfo
	15, // 15: cloud.planton.apis.v1.integration.gitlab.proxy.AddFilesToGitlabProjectCommandInput.code_project_files:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.CodeProjectFile
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_init() }
func file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_init() {
	if File_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreProjectCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabApplyTemplateCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVariablesToProjectCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVariablesToGroupCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitlabCodeProjectProfileQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFilesToGitlabProjectCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto = out.File
	file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_rawDesc = nil
	file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_goTypes = nil
	file_cloud_planton_apis_v1_integration_gitlab_proxy_io_proto_depIdxs = nil
}
