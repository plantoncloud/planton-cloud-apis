// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/integration/github/proxy/model.proto

package proxy

import (
	rpc "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/sourcecode/project/rpc"
	enums1 "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/code2cloud/develop/sourcecode/server/rpc/enums"
	enums "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/integration/github/proxy/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// github client info
type GithubClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github host to send the request to ex: https://github.com
	GithubHost string `protobuf:"bytes,1,opt,name=github_host,json=githubHost,proto3" json:"github_host,omitempty"`
	// github authorization type
	AuthorizationType enums.GithubApiAuthorizationType `protobuf:"varint,2,opt,name=authorization_type,json=authorizationType,proto3,enum=cloud.planton.apis.v1.integration.github.proxy.enums.GithubApiAuthorizationType" json:"authorization_type,omitempty"`
	// api token to be used to query github server when authorization type is api token
	ApiToken string `protobuf:"bytes,3,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	// github app installation details to be used to query github server when authorization type is github app
	GithubAppInstallation *GithubAppInstallation `protobuf:"bytes,4,opt,name=github_app_installation,json=githubAppInstallation,proto3" json:"github_app_installation,omitempty"`
}

func (x *GithubClientInfo) Reset() {
	*x = GithubClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubClientInfo) ProtoMessage() {}

func (x *GithubClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubClientInfo.ProtoReflect.Descriptor instead.
func (*GithubClientInfo) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{0}
}

func (x *GithubClientInfo) GetGithubHost() string {
	if x != nil {
		return x.GithubHost
	}
	return ""
}

func (x *GithubClientInfo) GetAuthorizationType() enums.GithubApiAuthorizationType {
	if x != nil {
		return x.AuthorizationType
	}
	return enums.GithubApiAuthorizationType(0)
}

func (x *GithubClientInfo) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *GithubClientInfo) GetGithubAppInstallation() *GithubAppInstallation {
	if x != nil {
		return x.GithubAppInstallation
	}
	return nil
}

// github app installation information
type GithubAppInstallation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the github app
	GithubAppId int64 `protobuf:"varint,1,opt,name=github_app_id,json=githubAppId,proto3" json:"github_app_id,omitempty"`
	// base64 encoded private key generated for the github app
	GithubAppPrivateKeyBase64 string `protobuf:"bytes,2,opt,name=github_app_private_key_base64,json=githubAppPrivateKeyBase64,proto3" json:"github_app_private_key_base64,omitempty"`
	// id of the github app installation
	GithubAppInstallId int64 `protobuf:"varint,3,opt,name=github_app_install_id,json=githubAppInstallId,proto3" json:"github_app_install_id,omitempty"`
	// type of the account of the github app installation
	InstallOwnerType enums1.GithubAppInstallOwnerType `protobuf:"varint,4,opt,name=install_owner_type,json=installOwnerType,proto3,enum=cloud.planton.apis.v1.code2cloud.develop.sourcecode.server.rpc.enums.GithubAppInstallOwnerType" json:"install_owner_type,omitempty"`
	// id of the github app installation.
	// this is the name of the organization when the app is installed on an organization and id of the user when
	// the app is installed on a personal user account.
	// this value is stored in the system as group_id_on_code_server_host attribute.
	GithubAppInstallationOwnerId string `protobuf:"bytes,5,opt,name=github_app_installation_owner_id,json=githubAppInstallationOwnerId,proto3" json:"github_app_installation_owner_id,omitempty"`
}

func (x *GithubAppInstallation) Reset() {
	*x = GithubAppInstallation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubAppInstallation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubAppInstallation) ProtoMessage() {}

func (x *GithubAppInstallation) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubAppInstallation.ProtoReflect.Descriptor instead.
func (*GithubAppInstallation) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{1}
}

func (x *GithubAppInstallation) GetGithubAppId() int64 {
	if x != nil {
		return x.GithubAppId
	}
	return 0
}

func (x *GithubAppInstallation) GetGithubAppPrivateKeyBase64() string {
	if x != nil {
		return x.GithubAppPrivateKeyBase64
	}
	return ""
}

func (x *GithubAppInstallation) GetGithubAppInstallId() int64 {
	if x != nil {
		return x.GithubAppInstallId
	}
	return 0
}

func (x *GithubAppInstallation) GetInstallOwnerType() enums1.GithubAppInstallOwnerType {
	if x != nil {
		return x.InstallOwnerType
	}
	return enums1.GithubAppInstallOwnerType(0)
}

func (x *GithubAppInstallation) GetGithubAppInstallationOwnerId() string {
	if x != nil {
		return x.GithubAppInstallationOwnerId
	}
	return ""
}

// input to list organization or user repositories on github
// https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories
type ListRepositoriesQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
}

func (x *ListRepositoriesQueryInput) Reset() {
	*x = ListRepositoriesQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesQueryInput) ProtoMessage() {}

func (x *ListRepositoriesQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesQueryInput.ProtoReflect.Descriptor instead.
func (*ListRepositoriesQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{2}
}

func (x *ListRepositoriesQueryInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

// input to list organization or user repositories on github
// https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories
type GetRepositoryQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
	// id of the repository on github
	RepositoryId string `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *GetRepositoryQueryInput) Reset() {
	*x = GetRepositoryQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryQueryInput) ProtoMessage() {}

func (x *GetRepositoryQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryQueryInput.ProtoReflect.Descriptor instead.
func (*GetRepositoryQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{3}
}

func (x *GetRepositoryQueryInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

func (x *GetRepositoryQueryInput) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

// input for command to create a new git repository on github
type CreRepositoryCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
	// name of the new repository to be created on github
	RepositoryName string `protobuf:"bytes,2,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
}

func (x *CreRepositoryCommandInput) Reset() {
	*x = CreRepositoryCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreRepositoryCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreRepositoryCommandInput) ProtoMessage() {}

func (x *CreRepositoryCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreRepositoryCommandInput.ProtoReflect.Descriptor instead.
func (*CreRepositoryCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{4}
}

func (x *CreRepositoryCommandInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

func (x *CreRepositoryCommandInput) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

// input for command to apply a cookiecutter on a code project on github
type GithubApplyTemplateCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info required to lookup template repo on github
	TemplateProjectGithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=template_project_github_client_info,json=templateProjectGithubClientInfo,proto3" json:"template_project_github_client_info,omitempty"`
	// github client info required to clone and push changes for target project
	TargetProjectGithubClientInfo *GithubClientInfo `protobuf:"bytes,2,opt,name=target_project_github_client_info,json=targetProjectGithubClientInfo,proto3" json:"target_project_github_client_info,omitempty"`
	// template code project
	TemplateProject *rpc.CodeProject `protobuf:"bytes,3,opt,name=template_project,json=templateProject,proto3" json:"template_project,omitempty"`
	// code project for which the template should be applied
	TargetCodeProject *rpc.CodeProject `protobuf:"bytes,4,opt,name=target_code_project,json=targetCodeProject,proto3" json:"target_code_project,omitempty"`
}

func (x *GithubApplyTemplateCommandInput) Reset() {
	*x = GithubApplyTemplateCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubApplyTemplateCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubApplyTemplateCommandInput) ProtoMessage() {}

func (x *GithubApplyTemplateCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubApplyTemplateCommandInput.ProtoReflect.Descriptor instead.
func (*GithubApplyTemplateCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{5}
}

func (x *GithubApplyTemplateCommandInput) GetTemplateProjectGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.TemplateProjectGithubClientInfo
	}
	return nil
}

func (x *GithubApplyTemplateCommandInput) GetTargetProjectGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.TargetProjectGithubClientInfo
	}
	return nil
}

func (x *GithubApplyTemplateCommandInput) GetTemplateProject() *rpc.CodeProject {
	if x != nil {
		return x.TemplateProject
	}
	return nil
}

func (x *GithubApplyTemplateCommandInput) GetTargetCodeProject() *rpc.CodeProject {
	if x != nil {
		return x.TargetCodeProject
	}
	return nil
}

// input for command to add list of secrets to a github repository
type AddSecretsToRepoCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info required to lookup template repo on github
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
	// id of the github repository to which the secrets are to be added
	GithubRepositoryId string `protobuf:"bytes,2,opt,name=github_repository_id,json=githubRepositoryId,proto3" json:"github_repository_id,omitempty"`
	// secrets to be added to the repository
	// the key is the name of the secret and value is the value of the secret
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddSecretsToRepoCommandInput) Reset() {
	*x = AddSecretsToRepoCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecretsToRepoCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecretsToRepoCommandInput) ProtoMessage() {}

func (x *AddSecretsToRepoCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecretsToRepoCommandInput.ProtoReflect.Descriptor instead.
func (*AddSecretsToRepoCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{6}
}

func (x *AddSecretsToRepoCommandInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

func (x *AddSecretsToRepoCommandInput) GetGithubRepositoryId() string {
	if x != nil {
		return x.GithubRepositoryId
	}
	return ""
}

func (x *AddSecretsToRepoCommandInput) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// input for command to add list of secrets to a github organization
type AddSecretsToOrgCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info required to lookup template repo on github
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
	// id of the github organization to which the secrets are to be added
	GithubOrgId string `protobuf:"bytes,2,opt,name=github_org_id,json=githubOrgId,proto3" json:"github_org_id,omitempty"`
	// secrets to be added to the organization
	// the key is the name of the secret and value is the value of the secret
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddSecretsToOrgCommandInput) Reset() {
	*x = AddSecretsToOrgCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecretsToOrgCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecretsToOrgCommandInput) ProtoMessage() {}

func (x *AddSecretsToOrgCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecretsToOrgCommandInput.ProtoReflect.Descriptor instead.
func (*AddSecretsToOrgCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{7}
}

func (x *AddSecretsToOrgCommandInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

func (x *AddSecretsToOrgCommandInput) GetGithubOrgId() string {
	if x != nil {
		return x.GithubOrgId
	}
	return ""
}

func (x *AddSecretsToOrgCommandInput) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// input for query to get code project profile of a github repository
type GetGithubCodeProjectProfileQueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info required to clone github repository
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
	// id of the github repository
	GithubRepositoryId string `protobuf:"bytes,2,opt,name=github_repository_id,json=githubRepositoryId,proto3" json:"github_repository_id,omitempty"`
}

func (x *GetGithubCodeProjectProfileQueryInput) Reset() {
	*x = GetGithubCodeProjectProfileQueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubCodeProjectProfileQueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubCodeProjectProfileQueryInput) ProtoMessage() {}

func (x *GetGithubCodeProjectProfileQueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubCodeProjectProfileQueryInput.ProtoReflect.Descriptor instead.
func (*GetGithubCodeProjectProfileQueryInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{8}
}

func (x *GetGithubCodeProjectProfileQueryInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

func (x *GetGithubCodeProjectProfileQueryInput) GetGithubRepositoryId() string {
	if x != nil {
		return x.GithubRepositoryId
	}
	return ""
}

// input for command to synchronize magic pipeline files on github
type SynchronizeGithubMagicPipelineFilesCommandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github client info required to lookup template repo on github
	GithubClientInfo *GithubClientInfo `protobuf:"bytes,1,opt,name=github_client_info,json=githubClientInfo,proto3" json:"github_client_info,omitempty"`
	// id of the github repository to which the files are to be added
	GithubRepositoryId string `protobuf:"bytes,2,opt,name=github_repository_id,json=githubRepositoryId,proto3" json:"github_repository_id,omitempty"`
	// prefix to be used for identifying the existing magic pipelines to be deleted before adding new files
	MagicPipelineFilesPrefix string `protobuf:"bytes,3,opt,name=magic_pipeline_files_prefix,json=magicPipelineFilesPrefix,proto3" json:"magic_pipeline_files_prefix,omitempty"`
	// files to be added to the repository
	MagicPipelineFiles []*rpc.CodeProjectFile `protobuf:"bytes,4,rep,name=magic_pipeline_files,json=magicPipelineFiles,proto3" json:"magic_pipeline_files,omitempty"`
}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) Reset() {
	*x = SynchronizeGithubMagicPipelineFilesCommandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeGithubMagicPipelineFilesCommandInput) ProtoMessage() {}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeGithubMagicPipelineFilesCommandInput.ProtoReflect.Descriptor instead.
func (*SynchronizeGithubMagicPipelineFilesCommandInput) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP(), []int{9}
}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) GetGithubClientInfo() *GithubClientInfo {
	if x != nil {
		return x.GithubClientInfo
	}
	return nil
}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) GetGithubRepositoryId() string {
	if x != nil {
		return x.GithubRepositoryId
	}
	return ""
}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) GetMagicPipelineFilesPrefix() string {
	if x != nil {
		return x.MagicPipelineFilesPrefix
	}
	return ""
}

func (x *SynchronizeGithubMagicPipelineFilesCommandInput) GetMagicPipelineFiles() []*rpc.CodeProjectFile {
	if x != nil {
		return x.MagicPipelineFiles
	}
	return nil
}

var File_cloud_planton_apis_v1_integration_github_proxy_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x40, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02,
	0x0a, 0x10, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x69,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x7d, 0x0a, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x88, 0x03, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x12, 0x31, 0x0a, 0x15, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x1f, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x23, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x77, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x7c, 0x0a,
	0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x1c,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x73,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe1, 0x02, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x54, 0x6f,
	0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x54, 0x6f, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a,
	0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a,
	0x14, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22,
	0x97, 0x03, 0x0a, 0x2f, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x8c, 0x03, 0x0a, 0x3c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0xa2, 0x02, 0x07, 0x43, 0x50, 0x41, 0x56, 0x49,
	0x47, 0x50, 0xaa, 0x02, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0xca, 0x02, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5c, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0xe2, 0x02, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5c,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x34, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescData = file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cloud_planton_apis_v1_integration_github_proxy_model_proto_goTypes = []interface{}{
	(*GithubClientInfo)(nil),                                // 0: cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	(*GithubAppInstallation)(nil),                           // 1: cloud.planton.apis.v1.integration.github.proxy.GithubAppInstallation
	(*ListRepositoriesQueryInput)(nil),                      // 2: cloud.planton.apis.v1.integration.github.proxy.ListRepositoriesQueryInput
	(*GetRepositoryQueryInput)(nil),                         // 3: cloud.planton.apis.v1.integration.github.proxy.GetRepositoryQueryInput
	(*CreRepositoryCommandInput)(nil),                       // 4: cloud.planton.apis.v1.integration.github.proxy.CreRepositoryCommandInput
	(*GithubApplyTemplateCommandInput)(nil),                 // 5: cloud.planton.apis.v1.integration.github.proxy.GithubApplyTemplateCommandInput
	(*AddSecretsToRepoCommandInput)(nil),                    // 6: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToRepoCommandInput
	(*AddSecretsToOrgCommandInput)(nil),                     // 7: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToOrgCommandInput
	(*GetGithubCodeProjectProfileQueryInput)(nil),           // 8: cloud.planton.apis.v1.integration.github.proxy.GetGithubCodeProjectProfileQueryInput
	(*SynchronizeGithubMagicPipelineFilesCommandInput)(nil), // 9: cloud.planton.apis.v1.integration.github.proxy.SynchronizeGithubMagicPipelineFilesCommandInput
	nil,                                   // 10: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToRepoCommandInput.SecretsEntry
	nil,                                   // 11: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToOrgCommandInput.SecretsEntry
	(enums.GithubApiAuthorizationType)(0), // 12: cloud.planton.apis.v1.integration.github.proxy.enums.GithubApiAuthorizationType
	(enums1.GithubAppInstallOwnerType)(0), // 13: cloud.planton.apis.v1.code2cloud.develop.sourcecode.server.rpc.enums.GithubAppInstallOwnerType
	(*rpc.CodeProject)(nil),               // 14: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProject
	(*rpc.CodeProjectFile)(nil),           // 15: cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectFile
}
var file_cloud_planton_apis_v1_integration_github_proxy_model_proto_depIdxs = []int32{
	12, // 0: cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo.authorization_type:type_name -> cloud.planton.apis.v1.integration.github.proxy.enums.GithubApiAuthorizationType
	1,  // 1: cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo.github_app_installation:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubAppInstallation
	13, // 2: cloud.planton.apis.v1.integration.github.proxy.GithubAppInstallation.install_owner_type:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.server.rpc.enums.GithubAppInstallOwnerType
	0,  // 3: cloud.planton.apis.v1.integration.github.proxy.ListRepositoriesQueryInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	0,  // 4: cloud.planton.apis.v1.integration.github.proxy.GetRepositoryQueryInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	0,  // 5: cloud.planton.apis.v1.integration.github.proxy.CreRepositoryCommandInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	0,  // 6: cloud.planton.apis.v1.integration.github.proxy.GithubApplyTemplateCommandInput.template_project_github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	0,  // 7: cloud.planton.apis.v1.integration.github.proxy.GithubApplyTemplateCommandInput.target_project_github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	14, // 8: cloud.planton.apis.v1.integration.github.proxy.GithubApplyTemplateCommandInput.template_project:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProject
	14, // 9: cloud.planton.apis.v1.integration.github.proxy.GithubApplyTemplateCommandInput.target_code_project:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProject
	0,  // 10: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToRepoCommandInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	10, // 11: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToRepoCommandInput.secrets:type_name -> cloud.planton.apis.v1.integration.github.proxy.AddSecretsToRepoCommandInput.SecretsEntry
	0,  // 12: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToOrgCommandInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	11, // 13: cloud.planton.apis.v1.integration.github.proxy.AddSecretsToOrgCommandInput.secrets:type_name -> cloud.planton.apis.v1.integration.github.proxy.AddSecretsToOrgCommandInput.SecretsEntry
	0,  // 14: cloud.planton.apis.v1.integration.github.proxy.GetGithubCodeProjectProfileQueryInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	0,  // 15: cloud.planton.apis.v1.integration.github.proxy.SynchronizeGithubMagicPipelineFilesCommandInput.github_client_info:type_name -> cloud.planton.apis.v1.integration.github.proxy.GithubClientInfo
	15, // 16: cloud.planton.apis.v1.integration.github.proxy.SynchronizeGithubMagicPipelineFilesCommandInput.magic_pipeline_files:type_name -> cloud.planton.apis.v1.code2cloud.develop.sourcecode.project.rpc.CodeProjectFile
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_integration_github_proxy_model_proto_init() }
func file_cloud_planton_apis_v1_integration_github_proxy_model_proto_init() {
	if File_cloud_planton_apis_v1_integration_github_proxy_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubAppInstallation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreRepositoryCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubApplyTemplateCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecretsToRepoCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecretsToOrgCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubCodeProjectProfileQueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchronizeGithubMagicPipelineFilesCommandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_integration_github_proxy_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_integration_github_proxy_model_proto_depIdxs,
		MessageInfos:      file_cloud_planton_apis_v1_integration_github_proxy_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_integration_github_proxy_model_proto = out.File
	file_cloud_planton_apis_v1_integration_github_proxy_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_integration_github_proxy_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_integration_github_proxy_model_proto_depIdxs = nil
}
