// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cloud/planton/apis/v1/commons/testing/resource/field/input/model.proto

package input

import (
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/buf/validate"
	resource "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/field/options"
	_ "github.com/plantoncloud/planton-cloud-apis/zzgo/cloud/planton/apis/v1/commons/resource/metadata/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumFieldTest_SampleEnum int32

const (
	EnumFieldTest_UNSPECIFIED EnumFieldTest_SampleEnum = 0
	EnumFieldTest_VALUE_1     EnumFieldTest_SampleEnum = 1
	EnumFieldTest_VALUE_2     EnumFieldTest_SampleEnum = 2
)

// Enum value maps for EnumFieldTest_SampleEnum.
var (
	EnumFieldTest_SampleEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "VALUE_1",
		2: "VALUE_2",
	}
	EnumFieldTest_SampleEnum_value = map[string]int32{
		"UNSPECIFIED": 0,
		"VALUE_1":     1,
		"VALUE_2":     2,
	}
)

func (x EnumFieldTest_SampleEnum) Enum() *EnumFieldTest_SampleEnum {
	p := new(EnumFieldTest_SampleEnum)
	*p = x
	return p
}

func (x EnumFieldTest_SampleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumFieldTest_SampleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_enumTypes[0].Descriptor()
}

func (EnumFieldTest_SampleEnum) Type() protoreflect.EnumType {
	return &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_enumTypes[0]
}

func (x EnumFieldTest_SampleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumFieldTest_SampleEnum.Descriptor instead.
func (EnumFieldTest_SampleEnum) EnumDescriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{11, 0}
}

// A message with a string field that must match a regex, and a string field without regex.
type RegexFieldsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexStringField   string `protobuf:"bytes,1,opt,name=regex_string_field,json=regexStringField,proto3" json:"regex_string_field,omitempty"`
	NoRegexStringField string `protobuf:"bytes,2,opt,name=no_regex_string_field,json=noRegexStringField,proto3" json:"no_regex_string_field,omitempty"`
}

func (x *RegexFieldsTest) Reset() {
	*x = RegexFieldsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexFieldsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexFieldsTest) ProtoMessage() {}

func (x *RegexFieldsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexFieldsTest.ProtoReflect.Descriptor instead.
func (*RegexFieldsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{0}
}

func (x *RegexFieldsTest) GetRegexStringField() string {
	if x != nil {
		return x.RegexStringField
	}
	return ""
}

func (x *RegexFieldsTest) GetNoRegexStringField() string {
	if x != nil {
		return x.NoRegexStringField
	}
	return ""
}

// A message with a string field that must match a regex, and a string field without regex.
type RegexFieldsProtoValidateTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexStringField   string `protobuf:"bytes,1,opt,name=regex_string_field,json=regexStringField,proto3" json:"regex_string_field,omitempty"`
	NoRegexStringField string `protobuf:"bytes,2,opt,name=no_regex_string_field,json=noRegexStringField,proto3" json:"no_regex_string_field,omitempty"`
}

func (x *RegexFieldsProtoValidateTest) Reset() {
	*x = RegexFieldsProtoValidateTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexFieldsProtoValidateTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexFieldsProtoValidateTest) ProtoMessage() {}

func (x *RegexFieldsProtoValidateTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexFieldsProtoValidateTest.ProtoReflect.Descriptor instead.
func (*RegexFieldsProtoValidateTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{1}
}

func (x *RegexFieldsProtoValidateTest) GetRegexStringField() string {
	if x != nil {
		return x.RegexStringField
	}
	return ""
}

func (x *RegexFieldsProtoValidateTest) GetNoRegexStringField() string {
	if x != nil {
		return x.NoRegexStringField
	}
	return ""
}

// A message with a string field that must match a regex, and a string field without regex.
type RegexSplitFieldsProtoValidateTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexStringField   string `protobuf:"bytes,1,opt,name=regex_string_field,json=regexStringField,proto3" json:"regex_string_field,omitempty"`
	NoRegexStringField string `protobuf:"bytes,2,opt,name=no_regex_string_field,json=noRegexStringField,proto3" json:"no_regex_string_field,omitempty"`
}

func (x *RegexSplitFieldsProtoValidateTest) Reset() {
	*x = RegexSplitFieldsProtoValidateTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexSplitFieldsProtoValidateTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexSplitFieldsProtoValidateTest) ProtoMessage() {}

func (x *RegexSplitFieldsProtoValidateTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexSplitFieldsProtoValidateTest.ProtoReflect.Descriptor instead.
func (*RegexSplitFieldsProtoValidateTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{2}
}

func (x *RegexSplitFieldsProtoValidateTest) GetRegexStringField() string {
	if x != nil {
		return x.RegexStringField
	}
	return ""
}

func (x *RegexSplitFieldsProtoValidateTest) GetNoRegexStringField() string {
	if x != nil {
		return x.NoRegexStringField
	}
	return ""
}

// A message with a string field that must match a regex, and a string field without regex.
type RegexSplitWithNotRequiredFieldsProtoValidateTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexStringField   string `protobuf:"bytes,1,opt,name=regex_string_field,json=regexStringField,proto3" json:"regex_string_field,omitempty"`
	NoRegexStringField string `protobuf:"bytes,2,opt,name=no_regex_string_field,json=noRegexStringField,proto3" json:"no_regex_string_field,omitempty"`
}

func (x *RegexSplitWithNotRequiredFieldsProtoValidateTest) Reset() {
	*x = RegexSplitWithNotRequiredFieldsProtoValidateTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexSplitWithNotRequiredFieldsProtoValidateTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexSplitWithNotRequiredFieldsProtoValidateTest) ProtoMessage() {}

func (x *RegexSplitWithNotRequiredFieldsProtoValidateTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexSplitWithNotRequiredFieldsProtoValidateTest.ProtoReflect.Descriptor instead.
func (*RegexSplitWithNotRequiredFieldsProtoValidateTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{3}
}

func (x *RegexSplitWithNotRequiredFieldsProtoValidateTest) GetRegexStringField() string {
	if x != nil {
		return x.RegexStringField
	}
	return ""
}

func (x *RegexSplitWithNotRequiredFieldsProtoValidateTest) GetNoRegexStringField() string {
	if x != nil {
		return x.NoRegexStringField
	}
	return ""
}

// A message with a string field that must match a regex, with no error message specified.
type RegexFieldsTestNoErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexStringField string `protobuf:"bytes,1,opt,name=regex_string_field,json=regexStringField,proto3" json:"regex_string_field,omitempty"`
}

func (x *RegexFieldsTestNoErrorMessage) Reset() {
	*x = RegexFieldsTestNoErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexFieldsTestNoErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexFieldsTestNoErrorMessage) ProtoMessage() {}

func (x *RegexFieldsTestNoErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexFieldsTestNoErrorMessage.ProtoReflect.Descriptor instead.
func (*RegexFieldsTestNoErrorMessage) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{4}
}

func (x *RegexFieldsTestNoErrorMessage) GetRegexStringField() string {
	if x != nil {
		return x.RegexStringField
	}
	return ""
}

// A message with a nested message that contains a string field that must match a regex.
type NestedRegexFieldsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedRegexField *RegexFieldsTest `protobuf:"bytes,1,opt,name=nested_regex_field,json=nestedRegexField,proto3" json:"nested_regex_field,omitempty"`
}

func (x *NestedRegexFieldsTest) Reset() {
	*x = NestedRegexFieldsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedRegexFieldsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedRegexFieldsTest) ProtoMessage() {}

func (x *NestedRegexFieldsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedRegexFieldsTest.ProtoReflect.Descriptor instead.
func (*NestedRegexFieldsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{5}
}

func (x *NestedRegexFieldsTest) GetNestedRegexField() *RegexFieldsTest {
	if x != nil {
		return x.NestedRegexField
	}
	return nil
}

// A message with a required field and a non-required field.
type RequiredFieldsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredStringField    string `protobuf:"bytes,1,opt,name=required_string_field,json=requiredStringField,proto3" json:"required_string_field,omitempty"`
	NotRequiredStringField string `protobuf:"bytes,2,opt,name=not_required_string_field,json=notRequiredStringField,proto3" json:"not_required_string_field,omitempty"`
}

func (x *RequiredFieldsTest) Reset() {
	*x = RequiredFieldsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredFieldsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredFieldsTest) ProtoMessage() {}

func (x *RequiredFieldsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredFieldsTest.ProtoReflect.Descriptor instead.
func (*RequiredFieldsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{6}
}

func (x *RequiredFieldsTest) GetRequiredStringField() string {
	if x != nil {
		return x.RequiredStringField
	}
	return ""
}

func (x *RequiredFieldsTest) GetNotRequiredStringField() string {
	if x != nil {
		return x.NotRequiredStringField
	}
	return ""
}

// A message with a required string field that must match a regex.
type RequiredFieldsWithRegexTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexRequiredStringField   string `protobuf:"bytes,1,opt,name=regex_required_string_field,json=regexRequiredStringField,proto3" json:"regex_required_string_field,omitempty"`
	NoRegexRequiredStringField string `protobuf:"bytes,2,opt,name=no_regex_required_string_field,json=noRegexRequiredStringField,proto3" json:"no_regex_required_string_field,omitempty"`
	NoRulesString              string `protobuf:"bytes,3,opt,name=no_rules_string,json=noRulesString,proto3" json:"no_rules_string,omitempty"`
}

func (x *RequiredFieldsWithRegexTest) Reset() {
	*x = RequiredFieldsWithRegexTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredFieldsWithRegexTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredFieldsWithRegexTest) ProtoMessage() {}

func (x *RequiredFieldsWithRegexTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredFieldsWithRegexTest.ProtoReflect.Descriptor instead.
func (*RequiredFieldsWithRegexTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{7}
}

func (x *RequiredFieldsWithRegexTest) GetRegexRequiredStringField() string {
	if x != nil {
		return x.RegexRequiredStringField
	}
	return ""
}

func (x *RequiredFieldsWithRegexTest) GetNoRegexRequiredStringField() string {
	if x != nil {
		return x.NoRegexRequiredStringField
	}
	return ""
}

func (x *RequiredFieldsWithRegexTest) GetNoRulesString() string {
	if x != nil {
		return x.NoRulesString
	}
	return ""
}

// A message with a required field that must be a specific nested message.
type RequiredNestedMessageTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedRequiredField *RequiredFieldsTest `protobuf:"bytes,1,opt,name=nested_required_field,json=nestedRequiredField,proto3" json:"nested_required_field,omitempty"`
}

func (x *RequiredNestedMessageTest) Reset() {
	*x = RequiredNestedMessageTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredNestedMessageTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredNestedMessageTest) ProtoMessage() {}

func (x *RequiredNestedMessageTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredNestedMessageTest.ProtoReflect.Descriptor instead.
func (*RequiredNestedMessageTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{8}
}

func (x *RequiredNestedMessageTest) GetNestedRequiredField() *RequiredFieldsTest {
	if x != nil {
		return x.NestedRequiredField
	}
	return nil
}

// A message with string fields having min and max length constraints.
type StringLengthFieldsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortStringField string `protobuf:"bytes,1,opt,name=short_string_field,json=shortStringField,proto3" json:"short_string_field,omitempty"`
	LongStringField  string `protobuf:"bytes,2,opt,name=long_string_field,json=longStringField,proto3" json:"long_string_field,omitempty"`
}

func (x *StringLengthFieldsTest) Reset() {
	*x = StringLengthFieldsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringLengthFieldsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLengthFieldsTest) ProtoMessage() {}

func (x *StringLengthFieldsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringLengthFieldsTest.ProtoReflect.Descriptor instead.
func (*StringLengthFieldsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{9}
}

func (x *StringLengthFieldsTest) GetShortStringField() string {
	if x != nil {
		return x.ShortStringField
	}
	return ""
}

func (x *StringLengthFieldsTest) GetLongStringField() string {
	if x != nil {
		return x.LongStringField
	}
	return ""
}

// A message with nested message containing string fields having min and max length constraints.
type NestedStringLengthFieldsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedStringLengthField *StringLengthFieldsTest `protobuf:"bytes,1,opt,name=nested_string_length_field,json=nestedStringLengthField,proto3" json:"nested_string_length_field,omitempty"`
}

func (x *NestedStringLengthFieldsTest) Reset() {
	*x = NestedStringLengthFieldsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedStringLengthFieldsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedStringLengthFieldsTest) ProtoMessage() {}

func (x *NestedStringLengthFieldsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedStringLengthFieldsTest.ProtoReflect.Descriptor instead.
func (*NestedStringLengthFieldsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{10}
}

func (x *NestedStringLengthFieldsTest) GetNestedStringLengthField() *StringLengthFieldsTest {
	if x != nil {
		return x.NestedStringLengthField
	}
	return nil
}

// A message with enum field.
type EnumFieldTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnumField EnumFieldTest_SampleEnum `protobuf:"varint,1,opt,name=enum_field,json=enumField,proto3,enum=cloud.planton.apis.v1.commons.testing.resource.field.input.EnumFieldTest_SampleEnum" json:"enum_field,omitempty"`
}

func (x *EnumFieldTest) Reset() {
	*x = EnumFieldTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumFieldTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumFieldTest) ProtoMessage() {}

func (x *EnumFieldTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumFieldTest.ProtoReflect.Descriptor instead.
func (*EnumFieldTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{11}
}

func (x *EnumFieldTest) GetEnumField() EnumFieldTest_SampleEnum {
	if x != nil {
		return x.EnumField
	}
	return EnumFieldTest_UNSPECIFIED
}

// A message with deeply nested messages.
type DeeplyNestedFieldTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedField_1   *NestedRegexFieldsTest        `protobuf:"bytes,1,opt,name=nested_field_1,json=nestedField1,proto3" json:"nested_field_1,omitempty"`
	NestedField_2   *NestedStringLengthFieldsTest `protobuf:"bytes,2,opt,name=nested_field_2,json=nestedField2,proto3" json:"nested_field_2,omitempty"`
	NestedEnumField *EnumFieldTest                `protobuf:"bytes,3,opt,name=nested_enum_field,json=nestedEnumField,proto3" json:"nested_enum_field,omitempty"`
}

func (x *DeeplyNestedFieldTest) Reset() {
	*x = DeeplyNestedFieldTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeeplyNestedFieldTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeeplyNestedFieldTest) ProtoMessage() {}

func (x *DeeplyNestedFieldTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeeplyNestedFieldTest.ProtoReflect.Descriptor instead.
func (*DeeplyNestedFieldTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{12}
}

func (x *DeeplyNestedFieldTest) GetNestedField_1() *NestedRegexFieldsTest {
	if x != nil {
		return x.NestedField_1
	}
	return nil
}

func (x *DeeplyNestedFieldTest) GetNestedField_2() *NestedStringLengthFieldsTest {
	if x != nil {
		return x.NestedField_2
	}
	return nil
}

func (x *DeeplyNestedFieldTest) GetNestedEnumField() *EnumFieldTest {
	if x != nil {
		return x.NestedEnumField
	}
	return nil
}

// A message for testing multiple errors in the nested structure.
type MultipleErrorsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field_1 string                 `protobuf:"bytes,1,opt,name=field_1,json=field1,proto3" json:"field_1,omitempty"`
	Field_2 *DeeplyNestedFieldTest `protobuf:"bytes,2,opt,name=field_2,json=field2,proto3" json:"field_2,omitempty"`
}

func (x *MultipleErrorsTest) Reset() {
	*x = MultipleErrorsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleErrorsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleErrorsTest) ProtoMessage() {}

func (x *MultipleErrorsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleErrorsTest.ProtoReflect.Descriptor instead.
func (*MultipleErrorsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{13}
}

func (x *MultipleErrorsTest) GetField_1() string {
	if x != nil {
		return x.Field_1
	}
	return ""
}

func (x *MultipleErrorsTest) GetField_2() *DeeplyNestedFieldTest {
	if x != nil {
		return x.Field_2
	}
	return nil
}

type MetadataIdRequiredTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *resource.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataIdRequiredTest) Reset() {
	*x = MetadataIdRequiredTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataIdRequiredTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataIdRequiredTest) ProtoMessage() {}

func (x *MetadataIdRequiredTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataIdRequiredTest.ProtoReflect.Descriptor instead.
func (*MetadataIdRequiredTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{14}
}

func (x *MetadataIdRequiredTest) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Test case 2: Message with metadata where id has regex constraint
type MetadataIdRegexTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *resource.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataIdRegexTest) Reset() {
	*x = MetadataIdRegexTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataIdRegexTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataIdRegexTest) ProtoMessage() {}

func (x *MetadataIdRegexTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataIdRegexTest.ProtoReflect.Descriptor instead.
func (*MetadataIdRegexTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{15}
}

func (x *MetadataIdRegexTest) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Test case 3: Message with metadata where id has min and max length constraints
type MetadataIdLengthTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *resource.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataIdLengthTest) Reset() {
	*x = MetadataIdLengthTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataIdLengthTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataIdLengthTest) ProtoMessage() {}

func (x *MetadataIdLengthTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataIdLengthTest.ProtoReflect.Descriptor instead.
func (*MetadataIdLengthTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{16}
}

func (x *MetadataIdLengthTest) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Test case 4: Message with metadata where is_id_computed is true (validations on id should be skipped)
type MetadataIdComputedTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *resource.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataIdComputedTest) Reset() {
	*x = MetadataIdComputedTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataIdComputedTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataIdComputedTest) ProtoMessage() {}

func (x *MetadataIdComputedTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataIdComputedTest.ProtoReflect.Descriptor instead.
func (*MetadataIdComputedTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{17}
}

func (x *MetadataIdComputedTest) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Test case 5: Message with metadata where name has regex and length constraints
type MetadataNameConstraintsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *resource.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataNameConstraintsTest) Reset() {
	*x = MetadataNameConstraintsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataNameConstraintsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataNameConstraintsTest) ProtoMessage() {}

func (x *MetadataNameConstraintsTest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataNameConstraintsTest.ProtoReflect.Descriptor instead.
func (*MetadataNameConstraintsTest) Descriptor() ([]byte, []int) {
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP(), []int{18}
}

func (x *MetadataNameConstraintsTest) GetMetadata() *resource.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto protoreflect.FileDescriptor

var file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x51, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x57, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x70, 0xda, 0xb8, 0x18, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x24, 0xf2, 0xb8, 0x18, 0x59, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x20, 0x28, 0x61, 0x2d, 0x7a, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x20, 0x28, 0x30, 0x2d, 0x39, 0x29, 0x2e, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x20, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x39, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x10, 0x72, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9b, 0x02, 0x0a, 0x1c, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0xc7, 0x01, 0x0a, 0x12, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x01, 0xba, 0x48, 0x94, 0x01, 0xba, 0x01,
	0x90, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x59, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28,
	0x61, 0x2d, 0x7a, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x20,
	0x28, 0x30, 0x2d, 0x39, 0x29, 0x2e, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x31, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x39, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28,
	0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x24,
	0x27, 0x29, 0x52, 0x10, 0x72, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x9a, 0x01,
	0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6c, 0xba, 0x48, 0x69, 0xba,
	0x01, 0x60, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28,
	0x61, 0x2d, 0x7a, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x20,
	0x28, 0x30, 0x2d, 0x39, 0x29, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24,
	0x27, 0x29, 0x72, 0x04, 0x10, 0x01, 0x18, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x65, 0x78, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x85, 0x02,
	0x0a, 0x30, 0x52, 0x65, 0x67, 0x65, 0x78, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x6f, 0xba, 0x48, 0x6c, 0xba, 0x01, 0x60, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x28, 0x61, 0x2d, 0x7a, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x20, 0x28, 0x30, 0x2d, 0x39, 0x29, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0xd0, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6e, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x62, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x65, 0x78, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xda, 0xb8, 0x18, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x24, 0x52, 0x10, 0x72, 0x65, 0x67, 0x65, 0x78, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x10, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x54, 0x65, 0x73, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x1b, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x74, 0xc0, 0xb8, 0x18, 0x01, 0xda, 0xb8, 0x18, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x24, 0xf2, 0xb8, 0x18, 0x59, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x28, 0x61, 0x2d, 0x7a, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x20, 0x28, 0x30, 0x2d, 0x39, 0x29, 0x2e, 0x20, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x20, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x39, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x18, 0x72, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x48, 0x0a, 0x1e, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x1a,
	0x6e, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x88, 0x01, 0x0a, 0x15, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x16,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3e, 0xe0, 0xb8, 0x18, 0x05, 0xe8, 0xb8, 0x18, 0x0a, 0xf2, 0xb8, 0x18, 0x32,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x35, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x31, 0x30, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x39, 0xe8, 0xb8, 0x18, 0x32, 0xf2, 0xb8, 0x18, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6e,
	0x6f, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x35, 0x30, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1c,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a,
	0x1a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x17, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xe5,
	0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x25, 0xc0, 0xb8, 0x18,
	0x01, 0xf2, 0xb8, 0x18, 0x1d, 0x45, 0x6e, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2e, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x37, 0x0a,
	0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x32, 0x10, 0x02, 0x22, 0x8e, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x65, 0x70, 0x6c,
	0x79, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x77, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x65, 0x73, 0x74, 0x42, 0x04, 0xc0, 0xb8,
	0x18, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x12, 0x75, 0x0a, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x5e,
	0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x45, 0xc0, 0xb8, 0x18, 0x01, 0xda, 0xb8, 0x18, 0x0a, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x35, 0x7d, 0x24, 0xf2, 0xb8, 0x18, 0x2f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c,
	0x79, 0x20, 0x35, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x70,
	0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x44, 0x65, 0x65,
	0x70, 0x6c, 0x79, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x42, 0x04, 0xc0, 0xb8, 0x18, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x22, 0x83, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x1b, 0x90, 0xb5, 0x18, 0x01, 0xba,
	0xb5, 0x18, 0x13, 0x49, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x22, 0xeb, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x85, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0xa2, 0xb5, 0x18, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x2b, 0x28, 0x2d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0xba,
	0xb5, 0x18, 0x61, 0x41, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x31, 0x20, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73,
	0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x20, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x2e, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x3b, 0x90, 0xb5, 0x18,
	0x01, 0xa8, 0xb5, 0x18, 0x03, 0xb0, 0xb5, 0x18, 0x0a, 0xba, 0xb5, 0x18, 0x2b, 0x49, 0x64, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20,
	0x33, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x22, 0x6c, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x04, 0x98, 0xb5, 0x18, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x5b, 0xc2, 0xb5, 0x18, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x2d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29,
	0x2a, 0x24, 0xc8, 0xb5, 0x18, 0x02, 0xd0, 0xb5, 0x18, 0x14, 0xda, 0xb5, 0x18, 0x33, 0x4e, 0x61,
	0x6d, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x20, 0x32, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x30, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x65, 0x74, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x42, 0xd8, 0x03, 0x0a, 0x48, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x0a,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x7a, 0x7a, 0x67, 0x6f, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0xa2, 0x02, 0x09, 0x43, 0x50, 0x41, 0x56, 0x43,
	0x54, 0x52, 0x46, 0x49, 0xaa, 0x02, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0xca, 0x02, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x5c, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0xe2, 0x02,
	0x46, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x41,
	0x70, 0x69, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x5c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x42, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x3a,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x3a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescOnce sync.Once
	file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescData = file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDesc
)

func file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescGZIP() []byte {
	file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescOnce.Do(func() {
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescData)
	})
	return file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDescData
}

var file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_goTypes = []interface{}{
	(EnumFieldTest_SampleEnum)(0),                            // 0: cloud.planton.apis.v1.commons.testing.resource.field.input.EnumFieldTest.SampleEnum
	(*RegexFieldsTest)(nil),                                  // 1: cloud.planton.apis.v1.commons.testing.resource.field.input.RegexFieldsTest
	(*RegexFieldsProtoValidateTest)(nil),                     // 2: cloud.planton.apis.v1.commons.testing.resource.field.input.RegexFieldsProtoValidateTest
	(*RegexSplitFieldsProtoValidateTest)(nil),                // 3: cloud.planton.apis.v1.commons.testing.resource.field.input.RegexSplitFieldsProtoValidateTest
	(*RegexSplitWithNotRequiredFieldsProtoValidateTest)(nil), // 4: cloud.planton.apis.v1.commons.testing.resource.field.input.RegexSplitWithNotRequiredFieldsProtoValidateTest
	(*RegexFieldsTestNoErrorMessage)(nil),                    // 5: cloud.planton.apis.v1.commons.testing.resource.field.input.RegexFieldsTestNoErrorMessage
	(*NestedRegexFieldsTest)(nil),                            // 6: cloud.planton.apis.v1.commons.testing.resource.field.input.NestedRegexFieldsTest
	(*RequiredFieldsTest)(nil),                               // 7: cloud.planton.apis.v1.commons.testing.resource.field.input.RequiredFieldsTest
	(*RequiredFieldsWithRegexTest)(nil),                      // 8: cloud.planton.apis.v1.commons.testing.resource.field.input.RequiredFieldsWithRegexTest
	(*RequiredNestedMessageTest)(nil),                        // 9: cloud.planton.apis.v1.commons.testing.resource.field.input.RequiredNestedMessageTest
	(*StringLengthFieldsTest)(nil),                           // 10: cloud.planton.apis.v1.commons.testing.resource.field.input.StringLengthFieldsTest
	(*NestedStringLengthFieldsTest)(nil),                     // 11: cloud.planton.apis.v1.commons.testing.resource.field.input.NestedStringLengthFieldsTest
	(*EnumFieldTest)(nil),                                    // 12: cloud.planton.apis.v1.commons.testing.resource.field.input.EnumFieldTest
	(*DeeplyNestedFieldTest)(nil),                            // 13: cloud.planton.apis.v1.commons.testing.resource.field.input.DeeplyNestedFieldTest
	(*MultipleErrorsTest)(nil),                               // 14: cloud.planton.apis.v1.commons.testing.resource.field.input.MultipleErrorsTest
	(*MetadataIdRequiredTest)(nil),                           // 15: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdRequiredTest
	(*MetadataIdRegexTest)(nil),                              // 16: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdRegexTest
	(*MetadataIdLengthTest)(nil),                             // 17: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdLengthTest
	(*MetadataIdComputedTest)(nil),                           // 18: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdComputedTest
	(*MetadataNameConstraintsTest)(nil),                      // 19: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataNameConstraintsTest
	(*resource.Metadata)(nil),                                // 20: cloud.planton.apis.v1.commons.resource.Metadata
}
var file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_depIdxs = []int32{
	1,  // 0: cloud.planton.apis.v1.commons.testing.resource.field.input.NestedRegexFieldsTest.nested_regex_field:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.RegexFieldsTest
	7,  // 1: cloud.planton.apis.v1.commons.testing.resource.field.input.RequiredNestedMessageTest.nested_required_field:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.RequiredFieldsTest
	10, // 2: cloud.planton.apis.v1.commons.testing.resource.field.input.NestedStringLengthFieldsTest.nested_string_length_field:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.StringLengthFieldsTest
	0,  // 3: cloud.planton.apis.v1.commons.testing.resource.field.input.EnumFieldTest.enum_field:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.EnumFieldTest.SampleEnum
	6,  // 4: cloud.planton.apis.v1.commons.testing.resource.field.input.DeeplyNestedFieldTest.nested_field_1:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.NestedRegexFieldsTest
	11, // 5: cloud.planton.apis.v1.commons.testing.resource.field.input.DeeplyNestedFieldTest.nested_field_2:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.NestedStringLengthFieldsTest
	12, // 6: cloud.planton.apis.v1.commons.testing.resource.field.input.DeeplyNestedFieldTest.nested_enum_field:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.EnumFieldTest
	13, // 7: cloud.planton.apis.v1.commons.testing.resource.field.input.MultipleErrorsTest.field_2:type_name -> cloud.planton.apis.v1.commons.testing.resource.field.input.DeeplyNestedFieldTest
	20, // 8: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdRequiredTest.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	20, // 9: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdRegexTest.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	20, // 10: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdLengthTest.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	20, // 11: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataIdComputedTest.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	20, // 12: cloud.planton.apis.v1.commons.testing.resource.field.input.MetadataNameConstraintsTest.metadata:type_name -> cloud.planton.apis.v1.commons.resource.Metadata
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_init() }
func file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_init() {
	if File_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexFieldsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexFieldsProtoValidateTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexSplitFieldsProtoValidateTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexSplitWithNotRequiredFieldsProtoValidateTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexFieldsTestNoErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedRegexFieldsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredFieldsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredFieldsWithRegexTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredNestedMessageTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringLengthFieldsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedStringLengthFieldsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumFieldTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeeplyNestedFieldTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleErrorsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataIdRequiredTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataIdRegexTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataIdLengthTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataIdComputedTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataNameConstraintsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_goTypes,
		DependencyIndexes: file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_depIdxs,
		EnumInfos:         file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_enumTypes,
		MessageInfos:      file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_msgTypes,
	}.Build()
	File_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto = out.File
	file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_rawDesc = nil
	file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_goTypes = nil
	file_cloud_planton_apis_v1_commons_testing_resource_field_input_model_proto_depIdxs = nil
}
